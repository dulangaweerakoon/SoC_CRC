// Copyright 1986-2017 Xilinx, Inc. All Rights Reserved.
// --------------------------------------------------------------------------------
// Tool Version: Vivado v.2017.4 (win64) Build 2086221 Fri Dec 15 20:55:39 MST 2017
// Date        : Fri Dec 29 19:02:52 2017
// Host        : PC39 running 64-bit Service Pack 1  (build 7601)
// Command     : write_verilog -force -mode funcsim
//               d:/ADS/SoC_intr_cache_V2/SoC_intr_cache_V2.srcs/sources_1/bd/design_1/ip/design_1_system_cache_0_0/design_1_system_cache_0_0_sim_netlist.v
// Design      : design_1_system_cache_0_0
// Purpose     : This verilog netlist is a functional simulation representation of the design and should not be modified
//               or synthesized. This netlist cannot be used for SDF annotated simulation.
// Device      : xc7z020clg484-1
// --------------------------------------------------------------------------------
`timescale 1 ps / 1 ps

(* CHECK_LICENSE_TYPE = "design_1_system_cache_0_0,system_cache,{}" *) (* downgradeipidentifiedwarnings = "yes" *) (* x_core_info = "system_cache,Vivado 2017.4" *) 
(* NotValidForBitStream *)
module design_1_system_cache_0_0
   (ACLK,
    ARESETN,
    S0_AXI_AWID,
    S0_AXI_AWADDR,
    S0_AXI_AWLEN,
    S0_AXI_AWSIZE,
    S0_AXI_AWBURST,
    S0_AXI_AWLOCK,
    S0_AXI_AWCACHE,
    S0_AXI_AWPROT,
    S0_AXI_AWQOS,
    S0_AXI_AWVALID,
    S0_AXI_AWREADY,
    S0_AXI_WDATA,
    S0_AXI_WSTRB,
    S0_AXI_WLAST,
    S0_AXI_WVALID,
    S0_AXI_WREADY,
    S0_AXI_BRESP,
    S0_AXI_BID,
    S0_AXI_BVALID,
    S0_AXI_BREADY,
    S0_AXI_ARID,
    S0_AXI_ARADDR,
    S0_AXI_ARLEN,
    S0_AXI_ARSIZE,
    S0_AXI_ARBURST,
    S0_AXI_ARLOCK,
    S0_AXI_ARCACHE,
    S0_AXI_ARPROT,
    S0_AXI_ARQOS,
    S0_AXI_ARVALID,
    S0_AXI_ARREADY,
    S0_AXI_RID,
    S0_AXI_RDATA,
    S0_AXI_RRESP,
    S0_AXI_RLAST,
    S0_AXI_RVALID,
    S0_AXI_RREADY,
    S1_AXI_AWID,
    S1_AXI_AWADDR,
    S1_AXI_AWLEN,
    S1_AXI_AWSIZE,
    S1_AXI_AWBURST,
    S1_AXI_AWLOCK,
    S1_AXI_AWCACHE,
    S1_AXI_AWPROT,
    S1_AXI_AWQOS,
    S1_AXI_AWVALID,
    S1_AXI_AWREADY,
    S1_AXI_WDATA,
    S1_AXI_WSTRB,
    S1_AXI_WLAST,
    S1_AXI_WVALID,
    S1_AXI_WREADY,
    S1_AXI_BRESP,
    S1_AXI_BID,
    S1_AXI_BVALID,
    S1_AXI_BREADY,
    S1_AXI_ARID,
    S1_AXI_ARADDR,
    S1_AXI_ARLEN,
    S1_AXI_ARSIZE,
    S1_AXI_ARBURST,
    S1_AXI_ARLOCK,
    S1_AXI_ARCACHE,
    S1_AXI_ARPROT,
    S1_AXI_ARQOS,
    S1_AXI_ARVALID,
    S1_AXI_ARREADY,
    S1_AXI_RID,
    S1_AXI_RDATA,
    S1_AXI_RRESP,
    S1_AXI_RLAST,
    S1_AXI_RVALID,
    S1_AXI_RREADY,
    M0_AXI_AWID,
    M0_AXI_AWADDR,
    M0_AXI_AWLEN,
    M0_AXI_AWSIZE,
    M0_AXI_AWBURST,
    M0_AXI_AWLOCK,
    M0_AXI_AWCACHE,
    M0_AXI_AWPROT,
    M0_AXI_AWQOS,
    M0_AXI_AWVALID,
    M0_AXI_AWREADY,
    M0_AXI_WDATA,
    M0_AXI_WSTRB,
    M0_AXI_WLAST,
    M0_AXI_WVALID,
    M0_AXI_WREADY,
    M0_AXI_BRESP,
    M0_AXI_BID,
    M0_AXI_BVALID,
    M0_AXI_BREADY,
    M0_AXI_ARID,
    M0_AXI_ARADDR,
    M0_AXI_ARLEN,
    M0_AXI_ARSIZE,
    M0_AXI_ARBURST,
    M0_AXI_ARLOCK,
    M0_AXI_ARCACHE,
    M0_AXI_ARPROT,
    M0_AXI_ARQOS,
    M0_AXI_ARVALID,
    M0_AXI_ARREADY,
    M0_AXI_RID,
    M0_AXI_RDATA,
    M0_AXI_RRESP,
    M0_AXI_RLAST,
    M0_AXI_RVALID,
    M0_AXI_RREADY);
  (* x_interface_info = "xilinx.com:signal:clock:1.0 CLK.ACLK CLK" *) (* x_interface_parameter = "XIL_INTERFACENAME CLK.ACLK, ASSOCIATED_BUSIF S0_AXI:S0_ACE:S1_AXI:S1_ACE:S2_AXI:S2_ACE:S3_AXI:S3_ACE:S4_AXI:S4_ACE:S5_AXI:S5_ACE:S6_AXI:S6_ACE:S7_AXI:S7_ACE:S8_AXI:S8_ACE:S9_AXI:S9_ACE:S10_AXI:S10_ACE:S11_AXI:S11_ACE:S12_AXI:S12_ACE:S13_AXI:S13_ACE:S14_AXI:S14_ACE:S15_AXI:S15_ACE:S0_AXI_GEN:S1_AXI_GEN:S2_AXI_GEN:S3_AXI_GEN:S4_AXI_GEN:S5_AXI_GEN:S6_AXI_GEN:S7_AXI_GEN:S8_AXI_GEN:S9_AXI_GEN:S10_AXI_GEN:S11_AXI_GEN:S12_AXI_GEN:S13_AXI_GEN:S14_AXI_GEN:S15_AXI_GEN:S_AXI_CTRL:M0_AXI:M1_AXI:M2_AXI:M3_AXI:M0_ACE, ASSOCIATED_RESET ARESETN, FREQ_HZ 50000000, PHASE 0.000, CLK_DOMAIN design_1_processing_system7_0_0_FCLK_CLK0" *) input ACLK;
  (* x_interface_info = "xilinx.com:signal:reset:1.0 RST.ARESETN RST" *) (* x_interface_parameter = "XIL_INTERFACENAME RST.ARESETN, POLARITY ACTIVE_LOW" *) input ARESETN;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI AWID" *) (* x_interface_parameter = "XIL_INTERFACENAME S0_AXI, ADDR_WIDTH 32, ID_WIDTH 1, NUM_READ_OUTSTANDING 16, NUM_WRITE_OUTSTANDING 16, DATA_WIDTH 32, PROTOCOL AXI4, FREQ_HZ 50000000, AWUSER_WIDTH 0, ARUSER_WIDTH 0, WUSER_WIDTH 0, RUSER_WIDTH 0, BUSER_WIDTH 0, READ_WRITE_MODE READ_WRITE, HAS_BURST 1, HAS_LOCK 1, HAS_PROT 1, HAS_CACHE 1, HAS_QOS 1, HAS_REGION 0, HAS_WSTRB 1, HAS_BRESP 1, HAS_RRESP 1, SUPPORTS_NARROW_BURST 0, MAX_BURST_LENGTH 4, PHASE 0.000, CLK_DOMAIN design_1_processing_system7_0_0_FCLK_CLK0, NUM_READ_THREADS 1, NUM_WRITE_THREADS 1, RUSER_BITS_PER_BYTE 0, WUSER_BITS_PER_BYTE 0" *) input [0:0]S0_AXI_AWID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI AWADDR" *) input [31:0]S0_AXI_AWADDR;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI AWLEN" *) input [7:0]S0_AXI_AWLEN;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI AWSIZE" *) input [2:0]S0_AXI_AWSIZE;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI AWBURST" *) input [1:0]S0_AXI_AWBURST;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI AWLOCK" *) input S0_AXI_AWLOCK;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI AWCACHE" *) input [3:0]S0_AXI_AWCACHE;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI AWPROT" *) input [2:0]S0_AXI_AWPROT;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI AWQOS" *) input [3:0]S0_AXI_AWQOS;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI AWVALID" *) input S0_AXI_AWVALID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI AWREADY" *) output S0_AXI_AWREADY;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI WDATA" *) input [31:0]S0_AXI_WDATA;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI WSTRB" *) input [3:0]S0_AXI_WSTRB;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI WLAST" *) input S0_AXI_WLAST;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI WVALID" *) input S0_AXI_WVALID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI WREADY" *) output S0_AXI_WREADY;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI BRESP" *) output [1:0]S0_AXI_BRESP;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI BID" *) output [0:0]S0_AXI_BID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI BVALID" *) output S0_AXI_BVALID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI BREADY" *) input S0_AXI_BREADY;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI ARID" *) input [0:0]S0_AXI_ARID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI ARADDR" *) input [31:0]S0_AXI_ARADDR;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI ARLEN" *) input [7:0]S0_AXI_ARLEN;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI ARSIZE" *) input [2:0]S0_AXI_ARSIZE;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI ARBURST" *) input [1:0]S0_AXI_ARBURST;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI ARLOCK" *) input S0_AXI_ARLOCK;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI ARCACHE" *) input [3:0]S0_AXI_ARCACHE;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI ARPROT" *) input [2:0]S0_AXI_ARPROT;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI ARQOS" *) input [3:0]S0_AXI_ARQOS;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI ARVALID" *) input S0_AXI_ARVALID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI ARREADY" *) output S0_AXI_ARREADY;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI RID" *) output [0:0]S0_AXI_RID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI RDATA" *) output [31:0]S0_AXI_RDATA;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI RRESP" *) output [1:0]S0_AXI_RRESP;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI RLAST" *) output S0_AXI_RLAST;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI RVALID" *) output S0_AXI_RVALID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S0_AXI RREADY" *) input S0_AXI_RREADY;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S1_AXI AWID" *) (* x_interface_parameter = "XIL_INTERFACENAME S1_AXI, ADDR_WIDTH 32, ID_WIDTH 1, NUM_READ_OUTSTANDING 16, NUM_WRITE_OUTSTANDING 16, DATA_WIDTH 32, PROTOCOL AXI4, FREQ_HZ 50000000, AWUSER_WIDTH 0, ARUSER_WIDTH 0, WUSER_WIDTH 0, RUSER_WIDTH 0, BUSER_WIDTH 0, READ_WRITE_MODE READ_WRITE, HAS_BURST 1, HAS_LOCK 1, HAS_PROT 1, HAS_CACHE 1, HAS_QOS 1, HAS_REGION 0, HAS_WSTRB 1, HAS_BRESP 1, HAS_RRESP 1, SUPPORTS_NARROW_BURST 0, MAX_BURST_LENGTH 4, PHASE 0.000, CLK_DOMAIN design_1_processing_system7_0_0_FCLK_CLK0, NUM_READ_THREADS 1, NUM_WRITE_THREADS 1, RUSER_BITS_PER_BYTE 0, WUSER_BITS_PER_BYTE 0" *) input [0:0]S1_AXI_AWID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S1_AXI AWADDR" *) input [31:0]S1_AXI_AWADDR;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S1_AXI AWLEN" *) input [7:0]S1_AXI_AWLEN;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S1_AXI AWSIZE" *) input [2:0]S1_AXI_AWSIZE;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S1_AXI AWBURST" *) input [1:0]S1_AXI_AWBURST;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S1_AXI AWLOCK" *) input S1_AXI_AWLOCK;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S1_AXI AWCACHE" *) input [3:0]S1_AXI_AWCACHE;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S1_AXI AWPROT" *) input [2:0]S1_AXI_AWPROT;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S1_AXI AWQOS" *) input [3:0]S1_AXI_AWQOS;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S1_AXI AWVALID" *) input S1_AXI_AWVALID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S1_AXI AWREADY" *) output S1_AXI_AWREADY;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S1_AXI WDATA" *) input [31:0]S1_AXI_WDATA;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S1_AXI WSTRB" *) input [3:0]S1_AXI_WSTRB;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S1_AXI WLAST" *) input S1_AXI_WLAST;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S1_AXI WVALID" *) input S1_AXI_WVALID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S1_AXI WREADY" *) output S1_AXI_WREADY;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S1_AXI BRESP" *) output [1:0]S1_AXI_BRESP;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S1_AXI BID" *) output [0:0]S1_AXI_BID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S1_AXI BVALID" *) output S1_AXI_BVALID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S1_AXI BREADY" *) input S1_AXI_BREADY;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S1_AXI ARID" *) input [0:0]S1_AXI_ARID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S1_AXI ARADDR" *) input [31:0]S1_AXI_ARADDR;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S1_AXI ARLEN" *) input [7:0]S1_AXI_ARLEN;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S1_AXI ARSIZE" *) input [2:0]S1_AXI_ARSIZE;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S1_AXI ARBURST" *) input [1:0]S1_AXI_ARBURST;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S1_AXI ARLOCK" *) input S1_AXI_ARLOCK;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S1_AXI ARCACHE" *) input [3:0]S1_AXI_ARCACHE;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S1_AXI ARPROT" *) input [2:0]S1_AXI_ARPROT;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S1_AXI ARQOS" *) input [3:0]S1_AXI_ARQOS;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S1_AXI ARVALID" *) input S1_AXI_ARVALID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S1_AXI ARREADY" *) output S1_AXI_ARREADY;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S1_AXI RID" *) output [0:0]S1_AXI_RID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S1_AXI RDATA" *) output [31:0]S1_AXI_RDATA;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S1_AXI RRESP" *) output [1:0]S1_AXI_RRESP;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S1_AXI RLAST" *) output S1_AXI_RLAST;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S1_AXI RVALID" *) output S1_AXI_RVALID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 S1_AXI RREADY" *) input S1_AXI_RREADY;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI AWID" *) (* x_interface_parameter = "XIL_INTERFACENAME M0_AXI, ADDR_WIDTH 32, ID_WIDTH 1, NUM_READ_OUTSTANDING 16, NUM_WRITE_OUTSTANDING 16, NUM_READ_THREADS 1, NUM_WRITE_THREADS 1, MAX_BURST_LENGTH 16, HAS_BURST 1, DATA_WIDTH 32, PROTOCOL AXI4, FREQ_HZ 50000000, AWUSER_WIDTH 0, ARUSER_WIDTH 0, WUSER_WIDTH 0, RUSER_WIDTH 0, BUSER_WIDTH 0, READ_WRITE_MODE READ_WRITE, HAS_LOCK 1, HAS_PROT 1, HAS_CACHE 1, HAS_QOS 1, HAS_REGION 0, HAS_WSTRB 1, HAS_BRESP 1, HAS_RRESP 1, SUPPORTS_NARROW_BURST 1, PHASE 0.000, CLK_DOMAIN design_1_processing_system7_0_0_FCLK_CLK0, RUSER_BITS_PER_BYTE 0, WUSER_BITS_PER_BYTE 0" *) output [0:0]M0_AXI_AWID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI AWADDR" *) output [31:0]M0_AXI_AWADDR;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI AWLEN" *) output [7:0]M0_AXI_AWLEN;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI AWSIZE" *) output [2:0]M0_AXI_AWSIZE;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI AWBURST" *) output [1:0]M0_AXI_AWBURST;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI AWLOCK" *) output M0_AXI_AWLOCK;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI AWCACHE" *) output [3:0]M0_AXI_AWCACHE;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI AWPROT" *) output [2:0]M0_AXI_AWPROT;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI AWQOS" *) output [3:0]M0_AXI_AWQOS;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI AWVALID" *) output M0_AXI_AWVALID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI AWREADY" *) input M0_AXI_AWREADY;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI WDATA" *) output [31:0]M0_AXI_WDATA;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI WSTRB" *) output [3:0]M0_AXI_WSTRB;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI WLAST" *) output M0_AXI_WLAST;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI WVALID" *) output M0_AXI_WVALID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI WREADY" *) input M0_AXI_WREADY;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI BRESP" *) input [1:0]M0_AXI_BRESP;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI BID" *) input [0:0]M0_AXI_BID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI BVALID" *) input M0_AXI_BVALID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI BREADY" *) output M0_AXI_BREADY;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI ARID" *) output [0:0]M0_AXI_ARID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI ARADDR" *) output [31:0]M0_AXI_ARADDR;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI ARLEN" *) output [7:0]M0_AXI_ARLEN;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI ARSIZE" *) output [2:0]M0_AXI_ARSIZE;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI ARBURST" *) output [1:0]M0_AXI_ARBURST;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI ARLOCK" *) output M0_AXI_ARLOCK;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI ARCACHE" *) output [3:0]M0_AXI_ARCACHE;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI ARPROT" *) output [2:0]M0_AXI_ARPROT;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI ARQOS" *) output [3:0]M0_AXI_ARQOS;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI ARVALID" *) output M0_AXI_ARVALID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI ARREADY" *) input M0_AXI_ARREADY;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI RID" *) input [0:0]M0_AXI_RID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI RDATA" *) input [31:0]M0_AXI_RDATA;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI RRESP" *) input [1:0]M0_AXI_RRESP;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI RLAST" *) input M0_AXI_RLAST;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI RVALID" *) input M0_AXI_RVALID;
  (* x_interface_info = "xilinx.com:interface:aximm:1.0 M0_AXI RREADY" *) output M0_AXI_RREADY;

  wire ACLK;
  wire ARESETN;
  wire [31:0]M0_AXI_ARADDR;
  wire [1:0]M0_AXI_ARBURST;
  wire [3:0]M0_AXI_ARCACHE;
  wire [0:0]M0_AXI_ARID;
  wire [7:0]M0_AXI_ARLEN;
  wire M0_AXI_ARLOCK;
  wire [2:0]M0_AXI_ARPROT;
  wire [3:0]M0_AXI_ARQOS;
  wire M0_AXI_ARREADY;
  wire [2:0]M0_AXI_ARSIZE;
  wire M0_AXI_ARVALID;
  wire [31:0]M0_AXI_AWADDR;
  wire [1:0]M0_AXI_AWBURST;
  wire [3:0]M0_AXI_AWCACHE;
  wire [0:0]M0_AXI_AWID;
  wire [7:0]M0_AXI_AWLEN;
  wire M0_AXI_AWLOCK;
  wire [2:0]M0_AXI_AWPROT;
  wire [3:0]M0_AXI_AWQOS;
  wire M0_AXI_AWREADY;
  wire [2:0]M0_AXI_AWSIZE;
  wire M0_AXI_AWVALID;
  wire [0:0]M0_AXI_BID;
  wire M0_AXI_BREADY;
  wire [1:0]M0_AXI_BRESP;
  wire M0_AXI_BVALID;
  wire [31:0]M0_AXI_RDATA;
  wire [0:0]M0_AXI_RID;
  wire M0_AXI_RLAST;
  wire M0_AXI_RREADY;
  wire [1:0]M0_AXI_RRESP;
  wire M0_AXI_RVALID;
  wire [31:0]M0_AXI_WDATA;
  wire M0_AXI_WLAST;
  wire M0_AXI_WREADY;
  wire [3:0]M0_AXI_WSTRB;
  wire M0_AXI_WVALID;
  wire [31:0]S0_AXI_ARADDR;
  wire [1:0]S0_AXI_ARBURST;
  wire [3:0]S0_AXI_ARCACHE;
  wire [0:0]S0_AXI_ARID;
  wire [7:0]S0_AXI_ARLEN;
  wire S0_AXI_ARLOCK;
  wire [2:0]S0_AXI_ARPROT;
  wire [3:0]S0_AXI_ARQOS;
  wire S0_AXI_ARREADY;
  wire [2:0]S0_AXI_ARSIZE;
  wire S0_AXI_ARVALID;
  wire [31:0]S0_AXI_AWADDR;
  wire [1:0]S0_AXI_AWBURST;
  wire [3:0]S0_AXI_AWCACHE;
  wire [0:0]S0_AXI_AWID;
  wire [7:0]S0_AXI_AWLEN;
  wire S0_AXI_AWLOCK;
  wire [2:0]S0_AXI_AWPROT;
  wire [3:0]S0_AXI_AWQOS;
  wire S0_AXI_AWREADY;
  wire [2:0]S0_AXI_AWSIZE;
  wire S0_AXI_AWVALID;
  wire [0:0]S0_AXI_BID;
  wire S0_AXI_BREADY;
  wire [1:0]S0_AXI_BRESP;
  wire S0_AXI_BVALID;
  wire [31:0]S0_AXI_RDATA;
  wire [0:0]S0_AXI_RID;
  wire S0_AXI_RLAST;
  wire S0_AXI_RREADY;
  wire [1:0]S0_AXI_RRESP;
  wire S0_AXI_RVALID;
  wire [31:0]S0_AXI_WDATA;
  wire S0_AXI_WLAST;
  wire S0_AXI_WREADY;
  wire [3:0]S0_AXI_WSTRB;
  wire S0_AXI_WVALID;
  wire [31:0]S1_AXI_ARADDR;
  wire [1:0]S1_AXI_ARBURST;
  wire [3:0]S1_AXI_ARCACHE;
  wire [0:0]S1_AXI_ARID;
  wire [7:0]S1_AXI_ARLEN;
  wire S1_AXI_ARLOCK;
  wire [2:0]S1_AXI_ARPROT;
  wire [3:0]S1_AXI_ARQOS;
  wire S1_AXI_ARREADY;
  wire [2:0]S1_AXI_ARSIZE;
  wire S1_AXI_ARVALID;
  wire [31:0]S1_AXI_AWADDR;
  wire [1:0]S1_AXI_AWBURST;
  wire [3:0]S1_AXI_AWCACHE;
  wire [0:0]S1_AXI_AWID;
  wire [7:0]S1_AXI_AWLEN;
  wire S1_AXI_AWLOCK;
  wire [2:0]S1_AXI_AWPROT;
  wire [3:0]S1_AXI_AWQOS;
  wire S1_AXI_AWREADY;
  wire [2:0]S1_AXI_AWSIZE;
  wire S1_AXI_AWVALID;
  wire [0:0]S1_AXI_BID;
  wire S1_AXI_BREADY;
  wire [1:0]S1_AXI_BRESP;
  wire S1_AXI_BVALID;
  wire [31:0]S1_AXI_RDATA;
  wire [0:0]S1_AXI_RID;
  wire S1_AXI_RLAST;
  wire S1_AXI_RREADY;
  wire [1:0]S1_AXI_RRESP;
  wire S1_AXI_RVALID;
  wire [31:0]S1_AXI_WDATA;
  wire S1_AXI_WLAST;
  wire S1_AXI_WREADY;
  wire [3:0]S1_AXI_WSTRB;
  wire S1_AXI_WVALID;
  wire NLW_U0_M0_AXI_ACREADY_UNCONNECTED;
  wire NLW_U0_M0_AXI_CDLAST_UNCONNECTED;
  wire NLW_U0_M0_AXI_CDVALID_UNCONNECTED;
  wire NLW_U0_M0_AXI_CRVALID_UNCONNECTED;
  wire NLW_U0_M0_AXI_RACK_UNCONNECTED;
  wire NLW_U0_M0_AXI_WACK_UNCONNECTED;
  wire NLW_U0_M1_AXI_ARLOCK_UNCONNECTED;
  wire NLW_U0_M1_AXI_ARVALID_UNCONNECTED;
  wire NLW_U0_M1_AXI_AWLOCK_UNCONNECTED;
  wire NLW_U0_M1_AXI_AWVALID_UNCONNECTED;
  wire NLW_U0_M1_AXI_BREADY_UNCONNECTED;
  wire NLW_U0_M1_AXI_RREADY_UNCONNECTED;
  wire NLW_U0_M1_AXI_WLAST_UNCONNECTED;
  wire NLW_U0_M1_AXI_WVALID_UNCONNECTED;
  wire NLW_U0_M2_AXI_ARLOCK_UNCONNECTED;
  wire NLW_U0_M2_AXI_ARVALID_UNCONNECTED;
  wire NLW_U0_M2_AXI_AWLOCK_UNCONNECTED;
  wire NLW_U0_M2_AXI_AWVALID_UNCONNECTED;
  wire NLW_U0_M2_AXI_BREADY_UNCONNECTED;
  wire NLW_U0_M2_AXI_RREADY_UNCONNECTED;
  wire NLW_U0_M2_AXI_WLAST_UNCONNECTED;
  wire NLW_U0_M2_AXI_WVALID_UNCONNECTED;
  wire NLW_U0_M3_AXI_ARLOCK_UNCONNECTED;
  wire NLW_U0_M3_AXI_ARVALID_UNCONNECTED;
  wire NLW_U0_M3_AXI_AWLOCK_UNCONNECTED;
  wire NLW_U0_M3_AXI_AWVALID_UNCONNECTED;
  wire NLW_U0_M3_AXI_BREADY_UNCONNECTED;
  wire NLW_U0_M3_AXI_RREADY_UNCONNECTED;
  wire NLW_U0_M3_AXI_WLAST_UNCONNECTED;
  wire NLW_U0_M3_AXI_WVALID_UNCONNECTED;
  wire NLW_U0_S0_AXI_ACVALID_UNCONNECTED;
  wire NLW_U0_S0_AXI_CDREADY_UNCONNECTED;
  wire NLW_U0_S0_AXI_CRREADY_UNCONNECTED;
  wire NLW_U0_S0_AXI_GEN_ARREADY_UNCONNECTED;
  wire NLW_U0_S0_AXI_GEN_AWREADY_UNCONNECTED;
  wire NLW_U0_S0_AXI_GEN_BVALID_UNCONNECTED;
  wire NLW_U0_S0_AXI_GEN_RLAST_UNCONNECTED;
  wire NLW_U0_S0_AXI_GEN_RVALID_UNCONNECTED;
  wire NLW_U0_S0_AXI_GEN_WREADY_UNCONNECTED;
  wire NLW_U0_S10_AXI_ACVALID_UNCONNECTED;
  wire NLW_U0_S10_AXI_ARREADY_UNCONNECTED;
  wire NLW_U0_S10_AXI_AWREADY_UNCONNECTED;
  wire NLW_U0_S10_AXI_BVALID_UNCONNECTED;
  wire NLW_U0_S10_AXI_CDREADY_UNCONNECTED;
  wire NLW_U0_S10_AXI_CRREADY_UNCONNECTED;
  wire NLW_U0_S10_AXI_GEN_ARREADY_UNCONNECTED;
  wire NLW_U0_S10_AXI_GEN_AWREADY_UNCONNECTED;
  wire NLW_U0_S10_AXI_GEN_BVALID_UNCONNECTED;
  wire NLW_U0_S10_AXI_GEN_RLAST_UNCONNECTED;
  wire NLW_U0_S10_AXI_GEN_RVALID_UNCONNECTED;
  wire NLW_U0_S10_AXI_GEN_WREADY_UNCONNECTED;
  wire NLW_U0_S10_AXI_RLAST_UNCONNECTED;
  wire NLW_U0_S10_AXI_RVALID_UNCONNECTED;
  wire NLW_U0_S10_AXI_WREADY_UNCONNECTED;
  wire NLW_U0_S11_AXI_ACVALID_UNCONNECTED;
  wire NLW_U0_S11_AXI_ARREADY_UNCONNECTED;
  wire NLW_U0_S11_AXI_AWREADY_UNCONNECTED;
  wire NLW_U0_S11_AXI_BVALID_UNCONNECTED;
  wire NLW_U0_S11_AXI_CDREADY_UNCONNECTED;
  wire NLW_U0_S11_AXI_CRREADY_UNCONNECTED;
  wire NLW_U0_S11_AXI_GEN_ARREADY_UNCONNECTED;
  wire NLW_U0_S11_AXI_GEN_AWREADY_UNCONNECTED;
  wire NLW_U0_S11_AXI_GEN_BVALID_UNCONNECTED;
  wire NLW_U0_S11_AXI_GEN_RLAST_UNCONNECTED;
  wire NLW_U0_S11_AXI_GEN_RVALID_UNCONNECTED;
  wire NLW_U0_S11_AXI_GEN_WREADY_UNCONNECTED;
  wire NLW_U0_S11_AXI_RLAST_UNCONNECTED;
  wire NLW_U0_S11_AXI_RVALID_UNCONNECTED;
  wire NLW_U0_S11_AXI_WREADY_UNCONNECTED;
  wire NLW_U0_S12_AXI_ACVALID_UNCONNECTED;
  wire NLW_U0_S12_AXI_ARREADY_UNCONNECTED;
  wire NLW_U0_S12_AXI_AWREADY_UNCONNECTED;
  wire NLW_U0_S12_AXI_BVALID_UNCONNECTED;
  wire NLW_U0_S12_AXI_CDREADY_UNCONNECTED;
  wire NLW_U0_S12_AXI_CRREADY_UNCONNECTED;
  wire NLW_U0_S12_AXI_GEN_ARREADY_UNCONNECTED;
  wire NLW_U0_S12_AXI_GEN_AWREADY_UNCONNECTED;
  wire NLW_U0_S12_AXI_GEN_BVALID_UNCONNECTED;
  wire NLW_U0_S12_AXI_GEN_RLAST_UNCONNECTED;
  wire NLW_U0_S12_AXI_GEN_RVALID_UNCONNECTED;
  wire NLW_U0_S12_AXI_GEN_WREADY_UNCONNECTED;
  wire NLW_U0_S12_AXI_RLAST_UNCONNECTED;
  wire NLW_U0_S12_AXI_RVALID_UNCONNECTED;
  wire NLW_U0_S12_AXI_WREADY_UNCONNECTED;
  wire NLW_U0_S13_AXI_ACVALID_UNCONNECTED;
  wire NLW_U0_S13_AXI_ARREADY_UNCONNECTED;
  wire NLW_U0_S13_AXI_AWREADY_UNCONNECTED;
  wire NLW_U0_S13_AXI_BVALID_UNCONNECTED;
  wire NLW_U0_S13_AXI_CDREADY_UNCONNECTED;
  wire NLW_U0_S13_AXI_CRREADY_UNCONNECTED;
  wire NLW_U0_S13_AXI_GEN_ARREADY_UNCONNECTED;
  wire NLW_U0_S13_AXI_GEN_AWREADY_UNCONNECTED;
  wire NLW_U0_S13_AXI_GEN_BVALID_UNCONNECTED;
  wire NLW_U0_S13_AXI_GEN_RLAST_UNCONNECTED;
  wire NLW_U0_S13_AXI_GEN_RVALID_UNCONNECTED;
  wire NLW_U0_S13_AXI_GEN_WREADY_UNCONNECTED;
  wire NLW_U0_S13_AXI_RLAST_UNCONNECTED;
  wire NLW_U0_S13_AXI_RVALID_UNCONNECTED;
  wire NLW_U0_S13_AXI_WREADY_UNCONNECTED;
  wire NLW_U0_S14_AXI_ACVALID_UNCONNECTED;
  wire NLW_U0_S14_AXI_ARREADY_UNCONNECTED;
  wire NLW_U0_S14_AXI_AWREADY_UNCONNECTED;
  wire NLW_U0_S14_AXI_BVALID_UNCONNECTED;
  wire NLW_U0_S14_AXI_CDREADY_UNCONNECTED;
  wire NLW_U0_S14_AXI_CRREADY_UNCONNECTED;
  wire NLW_U0_S14_AXI_GEN_ARREADY_UNCONNECTED;
  wire NLW_U0_S14_AXI_GEN_AWREADY_UNCONNECTED;
  wire NLW_U0_S14_AXI_GEN_BVALID_UNCONNECTED;
  wire NLW_U0_S14_AXI_GEN_RLAST_UNCONNECTED;
  wire NLW_U0_S14_AXI_GEN_RVALID_UNCONNECTED;
  wire NLW_U0_S14_AXI_GEN_WREADY_UNCONNECTED;
  wire NLW_U0_S14_AXI_RLAST_UNCONNECTED;
  wire NLW_U0_S14_AXI_RVALID_UNCONNECTED;
  wire NLW_U0_S14_AXI_WREADY_UNCONNECTED;
  wire NLW_U0_S15_AXI_ACVALID_UNCONNECTED;
  wire NLW_U0_S15_AXI_ARREADY_UNCONNECTED;
  wire NLW_U0_S15_AXI_AWREADY_UNCONNECTED;
  wire NLW_U0_S15_AXI_BVALID_UNCONNECTED;
  wire NLW_U0_S15_AXI_CDREADY_UNCONNECTED;
  wire NLW_U0_S15_AXI_CRREADY_UNCONNECTED;
  wire NLW_U0_S15_AXI_GEN_ARREADY_UNCONNECTED;
  wire NLW_U0_S15_AXI_GEN_AWREADY_UNCONNECTED;
  wire NLW_U0_S15_AXI_GEN_BVALID_UNCONNECTED;
  wire NLW_U0_S15_AXI_GEN_RLAST_UNCONNECTED;
  wire NLW_U0_S15_AXI_GEN_RVALID_UNCONNECTED;
  wire NLW_U0_S15_AXI_GEN_WREADY_UNCONNECTED;
  wire NLW_U0_S15_AXI_RLAST_UNCONNECTED;
  wire NLW_U0_S15_AXI_RVALID_UNCONNECTED;
  wire NLW_U0_S15_AXI_WREADY_UNCONNECTED;
  wire NLW_U0_S1_AXI_ACVALID_UNCONNECTED;
  wire NLW_U0_S1_AXI_CDREADY_UNCONNECTED;
  wire NLW_U0_S1_AXI_CRREADY_UNCONNECTED;
  wire NLW_U0_S1_AXI_GEN_ARREADY_UNCONNECTED;
  wire NLW_U0_S1_AXI_GEN_AWREADY_UNCONNECTED;
  wire NLW_U0_S1_AXI_GEN_BVALID_UNCONNECTED;
  wire NLW_U0_S1_AXI_GEN_RLAST_UNCONNECTED;
  wire NLW_U0_S1_AXI_GEN_RVALID_UNCONNECTED;
  wire NLW_U0_S1_AXI_GEN_WREADY_UNCONNECTED;
  wire NLW_U0_S2_AXI_ACVALID_UNCONNECTED;
  wire NLW_U0_S2_AXI_ARREADY_UNCONNECTED;
  wire NLW_U0_S2_AXI_AWREADY_UNCONNECTED;
  wire NLW_U0_S2_AXI_BVALID_UNCONNECTED;
  wire NLW_U0_S2_AXI_CDREADY_UNCONNECTED;
  wire NLW_U0_S2_AXI_CRREADY_UNCONNECTED;
  wire NLW_U0_S2_AXI_GEN_ARREADY_UNCONNECTED;
  wire NLW_U0_S2_AXI_GEN_AWREADY_UNCONNECTED;
  wire NLW_U0_S2_AXI_GEN_BVALID_UNCONNECTED;
  wire NLW_U0_S2_AXI_GEN_RLAST_UNCONNECTED;
  wire NLW_U0_S2_AXI_GEN_RVALID_UNCONNECTED;
  wire NLW_U0_S2_AXI_GEN_WREADY_UNCONNECTED;
  wire NLW_U0_S2_AXI_RLAST_UNCONNECTED;
  wire NLW_U0_S2_AXI_RVALID_UNCONNECTED;
  wire NLW_U0_S2_AXI_WREADY_UNCONNECTED;
  wire NLW_U0_S3_AXI_ACVALID_UNCONNECTED;
  wire NLW_U0_S3_AXI_ARREADY_UNCONNECTED;
  wire NLW_U0_S3_AXI_AWREADY_UNCONNECTED;
  wire NLW_U0_S3_AXI_BVALID_UNCONNECTED;
  wire NLW_U0_S3_AXI_CDREADY_UNCONNECTED;
  wire NLW_U0_S3_AXI_CRREADY_UNCONNECTED;
  wire NLW_U0_S3_AXI_GEN_ARREADY_UNCONNECTED;
  wire NLW_U0_S3_AXI_GEN_AWREADY_UNCONNECTED;
  wire NLW_U0_S3_AXI_GEN_BVALID_UNCONNECTED;
  wire NLW_U0_S3_AXI_GEN_RLAST_UNCONNECTED;
  wire NLW_U0_S3_AXI_GEN_RVALID_UNCONNECTED;
  wire NLW_U0_S3_AXI_GEN_WREADY_UNCONNECTED;
  wire NLW_U0_S3_AXI_RLAST_UNCONNECTED;
  wire NLW_U0_S3_AXI_RVALID_UNCONNECTED;
  wire NLW_U0_S3_AXI_WREADY_UNCONNECTED;
  wire NLW_U0_S4_AXI_ACVALID_UNCONNECTED;
  wire NLW_U0_S4_AXI_ARREADY_UNCONNECTED;
  wire NLW_U0_S4_AXI_AWREADY_UNCONNECTED;
  wire NLW_U0_S4_AXI_BVALID_UNCONNECTED;
  wire NLW_U0_S4_AXI_CDREADY_UNCONNECTED;
  wire NLW_U0_S4_AXI_CRREADY_UNCONNECTED;
  wire NLW_U0_S4_AXI_GEN_ARREADY_UNCONNECTED;
  wire NLW_U0_S4_AXI_GEN_AWREADY_UNCONNECTED;
  wire NLW_U0_S4_AXI_GEN_BVALID_UNCONNECTED;
  wire NLW_U0_S4_AXI_GEN_RLAST_UNCONNECTED;
  wire NLW_U0_S4_AXI_GEN_RVALID_UNCONNECTED;
  wire NLW_U0_S4_AXI_GEN_WREADY_UNCONNECTED;
  wire NLW_U0_S4_AXI_RLAST_UNCONNECTED;
  wire NLW_U0_S4_AXI_RVALID_UNCONNECTED;
  wire NLW_U0_S4_AXI_WREADY_UNCONNECTED;
  wire NLW_U0_S5_AXI_ACVALID_UNCONNECTED;
  wire NLW_U0_S5_AXI_ARREADY_UNCONNECTED;
  wire NLW_U0_S5_AXI_AWREADY_UNCONNECTED;
  wire NLW_U0_S5_AXI_BVALID_UNCONNECTED;
  wire NLW_U0_S5_AXI_CDREADY_UNCONNECTED;
  wire NLW_U0_S5_AXI_CRREADY_UNCONNECTED;
  wire NLW_U0_S5_AXI_GEN_ARREADY_UNCONNECTED;
  wire NLW_U0_S5_AXI_GEN_AWREADY_UNCONNECTED;
  wire NLW_U0_S5_AXI_GEN_BVALID_UNCONNECTED;
  wire NLW_U0_S5_AXI_GEN_RLAST_UNCONNECTED;
  wire NLW_U0_S5_AXI_GEN_RVALID_UNCONNECTED;
  wire NLW_U0_S5_AXI_GEN_WREADY_UNCONNECTED;
  wire NLW_U0_S5_AXI_RLAST_UNCONNECTED;
  wire NLW_U0_S5_AXI_RVALID_UNCONNECTED;
  wire NLW_U0_S5_AXI_WREADY_UNCONNECTED;
  wire NLW_U0_S6_AXI_ACVALID_UNCONNECTED;
  wire NLW_U0_S6_AXI_ARREADY_UNCONNECTED;
  wire NLW_U0_S6_AXI_AWREADY_UNCONNECTED;
  wire NLW_U0_S6_AXI_BVALID_UNCONNECTED;
  wire NLW_U0_S6_AXI_CDREADY_UNCONNECTED;
  wire NLW_U0_S6_AXI_CRREADY_UNCONNECTED;
  wire NLW_U0_S6_AXI_GEN_ARREADY_UNCONNECTED;
  wire NLW_U0_S6_AXI_GEN_AWREADY_UNCONNECTED;
  wire NLW_U0_S6_AXI_GEN_BVALID_UNCONNECTED;
  wire NLW_U0_S6_AXI_GEN_RLAST_UNCONNECTED;
  wire NLW_U0_S6_AXI_GEN_RVALID_UNCONNECTED;
  wire NLW_U0_S6_AXI_GEN_WREADY_UNCONNECTED;
  wire NLW_U0_S6_AXI_RLAST_UNCONNECTED;
  wire NLW_U0_S6_AXI_RVALID_UNCONNECTED;
  wire NLW_U0_S6_AXI_WREADY_UNCONNECTED;
  wire NLW_U0_S7_AXI_ACVALID_UNCONNECTED;
  wire NLW_U0_S7_AXI_ARREADY_UNCONNECTED;
  wire NLW_U0_S7_AXI_AWREADY_UNCONNECTED;
  wire NLW_U0_S7_AXI_BVALID_UNCONNECTED;
  wire NLW_U0_S7_AXI_CDREADY_UNCONNECTED;
  wire NLW_U0_S7_AXI_CRREADY_UNCONNECTED;
  wire NLW_U0_S7_AXI_GEN_ARREADY_UNCONNECTED;
  wire NLW_U0_S7_AXI_GEN_AWREADY_UNCONNECTED;
  wire NLW_U0_S7_AXI_GEN_BVALID_UNCONNECTED;
  wire NLW_U0_S7_AXI_GEN_RLAST_UNCONNECTED;
  wire NLW_U0_S7_AXI_GEN_RVALID_UNCONNECTED;
  wire NLW_U0_S7_AXI_GEN_WREADY_UNCONNECTED;
  wire NLW_U0_S7_AXI_RLAST_UNCONNECTED;
  wire NLW_U0_S7_AXI_RVALID_UNCONNECTED;
  wire NLW_U0_S7_AXI_WREADY_UNCONNECTED;
  wire NLW_U0_S8_AXI_ACVALID_UNCONNECTED;
  wire NLW_U0_S8_AXI_ARREADY_UNCONNECTED;
  wire NLW_U0_S8_AXI_AWREADY_UNCONNECTED;
  wire NLW_U0_S8_AXI_BVALID_UNCONNECTED;
  wire NLW_U0_S8_AXI_CDREADY_UNCONNECTED;
  wire NLW_U0_S8_AXI_CRREADY_UNCONNECTED;
  wire NLW_U0_S8_AXI_GEN_ARREADY_UNCONNECTED;
  wire NLW_U0_S8_AXI_GEN_AWREADY_UNCONNECTED;
  wire NLW_U0_S8_AXI_GEN_BVALID_UNCONNECTED;
  wire NLW_U0_S8_AXI_GEN_RLAST_UNCONNECTED;
  wire NLW_U0_S8_AXI_GEN_RVALID_UNCONNECTED;
  wire NLW_U0_S8_AXI_GEN_WREADY_UNCONNECTED;
  wire NLW_U0_S8_AXI_RLAST_UNCONNECTED;
  wire NLW_U0_S8_AXI_RVALID_UNCONNECTED;
  wire NLW_U0_S8_AXI_WREADY_UNCONNECTED;
  wire NLW_U0_S9_AXI_ACVALID_UNCONNECTED;
  wire NLW_U0_S9_AXI_ARREADY_UNCONNECTED;
  wire NLW_U0_S9_AXI_AWREADY_UNCONNECTED;
  wire NLW_U0_S9_AXI_BVALID_UNCONNECTED;
  wire NLW_U0_S9_AXI_CDREADY_UNCONNECTED;
  wire NLW_U0_S9_AXI_CRREADY_UNCONNECTED;
  wire NLW_U0_S9_AXI_GEN_ARREADY_UNCONNECTED;
  wire NLW_U0_S9_AXI_GEN_AWREADY_UNCONNECTED;
  wire NLW_U0_S9_AXI_GEN_BVALID_UNCONNECTED;
  wire NLW_U0_S9_AXI_GEN_RLAST_UNCONNECTED;
  wire NLW_U0_S9_AXI_GEN_RVALID_UNCONNECTED;
  wire NLW_U0_S9_AXI_GEN_WREADY_UNCONNECTED;
  wire NLW_U0_S9_AXI_RLAST_UNCONNECTED;
  wire NLW_U0_S9_AXI_RVALID_UNCONNECTED;
  wire NLW_U0_S9_AXI_WREADY_UNCONNECTED;
  wire NLW_U0_S_AXI_CTRL_ARREADY_UNCONNECTED;
  wire NLW_U0_S_AXI_CTRL_AWREADY_UNCONNECTED;
  wire NLW_U0_S_AXI_CTRL_BVALID_UNCONNECTED;
  wire NLW_U0_S_AXI_CTRL_RVALID_UNCONNECTED;
  wire NLW_U0_S_AXI_CTRL_WREADY_UNCONNECTED;
  wire [1:0]NLW_U0_M0_AXI_ARBAR_UNCONNECTED;
  wire [1:0]NLW_U0_M0_AXI_ARDOMAIN_UNCONNECTED;
  wire [3:0]NLW_U0_M0_AXI_ARSNOOP_UNCONNECTED;
  wire [1:0]NLW_U0_M0_AXI_AWBAR_UNCONNECTED;
  wire [1:0]NLW_U0_M0_AXI_AWDOMAIN_UNCONNECTED;
  wire [2:0]NLW_U0_M0_AXI_AWSNOOP_UNCONNECTED;
  wire [31:0]NLW_U0_M0_AXI_CDDATA_UNCONNECTED;
  wire [4:0]NLW_U0_M0_AXI_CRRESP_UNCONNECTED;
  wire [31:0]NLW_U0_M1_AXI_ARADDR_UNCONNECTED;
  wire [1:0]NLW_U0_M1_AXI_ARBURST_UNCONNECTED;
  wire [3:0]NLW_U0_M1_AXI_ARCACHE_UNCONNECTED;
  wire [0:0]NLW_U0_M1_AXI_ARID_UNCONNECTED;
  wire [7:0]NLW_U0_M1_AXI_ARLEN_UNCONNECTED;
  wire [2:0]NLW_U0_M1_AXI_ARPROT_UNCONNECTED;
  wire [3:0]NLW_U0_M1_AXI_ARQOS_UNCONNECTED;
  wire [2:0]NLW_U0_M1_AXI_ARSIZE_UNCONNECTED;
  wire [31:0]NLW_U0_M1_AXI_AWADDR_UNCONNECTED;
  wire [1:0]NLW_U0_M1_AXI_AWBURST_UNCONNECTED;
  wire [3:0]NLW_U0_M1_AXI_AWCACHE_UNCONNECTED;
  wire [0:0]NLW_U0_M1_AXI_AWID_UNCONNECTED;
  wire [7:0]NLW_U0_M1_AXI_AWLEN_UNCONNECTED;
  wire [2:0]NLW_U0_M1_AXI_AWPROT_UNCONNECTED;
  wire [3:0]NLW_U0_M1_AXI_AWQOS_UNCONNECTED;
  wire [2:0]NLW_U0_M1_AXI_AWSIZE_UNCONNECTED;
  wire [31:0]NLW_U0_M1_AXI_WDATA_UNCONNECTED;
  wire [3:0]NLW_U0_M1_AXI_WSTRB_UNCONNECTED;
  wire [31:0]NLW_U0_M2_AXI_ARADDR_UNCONNECTED;
  wire [1:0]NLW_U0_M2_AXI_ARBURST_UNCONNECTED;
  wire [3:0]NLW_U0_M2_AXI_ARCACHE_UNCONNECTED;
  wire [0:0]NLW_U0_M2_AXI_ARID_UNCONNECTED;
  wire [7:0]NLW_U0_M2_AXI_ARLEN_UNCONNECTED;
  wire [2:0]NLW_U0_M2_AXI_ARPROT_UNCONNECTED;
  wire [3:0]NLW_U0_M2_AXI_ARQOS_UNCONNECTED;
  wire [2:0]NLW_U0_M2_AXI_ARSIZE_UNCONNECTED;
  wire [31:0]NLW_U0_M2_AXI_AWADDR_UNCONNECTED;
  wire [1:0]NLW_U0_M2_AXI_AWBURST_UNCONNECTED;
  wire [3:0]NLW_U0_M2_AXI_AWCACHE_UNCONNECTED;
  wire [0:0]NLW_U0_M2_AXI_AWID_UNCONNECTED;
  wire [7:0]NLW_U0_M2_AXI_AWLEN_UNCONNECTED;
  wire [2:0]NLW_U0_M2_AXI_AWPROT_UNCONNECTED;
  wire [3:0]NLW_U0_M2_AXI_AWQOS_UNCONNECTED;
  wire [2:0]NLW_U0_M2_AXI_AWSIZE_UNCONNECTED;
  wire [31:0]NLW_U0_M2_AXI_WDATA_UNCONNECTED;
  wire [3:0]NLW_U0_M2_AXI_WSTRB_UNCONNECTED;
  wire [31:0]NLW_U0_M3_AXI_ARADDR_UNCONNECTED;
  wire [1:0]NLW_U0_M3_AXI_ARBURST_UNCONNECTED;
  wire [3:0]NLW_U0_M3_AXI_ARCACHE_UNCONNECTED;
  wire [0:0]NLW_U0_M3_AXI_ARID_UNCONNECTED;
  wire [7:0]NLW_U0_M3_AXI_ARLEN_UNCONNECTED;
  wire [2:0]NLW_U0_M3_AXI_ARPROT_UNCONNECTED;
  wire [3:0]NLW_U0_M3_AXI_ARQOS_UNCONNECTED;
  wire [2:0]NLW_U0_M3_AXI_ARSIZE_UNCONNECTED;
  wire [31:0]NLW_U0_M3_AXI_AWADDR_UNCONNECTED;
  wire [1:0]NLW_U0_M3_AXI_AWBURST_UNCONNECTED;
  wire [3:0]NLW_U0_M3_AXI_AWCACHE_UNCONNECTED;
  wire [0:0]NLW_U0_M3_AXI_AWID_UNCONNECTED;
  wire [7:0]NLW_U0_M3_AXI_AWLEN_UNCONNECTED;
  wire [2:0]NLW_U0_M3_AXI_AWPROT_UNCONNECTED;
  wire [3:0]NLW_U0_M3_AXI_AWQOS_UNCONNECTED;
  wire [2:0]NLW_U0_M3_AXI_AWSIZE_UNCONNECTED;
  wire [31:0]NLW_U0_M3_AXI_WDATA_UNCONNECTED;
  wire [3:0]NLW_U0_M3_AXI_WSTRB_UNCONNECTED;
  wire [31:0]NLW_U0_S0_AXI_ACADDR_UNCONNECTED;
  wire [2:0]NLW_U0_S0_AXI_ACPROT_UNCONNECTED;
  wire [3:0]NLW_U0_S0_AXI_ACSNOOP_UNCONNECTED;
  wire [0:0]NLW_U0_S0_AXI_GEN_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S0_AXI_GEN_BRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S0_AXI_GEN_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S0_AXI_GEN_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S0_AXI_GEN_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S10_AXI_ACADDR_UNCONNECTED;
  wire [2:0]NLW_U0_S10_AXI_ACPROT_UNCONNECTED;
  wire [3:0]NLW_U0_S10_AXI_ACSNOOP_UNCONNECTED;
  wire [0:0]NLW_U0_S10_AXI_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S10_AXI_BRESP_UNCONNECTED;
  wire [0:0]NLW_U0_S10_AXI_GEN_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S10_AXI_GEN_BRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S10_AXI_GEN_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S10_AXI_GEN_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S10_AXI_GEN_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S10_AXI_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S10_AXI_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S10_AXI_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S11_AXI_ACADDR_UNCONNECTED;
  wire [2:0]NLW_U0_S11_AXI_ACPROT_UNCONNECTED;
  wire [3:0]NLW_U0_S11_AXI_ACSNOOP_UNCONNECTED;
  wire [0:0]NLW_U0_S11_AXI_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S11_AXI_BRESP_UNCONNECTED;
  wire [0:0]NLW_U0_S11_AXI_GEN_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S11_AXI_GEN_BRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S11_AXI_GEN_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S11_AXI_GEN_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S11_AXI_GEN_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S11_AXI_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S11_AXI_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S11_AXI_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S12_AXI_ACADDR_UNCONNECTED;
  wire [2:0]NLW_U0_S12_AXI_ACPROT_UNCONNECTED;
  wire [3:0]NLW_U0_S12_AXI_ACSNOOP_UNCONNECTED;
  wire [0:0]NLW_U0_S12_AXI_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S12_AXI_BRESP_UNCONNECTED;
  wire [0:0]NLW_U0_S12_AXI_GEN_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S12_AXI_GEN_BRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S12_AXI_GEN_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S12_AXI_GEN_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S12_AXI_GEN_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S12_AXI_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S12_AXI_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S12_AXI_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S13_AXI_ACADDR_UNCONNECTED;
  wire [2:0]NLW_U0_S13_AXI_ACPROT_UNCONNECTED;
  wire [3:0]NLW_U0_S13_AXI_ACSNOOP_UNCONNECTED;
  wire [0:0]NLW_U0_S13_AXI_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S13_AXI_BRESP_UNCONNECTED;
  wire [0:0]NLW_U0_S13_AXI_GEN_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S13_AXI_GEN_BRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S13_AXI_GEN_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S13_AXI_GEN_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S13_AXI_GEN_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S13_AXI_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S13_AXI_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S13_AXI_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S14_AXI_ACADDR_UNCONNECTED;
  wire [2:0]NLW_U0_S14_AXI_ACPROT_UNCONNECTED;
  wire [3:0]NLW_U0_S14_AXI_ACSNOOP_UNCONNECTED;
  wire [0:0]NLW_U0_S14_AXI_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S14_AXI_BRESP_UNCONNECTED;
  wire [0:0]NLW_U0_S14_AXI_GEN_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S14_AXI_GEN_BRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S14_AXI_GEN_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S14_AXI_GEN_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S14_AXI_GEN_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S14_AXI_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S14_AXI_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S14_AXI_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S15_AXI_ACADDR_UNCONNECTED;
  wire [2:0]NLW_U0_S15_AXI_ACPROT_UNCONNECTED;
  wire [3:0]NLW_U0_S15_AXI_ACSNOOP_UNCONNECTED;
  wire [0:0]NLW_U0_S15_AXI_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S15_AXI_BRESP_UNCONNECTED;
  wire [0:0]NLW_U0_S15_AXI_GEN_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S15_AXI_GEN_BRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S15_AXI_GEN_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S15_AXI_GEN_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S15_AXI_GEN_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S15_AXI_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S15_AXI_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S15_AXI_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S1_AXI_ACADDR_UNCONNECTED;
  wire [2:0]NLW_U0_S1_AXI_ACPROT_UNCONNECTED;
  wire [3:0]NLW_U0_S1_AXI_ACSNOOP_UNCONNECTED;
  wire [0:0]NLW_U0_S1_AXI_GEN_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S1_AXI_GEN_BRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S1_AXI_GEN_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S1_AXI_GEN_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S1_AXI_GEN_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S2_AXI_ACADDR_UNCONNECTED;
  wire [2:0]NLW_U0_S2_AXI_ACPROT_UNCONNECTED;
  wire [3:0]NLW_U0_S2_AXI_ACSNOOP_UNCONNECTED;
  wire [0:0]NLW_U0_S2_AXI_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S2_AXI_BRESP_UNCONNECTED;
  wire [0:0]NLW_U0_S2_AXI_GEN_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S2_AXI_GEN_BRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S2_AXI_GEN_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S2_AXI_GEN_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S2_AXI_GEN_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S2_AXI_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S2_AXI_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S2_AXI_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S3_AXI_ACADDR_UNCONNECTED;
  wire [2:0]NLW_U0_S3_AXI_ACPROT_UNCONNECTED;
  wire [3:0]NLW_U0_S3_AXI_ACSNOOP_UNCONNECTED;
  wire [0:0]NLW_U0_S3_AXI_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S3_AXI_BRESP_UNCONNECTED;
  wire [0:0]NLW_U0_S3_AXI_GEN_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S3_AXI_GEN_BRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S3_AXI_GEN_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S3_AXI_GEN_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S3_AXI_GEN_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S3_AXI_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S3_AXI_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S3_AXI_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S4_AXI_ACADDR_UNCONNECTED;
  wire [2:0]NLW_U0_S4_AXI_ACPROT_UNCONNECTED;
  wire [3:0]NLW_U0_S4_AXI_ACSNOOP_UNCONNECTED;
  wire [0:0]NLW_U0_S4_AXI_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S4_AXI_BRESP_UNCONNECTED;
  wire [0:0]NLW_U0_S4_AXI_GEN_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S4_AXI_GEN_BRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S4_AXI_GEN_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S4_AXI_GEN_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S4_AXI_GEN_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S4_AXI_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S4_AXI_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S4_AXI_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S5_AXI_ACADDR_UNCONNECTED;
  wire [2:0]NLW_U0_S5_AXI_ACPROT_UNCONNECTED;
  wire [3:0]NLW_U0_S5_AXI_ACSNOOP_UNCONNECTED;
  wire [0:0]NLW_U0_S5_AXI_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S5_AXI_BRESP_UNCONNECTED;
  wire [0:0]NLW_U0_S5_AXI_GEN_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S5_AXI_GEN_BRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S5_AXI_GEN_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S5_AXI_GEN_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S5_AXI_GEN_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S5_AXI_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S5_AXI_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S5_AXI_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S6_AXI_ACADDR_UNCONNECTED;
  wire [2:0]NLW_U0_S6_AXI_ACPROT_UNCONNECTED;
  wire [3:0]NLW_U0_S6_AXI_ACSNOOP_UNCONNECTED;
  wire [0:0]NLW_U0_S6_AXI_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S6_AXI_BRESP_UNCONNECTED;
  wire [0:0]NLW_U0_S6_AXI_GEN_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S6_AXI_GEN_BRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S6_AXI_GEN_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S6_AXI_GEN_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S6_AXI_GEN_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S6_AXI_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S6_AXI_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S6_AXI_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S7_AXI_ACADDR_UNCONNECTED;
  wire [2:0]NLW_U0_S7_AXI_ACPROT_UNCONNECTED;
  wire [3:0]NLW_U0_S7_AXI_ACSNOOP_UNCONNECTED;
  wire [0:0]NLW_U0_S7_AXI_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S7_AXI_BRESP_UNCONNECTED;
  wire [0:0]NLW_U0_S7_AXI_GEN_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S7_AXI_GEN_BRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S7_AXI_GEN_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S7_AXI_GEN_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S7_AXI_GEN_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S7_AXI_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S7_AXI_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S7_AXI_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S8_AXI_ACADDR_UNCONNECTED;
  wire [2:0]NLW_U0_S8_AXI_ACPROT_UNCONNECTED;
  wire [3:0]NLW_U0_S8_AXI_ACSNOOP_UNCONNECTED;
  wire [0:0]NLW_U0_S8_AXI_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S8_AXI_BRESP_UNCONNECTED;
  wire [0:0]NLW_U0_S8_AXI_GEN_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S8_AXI_GEN_BRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S8_AXI_GEN_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S8_AXI_GEN_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S8_AXI_GEN_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S8_AXI_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S8_AXI_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S8_AXI_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S9_AXI_ACADDR_UNCONNECTED;
  wire [2:0]NLW_U0_S9_AXI_ACPROT_UNCONNECTED;
  wire [3:0]NLW_U0_S9_AXI_ACSNOOP_UNCONNECTED;
  wire [0:0]NLW_U0_S9_AXI_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S9_AXI_BRESP_UNCONNECTED;
  wire [0:0]NLW_U0_S9_AXI_GEN_BID_UNCONNECTED;
  wire [1:0]NLW_U0_S9_AXI_GEN_BRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S9_AXI_GEN_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S9_AXI_GEN_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S9_AXI_GEN_RRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S9_AXI_RDATA_UNCONNECTED;
  wire [0:0]NLW_U0_S9_AXI_RID_UNCONNECTED;
  wire [1:0]NLW_U0_S9_AXI_RRESP_UNCONNECTED;
  wire [1:0]NLW_U0_S_AXI_CTRL_BRESP_UNCONNECTED;
  wire [31:0]NLW_U0_S_AXI_CTRL_RDATA_UNCONNECTED;
  wire [1:0]NLW_U0_S_AXI_CTRL_RRESP_UNCONNECTED;

  (* C_BASEADDR = "64'b0000000000000000000000000000000011111111111111111111111111111111" *) 
  (* C_CACHE_BLOCKS = "1" *) 
  (* C_CACHE_DATA_WIDTH = "32" *) 
  (* C_CACHE_LINE_LENGTH = "16" *) 
  (* C_CACHE_SIZE = "32768" *) 
  (* C_ENABLE_COHERENCY = "0" *) 
  (* C_ENABLE_CTRL = "0" *) 
  (* C_ENABLE_ERROR_HANDLING = "0" *) 
  (* C_ENABLE_EXCLUSIVE = "0" *) 
  (* C_ENABLE_NON_SECURE = "0" *) 
  (* C_ENABLE_PEER_PORT_DATA = "0" *) 
  (* C_ENABLE_STATISTICS = "0" *) 
  (* C_ENABLE_VERSION_REGISTER = "0" *) 
  (* C_FAMILY = "zynq" *) 
  (* C_FREQ = "0" *) 
  (* C_GEN_MATCH_Lx_CACHE = "0" *) 
  (* C_HIGHADDR = "64'b0000000000000000000000000000000000000000000000000000000000000000" *) 
  (* C_INSTANCE = "system_cache" *) 
  (* C_KEEP_SHARED_WRITE = "1" *) 
  (* C_Lx_CACHE_LINE_LENGTH = "4" *) 
  (* C_Lx_CACHE_SIZE = "8192" *) 
  (* C_Lx_NUM_WAYS = "1" *) 
  (* C_M0_AXI_ADDR_WIDTH = "32" *) 
  (* C_M0_AXI_DATA_WIDTH = "32" *) 
  (* C_M0_AXI_RRESP_WIDTH = "2" *) 
  (* C_M0_AXI_THREAD_ID_WIDTH = "1" *) 
  (* C_M1_AXI_ADDR_WIDTH = "32" *) 
  (* C_M1_AXI_DATA_WIDTH = "32" *) 
  (* C_M1_AXI_RRESP_WIDTH = "2" *) 
  (* C_M1_AXI_THREAD_ID_WIDTH = "1" *) 
  (* C_M2_AXI_ADDR_WIDTH = "32" *) 
  (* C_M2_AXI_DATA_WIDTH = "32" *) 
  (* C_M2_AXI_RRESP_WIDTH = "2" *) 
  (* C_M2_AXI_THREAD_ID_WIDTH = "1" *) 
  (* C_M3_AXI_ADDR_WIDTH = "32" *) 
  (* C_M3_AXI_DATA_WIDTH = "32" *) 
  (* C_M3_AXI_RRESP_WIDTH = "2" *) 
  (* C_M3_AXI_THREAD_ID_WIDTH = "1" *) 
  (* C_NUM_GENERIC_PORTS = "0" *) 
  (* C_NUM_MASTER_PORTS = "1" *) 
  (* C_NUM_OPTIMIZED_PORTS = "2" *) 
  (* C_NUM_WAYS = "2" *) 
  (* C_READ_EXCLUSIVE_CLEAN = "1" *) 
  (* C_READ_ONLY_UNIQUE = "0" *) 
  (* C_S0_AXI_ADDR_WIDTH = "32" *) 
  (* C_S0_AXI_DATA_WIDTH = "32" *) 
  (* C_S0_AXI_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S0_AXI_FORCE_READ_BUFFER = "0" *) 
  (* C_S0_AXI_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S0_AXI_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S0_AXI_GEN_ADDR_WIDTH = "32" *) 
  (* C_S0_AXI_GEN_DATA_WIDTH = "32" *) 
  (* C_S0_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S0_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
  (* C_S0_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S0_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S0_AXI_GEN_ID_WIDTH = "1" *) 
  (* C_S0_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S0_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S0_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S0_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S0_AXI_GEN_SUPPORT_DIRTY = "0" *) 
  (* C_S0_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
  (* C_S0_AXI_ID_WIDTH = "1" *) 
  (* C_S0_AXI_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S0_AXI_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S0_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S0_AXI_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S0_AXI_RRESP_WIDTH = "2" *) 
  (* C_S0_AXI_SUPPORT_DIRTY = "0" *) 
  (* C_S0_AXI_SUPPORT_UNIQUE = "0" *) 
  (* C_S10_AXI_ADDR_WIDTH = "32" *) 
  (* C_S10_AXI_DATA_WIDTH = "32" *) 
  (* C_S10_AXI_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S10_AXI_FORCE_READ_BUFFER = "0" *) 
  (* C_S10_AXI_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S10_AXI_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S10_AXI_GEN_ADDR_WIDTH = "32" *) 
  (* C_S10_AXI_GEN_DATA_WIDTH = "32" *) 
  (* C_S10_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S10_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
  (* C_S10_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S10_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S10_AXI_GEN_ID_WIDTH = "1" *) 
  (* C_S10_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S10_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S10_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S10_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S10_AXI_GEN_SUPPORT_DIRTY = "0" *) 
  (* C_S10_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
  (* C_S10_AXI_ID_WIDTH = "1" *) 
  (* C_S10_AXI_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S10_AXI_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S10_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S10_AXI_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S10_AXI_RRESP_WIDTH = "2" *) 
  (* C_S10_AXI_SUPPORT_DIRTY = "0" *) 
  (* C_S10_AXI_SUPPORT_UNIQUE = "0" *) 
  (* C_S11_AXI_ADDR_WIDTH = "32" *) 
  (* C_S11_AXI_DATA_WIDTH = "32" *) 
  (* C_S11_AXI_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S11_AXI_FORCE_READ_BUFFER = "0" *) 
  (* C_S11_AXI_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S11_AXI_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S11_AXI_GEN_ADDR_WIDTH = "32" *) 
  (* C_S11_AXI_GEN_DATA_WIDTH = "32" *) 
  (* C_S11_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S11_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
  (* C_S11_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S11_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S11_AXI_GEN_ID_WIDTH = "1" *) 
  (* C_S11_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S11_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S11_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S11_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S11_AXI_GEN_SUPPORT_DIRTY = "0" *) 
  (* C_S11_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
  (* C_S11_AXI_ID_WIDTH = "1" *) 
  (* C_S11_AXI_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S11_AXI_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S11_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S11_AXI_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S11_AXI_RRESP_WIDTH = "2" *) 
  (* C_S11_AXI_SUPPORT_DIRTY = "0" *) 
  (* C_S11_AXI_SUPPORT_UNIQUE = "0" *) 
  (* C_S12_AXI_ADDR_WIDTH = "32" *) 
  (* C_S12_AXI_DATA_WIDTH = "32" *) 
  (* C_S12_AXI_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S12_AXI_FORCE_READ_BUFFER = "0" *) 
  (* C_S12_AXI_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S12_AXI_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S12_AXI_GEN_ADDR_WIDTH = "32" *) 
  (* C_S12_AXI_GEN_DATA_WIDTH = "32" *) 
  (* C_S12_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S12_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
  (* C_S12_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S12_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S12_AXI_GEN_ID_WIDTH = "1" *) 
  (* C_S12_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S12_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S12_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S12_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S12_AXI_GEN_SUPPORT_DIRTY = "0" *) 
  (* C_S12_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
  (* C_S12_AXI_ID_WIDTH = "1" *) 
  (* C_S12_AXI_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S12_AXI_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S12_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S12_AXI_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S12_AXI_RRESP_WIDTH = "2" *) 
  (* C_S12_AXI_SUPPORT_DIRTY = "0" *) 
  (* C_S12_AXI_SUPPORT_UNIQUE = "0" *) 
  (* C_S13_AXI_ADDR_WIDTH = "32" *) 
  (* C_S13_AXI_DATA_WIDTH = "32" *) 
  (* C_S13_AXI_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S13_AXI_FORCE_READ_BUFFER = "0" *) 
  (* C_S13_AXI_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S13_AXI_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S13_AXI_GEN_ADDR_WIDTH = "32" *) 
  (* C_S13_AXI_GEN_DATA_WIDTH = "32" *) 
  (* C_S13_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S13_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
  (* C_S13_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S13_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S13_AXI_GEN_ID_WIDTH = "1" *) 
  (* C_S13_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S13_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S13_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S13_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S13_AXI_GEN_SUPPORT_DIRTY = "0" *) 
  (* C_S13_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
  (* C_S13_AXI_ID_WIDTH = "1" *) 
  (* C_S13_AXI_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S13_AXI_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S13_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S13_AXI_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S13_AXI_RRESP_WIDTH = "2" *) 
  (* C_S13_AXI_SUPPORT_DIRTY = "0" *) 
  (* C_S13_AXI_SUPPORT_UNIQUE = "0" *) 
  (* C_S14_AXI_ADDR_WIDTH = "32" *) 
  (* C_S14_AXI_DATA_WIDTH = "32" *) 
  (* C_S14_AXI_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S14_AXI_FORCE_READ_BUFFER = "0" *) 
  (* C_S14_AXI_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S14_AXI_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S14_AXI_GEN_ADDR_WIDTH = "32" *) 
  (* C_S14_AXI_GEN_DATA_WIDTH = "32" *) 
  (* C_S14_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S14_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
  (* C_S14_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S14_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S14_AXI_GEN_ID_WIDTH = "1" *) 
  (* C_S14_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S14_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S14_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S14_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S14_AXI_GEN_SUPPORT_DIRTY = "0" *) 
  (* C_S14_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
  (* C_S14_AXI_ID_WIDTH = "1" *) 
  (* C_S14_AXI_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S14_AXI_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S14_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S14_AXI_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S14_AXI_RRESP_WIDTH = "2" *) 
  (* C_S14_AXI_SUPPORT_DIRTY = "0" *) 
  (* C_S14_AXI_SUPPORT_UNIQUE = "0" *) 
  (* C_S15_AXI_ADDR_WIDTH = "32" *) 
  (* C_S15_AXI_DATA_WIDTH = "32" *) 
  (* C_S15_AXI_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S15_AXI_FORCE_READ_BUFFER = "0" *) 
  (* C_S15_AXI_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S15_AXI_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S15_AXI_GEN_ADDR_WIDTH = "32" *) 
  (* C_S15_AXI_GEN_DATA_WIDTH = "32" *) 
  (* C_S15_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S15_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
  (* C_S15_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S15_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S15_AXI_GEN_ID_WIDTH = "1" *) 
  (* C_S15_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S15_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S15_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S15_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S15_AXI_GEN_SUPPORT_DIRTY = "0" *) 
  (* C_S15_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
  (* C_S15_AXI_ID_WIDTH = "1" *) 
  (* C_S15_AXI_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S15_AXI_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S15_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S15_AXI_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S15_AXI_RRESP_WIDTH = "2" *) 
  (* C_S15_AXI_SUPPORT_DIRTY = "0" *) 
  (* C_S15_AXI_SUPPORT_UNIQUE = "0" *) 
  (* C_S1_AXI_ADDR_WIDTH = "32" *) 
  (* C_S1_AXI_DATA_WIDTH = "32" *) 
  (* C_S1_AXI_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S1_AXI_FORCE_READ_BUFFER = "0" *) 
  (* C_S1_AXI_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S1_AXI_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S1_AXI_GEN_ADDR_WIDTH = "32" *) 
  (* C_S1_AXI_GEN_DATA_WIDTH = "32" *) 
  (* C_S1_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S1_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
  (* C_S1_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S1_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S1_AXI_GEN_ID_WIDTH = "1" *) 
  (* C_S1_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S1_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S1_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S1_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S1_AXI_GEN_SUPPORT_DIRTY = "0" *) 
  (* C_S1_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
  (* C_S1_AXI_ID_WIDTH = "1" *) 
  (* C_S1_AXI_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S1_AXI_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S1_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S1_AXI_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S1_AXI_RRESP_WIDTH = "2" *) 
  (* C_S1_AXI_SUPPORT_DIRTY = "0" *) 
  (* C_S1_AXI_SUPPORT_UNIQUE = "0" *) 
  (* C_S2_AXI_ADDR_WIDTH = "32" *) 
  (* C_S2_AXI_DATA_WIDTH = "32" *) 
  (* C_S2_AXI_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S2_AXI_FORCE_READ_BUFFER = "0" *) 
  (* C_S2_AXI_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S2_AXI_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S2_AXI_GEN_ADDR_WIDTH = "32" *) 
  (* C_S2_AXI_GEN_DATA_WIDTH = "32" *) 
  (* C_S2_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S2_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
  (* C_S2_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S2_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S2_AXI_GEN_ID_WIDTH = "1" *) 
  (* C_S2_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S2_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S2_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S2_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S2_AXI_GEN_SUPPORT_DIRTY = "0" *) 
  (* C_S2_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
  (* C_S2_AXI_ID_WIDTH = "1" *) 
  (* C_S2_AXI_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S2_AXI_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S2_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S2_AXI_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S2_AXI_RRESP_WIDTH = "2" *) 
  (* C_S2_AXI_SUPPORT_DIRTY = "0" *) 
  (* C_S2_AXI_SUPPORT_UNIQUE = "0" *) 
  (* C_S3_AXI_ADDR_WIDTH = "32" *) 
  (* C_S3_AXI_DATA_WIDTH = "32" *) 
  (* C_S3_AXI_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S3_AXI_FORCE_READ_BUFFER = "0" *) 
  (* C_S3_AXI_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S3_AXI_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S3_AXI_GEN_ADDR_WIDTH = "32" *) 
  (* C_S3_AXI_GEN_DATA_WIDTH = "32" *) 
  (* C_S3_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S3_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
  (* C_S3_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S3_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S3_AXI_GEN_ID_WIDTH = "1" *) 
  (* C_S3_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S3_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S3_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S3_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S3_AXI_GEN_SUPPORT_DIRTY = "0" *) 
  (* C_S3_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
  (* C_S3_AXI_ID_WIDTH = "1" *) 
  (* C_S3_AXI_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S3_AXI_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S3_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S3_AXI_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S3_AXI_RRESP_WIDTH = "2" *) 
  (* C_S3_AXI_SUPPORT_DIRTY = "0" *) 
  (* C_S3_AXI_SUPPORT_UNIQUE = "0" *) 
  (* C_S4_AXI_ADDR_WIDTH = "32" *) 
  (* C_S4_AXI_DATA_WIDTH = "32" *) 
  (* C_S4_AXI_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S4_AXI_FORCE_READ_BUFFER = "0" *) 
  (* C_S4_AXI_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S4_AXI_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S4_AXI_GEN_ADDR_WIDTH = "32" *) 
  (* C_S4_AXI_GEN_DATA_WIDTH = "32" *) 
  (* C_S4_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S4_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
  (* C_S4_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S4_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S4_AXI_GEN_ID_WIDTH = "1" *) 
  (* C_S4_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S4_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S4_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S4_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S4_AXI_GEN_SUPPORT_DIRTY = "0" *) 
  (* C_S4_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
  (* C_S4_AXI_ID_WIDTH = "1" *) 
  (* C_S4_AXI_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S4_AXI_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S4_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S4_AXI_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S4_AXI_RRESP_WIDTH = "2" *) 
  (* C_S4_AXI_SUPPORT_DIRTY = "0" *) 
  (* C_S4_AXI_SUPPORT_UNIQUE = "0" *) 
  (* C_S5_AXI_ADDR_WIDTH = "32" *) 
  (* C_S5_AXI_DATA_WIDTH = "32" *) 
  (* C_S5_AXI_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S5_AXI_FORCE_READ_BUFFER = "0" *) 
  (* C_S5_AXI_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S5_AXI_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S5_AXI_GEN_ADDR_WIDTH = "32" *) 
  (* C_S5_AXI_GEN_DATA_WIDTH = "32" *) 
  (* C_S5_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S5_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
  (* C_S5_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S5_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S5_AXI_GEN_ID_WIDTH = "1" *) 
  (* C_S5_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S5_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S5_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S5_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S5_AXI_GEN_SUPPORT_DIRTY = "0" *) 
  (* C_S5_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
  (* C_S5_AXI_ID_WIDTH = "1" *) 
  (* C_S5_AXI_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S5_AXI_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S5_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S5_AXI_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S5_AXI_RRESP_WIDTH = "2" *) 
  (* C_S5_AXI_SUPPORT_DIRTY = "0" *) 
  (* C_S5_AXI_SUPPORT_UNIQUE = "0" *) 
  (* C_S6_AXI_ADDR_WIDTH = "32" *) 
  (* C_S6_AXI_DATA_WIDTH = "32" *) 
  (* C_S6_AXI_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S6_AXI_FORCE_READ_BUFFER = "0" *) 
  (* C_S6_AXI_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S6_AXI_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S6_AXI_GEN_ADDR_WIDTH = "32" *) 
  (* C_S6_AXI_GEN_DATA_WIDTH = "32" *) 
  (* C_S6_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S6_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
  (* C_S6_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S6_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S6_AXI_GEN_ID_WIDTH = "1" *) 
  (* C_S6_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S6_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S6_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S6_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S6_AXI_GEN_SUPPORT_DIRTY = "0" *) 
  (* C_S6_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
  (* C_S6_AXI_ID_WIDTH = "1" *) 
  (* C_S6_AXI_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S6_AXI_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S6_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S6_AXI_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S6_AXI_RRESP_WIDTH = "2" *) 
  (* C_S6_AXI_SUPPORT_DIRTY = "0" *) 
  (* C_S6_AXI_SUPPORT_UNIQUE = "0" *) 
  (* C_S7_AXI_ADDR_WIDTH = "32" *) 
  (* C_S7_AXI_DATA_WIDTH = "32" *) 
  (* C_S7_AXI_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S7_AXI_FORCE_READ_BUFFER = "0" *) 
  (* C_S7_AXI_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S7_AXI_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S7_AXI_GEN_ADDR_WIDTH = "32" *) 
  (* C_S7_AXI_GEN_DATA_WIDTH = "32" *) 
  (* C_S7_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S7_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
  (* C_S7_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S7_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S7_AXI_GEN_ID_WIDTH = "1" *) 
  (* C_S7_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S7_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S7_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S7_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S7_AXI_GEN_SUPPORT_DIRTY = "0" *) 
  (* C_S7_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
  (* C_S7_AXI_ID_WIDTH = "1" *) 
  (* C_S7_AXI_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S7_AXI_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S7_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S7_AXI_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S7_AXI_RRESP_WIDTH = "2" *) 
  (* C_S7_AXI_SUPPORT_DIRTY = "0" *) 
  (* C_S7_AXI_SUPPORT_UNIQUE = "0" *) 
  (* C_S8_AXI_ADDR_WIDTH = "32" *) 
  (* C_S8_AXI_DATA_WIDTH = "32" *) 
  (* C_S8_AXI_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S8_AXI_FORCE_READ_BUFFER = "0" *) 
  (* C_S8_AXI_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S8_AXI_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S8_AXI_GEN_ADDR_WIDTH = "32" *) 
  (* C_S8_AXI_GEN_DATA_WIDTH = "32" *) 
  (* C_S8_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S8_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
  (* C_S8_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S8_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S8_AXI_GEN_ID_WIDTH = "1" *) 
  (* C_S8_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S8_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S8_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S8_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S8_AXI_GEN_SUPPORT_DIRTY = "0" *) 
  (* C_S8_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
  (* C_S8_AXI_ID_WIDTH = "1" *) 
  (* C_S8_AXI_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S8_AXI_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S8_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S8_AXI_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S8_AXI_RRESP_WIDTH = "2" *) 
  (* C_S8_AXI_SUPPORT_DIRTY = "0" *) 
  (* C_S8_AXI_SUPPORT_UNIQUE = "0" *) 
  (* C_S9_AXI_ADDR_WIDTH = "32" *) 
  (* C_S9_AXI_DATA_WIDTH = "32" *) 
  (* C_S9_AXI_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S9_AXI_FORCE_READ_BUFFER = "0" *) 
  (* C_S9_AXI_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S9_AXI_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S9_AXI_GEN_ADDR_WIDTH = "32" *) 
  (* C_S9_AXI_GEN_DATA_WIDTH = "32" *) 
  (* C_S9_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) 
  (* C_S9_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
  (* C_S9_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) 
  (* C_S9_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) 
  (* C_S9_AXI_GEN_ID_WIDTH = "1" *) 
  (* C_S9_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S9_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S9_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S9_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S9_AXI_GEN_SUPPORT_DIRTY = "0" *) 
  (* C_S9_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
  (* C_S9_AXI_ID_WIDTH = "1" *) 
  (* C_S9_AXI_PROHIBIT_READ_ALLOCATE = "0" *) 
  (* C_S9_AXI_PROHIBIT_READ_BUFFER = "0" *) 
  (* C_S9_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) 
  (* C_S9_AXI_PROHIBIT_WRITE_BUFFER = "0" *) 
  (* C_S9_AXI_RRESP_WIDTH = "2" *) 
  (* C_S9_AXI_SUPPORT_DIRTY = "0" *) 
  (* C_S9_AXI_SUPPORT_UNIQUE = "0" *) 
  (* C_SNOOP_KEEP_CLEAN_SHARED = "0" *) 
  (* C_SNOOP_KEEP_READ_CLEAN = "0" *) 
  (* C_SNOOP_KEEP_READ_NSD = "0" *) 
  (* C_SNOOP_KEEP_READ_SHARED = "0" *) 
  (* C_SUPPORT_SNOOP_FILTER = "0" *) 
  (* C_S_AXI_CTRL_ADDR_WIDTH = "17" *) 
  (* C_S_AXI_CTRL_DATA_WIDTH = "32" *) 
  design_1_system_cache_0_0_system_cache U0
       (.ACLK(ACLK),
        .ARESETN(ARESETN),
        .M0_AXI_ACADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .M0_AXI_ACPROT({1'b0,1'b0,1'b0}),
        .M0_AXI_ACREADY(NLW_U0_M0_AXI_ACREADY_UNCONNECTED),
        .M0_AXI_ACSNOOP({1'b0,1'b0,1'b0,1'b0}),
        .M0_AXI_ACVALID(1'b0),
        .M0_AXI_ARADDR(M0_AXI_ARADDR),
        .M0_AXI_ARBAR(NLW_U0_M0_AXI_ARBAR_UNCONNECTED[1:0]),
        .M0_AXI_ARBURST(M0_AXI_ARBURST),
        .M0_AXI_ARCACHE(M0_AXI_ARCACHE),
        .M0_AXI_ARDOMAIN(NLW_U0_M0_AXI_ARDOMAIN_UNCONNECTED[1:0]),
        .M0_AXI_ARID(M0_AXI_ARID),
        .M0_AXI_ARLEN(M0_AXI_ARLEN),
        .M0_AXI_ARLOCK(M0_AXI_ARLOCK),
        .M0_AXI_ARPROT(M0_AXI_ARPROT),
        .M0_AXI_ARQOS(M0_AXI_ARQOS),
        .M0_AXI_ARREADY(M0_AXI_ARREADY),
        .M0_AXI_ARSIZE(M0_AXI_ARSIZE),
        .M0_AXI_ARSNOOP(NLW_U0_M0_AXI_ARSNOOP_UNCONNECTED[3:0]),
        .M0_AXI_ARVALID(M0_AXI_ARVALID),
        .M0_AXI_AWADDR(M0_AXI_AWADDR),
        .M0_AXI_AWBAR(NLW_U0_M0_AXI_AWBAR_UNCONNECTED[1:0]),
        .M0_AXI_AWBURST(M0_AXI_AWBURST),
        .M0_AXI_AWCACHE(M0_AXI_AWCACHE),
        .M0_AXI_AWDOMAIN(NLW_U0_M0_AXI_AWDOMAIN_UNCONNECTED[1:0]),
        .M0_AXI_AWID(M0_AXI_AWID),
        .M0_AXI_AWLEN(M0_AXI_AWLEN),
        .M0_AXI_AWLOCK(M0_AXI_AWLOCK),
        .M0_AXI_AWPROT(M0_AXI_AWPROT),
        .M0_AXI_AWQOS(M0_AXI_AWQOS),
        .M0_AXI_AWREADY(M0_AXI_AWREADY),
        .M0_AXI_AWSIZE(M0_AXI_AWSIZE),
        .M0_AXI_AWSNOOP(NLW_U0_M0_AXI_AWSNOOP_UNCONNECTED[2:0]),
        .M0_AXI_AWVALID(M0_AXI_AWVALID),
        .M0_AXI_BID(M0_AXI_BID),
        .M0_AXI_BREADY(M0_AXI_BREADY),
        .M0_AXI_BRESP(M0_AXI_BRESP),
        .M0_AXI_BVALID(M0_AXI_BVALID),
        .M0_AXI_CDDATA(NLW_U0_M0_AXI_CDDATA_UNCONNECTED[31:0]),
        .M0_AXI_CDLAST(NLW_U0_M0_AXI_CDLAST_UNCONNECTED),
        .M0_AXI_CDREADY(1'b0),
        .M0_AXI_CDVALID(NLW_U0_M0_AXI_CDVALID_UNCONNECTED),
        .M0_AXI_CRREADY(1'b0),
        .M0_AXI_CRRESP(NLW_U0_M0_AXI_CRRESP_UNCONNECTED[4:0]),
        .M0_AXI_CRVALID(NLW_U0_M0_AXI_CRVALID_UNCONNECTED),
        .M0_AXI_RACK(NLW_U0_M0_AXI_RACK_UNCONNECTED),
        .M0_AXI_RDATA(M0_AXI_RDATA),
        .M0_AXI_RID(M0_AXI_RID),
        .M0_AXI_RLAST(M0_AXI_RLAST),
        .M0_AXI_RREADY(M0_AXI_RREADY),
        .M0_AXI_RRESP(M0_AXI_RRESP),
        .M0_AXI_RVALID(M0_AXI_RVALID),
        .M0_AXI_WACK(NLW_U0_M0_AXI_WACK_UNCONNECTED),
        .M0_AXI_WDATA(M0_AXI_WDATA),
        .M0_AXI_WLAST(M0_AXI_WLAST),
        .M0_AXI_WREADY(M0_AXI_WREADY),
        .M0_AXI_WSTRB(M0_AXI_WSTRB),
        .M0_AXI_WVALID(M0_AXI_WVALID),
        .M1_AXI_ARADDR(NLW_U0_M1_AXI_ARADDR_UNCONNECTED[31:0]),
        .M1_AXI_ARBURST(NLW_U0_M1_AXI_ARBURST_UNCONNECTED[1:0]),
        .M1_AXI_ARCACHE(NLW_U0_M1_AXI_ARCACHE_UNCONNECTED[3:0]),
        .M1_AXI_ARID(NLW_U0_M1_AXI_ARID_UNCONNECTED[0]),
        .M1_AXI_ARLEN(NLW_U0_M1_AXI_ARLEN_UNCONNECTED[7:0]),
        .M1_AXI_ARLOCK(NLW_U0_M1_AXI_ARLOCK_UNCONNECTED),
        .M1_AXI_ARPROT(NLW_U0_M1_AXI_ARPROT_UNCONNECTED[2:0]),
        .M1_AXI_ARQOS(NLW_U0_M1_AXI_ARQOS_UNCONNECTED[3:0]),
        .M1_AXI_ARREADY(1'b0),
        .M1_AXI_ARSIZE(NLW_U0_M1_AXI_ARSIZE_UNCONNECTED[2:0]),
        .M1_AXI_ARVALID(NLW_U0_M1_AXI_ARVALID_UNCONNECTED),
        .M1_AXI_AWADDR(NLW_U0_M1_AXI_AWADDR_UNCONNECTED[31:0]),
        .M1_AXI_AWBURST(NLW_U0_M1_AXI_AWBURST_UNCONNECTED[1:0]),
        .M1_AXI_AWCACHE(NLW_U0_M1_AXI_AWCACHE_UNCONNECTED[3:0]),
        .M1_AXI_AWID(NLW_U0_M1_AXI_AWID_UNCONNECTED[0]),
        .M1_AXI_AWLEN(NLW_U0_M1_AXI_AWLEN_UNCONNECTED[7:0]),
        .M1_AXI_AWLOCK(NLW_U0_M1_AXI_AWLOCK_UNCONNECTED),
        .M1_AXI_AWPROT(NLW_U0_M1_AXI_AWPROT_UNCONNECTED[2:0]),
        .M1_AXI_AWQOS(NLW_U0_M1_AXI_AWQOS_UNCONNECTED[3:0]),
        .M1_AXI_AWREADY(1'b0),
        .M1_AXI_AWSIZE(NLW_U0_M1_AXI_AWSIZE_UNCONNECTED[2:0]),
        .M1_AXI_AWVALID(NLW_U0_M1_AXI_AWVALID_UNCONNECTED),
        .M1_AXI_BID(1'b0),
        .M1_AXI_BREADY(NLW_U0_M1_AXI_BREADY_UNCONNECTED),
        .M1_AXI_BRESP({1'b0,1'b0}),
        .M1_AXI_BVALID(1'b0),
        .M1_AXI_RDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .M1_AXI_RID(1'b0),
        .M1_AXI_RLAST(1'b0),
        .M1_AXI_RREADY(NLW_U0_M1_AXI_RREADY_UNCONNECTED),
        .M1_AXI_RRESP({1'b0,1'b0}),
        .M1_AXI_RVALID(1'b0),
        .M1_AXI_WDATA(NLW_U0_M1_AXI_WDATA_UNCONNECTED[31:0]),
        .M1_AXI_WLAST(NLW_U0_M1_AXI_WLAST_UNCONNECTED),
        .M1_AXI_WREADY(1'b0),
        .M1_AXI_WSTRB(NLW_U0_M1_AXI_WSTRB_UNCONNECTED[3:0]),
        .M1_AXI_WVALID(NLW_U0_M1_AXI_WVALID_UNCONNECTED),
        .M2_AXI_ARADDR(NLW_U0_M2_AXI_ARADDR_UNCONNECTED[31:0]),
        .M2_AXI_ARBURST(NLW_U0_M2_AXI_ARBURST_UNCONNECTED[1:0]),
        .M2_AXI_ARCACHE(NLW_U0_M2_AXI_ARCACHE_UNCONNECTED[3:0]),
        .M2_AXI_ARID(NLW_U0_M2_AXI_ARID_UNCONNECTED[0]),
        .M2_AXI_ARLEN(NLW_U0_M2_AXI_ARLEN_UNCONNECTED[7:0]),
        .M2_AXI_ARLOCK(NLW_U0_M2_AXI_ARLOCK_UNCONNECTED),
        .M2_AXI_ARPROT(NLW_U0_M2_AXI_ARPROT_UNCONNECTED[2:0]),
        .M2_AXI_ARQOS(NLW_U0_M2_AXI_ARQOS_UNCONNECTED[3:0]),
        .M2_AXI_ARREADY(1'b0),
        .M2_AXI_ARSIZE(NLW_U0_M2_AXI_ARSIZE_UNCONNECTED[2:0]),
        .M2_AXI_ARVALID(NLW_U0_M2_AXI_ARVALID_UNCONNECTED),
        .M2_AXI_AWADDR(NLW_U0_M2_AXI_AWADDR_UNCONNECTED[31:0]),
        .M2_AXI_AWBURST(NLW_U0_M2_AXI_AWBURST_UNCONNECTED[1:0]),
        .M2_AXI_AWCACHE(NLW_U0_M2_AXI_AWCACHE_UNCONNECTED[3:0]),
        .M2_AXI_AWID(NLW_U0_M2_AXI_AWID_UNCONNECTED[0]),
        .M2_AXI_AWLEN(NLW_U0_M2_AXI_AWLEN_UNCONNECTED[7:0]),
        .M2_AXI_AWLOCK(NLW_U0_M2_AXI_AWLOCK_UNCONNECTED),
        .M2_AXI_AWPROT(NLW_U0_M2_AXI_AWPROT_UNCONNECTED[2:0]),
        .M2_AXI_AWQOS(NLW_U0_M2_AXI_AWQOS_UNCONNECTED[3:0]),
        .M2_AXI_AWREADY(1'b0),
        .M2_AXI_AWSIZE(NLW_U0_M2_AXI_AWSIZE_UNCONNECTED[2:0]),
        .M2_AXI_AWVALID(NLW_U0_M2_AXI_AWVALID_UNCONNECTED),
        .M2_AXI_BID(1'b0),
        .M2_AXI_BREADY(NLW_U0_M2_AXI_BREADY_UNCONNECTED),
        .M2_AXI_BRESP({1'b0,1'b0}),
        .M2_AXI_BVALID(1'b0),
        .M2_AXI_RDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .M2_AXI_RID(1'b0),
        .M2_AXI_RLAST(1'b0),
        .M2_AXI_RREADY(NLW_U0_M2_AXI_RREADY_UNCONNECTED),
        .M2_AXI_RRESP({1'b0,1'b0}),
        .M2_AXI_RVALID(1'b0),
        .M2_AXI_WDATA(NLW_U0_M2_AXI_WDATA_UNCONNECTED[31:0]),
        .M2_AXI_WLAST(NLW_U0_M2_AXI_WLAST_UNCONNECTED),
        .M2_AXI_WREADY(1'b0),
        .M2_AXI_WSTRB(NLW_U0_M2_AXI_WSTRB_UNCONNECTED[3:0]),
        .M2_AXI_WVALID(NLW_U0_M2_AXI_WVALID_UNCONNECTED),
        .M3_AXI_ARADDR(NLW_U0_M3_AXI_ARADDR_UNCONNECTED[31:0]),
        .M3_AXI_ARBURST(NLW_U0_M3_AXI_ARBURST_UNCONNECTED[1:0]),
        .M3_AXI_ARCACHE(NLW_U0_M3_AXI_ARCACHE_UNCONNECTED[3:0]),
        .M3_AXI_ARID(NLW_U0_M3_AXI_ARID_UNCONNECTED[0]),
        .M3_AXI_ARLEN(NLW_U0_M3_AXI_ARLEN_UNCONNECTED[7:0]),
        .M3_AXI_ARLOCK(NLW_U0_M3_AXI_ARLOCK_UNCONNECTED),
        .M3_AXI_ARPROT(NLW_U0_M3_AXI_ARPROT_UNCONNECTED[2:0]),
        .M3_AXI_ARQOS(NLW_U0_M3_AXI_ARQOS_UNCONNECTED[3:0]),
        .M3_AXI_ARREADY(1'b0),
        .M3_AXI_ARSIZE(NLW_U0_M3_AXI_ARSIZE_UNCONNECTED[2:0]),
        .M3_AXI_ARVALID(NLW_U0_M3_AXI_ARVALID_UNCONNECTED),
        .M3_AXI_AWADDR(NLW_U0_M3_AXI_AWADDR_UNCONNECTED[31:0]),
        .M3_AXI_AWBURST(NLW_U0_M3_AXI_AWBURST_UNCONNECTED[1:0]),
        .M3_AXI_AWCACHE(NLW_U0_M3_AXI_AWCACHE_UNCONNECTED[3:0]),
        .M3_AXI_AWID(NLW_U0_M3_AXI_AWID_UNCONNECTED[0]),
        .M3_AXI_AWLEN(NLW_U0_M3_AXI_AWLEN_UNCONNECTED[7:0]),
        .M3_AXI_AWLOCK(NLW_U0_M3_AXI_AWLOCK_UNCONNECTED),
        .M3_AXI_AWPROT(NLW_U0_M3_AXI_AWPROT_UNCONNECTED[2:0]),
        .M3_AXI_AWQOS(NLW_U0_M3_AXI_AWQOS_UNCONNECTED[3:0]),
        .M3_AXI_AWREADY(1'b0),
        .M3_AXI_AWSIZE(NLW_U0_M3_AXI_AWSIZE_UNCONNECTED[2:0]),
        .M3_AXI_AWVALID(NLW_U0_M3_AXI_AWVALID_UNCONNECTED),
        .M3_AXI_BID(1'b0),
        .M3_AXI_BREADY(NLW_U0_M3_AXI_BREADY_UNCONNECTED),
        .M3_AXI_BRESP({1'b0,1'b0}),
        .M3_AXI_BVALID(1'b0),
        .M3_AXI_RDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .M3_AXI_RID(1'b0),
        .M3_AXI_RLAST(1'b0),
        .M3_AXI_RREADY(NLW_U0_M3_AXI_RREADY_UNCONNECTED),
        .M3_AXI_RRESP({1'b0,1'b0}),
        .M3_AXI_RVALID(1'b0),
        .M3_AXI_WDATA(NLW_U0_M3_AXI_WDATA_UNCONNECTED[31:0]),
        .M3_AXI_WLAST(NLW_U0_M3_AXI_WLAST_UNCONNECTED),
        .M3_AXI_WREADY(1'b0),
        .M3_AXI_WSTRB(NLW_U0_M3_AXI_WSTRB_UNCONNECTED[3:0]),
        .M3_AXI_WVALID(NLW_U0_M3_AXI_WVALID_UNCONNECTED),
        .S0_AXI_ACADDR(NLW_U0_S0_AXI_ACADDR_UNCONNECTED[31:0]),
        .S0_AXI_ACPROT(NLW_U0_S0_AXI_ACPROT_UNCONNECTED[2:0]),
        .S0_AXI_ACREADY(1'b0),
        .S0_AXI_ACSNOOP(NLW_U0_S0_AXI_ACSNOOP_UNCONNECTED[3:0]),
        .S0_AXI_ACVALID(NLW_U0_S0_AXI_ACVALID_UNCONNECTED),
        .S0_AXI_ARADDR(S0_AXI_ARADDR),
        .S0_AXI_ARBAR({1'b0,1'b0}),
        .S0_AXI_ARBURST(S0_AXI_ARBURST),
        .S0_AXI_ARCACHE(S0_AXI_ARCACHE),
        .S0_AXI_ARDOMAIN({1'b0,1'b0}),
        .S0_AXI_ARID(S0_AXI_ARID),
        .S0_AXI_ARLEN(S0_AXI_ARLEN),
        .S0_AXI_ARLOCK(S0_AXI_ARLOCK),
        .S0_AXI_ARPROT(S0_AXI_ARPROT),
        .S0_AXI_ARQOS(S0_AXI_ARQOS),
        .S0_AXI_ARREADY(S0_AXI_ARREADY),
        .S0_AXI_ARSIZE(S0_AXI_ARSIZE),
        .S0_AXI_ARSNOOP({1'b0,1'b0,1'b0,1'b0}),
        .S0_AXI_ARVALID(S0_AXI_ARVALID),
        .S0_AXI_AWADDR(S0_AXI_AWADDR),
        .S0_AXI_AWBAR({1'b0,1'b0}),
        .S0_AXI_AWBURST(S0_AXI_AWBURST),
        .S0_AXI_AWCACHE(S0_AXI_AWCACHE),
        .S0_AXI_AWDOMAIN({1'b0,1'b0}),
        .S0_AXI_AWID(S0_AXI_AWID),
        .S0_AXI_AWLEN(S0_AXI_AWLEN),
        .S0_AXI_AWLOCK(S0_AXI_AWLOCK),
        .S0_AXI_AWPROT(S0_AXI_AWPROT),
        .S0_AXI_AWQOS(S0_AXI_AWQOS),
        .S0_AXI_AWREADY(S0_AXI_AWREADY),
        .S0_AXI_AWSIZE(S0_AXI_AWSIZE),
        .S0_AXI_AWSNOOP({1'b0,1'b0,1'b0}),
        .S0_AXI_AWVALID(S0_AXI_AWVALID),
        .S0_AXI_BID(S0_AXI_BID),
        .S0_AXI_BREADY(S0_AXI_BREADY),
        .S0_AXI_BRESP(S0_AXI_BRESP),
        .S0_AXI_BVALID(S0_AXI_BVALID),
        .S0_AXI_CDDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S0_AXI_CDLAST(1'b0),
        .S0_AXI_CDREADY(NLW_U0_S0_AXI_CDREADY_UNCONNECTED),
        .S0_AXI_CDVALID(1'b0),
        .S0_AXI_CRREADY(NLW_U0_S0_AXI_CRREADY_UNCONNECTED),
        .S0_AXI_CRRESP({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S0_AXI_CRVALID(1'b0),
        .S0_AXI_GEN_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S0_AXI_GEN_ARBURST({1'b0,1'b0}),
        .S0_AXI_GEN_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S0_AXI_GEN_ARID(1'b0),
        .S0_AXI_GEN_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S0_AXI_GEN_ARLOCK(1'b0),
        .S0_AXI_GEN_ARPROT({1'b0,1'b0,1'b0}),
        .S0_AXI_GEN_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S0_AXI_GEN_ARREADY(NLW_U0_S0_AXI_GEN_ARREADY_UNCONNECTED),
        .S0_AXI_GEN_ARSIZE({1'b0,1'b0,1'b0}),
        .S0_AXI_GEN_ARVALID(1'b0),
        .S0_AXI_GEN_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S0_AXI_GEN_AWBURST({1'b0,1'b0}),
        .S0_AXI_GEN_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S0_AXI_GEN_AWID(1'b0),
        .S0_AXI_GEN_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S0_AXI_GEN_AWLOCK(1'b0),
        .S0_AXI_GEN_AWPROT({1'b0,1'b0,1'b0}),
        .S0_AXI_GEN_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S0_AXI_GEN_AWREADY(NLW_U0_S0_AXI_GEN_AWREADY_UNCONNECTED),
        .S0_AXI_GEN_AWSIZE({1'b0,1'b0,1'b0}),
        .S0_AXI_GEN_AWVALID(1'b0),
        .S0_AXI_GEN_BID(NLW_U0_S0_AXI_GEN_BID_UNCONNECTED[0]),
        .S0_AXI_GEN_BREADY(1'b0),
        .S0_AXI_GEN_BRESP(NLW_U0_S0_AXI_GEN_BRESP_UNCONNECTED[1:0]),
        .S0_AXI_GEN_BVALID(NLW_U0_S0_AXI_GEN_BVALID_UNCONNECTED),
        .S0_AXI_GEN_RDATA(NLW_U0_S0_AXI_GEN_RDATA_UNCONNECTED[31:0]),
        .S0_AXI_GEN_RID(NLW_U0_S0_AXI_GEN_RID_UNCONNECTED[0]),
        .S0_AXI_GEN_RLAST(NLW_U0_S0_AXI_GEN_RLAST_UNCONNECTED),
        .S0_AXI_GEN_RREADY(1'b0),
        .S0_AXI_GEN_RRESP(NLW_U0_S0_AXI_GEN_RRESP_UNCONNECTED[1:0]),
        .S0_AXI_GEN_RVALID(NLW_U0_S0_AXI_GEN_RVALID_UNCONNECTED),
        .S0_AXI_GEN_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S0_AXI_GEN_WLAST(1'b0),
        .S0_AXI_GEN_WREADY(NLW_U0_S0_AXI_GEN_WREADY_UNCONNECTED),
        .S0_AXI_GEN_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S0_AXI_GEN_WVALID(1'b0),
        .S0_AXI_RACK(1'b0),
        .S0_AXI_RDATA(S0_AXI_RDATA),
        .S0_AXI_RID(S0_AXI_RID),
        .S0_AXI_RLAST(S0_AXI_RLAST),
        .S0_AXI_RREADY(S0_AXI_RREADY),
        .S0_AXI_RRESP(S0_AXI_RRESP),
        .S0_AXI_RVALID(S0_AXI_RVALID),
        .S0_AXI_WACK(1'b0),
        .S0_AXI_WDATA(S0_AXI_WDATA),
        .S0_AXI_WLAST(S0_AXI_WLAST),
        .S0_AXI_WREADY(S0_AXI_WREADY),
        .S0_AXI_WSTRB(S0_AXI_WSTRB),
        .S0_AXI_WVALID(S0_AXI_WVALID),
        .S10_AXI_ACADDR(NLW_U0_S10_AXI_ACADDR_UNCONNECTED[31:0]),
        .S10_AXI_ACPROT(NLW_U0_S10_AXI_ACPROT_UNCONNECTED[2:0]),
        .S10_AXI_ACREADY(1'b0),
        .S10_AXI_ACSNOOP(NLW_U0_S10_AXI_ACSNOOP_UNCONNECTED[3:0]),
        .S10_AXI_ACVALID(NLW_U0_S10_AXI_ACVALID_UNCONNECTED),
        .S10_AXI_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S10_AXI_ARBAR({1'b0,1'b0}),
        .S10_AXI_ARBURST({1'b0,1'b0}),
        .S10_AXI_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S10_AXI_ARDOMAIN({1'b0,1'b0}),
        .S10_AXI_ARID(1'b0),
        .S10_AXI_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S10_AXI_ARLOCK(1'b0),
        .S10_AXI_ARPROT({1'b0,1'b0,1'b0}),
        .S10_AXI_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S10_AXI_ARREADY(NLW_U0_S10_AXI_ARREADY_UNCONNECTED),
        .S10_AXI_ARSIZE({1'b0,1'b0,1'b0}),
        .S10_AXI_ARSNOOP({1'b0,1'b0,1'b0,1'b0}),
        .S10_AXI_ARVALID(1'b0),
        .S10_AXI_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S10_AXI_AWBAR({1'b0,1'b0}),
        .S10_AXI_AWBURST({1'b0,1'b0}),
        .S10_AXI_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S10_AXI_AWDOMAIN({1'b0,1'b0}),
        .S10_AXI_AWID(1'b0),
        .S10_AXI_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S10_AXI_AWLOCK(1'b0),
        .S10_AXI_AWPROT({1'b0,1'b0,1'b0}),
        .S10_AXI_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S10_AXI_AWREADY(NLW_U0_S10_AXI_AWREADY_UNCONNECTED),
        .S10_AXI_AWSIZE({1'b0,1'b0,1'b0}),
        .S10_AXI_AWSNOOP({1'b0,1'b0,1'b0}),
        .S10_AXI_AWVALID(1'b0),
        .S10_AXI_BID(NLW_U0_S10_AXI_BID_UNCONNECTED[0]),
        .S10_AXI_BREADY(1'b0),
        .S10_AXI_BRESP(NLW_U0_S10_AXI_BRESP_UNCONNECTED[1:0]),
        .S10_AXI_BVALID(NLW_U0_S10_AXI_BVALID_UNCONNECTED),
        .S10_AXI_CDDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S10_AXI_CDLAST(1'b0),
        .S10_AXI_CDREADY(NLW_U0_S10_AXI_CDREADY_UNCONNECTED),
        .S10_AXI_CDVALID(1'b0),
        .S10_AXI_CRREADY(NLW_U0_S10_AXI_CRREADY_UNCONNECTED),
        .S10_AXI_CRRESP({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S10_AXI_CRVALID(1'b0),
        .S10_AXI_GEN_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S10_AXI_GEN_ARBURST({1'b0,1'b0}),
        .S10_AXI_GEN_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S10_AXI_GEN_ARID(1'b0),
        .S10_AXI_GEN_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S10_AXI_GEN_ARLOCK(1'b0),
        .S10_AXI_GEN_ARPROT({1'b0,1'b0,1'b0}),
        .S10_AXI_GEN_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S10_AXI_GEN_ARREADY(NLW_U0_S10_AXI_GEN_ARREADY_UNCONNECTED),
        .S10_AXI_GEN_ARSIZE({1'b0,1'b0,1'b0}),
        .S10_AXI_GEN_ARVALID(1'b0),
        .S10_AXI_GEN_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S10_AXI_GEN_AWBURST({1'b0,1'b0}),
        .S10_AXI_GEN_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S10_AXI_GEN_AWID(1'b0),
        .S10_AXI_GEN_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S10_AXI_GEN_AWLOCK(1'b0),
        .S10_AXI_GEN_AWPROT({1'b0,1'b0,1'b0}),
        .S10_AXI_GEN_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S10_AXI_GEN_AWREADY(NLW_U0_S10_AXI_GEN_AWREADY_UNCONNECTED),
        .S10_AXI_GEN_AWSIZE({1'b0,1'b0,1'b0}),
        .S10_AXI_GEN_AWVALID(1'b0),
        .S10_AXI_GEN_BID(NLW_U0_S10_AXI_GEN_BID_UNCONNECTED[0]),
        .S10_AXI_GEN_BREADY(1'b0),
        .S10_AXI_GEN_BRESP(NLW_U0_S10_AXI_GEN_BRESP_UNCONNECTED[1:0]),
        .S10_AXI_GEN_BVALID(NLW_U0_S10_AXI_GEN_BVALID_UNCONNECTED),
        .S10_AXI_GEN_RDATA(NLW_U0_S10_AXI_GEN_RDATA_UNCONNECTED[31:0]),
        .S10_AXI_GEN_RID(NLW_U0_S10_AXI_GEN_RID_UNCONNECTED[0]),
        .S10_AXI_GEN_RLAST(NLW_U0_S10_AXI_GEN_RLAST_UNCONNECTED),
        .S10_AXI_GEN_RREADY(1'b0),
        .S10_AXI_GEN_RRESP(NLW_U0_S10_AXI_GEN_RRESP_UNCONNECTED[1:0]),
        .S10_AXI_GEN_RVALID(NLW_U0_S10_AXI_GEN_RVALID_UNCONNECTED),
        .S10_AXI_GEN_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S10_AXI_GEN_WLAST(1'b0),
        .S10_AXI_GEN_WREADY(NLW_U0_S10_AXI_GEN_WREADY_UNCONNECTED),
        .S10_AXI_GEN_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S10_AXI_GEN_WVALID(1'b0),
        .S10_AXI_RACK(1'b0),
        .S10_AXI_RDATA(NLW_U0_S10_AXI_RDATA_UNCONNECTED[31:0]),
        .S10_AXI_RID(NLW_U0_S10_AXI_RID_UNCONNECTED[0]),
        .S10_AXI_RLAST(NLW_U0_S10_AXI_RLAST_UNCONNECTED),
        .S10_AXI_RREADY(1'b0),
        .S10_AXI_RRESP(NLW_U0_S10_AXI_RRESP_UNCONNECTED[1:0]),
        .S10_AXI_RVALID(NLW_U0_S10_AXI_RVALID_UNCONNECTED),
        .S10_AXI_WACK(1'b0),
        .S10_AXI_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S10_AXI_WLAST(1'b0),
        .S10_AXI_WREADY(NLW_U0_S10_AXI_WREADY_UNCONNECTED),
        .S10_AXI_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S10_AXI_WVALID(1'b0),
        .S11_AXI_ACADDR(NLW_U0_S11_AXI_ACADDR_UNCONNECTED[31:0]),
        .S11_AXI_ACPROT(NLW_U0_S11_AXI_ACPROT_UNCONNECTED[2:0]),
        .S11_AXI_ACREADY(1'b0),
        .S11_AXI_ACSNOOP(NLW_U0_S11_AXI_ACSNOOP_UNCONNECTED[3:0]),
        .S11_AXI_ACVALID(NLW_U0_S11_AXI_ACVALID_UNCONNECTED),
        .S11_AXI_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S11_AXI_ARBAR({1'b0,1'b0}),
        .S11_AXI_ARBURST({1'b0,1'b0}),
        .S11_AXI_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S11_AXI_ARDOMAIN({1'b0,1'b0}),
        .S11_AXI_ARID(1'b0),
        .S11_AXI_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S11_AXI_ARLOCK(1'b0),
        .S11_AXI_ARPROT({1'b0,1'b0,1'b0}),
        .S11_AXI_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S11_AXI_ARREADY(NLW_U0_S11_AXI_ARREADY_UNCONNECTED),
        .S11_AXI_ARSIZE({1'b0,1'b0,1'b0}),
        .S11_AXI_ARSNOOP({1'b0,1'b0,1'b0,1'b0}),
        .S11_AXI_ARVALID(1'b0),
        .S11_AXI_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S11_AXI_AWBAR({1'b0,1'b0}),
        .S11_AXI_AWBURST({1'b0,1'b0}),
        .S11_AXI_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S11_AXI_AWDOMAIN({1'b0,1'b0}),
        .S11_AXI_AWID(1'b0),
        .S11_AXI_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S11_AXI_AWLOCK(1'b0),
        .S11_AXI_AWPROT({1'b0,1'b0,1'b0}),
        .S11_AXI_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S11_AXI_AWREADY(NLW_U0_S11_AXI_AWREADY_UNCONNECTED),
        .S11_AXI_AWSIZE({1'b0,1'b0,1'b0}),
        .S11_AXI_AWSNOOP({1'b0,1'b0,1'b0}),
        .S11_AXI_AWVALID(1'b0),
        .S11_AXI_BID(NLW_U0_S11_AXI_BID_UNCONNECTED[0]),
        .S11_AXI_BREADY(1'b0),
        .S11_AXI_BRESP(NLW_U0_S11_AXI_BRESP_UNCONNECTED[1:0]),
        .S11_AXI_BVALID(NLW_U0_S11_AXI_BVALID_UNCONNECTED),
        .S11_AXI_CDDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S11_AXI_CDLAST(1'b0),
        .S11_AXI_CDREADY(NLW_U0_S11_AXI_CDREADY_UNCONNECTED),
        .S11_AXI_CDVALID(1'b0),
        .S11_AXI_CRREADY(NLW_U0_S11_AXI_CRREADY_UNCONNECTED),
        .S11_AXI_CRRESP({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S11_AXI_CRVALID(1'b0),
        .S11_AXI_GEN_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S11_AXI_GEN_ARBURST({1'b0,1'b0}),
        .S11_AXI_GEN_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S11_AXI_GEN_ARID(1'b0),
        .S11_AXI_GEN_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S11_AXI_GEN_ARLOCK(1'b0),
        .S11_AXI_GEN_ARPROT({1'b0,1'b0,1'b0}),
        .S11_AXI_GEN_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S11_AXI_GEN_ARREADY(NLW_U0_S11_AXI_GEN_ARREADY_UNCONNECTED),
        .S11_AXI_GEN_ARSIZE({1'b0,1'b0,1'b0}),
        .S11_AXI_GEN_ARVALID(1'b0),
        .S11_AXI_GEN_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S11_AXI_GEN_AWBURST({1'b0,1'b0}),
        .S11_AXI_GEN_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S11_AXI_GEN_AWID(1'b0),
        .S11_AXI_GEN_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S11_AXI_GEN_AWLOCK(1'b0),
        .S11_AXI_GEN_AWPROT({1'b0,1'b0,1'b0}),
        .S11_AXI_GEN_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S11_AXI_GEN_AWREADY(NLW_U0_S11_AXI_GEN_AWREADY_UNCONNECTED),
        .S11_AXI_GEN_AWSIZE({1'b0,1'b0,1'b0}),
        .S11_AXI_GEN_AWVALID(1'b0),
        .S11_AXI_GEN_BID(NLW_U0_S11_AXI_GEN_BID_UNCONNECTED[0]),
        .S11_AXI_GEN_BREADY(1'b0),
        .S11_AXI_GEN_BRESP(NLW_U0_S11_AXI_GEN_BRESP_UNCONNECTED[1:0]),
        .S11_AXI_GEN_BVALID(NLW_U0_S11_AXI_GEN_BVALID_UNCONNECTED),
        .S11_AXI_GEN_RDATA(NLW_U0_S11_AXI_GEN_RDATA_UNCONNECTED[31:0]),
        .S11_AXI_GEN_RID(NLW_U0_S11_AXI_GEN_RID_UNCONNECTED[0]),
        .S11_AXI_GEN_RLAST(NLW_U0_S11_AXI_GEN_RLAST_UNCONNECTED),
        .S11_AXI_GEN_RREADY(1'b0),
        .S11_AXI_GEN_RRESP(NLW_U0_S11_AXI_GEN_RRESP_UNCONNECTED[1:0]),
        .S11_AXI_GEN_RVALID(NLW_U0_S11_AXI_GEN_RVALID_UNCONNECTED),
        .S11_AXI_GEN_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S11_AXI_GEN_WLAST(1'b0),
        .S11_AXI_GEN_WREADY(NLW_U0_S11_AXI_GEN_WREADY_UNCONNECTED),
        .S11_AXI_GEN_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S11_AXI_GEN_WVALID(1'b0),
        .S11_AXI_RACK(1'b0),
        .S11_AXI_RDATA(NLW_U0_S11_AXI_RDATA_UNCONNECTED[31:0]),
        .S11_AXI_RID(NLW_U0_S11_AXI_RID_UNCONNECTED[0]),
        .S11_AXI_RLAST(NLW_U0_S11_AXI_RLAST_UNCONNECTED),
        .S11_AXI_RREADY(1'b0),
        .S11_AXI_RRESP(NLW_U0_S11_AXI_RRESP_UNCONNECTED[1:0]),
        .S11_AXI_RVALID(NLW_U0_S11_AXI_RVALID_UNCONNECTED),
        .S11_AXI_WACK(1'b0),
        .S11_AXI_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S11_AXI_WLAST(1'b0),
        .S11_AXI_WREADY(NLW_U0_S11_AXI_WREADY_UNCONNECTED),
        .S11_AXI_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S11_AXI_WVALID(1'b0),
        .S12_AXI_ACADDR(NLW_U0_S12_AXI_ACADDR_UNCONNECTED[31:0]),
        .S12_AXI_ACPROT(NLW_U0_S12_AXI_ACPROT_UNCONNECTED[2:0]),
        .S12_AXI_ACREADY(1'b0),
        .S12_AXI_ACSNOOP(NLW_U0_S12_AXI_ACSNOOP_UNCONNECTED[3:0]),
        .S12_AXI_ACVALID(NLW_U0_S12_AXI_ACVALID_UNCONNECTED),
        .S12_AXI_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S12_AXI_ARBAR({1'b0,1'b0}),
        .S12_AXI_ARBURST({1'b0,1'b0}),
        .S12_AXI_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S12_AXI_ARDOMAIN({1'b0,1'b0}),
        .S12_AXI_ARID(1'b0),
        .S12_AXI_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S12_AXI_ARLOCK(1'b0),
        .S12_AXI_ARPROT({1'b0,1'b0,1'b0}),
        .S12_AXI_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S12_AXI_ARREADY(NLW_U0_S12_AXI_ARREADY_UNCONNECTED),
        .S12_AXI_ARSIZE({1'b0,1'b0,1'b0}),
        .S12_AXI_ARSNOOP({1'b0,1'b0,1'b0,1'b0}),
        .S12_AXI_ARVALID(1'b0),
        .S12_AXI_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S12_AXI_AWBAR({1'b0,1'b0}),
        .S12_AXI_AWBURST({1'b0,1'b0}),
        .S12_AXI_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S12_AXI_AWDOMAIN({1'b0,1'b0}),
        .S12_AXI_AWID(1'b0),
        .S12_AXI_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S12_AXI_AWLOCK(1'b0),
        .S12_AXI_AWPROT({1'b0,1'b0,1'b0}),
        .S12_AXI_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S12_AXI_AWREADY(NLW_U0_S12_AXI_AWREADY_UNCONNECTED),
        .S12_AXI_AWSIZE({1'b0,1'b0,1'b0}),
        .S12_AXI_AWSNOOP({1'b0,1'b0,1'b0}),
        .S12_AXI_AWVALID(1'b0),
        .S12_AXI_BID(NLW_U0_S12_AXI_BID_UNCONNECTED[0]),
        .S12_AXI_BREADY(1'b0),
        .S12_AXI_BRESP(NLW_U0_S12_AXI_BRESP_UNCONNECTED[1:0]),
        .S12_AXI_BVALID(NLW_U0_S12_AXI_BVALID_UNCONNECTED),
        .S12_AXI_CDDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S12_AXI_CDLAST(1'b0),
        .S12_AXI_CDREADY(NLW_U0_S12_AXI_CDREADY_UNCONNECTED),
        .S12_AXI_CDVALID(1'b0),
        .S12_AXI_CRREADY(NLW_U0_S12_AXI_CRREADY_UNCONNECTED),
        .S12_AXI_CRRESP({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S12_AXI_CRVALID(1'b0),
        .S12_AXI_GEN_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S12_AXI_GEN_ARBURST({1'b0,1'b0}),
        .S12_AXI_GEN_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S12_AXI_GEN_ARID(1'b0),
        .S12_AXI_GEN_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S12_AXI_GEN_ARLOCK(1'b0),
        .S12_AXI_GEN_ARPROT({1'b0,1'b0,1'b0}),
        .S12_AXI_GEN_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S12_AXI_GEN_ARREADY(NLW_U0_S12_AXI_GEN_ARREADY_UNCONNECTED),
        .S12_AXI_GEN_ARSIZE({1'b0,1'b0,1'b0}),
        .S12_AXI_GEN_ARVALID(1'b0),
        .S12_AXI_GEN_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S12_AXI_GEN_AWBURST({1'b0,1'b0}),
        .S12_AXI_GEN_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S12_AXI_GEN_AWID(1'b0),
        .S12_AXI_GEN_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S12_AXI_GEN_AWLOCK(1'b0),
        .S12_AXI_GEN_AWPROT({1'b0,1'b0,1'b0}),
        .S12_AXI_GEN_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S12_AXI_GEN_AWREADY(NLW_U0_S12_AXI_GEN_AWREADY_UNCONNECTED),
        .S12_AXI_GEN_AWSIZE({1'b0,1'b0,1'b0}),
        .S12_AXI_GEN_AWVALID(1'b0),
        .S12_AXI_GEN_BID(NLW_U0_S12_AXI_GEN_BID_UNCONNECTED[0]),
        .S12_AXI_GEN_BREADY(1'b0),
        .S12_AXI_GEN_BRESP(NLW_U0_S12_AXI_GEN_BRESP_UNCONNECTED[1:0]),
        .S12_AXI_GEN_BVALID(NLW_U0_S12_AXI_GEN_BVALID_UNCONNECTED),
        .S12_AXI_GEN_RDATA(NLW_U0_S12_AXI_GEN_RDATA_UNCONNECTED[31:0]),
        .S12_AXI_GEN_RID(NLW_U0_S12_AXI_GEN_RID_UNCONNECTED[0]),
        .S12_AXI_GEN_RLAST(NLW_U0_S12_AXI_GEN_RLAST_UNCONNECTED),
        .S12_AXI_GEN_RREADY(1'b0),
        .S12_AXI_GEN_RRESP(NLW_U0_S12_AXI_GEN_RRESP_UNCONNECTED[1:0]),
        .S12_AXI_GEN_RVALID(NLW_U0_S12_AXI_GEN_RVALID_UNCONNECTED),
        .S12_AXI_GEN_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S12_AXI_GEN_WLAST(1'b0),
        .S12_AXI_GEN_WREADY(NLW_U0_S12_AXI_GEN_WREADY_UNCONNECTED),
        .S12_AXI_GEN_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S12_AXI_GEN_WVALID(1'b0),
        .S12_AXI_RACK(1'b0),
        .S12_AXI_RDATA(NLW_U0_S12_AXI_RDATA_UNCONNECTED[31:0]),
        .S12_AXI_RID(NLW_U0_S12_AXI_RID_UNCONNECTED[0]),
        .S12_AXI_RLAST(NLW_U0_S12_AXI_RLAST_UNCONNECTED),
        .S12_AXI_RREADY(1'b0),
        .S12_AXI_RRESP(NLW_U0_S12_AXI_RRESP_UNCONNECTED[1:0]),
        .S12_AXI_RVALID(NLW_U0_S12_AXI_RVALID_UNCONNECTED),
        .S12_AXI_WACK(1'b0),
        .S12_AXI_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S12_AXI_WLAST(1'b0),
        .S12_AXI_WREADY(NLW_U0_S12_AXI_WREADY_UNCONNECTED),
        .S12_AXI_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S12_AXI_WVALID(1'b0),
        .S13_AXI_ACADDR(NLW_U0_S13_AXI_ACADDR_UNCONNECTED[31:0]),
        .S13_AXI_ACPROT(NLW_U0_S13_AXI_ACPROT_UNCONNECTED[2:0]),
        .S13_AXI_ACREADY(1'b0),
        .S13_AXI_ACSNOOP(NLW_U0_S13_AXI_ACSNOOP_UNCONNECTED[3:0]),
        .S13_AXI_ACVALID(NLW_U0_S13_AXI_ACVALID_UNCONNECTED),
        .S13_AXI_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S13_AXI_ARBAR({1'b0,1'b0}),
        .S13_AXI_ARBURST({1'b0,1'b0}),
        .S13_AXI_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S13_AXI_ARDOMAIN({1'b0,1'b0}),
        .S13_AXI_ARID(1'b0),
        .S13_AXI_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S13_AXI_ARLOCK(1'b0),
        .S13_AXI_ARPROT({1'b0,1'b0,1'b0}),
        .S13_AXI_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S13_AXI_ARREADY(NLW_U0_S13_AXI_ARREADY_UNCONNECTED),
        .S13_AXI_ARSIZE({1'b0,1'b0,1'b0}),
        .S13_AXI_ARSNOOP({1'b0,1'b0,1'b0,1'b0}),
        .S13_AXI_ARVALID(1'b0),
        .S13_AXI_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S13_AXI_AWBAR({1'b0,1'b0}),
        .S13_AXI_AWBURST({1'b0,1'b0}),
        .S13_AXI_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S13_AXI_AWDOMAIN({1'b0,1'b0}),
        .S13_AXI_AWID(1'b0),
        .S13_AXI_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S13_AXI_AWLOCK(1'b0),
        .S13_AXI_AWPROT({1'b0,1'b0,1'b0}),
        .S13_AXI_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S13_AXI_AWREADY(NLW_U0_S13_AXI_AWREADY_UNCONNECTED),
        .S13_AXI_AWSIZE({1'b0,1'b0,1'b0}),
        .S13_AXI_AWSNOOP({1'b0,1'b0,1'b0}),
        .S13_AXI_AWVALID(1'b0),
        .S13_AXI_BID(NLW_U0_S13_AXI_BID_UNCONNECTED[0]),
        .S13_AXI_BREADY(1'b0),
        .S13_AXI_BRESP(NLW_U0_S13_AXI_BRESP_UNCONNECTED[1:0]),
        .S13_AXI_BVALID(NLW_U0_S13_AXI_BVALID_UNCONNECTED),
        .S13_AXI_CDDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S13_AXI_CDLAST(1'b0),
        .S13_AXI_CDREADY(NLW_U0_S13_AXI_CDREADY_UNCONNECTED),
        .S13_AXI_CDVALID(1'b0),
        .S13_AXI_CRREADY(NLW_U0_S13_AXI_CRREADY_UNCONNECTED),
        .S13_AXI_CRRESP({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S13_AXI_CRVALID(1'b0),
        .S13_AXI_GEN_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S13_AXI_GEN_ARBURST({1'b0,1'b0}),
        .S13_AXI_GEN_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S13_AXI_GEN_ARID(1'b0),
        .S13_AXI_GEN_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S13_AXI_GEN_ARLOCK(1'b0),
        .S13_AXI_GEN_ARPROT({1'b0,1'b0,1'b0}),
        .S13_AXI_GEN_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S13_AXI_GEN_ARREADY(NLW_U0_S13_AXI_GEN_ARREADY_UNCONNECTED),
        .S13_AXI_GEN_ARSIZE({1'b0,1'b0,1'b0}),
        .S13_AXI_GEN_ARVALID(1'b0),
        .S13_AXI_GEN_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S13_AXI_GEN_AWBURST({1'b0,1'b0}),
        .S13_AXI_GEN_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S13_AXI_GEN_AWID(1'b0),
        .S13_AXI_GEN_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S13_AXI_GEN_AWLOCK(1'b0),
        .S13_AXI_GEN_AWPROT({1'b0,1'b0,1'b0}),
        .S13_AXI_GEN_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S13_AXI_GEN_AWREADY(NLW_U0_S13_AXI_GEN_AWREADY_UNCONNECTED),
        .S13_AXI_GEN_AWSIZE({1'b0,1'b0,1'b0}),
        .S13_AXI_GEN_AWVALID(1'b0),
        .S13_AXI_GEN_BID(NLW_U0_S13_AXI_GEN_BID_UNCONNECTED[0]),
        .S13_AXI_GEN_BREADY(1'b0),
        .S13_AXI_GEN_BRESP(NLW_U0_S13_AXI_GEN_BRESP_UNCONNECTED[1:0]),
        .S13_AXI_GEN_BVALID(NLW_U0_S13_AXI_GEN_BVALID_UNCONNECTED),
        .S13_AXI_GEN_RDATA(NLW_U0_S13_AXI_GEN_RDATA_UNCONNECTED[31:0]),
        .S13_AXI_GEN_RID(NLW_U0_S13_AXI_GEN_RID_UNCONNECTED[0]),
        .S13_AXI_GEN_RLAST(NLW_U0_S13_AXI_GEN_RLAST_UNCONNECTED),
        .S13_AXI_GEN_RREADY(1'b0),
        .S13_AXI_GEN_RRESP(NLW_U0_S13_AXI_GEN_RRESP_UNCONNECTED[1:0]),
        .S13_AXI_GEN_RVALID(NLW_U0_S13_AXI_GEN_RVALID_UNCONNECTED),
        .S13_AXI_GEN_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S13_AXI_GEN_WLAST(1'b0),
        .S13_AXI_GEN_WREADY(NLW_U0_S13_AXI_GEN_WREADY_UNCONNECTED),
        .S13_AXI_GEN_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S13_AXI_GEN_WVALID(1'b0),
        .S13_AXI_RACK(1'b0),
        .S13_AXI_RDATA(NLW_U0_S13_AXI_RDATA_UNCONNECTED[31:0]),
        .S13_AXI_RID(NLW_U0_S13_AXI_RID_UNCONNECTED[0]),
        .S13_AXI_RLAST(NLW_U0_S13_AXI_RLAST_UNCONNECTED),
        .S13_AXI_RREADY(1'b0),
        .S13_AXI_RRESP(NLW_U0_S13_AXI_RRESP_UNCONNECTED[1:0]),
        .S13_AXI_RVALID(NLW_U0_S13_AXI_RVALID_UNCONNECTED),
        .S13_AXI_WACK(1'b0),
        .S13_AXI_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S13_AXI_WLAST(1'b0),
        .S13_AXI_WREADY(NLW_U0_S13_AXI_WREADY_UNCONNECTED),
        .S13_AXI_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S13_AXI_WVALID(1'b0),
        .S14_AXI_ACADDR(NLW_U0_S14_AXI_ACADDR_UNCONNECTED[31:0]),
        .S14_AXI_ACPROT(NLW_U0_S14_AXI_ACPROT_UNCONNECTED[2:0]),
        .S14_AXI_ACREADY(1'b0),
        .S14_AXI_ACSNOOP(NLW_U0_S14_AXI_ACSNOOP_UNCONNECTED[3:0]),
        .S14_AXI_ACVALID(NLW_U0_S14_AXI_ACVALID_UNCONNECTED),
        .S14_AXI_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S14_AXI_ARBAR({1'b0,1'b0}),
        .S14_AXI_ARBURST({1'b0,1'b0}),
        .S14_AXI_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S14_AXI_ARDOMAIN({1'b0,1'b0}),
        .S14_AXI_ARID(1'b0),
        .S14_AXI_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S14_AXI_ARLOCK(1'b0),
        .S14_AXI_ARPROT({1'b0,1'b0,1'b0}),
        .S14_AXI_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S14_AXI_ARREADY(NLW_U0_S14_AXI_ARREADY_UNCONNECTED),
        .S14_AXI_ARSIZE({1'b0,1'b0,1'b0}),
        .S14_AXI_ARSNOOP({1'b0,1'b0,1'b0,1'b0}),
        .S14_AXI_ARVALID(1'b0),
        .S14_AXI_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S14_AXI_AWBAR({1'b0,1'b0}),
        .S14_AXI_AWBURST({1'b0,1'b0}),
        .S14_AXI_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S14_AXI_AWDOMAIN({1'b0,1'b0}),
        .S14_AXI_AWID(1'b0),
        .S14_AXI_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S14_AXI_AWLOCK(1'b0),
        .S14_AXI_AWPROT({1'b0,1'b0,1'b0}),
        .S14_AXI_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S14_AXI_AWREADY(NLW_U0_S14_AXI_AWREADY_UNCONNECTED),
        .S14_AXI_AWSIZE({1'b0,1'b0,1'b0}),
        .S14_AXI_AWSNOOP({1'b0,1'b0,1'b0}),
        .S14_AXI_AWVALID(1'b0),
        .S14_AXI_BID(NLW_U0_S14_AXI_BID_UNCONNECTED[0]),
        .S14_AXI_BREADY(1'b0),
        .S14_AXI_BRESP(NLW_U0_S14_AXI_BRESP_UNCONNECTED[1:0]),
        .S14_AXI_BVALID(NLW_U0_S14_AXI_BVALID_UNCONNECTED),
        .S14_AXI_CDDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S14_AXI_CDLAST(1'b0),
        .S14_AXI_CDREADY(NLW_U0_S14_AXI_CDREADY_UNCONNECTED),
        .S14_AXI_CDVALID(1'b0),
        .S14_AXI_CRREADY(NLW_U0_S14_AXI_CRREADY_UNCONNECTED),
        .S14_AXI_CRRESP({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S14_AXI_CRVALID(1'b0),
        .S14_AXI_GEN_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S14_AXI_GEN_ARBURST({1'b0,1'b0}),
        .S14_AXI_GEN_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S14_AXI_GEN_ARID(1'b0),
        .S14_AXI_GEN_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S14_AXI_GEN_ARLOCK(1'b0),
        .S14_AXI_GEN_ARPROT({1'b0,1'b0,1'b0}),
        .S14_AXI_GEN_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S14_AXI_GEN_ARREADY(NLW_U0_S14_AXI_GEN_ARREADY_UNCONNECTED),
        .S14_AXI_GEN_ARSIZE({1'b0,1'b0,1'b0}),
        .S14_AXI_GEN_ARVALID(1'b0),
        .S14_AXI_GEN_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S14_AXI_GEN_AWBURST({1'b0,1'b0}),
        .S14_AXI_GEN_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S14_AXI_GEN_AWID(1'b0),
        .S14_AXI_GEN_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S14_AXI_GEN_AWLOCK(1'b0),
        .S14_AXI_GEN_AWPROT({1'b0,1'b0,1'b0}),
        .S14_AXI_GEN_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S14_AXI_GEN_AWREADY(NLW_U0_S14_AXI_GEN_AWREADY_UNCONNECTED),
        .S14_AXI_GEN_AWSIZE({1'b0,1'b0,1'b0}),
        .S14_AXI_GEN_AWVALID(1'b0),
        .S14_AXI_GEN_BID(NLW_U0_S14_AXI_GEN_BID_UNCONNECTED[0]),
        .S14_AXI_GEN_BREADY(1'b0),
        .S14_AXI_GEN_BRESP(NLW_U0_S14_AXI_GEN_BRESP_UNCONNECTED[1:0]),
        .S14_AXI_GEN_BVALID(NLW_U0_S14_AXI_GEN_BVALID_UNCONNECTED),
        .S14_AXI_GEN_RDATA(NLW_U0_S14_AXI_GEN_RDATA_UNCONNECTED[31:0]),
        .S14_AXI_GEN_RID(NLW_U0_S14_AXI_GEN_RID_UNCONNECTED[0]),
        .S14_AXI_GEN_RLAST(NLW_U0_S14_AXI_GEN_RLAST_UNCONNECTED),
        .S14_AXI_GEN_RREADY(1'b0),
        .S14_AXI_GEN_RRESP(NLW_U0_S14_AXI_GEN_RRESP_UNCONNECTED[1:0]),
        .S14_AXI_GEN_RVALID(NLW_U0_S14_AXI_GEN_RVALID_UNCONNECTED),
        .S14_AXI_GEN_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S14_AXI_GEN_WLAST(1'b0),
        .S14_AXI_GEN_WREADY(NLW_U0_S14_AXI_GEN_WREADY_UNCONNECTED),
        .S14_AXI_GEN_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S14_AXI_GEN_WVALID(1'b0),
        .S14_AXI_RACK(1'b0),
        .S14_AXI_RDATA(NLW_U0_S14_AXI_RDATA_UNCONNECTED[31:0]),
        .S14_AXI_RID(NLW_U0_S14_AXI_RID_UNCONNECTED[0]),
        .S14_AXI_RLAST(NLW_U0_S14_AXI_RLAST_UNCONNECTED),
        .S14_AXI_RREADY(1'b0),
        .S14_AXI_RRESP(NLW_U0_S14_AXI_RRESP_UNCONNECTED[1:0]),
        .S14_AXI_RVALID(NLW_U0_S14_AXI_RVALID_UNCONNECTED),
        .S14_AXI_WACK(1'b0),
        .S14_AXI_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S14_AXI_WLAST(1'b0),
        .S14_AXI_WREADY(NLW_U0_S14_AXI_WREADY_UNCONNECTED),
        .S14_AXI_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S14_AXI_WVALID(1'b0),
        .S15_AXI_ACADDR(NLW_U0_S15_AXI_ACADDR_UNCONNECTED[31:0]),
        .S15_AXI_ACPROT(NLW_U0_S15_AXI_ACPROT_UNCONNECTED[2:0]),
        .S15_AXI_ACREADY(1'b0),
        .S15_AXI_ACSNOOP(NLW_U0_S15_AXI_ACSNOOP_UNCONNECTED[3:0]),
        .S15_AXI_ACVALID(NLW_U0_S15_AXI_ACVALID_UNCONNECTED),
        .S15_AXI_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S15_AXI_ARBAR({1'b0,1'b0}),
        .S15_AXI_ARBURST({1'b0,1'b0}),
        .S15_AXI_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S15_AXI_ARDOMAIN({1'b0,1'b0}),
        .S15_AXI_ARID(1'b0),
        .S15_AXI_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S15_AXI_ARLOCK(1'b0),
        .S15_AXI_ARPROT({1'b0,1'b0,1'b0}),
        .S15_AXI_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S15_AXI_ARREADY(NLW_U0_S15_AXI_ARREADY_UNCONNECTED),
        .S15_AXI_ARSIZE({1'b0,1'b0,1'b0}),
        .S15_AXI_ARSNOOP({1'b0,1'b0,1'b0,1'b0}),
        .S15_AXI_ARVALID(1'b0),
        .S15_AXI_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S15_AXI_AWBAR({1'b0,1'b0}),
        .S15_AXI_AWBURST({1'b0,1'b0}),
        .S15_AXI_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S15_AXI_AWDOMAIN({1'b0,1'b0}),
        .S15_AXI_AWID(1'b0),
        .S15_AXI_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S15_AXI_AWLOCK(1'b0),
        .S15_AXI_AWPROT({1'b0,1'b0,1'b0}),
        .S15_AXI_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S15_AXI_AWREADY(NLW_U0_S15_AXI_AWREADY_UNCONNECTED),
        .S15_AXI_AWSIZE({1'b0,1'b0,1'b0}),
        .S15_AXI_AWSNOOP({1'b0,1'b0,1'b0}),
        .S15_AXI_AWVALID(1'b0),
        .S15_AXI_BID(NLW_U0_S15_AXI_BID_UNCONNECTED[0]),
        .S15_AXI_BREADY(1'b0),
        .S15_AXI_BRESP(NLW_U0_S15_AXI_BRESP_UNCONNECTED[1:0]),
        .S15_AXI_BVALID(NLW_U0_S15_AXI_BVALID_UNCONNECTED),
        .S15_AXI_CDDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S15_AXI_CDLAST(1'b0),
        .S15_AXI_CDREADY(NLW_U0_S15_AXI_CDREADY_UNCONNECTED),
        .S15_AXI_CDVALID(1'b0),
        .S15_AXI_CRREADY(NLW_U0_S15_AXI_CRREADY_UNCONNECTED),
        .S15_AXI_CRRESP({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S15_AXI_CRVALID(1'b0),
        .S15_AXI_GEN_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S15_AXI_GEN_ARBURST({1'b0,1'b0}),
        .S15_AXI_GEN_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S15_AXI_GEN_ARID(1'b0),
        .S15_AXI_GEN_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S15_AXI_GEN_ARLOCK(1'b0),
        .S15_AXI_GEN_ARPROT({1'b0,1'b0,1'b0}),
        .S15_AXI_GEN_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S15_AXI_GEN_ARREADY(NLW_U0_S15_AXI_GEN_ARREADY_UNCONNECTED),
        .S15_AXI_GEN_ARSIZE({1'b0,1'b0,1'b0}),
        .S15_AXI_GEN_ARVALID(1'b0),
        .S15_AXI_GEN_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S15_AXI_GEN_AWBURST({1'b0,1'b0}),
        .S15_AXI_GEN_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S15_AXI_GEN_AWID(1'b0),
        .S15_AXI_GEN_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S15_AXI_GEN_AWLOCK(1'b0),
        .S15_AXI_GEN_AWPROT({1'b0,1'b0,1'b0}),
        .S15_AXI_GEN_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S15_AXI_GEN_AWREADY(NLW_U0_S15_AXI_GEN_AWREADY_UNCONNECTED),
        .S15_AXI_GEN_AWSIZE({1'b0,1'b0,1'b0}),
        .S15_AXI_GEN_AWVALID(1'b0),
        .S15_AXI_GEN_BID(NLW_U0_S15_AXI_GEN_BID_UNCONNECTED[0]),
        .S15_AXI_GEN_BREADY(1'b0),
        .S15_AXI_GEN_BRESP(NLW_U0_S15_AXI_GEN_BRESP_UNCONNECTED[1:0]),
        .S15_AXI_GEN_BVALID(NLW_U0_S15_AXI_GEN_BVALID_UNCONNECTED),
        .S15_AXI_GEN_RDATA(NLW_U0_S15_AXI_GEN_RDATA_UNCONNECTED[31:0]),
        .S15_AXI_GEN_RID(NLW_U0_S15_AXI_GEN_RID_UNCONNECTED[0]),
        .S15_AXI_GEN_RLAST(NLW_U0_S15_AXI_GEN_RLAST_UNCONNECTED),
        .S15_AXI_GEN_RREADY(1'b0),
        .S15_AXI_GEN_RRESP(NLW_U0_S15_AXI_GEN_RRESP_UNCONNECTED[1:0]),
        .S15_AXI_GEN_RVALID(NLW_U0_S15_AXI_GEN_RVALID_UNCONNECTED),
        .S15_AXI_GEN_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S15_AXI_GEN_WLAST(1'b0),
        .S15_AXI_GEN_WREADY(NLW_U0_S15_AXI_GEN_WREADY_UNCONNECTED),
        .S15_AXI_GEN_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S15_AXI_GEN_WVALID(1'b0),
        .S15_AXI_RACK(1'b0),
        .S15_AXI_RDATA(NLW_U0_S15_AXI_RDATA_UNCONNECTED[31:0]),
        .S15_AXI_RID(NLW_U0_S15_AXI_RID_UNCONNECTED[0]),
        .S15_AXI_RLAST(NLW_U0_S15_AXI_RLAST_UNCONNECTED),
        .S15_AXI_RREADY(1'b0),
        .S15_AXI_RRESP(NLW_U0_S15_AXI_RRESP_UNCONNECTED[1:0]),
        .S15_AXI_RVALID(NLW_U0_S15_AXI_RVALID_UNCONNECTED),
        .S15_AXI_WACK(1'b0),
        .S15_AXI_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S15_AXI_WLAST(1'b0),
        .S15_AXI_WREADY(NLW_U0_S15_AXI_WREADY_UNCONNECTED),
        .S15_AXI_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S15_AXI_WVALID(1'b0),
        .S1_AXI_ACADDR(NLW_U0_S1_AXI_ACADDR_UNCONNECTED[31:0]),
        .S1_AXI_ACPROT(NLW_U0_S1_AXI_ACPROT_UNCONNECTED[2:0]),
        .S1_AXI_ACREADY(1'b0),
        .S1_AXI_ACSNOOP(NLW_U0_S1_AXI_ACSNOOP_UNCONNECTED[3:0]),
        .S1_AXI_ACVALID(NLW_U0_S1_AXI_ACVALID_UNCONNECTED),
        .S1_AXI_ARADDR(S1_AXI_ARADDR),
        .S1_AXI_ARBAR({1'b0,1'b0}),
        .S1_AXI_ARBURST(S1_AXI_ARBURST),
        .S1_AXI_ARCACHE(S1_AXI_ARCACHE),
        .S1_AXI_ARDOMAIN({1'b0,1'b0}),
        .S1_AXI_ARID(S1_AXI_ARID),
        .S1_AXI_ARLEN(S1_AXI_ARLEN),
        .S1_AXI_ARLOCK(S1_AXI_ARLOCK),
        .S1_AXI_ARPROT(S1_AXI_ARPROT),
        .S1_AXI_ARQOS(S1_AXI_ARQOS),
        .S1_AXI_ARREADY(S1_AXI_ARREADY),
        .S1_AXI_ARSIZE(S1_AXI_ARSIZE),
        .S1_AXI_ARSNOOP({1'b0,1'b0,1'b0,1'b0}),
        .S1_AXI_ARVALID(S1_AXI_ARVALID),
        .S1_AXI_AWADDR(S1_AXI_AWADDR),
        .S1_AXI_AWBAR({1'b0,1'b0}),
        .S1_AXI_AWBURST(S1_AXI_AWBURST),
        .S1_AXI_AWCACHE(S1_AXI_AWCACHE),
        .S1_AXI_AWDOMAIN({1'b0,1'b0}),
        .S1_AXI_AWID(S1_AXI_AWID),
        .S1_AXI_AWLEN(S1_AXI_AWLEN),
        .S1_AXI_AWLOCK(S1_AXI_AWLOCK),
        .S1_AXI_AWPROT(S1_AXI_AWPROT),
        .S1_AXI_AWQOS(S1_AXI_AWQOS),
        .S1_AXI_AWREADY(S1_AXI_AWREADY),
        .S1_AXI_AWSIZE(S1_AXI_AWSIZE),
        .S1_AXI_AWSNOOP({1'b0,1'b0,1'b0}),
        .S1_AXI_AWVALID(S1_AXI_AWVALID),
        .S1_AXI_BID(S1_AXI_BID),
        .S1_AXI_BREADY(S1_AXI_BREADY),
        .S1_AXI_BRESP(S1_AXI_BRESP),
        .S1_AXI_BVALID(S1_AXI_BVALID),
        .S1_AXI_CDDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S1_AXI_CDLAST(1'b0),
        .S1_AXI_CDREADY(NLW_U0_S1_AXI_CDREADY_UNCONNECTED),
        .S1_AXI_CDVALID(1'b0),
        .S1_AXI_CRREADY(NLW_U0_S1_AXI_CRREADY_UNCONNECTED),
        .S1_AXI_CRRESP({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S1_AXI_CRVALID(1'b0),
        .S1_AXI_GEN_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S1_AXI_GEN_ARBURST({1'b0,1'b0}),
        .S1_AXI_GEN_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S1_AXI_GEN_ARID(1'b0),
        .S1_AXI_GEN_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S1_AXI_GEN_ARLOCK(1'b0),
        .S1_AXI_GEN_ARPROT({1'b0,1'b0,1'b0}),
        .S1_AXI_GEN_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S1_AXI_GEN_ARREADY(NLW_U0_S1_AXI_GEN_ARREADY_UNCONNECTED),
        .S1_AXI_GEN_ARSIZE({1'b0,1'b0,1'b0}),
        .S1_AXI_GEN_ARVALID(1'b0),
        .S1_AXI_GEN_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S1_AXI_GEN_AWBURST({1'b0,1'b0}),
        .S1_AXI_GEN_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S1_AXI_GEN_AWID(1'b0),
        .S1_AXI_GEN_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S1_AXI_GEN_AWLOCK(1'b0),
        .S1_AXI_GEN_AWPROT({1'b0,1'b0,1'b0}),
        .S1_AXI_GEN_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S1_AXI_GEN_AWREADY(NLW_U0_S1_AXI_GEN_AWREADY_UNCONNECTED),
        .S1_AXI_GEN_AWSIZE({1'b0,1'b0,1'b0}),
        .S1_AXI_GEN_AWVALID(1'b0),
        .S1_AXI_GEN_BID(NLW_U0_S1_AXI_GEN_BID_UNCONNECTED[0]),
        .S1_AXI_GEN_BREADY(1'b0),
        .S1_AXI_GEN_BRESP(NLW_U0_S1_AXI_GEN_BRESP_UNCONNECTED[1:0]),
        .S1_AXI_GEN_BVALID(NLW_U0_S1_AXI_GEN_BVALID_UNCONNECTED),
        .S1_AXI_GEN_RDATA(NLW_U0_S1_AXI_GEN_RDATA_UNCONNECTED[31:0]),
        .S1_AXI_GEN_RID(NLW_U0_S1_AXI_GEN_RID_UNCONNECTED[0]),
        .S1_AXI_GEN_RLAST(NLW_U0_S1_AXI_GEN_RLAST_UNCONNECTED),
        .S1_AXI_GEN_RREADY(1'b0),
        .S1_AXI_GEN_RRESP(NLW_U0_S1_AXI_GEN_RRESP_UNCONNECTED[1:0]),
        .S1_AXI_GEN_RVALID(NLW_U0_S1_AXI_GEN_RVALID_UNCONNECTED),
        .S1_AXI_GEN_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S1_AXI_GEN_WLAST(1'b0),
        .S1_AXI_GEN_WREADY(NLW_U0_S1_AXI_GEN_WREADY_UNCONNECTED),
        .S1_AXI_GEN_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S1_AXI_GEN_WVALID(1'b0),
        .S1_AXI_RACK(1'b0),
        .S1_AXI_RDATA(S1_AXI_RDATA),
        .S1_AXI_RID(S1_AXI_RID),
        .S1_AXI_RLAST(S1_AXI_RLAST),
        .S1_AXI_RREADY(S1_AXI_RREADY),
        .S1_AXI_RRESP(S1_AXI_RRESP),
        .S1_AXI_RVALID(S1_AXI_RVALID),
        .S1_AXI_WACK(1'b0),
        .S1_AXI_WDATA(S1_AXI_WDATA),
        .S1_AXI_WLAST(S1_AXI_WLAST),
        .S1_AXI_WREADY(S1_AXI_WREADY),
        .S1_AXI_WSTRB(S1_AXI_WSTRB),
        .S1_AXI_WVALID(S1_AXI_WVALID),
        .S2_AXI_ACADDR(NLW_U0_S2_AXI_ACADDR_UNCONNECTED[31:0]),
        .S2_AXI_ACPROT(NLW_U0_S2_AXI_ACPROT_UNCONNECTED[2:0]),
        .S2_AXI_ACREADY(1'b0),
        .S2_AXI_ACSNOOP(NLW_U0_S2_AXI_ACSNOOP_UNCONNECTED[3:0]),
        .S2_AXI_ACVALID(NLW_U0_S2_AXI_ACVALID_UNCONNECTED),
        .S2_AXI_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S2_AXI_ARBAR({1'b0,1'b0}),
        .S2_AXI_ARBURST({1'b0,1'b0}),
        .S2_AXI_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S2_AXI_ARDOMAIN({1'b0,1'b0}),
        .S2_AXI_ARID(1'b0),
        .S2_AXI_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S2_AXI_ARLOCK(1'b0),
        .S2_AXI_ARPROT({1'b0,1'b0,1'b0}),
        .S2_AXI_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S2_AXI_ARREADY(NLW_U0_S2_AXI_ARREADY_UNCONNECTED),
        .S2_AXI_ARSIZE({1'b0,1'b0,1'b0}),
        .S2_AXI_ARSNOOP({1'b0,1'b0,1'b0,1'b0}),
        .S2_AXI_ARVALID(1'b0),
        .S2_AXI_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S2_AXI_AWBAR({1'b0,1'b0}),
        .S2_AXI_AWBURST({1'b0,1'b0}),
        .S2_AXI_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S2_AXI_AWDOMAIN({1'b0,1'b0}),
        .S2_AXI_AWID(1'b0),
        .S2_AXI_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S2_AXI_AWLOCK(1'b0),
        .S2_AXI_AWPROT({1'b0,1'b0,1'b0}),
        .S2_AXI_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S2_AXI_AWREADY(NLW_U0_S2_AXI_AWREADY_UNCONNECTED),
        .S2_AXI_AWSIZE({1'b0,1'b0,1'b0}),
        .S2_AXI_AWSNOOP({1'b0,1'b0,1'b0}),
        .S2_AXI_AWVALID(1'b0),
        .S2_AXI_BID(NLW_U0_S2_AXI_BID_UNCONNECTED[0]),
        .S2_AXI_BREADY(1'b0),
        .S2_AXI_BRESP(NLW_U0_S2_AXI_BRESP_UNCONNECTED[1:0]),
        .S2_AXI_BVALID(NLW_U0_S2_AXI_BVALID_UNCONNECTED),
        .S2_AXI_CDDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S2_AXI_CDLAST(1'b0),
        .S2_AXI_CDREADY(NLW_U0_S2_AXI_CDREADY_UNCONNECTED),
        .S2_AXI_CDVALID(1'b0),
        .S2_AXI_CRREADY(NLW_U0_S2_AXI_CRREADY_UNCONNECTED),
        .S2_AXI_CRRESP({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S2_AXI_CRVALID(1'b0),
        .S2_AXI_GEN_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S2_AXI_GEN_ARBURST({1'b0,1'b0}),
        .S2_AXI_GEN_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S2_AXI_GEN_ARID(1'b0),
        .S2_AXI_GEN_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S2_AXI_GEN_ARLOCK(1'b0),
        .S2_AXI_GEN_ARPROT({1'b0,1'b0,1'b0}),
        .S2_AXI_GEN_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S2_AXI_GEN_ARREADY(NLW_U0_S2_AXI_GEN_ARREADY_UNCONNECTED),
        .S2_AXI_GEN_ARSIZE({1'b0,1'b0,1'b0}),
        .S2_AXI_GEN_ARVALID(1'b0),
        .S2_AXI_GEN_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S2_AXI_GEN_AWBURST({1'b0,1'b0}),
        .S2_AXI_GEN_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S2_AXI_GEN_AWID(1'b0),
        .S2_AXI_GEN_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S2_AXI_GEN_AWLOCK(1'b0),
        .S2_AXI_GEN_AWPROT({1'b0,1'b0,1'b0}),
        .S2_AXI_GEN_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S2_AXI_GEN_AWREADY(NLW_U0_S2_AXI_GEN_AWREADY_UNCONNECTED),
        .S2_AXI_GEN_AWSIZE({1'b0,1'b0,1'b0}),
        .S2_AXI_GEN_AWVALID(1'b0),
        .S2_AXI_GEN_BID(NLW_U0_S2_AXI_GEN_BID_UNCONNECTED[0]),
        .S2_AXI_GEN_BREADY(1'b0),
        .S2_AXI_GEN_BRESP(NLW_U0_S2_AXI_GEN_BRESP_UNCONNECTED[1:0]),
        .S2_AXI_GEN_BVALID(NLW_U0_S2_AXI_GEN_BVALID_UNCONNECTED),
        .S2_AXI_GEN_RDATA(NLW_U0_S2_AXI_GEN_RDATA_UNCONNECTED[31:0]),
        .S2_AXI_GEN_RID(NLW_U0_S2_AXI_GEN_RID_UNCONNECTED[0]),
        .S2_AXI_GEN_RLAST(NLW_U0_S2_AXI_GEN_RLAST_UNCONNECTED),
        .S2_AXI_GEN_RREADY(1'b0),
        .S2_AXI_GEN_RRESP(NLW_U0_S2_AXI_GEN_RRESP_UNCONNECTED[1:0]),
        .S2_AXI_GEN_RVALID(NLW_U0_S2_AXI_GEN_RVALID_UNCONNECTED),
        .S2_AXI_GEN_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S2_AXI_GEN_WLAST(1'b0),
        .S2_AXI_GEN_WREADY(NLW_U0_S2_AXI_GEN_WREADY_UNCONNECTED),
        .S2_AXI_GEN_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S2_AXI_GEN_WVALID(1'b0),
        .S2_AXI_RACK(1'b0),
        .S2_AXI_RDATA(NLW_U0_S2_AXI_RDATA_UNCONNECTED[31:0]),
        .S2_AXI_RID(NLW_U0_S2_AXI_RID_UNCONNECTED[0]),
        .S2_AXI_RLAST(NLW_U0_S2_AXI_RLAST_UNCONNECTED),
        .S2_AXI_RREADY(1'b0),
        .S2_AXI_RRESP(NLW_U0_S2_AXI_RRESP_UNCONNECTED[1:0]),
        .S2_AXI_RVALID(NLW_U0_S2_AXI_RVALID_UNCONNECTED),
        .S2_AXI_WACK(1'b0),
        .S2_AXI_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S2_AXI_WLAST(1'b0),
        .S2_AXI_WREADY(NLW_U0_S2_AXI_WREADY_UNCONNECTED),
        .S2_AXI_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S2_AXI_WVALID(1'b0),
        .S3_AXI_ACADDR(NLW_U0_S3_AXI_ACADDR_UNCONNECTED[31:0]),
        .S3_AXI_ACPROT(NLW_U0_S3_AXI_ACPROT_UNCONNECTED[2:0]),
        .S3_AXI_ACREADY(1'b0),
        .S3_AXI_ACSNOOP(NLW_U0_S3_AXI_ACSNOOP_UNCONNECTED[3:0]),
        .S3_AXI_ACVALID(NLW_U0_S3_AXI_ACVALID_UNCONNECTED),
        .S3_AXI_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S3_AXI_ARBAR({1'b0,1'b0}),
        .S3_AXI_ARBURST({1'b0,1'b0}),
        .S3_AXI_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S3_AXI_ARDOMAIN({1'b0,1'b0}),
        .S3_AXI_ARID(1'b0),
        .S3_AXI_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S3_AXI_ARLOCK(1'b0),
        .S3_AXI_ARPROT({1'b0,1'b0,1'b0}),
        .S3_AXI_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S3_AXI_ARREADY(NLW_U0_S3_AXI_ARREADY_UNCONNECTED),
        .S3_AXI_ARSIZE({1'b0,1'b0,1'b0}),
        .S3_AXI_ARSNOOP({1'b0,1'b0,1'b0,1'b0}),
        .S3_AXI_ARVALID(1'b0),
        .S3_AXI_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S3_AXI_AWBAR({1'b0,1'b0}),
        .S3_AXI_AWBURST({1'b0,1'b0}),
        .S3_AXI_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S3_AXI_AWDOMAIN({1'b0,1'b0}),
        .S3_AXI_AWID(1'b0),
        .S3_AXI_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S3_AXI_AWLOCK(1'b0),
        .S3_AXI_AWPROT({1'b0,1'b0,1'b0}),
        .S3_AXI_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S3_AXI_AWREADY(NLW_U0_S3_AXI_AWREADY_UNCONNECTED),
        .S3_AXI_AWSIZE({1'b0,1'b0,1'b0}),
        .S3_AXI_AWSNOOP({1'b0,1'b0,1'b0}),
        .S3_AXI_AWVALID(1'b0),
        .S3_AXI_BID(NLW_U0_S3_AXI_BID_UNCONNECTED[0]),
        .S3_AXI_BREADY(1'b0),
        .S3_AXI_BRESP(NLW_U0_S3_AXI_BRESP_UNCONNECTED[1:0]),
        .S3_AXI_BVALID(NLW_U0_S3_AXI_BVALID_UNCONNECTED),
        .S3_AXI_CDDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S3_AXI_CDLAST(1'b0),
        .S3_AXI_CDREADY(NLW_U0_S3_AXI_CDREADY_UNCONNECTED),
        .S3_AXI_CDVALID(1'b0),
        .S3_AXI_CRREADY(NLW_U0_S3_AXI_CRREADY_UNCONNECTED),
        .S3_AXI_CRRESP({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S3_AXI_CRVALID(1'b0),
        .S3_AXI_GEN_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S3_AXI_GEN_ARBURST({1'b0,1'b0}),
        .S3_AXI_GEN_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S3_AXI_GEN_ARID(1'b0),
        .S3_AXI_GEN_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S3_AXI_GEN_ARLOCK(1'b0),
        .S3_AXI_GEN_ARPROT({1'b0,1'b0,1'b0}),
        .S3_AXI_GEN_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S3_AXI_GEN_ARREADY(NLW_U0_S3_AXI_GEN_ARREADY_UNCONNECTED),
        .S3_AXI_GEN_ARSIZE({1'b0,1'b0,1'b0}),
        .S3_AXI_GEN_ARVALID(1'b0),
        .S3_AXI_GEN_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S3_AXI_GEN_AWBURST({1'b0,1'b0}),
        .S3_AXI_GEN_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S3_AXI_GEN_AWID(1'b0),
        .S3_AXI_GEN_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S3_AXI_GEN_AWLOCK(1'b0),
        .S3_AXI_GEN_AWPROT({1'b0,1'b0,1'b0}),
        .S3_AXI_GEN_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S3_AXI_GEN_AWREADY(NLW_U0_S3_AXI_GEN_AWREADY_UNCONNECTED),
        .S3_AXI_GEN_AWSIZE({1'b0,1'b0,1'b0}),
        .S3_AXI_GEN_AWVALID(1'b0),
        .S3_AXI_GEN_BID(NLW_U0_S3_AXI_GEN_BID_UNCONNECTED[0]),
        .S3_AXI_GEN_BREADY(1'b0),
        .S3_AXI_GEN_BRESP(NLW_U0_S3_AXI_GEN_BRESP_UNCONNECTED[1:0]),
        .S3_AXI_GEN_BVALID(NLW_U0_S3_AXI_GEN_BVALID_UNCONNECTED),
        .S3_AXI_GEN_RDATA(NLW_U0_S3_AXI_GEN_RDATA_UNCONNECTED[31:0]),
        .S3_AXI_GEN_RID(NLW_U0_S3_AXI_GEN_RID_UNCONNECTED[0]),
        .S3_AXI_GEN_RLAST(NLW_U0_S3_AXI_GEN_RLAST_UNCONNECTED),
        .S3_AXI_GEN_RREADY(1'b0),
        .S3_AXI_GEN_RRESP(NLW_U0_S3_AXI_GEN_RRESP_UNCONNECTED[1:0]),
        .S3_AXI_GEN_RVALID(NLW_U0_S3_AXI_GEN_RVALID_UNCONNECTED),
        .S3_AXI_GEN_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S3_AXI_GEN_WLAST(1'b0),
        .S3_AXI_GEN_WREADY(NLW_U0_S3_AXI_GEN_WREADY_UNCONNECTED),
        .S3_AXI_GEN_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S3_AXI_GEN_WVALID(1'b0),
        .S3_AXI_RACK(1'b0),
        .S3_AXI_RDATA(NLW_U0_S3_AXI_RDATA_UNCONNECTED[31:0]),
        .S3_AXI_RID(NLW_U0_S3_AXI_RID_UNCONNECTED[0]),
        .S3_AXI_RLAST(NLW_U0_S3_AXI_RLAST_UNCONNECTED),
        .S3_AXI_RREADY(1'b0),
        .S3_AXI_RRESP(NLW_U0_S3_AXI_RRESP_UNCONNECTED[1:0]),
        .S3_AXI_RVALID(NLW_U0_S3_AXI_RVALID_UNCONNECTED),
        .S3_AXI_WACK(1'b0),
        .S3_AXI_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S3_AXI_WLAST(1'b0),
        .S3_AXI_WREADY(NLW_U0_S3_AXI_WREADY_UNCONNECTED),
        .S3_AXI_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S3_AXI_WVALID(1'b0),
        .S4_AXI_ACADDR(NLW_U0_S4_AXI_ACADDR_UNCONNECTED[31:0]),
        .S4_AXI_ACPROT(NLW_U0_S4_AXI_ACPROT_UNCONNECTED[2:0]),
        .S4_AXI_ACREADY(1'b0),
        .S4_AXI_ACSNOOP(NLW_U0_S4_AXI_ACSNOOP_UNCONNECTED[3:0]),
        .S4_AXI_ACVALID(NLW_U0_S4_AXI_ACVALID_UNCONNECTED),
        .S4_AXI_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S4_AXI_ARBAR({1'b0,1'b0}),
        .S4_AXI_ARBURST({1'b0,1'b0}),
        .S4_AXI_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S4_AXI_ARDOMAIN({1'b0,1'b0}),
        .S4_AXI_ARID(1'b0),
        .S4_AXI_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S4_AXI_ARLOCK(1'b0),
        .S4_AXI_ARPROT({1'b0,1'b0,1'b0}),
        .S4_AXI_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S4_AXI_ARREADY(NLW_U0_S4_AXI_ARREADY_UNCONNECTED),
        .S4_AXI_ARSIZE({1'b0,1'b0,1'b0}),
        .S4_AXI_ARSNOOP({1'b0,1'b0,1'b0,1'b0}),
        .S4_AXI_ARVALID(1'b0),
        .S4_AXI_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S4_AXI_AWBAR({1'b0,1'b0}),
        .S4_AXI_AWBURST({1'b0,1'b0}),
        .S4_AXI_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S4_AXI_AWDOMAIN({1'b0,1'b0}),
        .S4_AXI_AWID(1'b0),
        .S4_AXI_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S4_AXI_AWLOCK(1'b0),
        .S4_AXI_AWPROT({1'b0,1'b0,1'b0}),
        .S4_AXI_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S4_AXI_AWREADY(NLW_U0_S4_AXI_AWREADY_UNCONNECTED),
        .S4_AXI_AWSIZE({1'b0,1'b0,1'b0}),
        .S4_AXI_AWSNOOP({1'b0,1'b0,1'b0}),
        .S4_AXI_AWVALID(1'b0),
        .S4_AXI_BID(NLW_U0_S4_AXI_BID_UNCONNECTED[0]),
        .S4_AXI_BREADY(1'b0),
        .S4_AXI_BRESP(NLW_U0_S4_AXI_BRESP_UNCONNECTED[1:0]),
        .S4_AXI_BVALID(NLW_U0_S4_AXI_BVALID_UNCONNECTED),
        .S4_AXI_CDDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S4_AXI_CDLAST(1'b0),
        .S4_AXI_CDREADY(NLW_U0_S4_AXI_CDREADY_UNCONNECTED),
        .S4_AXI_CDVALID(1'b0),
        .S4_AXI_CRREADY(NLW_U0_S4_AXI_CRREADY_UNCONNECTED),
        .S4_AXI_CRRESP({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S4_AXI_CRVALID(1'b0),
        .S4_AXI_GEN_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S4_AXI_GEN_ARBURST({1'b0,1'b0}),
        .S4_AXI_GEN_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S4_AXI_GEN_ARID(1'b0),
        .S4_AXI_GEN_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S4_AXI_GEN_ARLOCK(1'b0),
        .S4_AXI_GEN_ARPROT({1'b0,1'b0,1'b0}),
        .S4_AXI_GEN_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S4_AXI_GEN_ARREADY(NLW_U0_S4_AXI_GEN_ARREADY_UNCONNECTED),
        .S4_AXI_GEN_ARSIZE({1'b0,1'b0,1'b0}),
        .S4_AXI_GEN_ARVALID(1'b0),
        .S4_AXI_GEN_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S4_AXI_GEN_AWBURST({1'b0,1'b0}),
        .S4_AXI_GEN_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S4_AXI_GEN_AWID(1'b0),
        .S4_AXI_GEN_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S4_AXI_GEN_AWLOCK(1'b0),
        .S4_AXI_GEN_AWPROT({1'b0,1'b0,1'b0}),
        .S4_AXI_GEN_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S4_AXI_GEN_AWREADY(NLW_U0_S4_AXI_GEN_AWREADY_UNCONNECTED),
        .S4_AXI_GEN_AWSIZE({1'b0,1'b0,1'b0}),
        .S4_AXI_GEN_AWVALID(1'b0),
        .S4_AXI_GEN_BID(NLW_U0_S4_AXI_GEN_BID_UNCONNECTED[0]),
        .S4_AXI_GEN_BREADY(1'b0),
        .S4_AXI_GEN_BRESP(NLW_U0_S4_AXI_GEN_BRESP_UNCONNECTED[1:0]),
        .S4_AXI_GEN_BVALID(NLW_U0_S4_AXI_GEN_BVALID_UNCONNECTED),
        .S4_AXI_GEN_RDATA(NLW_U0_S4_AXI_GEN_RDATA_UNCONNECTED[31:0]),
        .S4_AXI_GEN_RID(NLW_U0_S4_AXI_GEN_RID_UNCONNECTED[0]),
        .S4_AXI_GEN_RLAST(NLW_U0_S4_AXI_GEN_RLAST_UNCONNECTED),
        .S4_AXI_GEN_RREADY(1'b0),
        .S4_AXI_GEN_RRESP(NLW_U0_S4_AXI_GEN_RRESP_UNCONNECTED[1:0]),
        .S4_AXI_GEN_RVALID(NLW_U0_S4_AXI_GEN_RVALID_UNCONNECTED),
        .S4_AXI_GEN_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S4_AXI_GEN_WLAST(1'b0),
        .S4_AXI_GEN_WREADY(NLW_U0_S4_AXI_GEN_WREADY_UNCONNECTED),
        .S4_AXI_GEN_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S4_AXI_GEN_WVALID(1'b0),
        .S4_AXI_RACK(1'b0),
        .S4_AXI_RDATA(NLW_U0_S4_AXI_RDATA_UNCONNECTED[31:0]),
        .S4_AXI_RID(NLW_U0_S4_AXI_RID_UNCONNECTED[0]),
        .S4_AXI_RLAST(NLW_U0_S4_AXI_RLAST_UNCONNECTED),
        .S4_AXI_RREADY(1'b0),
        .S4_AXI_RRESP(NLW_U0_S4_AXI_RRESP_UNCONNECTED[1:0]),
        .S4_AXI_RVALID(NLW_U0_S4_AXI_RVALID_UNCONNECTED),
        .S4_AXI_WACK(1'b0),
        .S4_AXI_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S4_AXI_WLAST(1'b0),
        .S4_AXI_WREADY(NLW_U0_S4_AXI_WREADY_UNCONNECTED),
        .S4_AXI_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S4_AXI_WVALID(1'b0),
        .S5_AXI_ACADDR(NLW_U0_S5_AXI_ACADDR_UNCONNECTED[31:0]),
        .S5_AXI_ACPROT(NLW_U0_S5_AXI_ACPROT_UNCONNECTED[2:0]),
        .S5_AXI_ACREADY(1'b0),
        .S5_AXI_ACSNOOP(NLW_U0_S5_AXI_ACSNOOP_UNCONNECTED[3:0]),
        .S5_AXI_ACVALID(NLW_U0_S5_AXI_ACVALID_UNCONNECTED),
        .S5_AXI_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S5_AXI_ARBAR({1'b0,1'b0}),
        .S5_AXI_ARBURST({1'b0,1'b0}),
        .S5_AXI_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S5_AXI_ARDOMAIN({1'b0,1'b0}),
        .S5_AXI_ARID(1'b0),
        .S5_AXI_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S5_AXI_ARLOCK(1'b0),
        .S5_AXI_ARPROT({1'b0,1'b0,1'b0}),
        .S5_AXI_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S5_AXI_ARREADY(NLW_U0_S5_AXI_ARREADY_UNCONNECTED),
        .S5_AXI_ARSIZE({1'b0,1'b0,1'b0}),
        .S5_AXI_ARSNOOP({1'b0,1'b0,1'b0,1'b0}),
        .S5_AXI_ARVALID(1'b0),
        .S5_AXI_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S5_AXI_AWBAR({1'b0,1'b0}),
        .S5_AXI_AWBURST({1'b0,1'b0}),
        .S5_AXI_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S5_AXI_AWDOMAIN({1'b0,1'b0}),
        .S5_AXI_AWID(1'b0),
        .S5_AXI_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S5_AXI_AWLOCK(1'b0),
        .S5_AXI_AWPROT({1'b0,1'b0,1'b0}),
        .S5_AXI_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S5_AXI_AWREADY(NLW_U0_S5_AXI_AWREADY_UNCONNECTED),
        .S5_AXI_AWSIZE({1'b0,1'b0,1'b0}),
        .S5_AXI_AWSNOOP({1'b0,1'b0,1'b0}),
        .S5_AXI_AWVALID(1'b0),
        .S5_AXI_BID(NLW_U0_S5_AXI_BID_UNCONNECTED[0]),
        .S5_AXI_BREADY(1'b0),
        .S5_AXI_BRESP(NLW_U0_S5_AXI_BRESP_UNCONNECTED[1:0]),
        .S5_AXI_BVALID(NLW_U0_S5_AXI_BVALID_UNCONNECTED),
        .S5_AXI_CDDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S5_AXI_CDLAST(1'b0),
        .S5_AXI_CDREADY(NLW_U0_S5_AXI_CDREADY_UNCONNECTED),
        .S5_AXI_CDVALID(1'b0),
        .S5_AXI_CRREADY(NLW_U0_S5_AXI_CRREADY_UNCONNECTED),
        .S5_AXI_CRRESP({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S5_AXI_CRVALID(1'b0),
        .S5_AXI_GEN_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S5_AXI_GEN_ARBURST({1'b0,1'b0}),
        .S5_AXI_GEN_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S5_AXI_GEN_ARID(1'b0),
        .S5_AXI_GEN_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S5_AXI_GEN_ARLOCK(1'b0),
        .S5_AXI_GEN_ARPROT({1'b0,1'b0,1'b0}),
        .S5_AXI_GEN_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S5_AXI_GEN_ARREADY(NLW_U0_S5_AXI_GEN_ARREADY_UNCONNECTED),
        .S5_AXI_GEN_ARSIZE({1'b0,1'b0,1'b0}),
        .S5_AXI_GEN_ARVALID(1'b0),
        .S5_AXI_GEN_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S5_AXI_GEN_AWBURST({1'b0,1'b0}),
        .S5_AXI_GEN_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S5_AXI_GEN_AWID(1'b0),
        .S5_AXI_GEN_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S5_AXI_GEN_AWLOCK(1'b0),
        .S5_AXI_GEN_AWPROT({1'b0,1'b0,1'b0}),
        .S5_AXI_GEN_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S5_AXI_GEN_AWREADY(NLW_U0_S5_AXI_GEN_AWREADY_UNCONNECTED),
        .S5_AXI_GEN_AWSIZE({1'b0,1'b0,1'b0}),
        .S5_AXI_GEN_AWVALID(1'b0),
        .S5_AXI_GEN_BID(NLW_U0_S5_AXI_GEN_BID_UNCONNECTED[0]),
        .S5_AXI_GEN_BREADY(1'b0),
        .S5_AXI_GEN_BRESP(NLW_U0_S5_AXI_GEN_BRESP_UNCONNECTED[1:0]),
        .S5_AXI_GEN_BVALID(NLW_U0_S5_AXI_GEN_BVALID_UNCONNECTED),
        .S5_AXI_GEN_RDATA(NLW_U0_S5_AXI_GEN_RDATA_UNCONNECTED[31:0]),
        .S5_AXI_GEN_RID(NLW_U0_S5_AXI_GEN_RID_UNCONNECTED[0]),
        .S5_AXI_GEN_RLAST(NLW_U0_S5_AXI_GEN_RLAST_UNCONNECTED),
        .S5_AXI_GEN_RREADY(1'b0),
        .S5_AXI_GEN_RRESP(NLW_U0_S5_AXI_GEN_RRESP_UNCONNECTED[1:0]),
        .S5_AXI_GEN_RVALID(NLW_U0_S5_AXI_GEN_RVALID_UNCONNECTED),
        .S5_AXI_GEN_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S5_AXI_GEN_WLAST(1'b0),
        .S5_AXI_GEN_WREADY(NLW_U0_S5_AXI_GEN_WREADY_UNCONNECTED),
        .S5_AXI_GEN_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S5_AXI_GEN_WVALID(1'b0),
        .S5_AXI_RACK(1'b0),
        .S5_AXI_RDATA(NLW_U0_S5_AXI_RDATA_UNCONNECTED[31:0]),
        .S5_AXI_RID(NLW_U0_S5_AXI_RID_UNCONNECTED[0]),
        .S5_AXI_RLAST(NLW_U0_S5_AXI_RLAST_UNCONNECTED),
        .S5_AXI_RREADY(1'b0),
        .S5_AXI_RRESP(NLW_U0_S5_AXI_RRESP_UNCONNECTED[1:0]),
        .S5_AXI_RVALID(NLW_U0_S5_AXI_RVALID_UNCONNECTED),
        .S5_AXI_WACK(1'b0),
        .S5_AXI_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S5_AXI_WLAST(1'b0),
        .S5_AXI_WREADY(NLW_U0_S5_AXI_WREADY_UNCONNECTED),
        .S5_AXI_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S5_AXI_WVALID(1'b0),
        .S6_AXI_ACADDR(NLW_U0_S6_AXI_ACADDR_UNCONNECTED[31:0]),
        .S6_AXI_ACPROT(NLW_U0_S6_AXI_ACPROT_UNCONNECTED[2:0]),
        .S6_AXI_ACREADY(1'b0),
        .S6_AXI_ACSNOOP(NLW_U0_S6_AXI_ACSNOOP_UNCONNECTED[3:0]),
        .S6_AXI_ACVALID(NLW_U0_S6_AXI_ACVALID_UNCONNECTED),
        .S6_AXI_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S6_AXI_ARBAR({1'b0,1'b0}),
        .S6_AXI_ARBURST({1'b0,1'b0}),
        .S6_AXI_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S6_AXI_ARDOMAIN({1'b0,1'b0}),
        .S6_AXI_ARID(1'b0),
        .S6_AXI_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S6_AXI_ARLOCK(1'b0),
        .S6_AXI_ARPROT({1'b0,1'b0,1'b0}),
        .S6_AXI_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S6_AXI_ARREADY(NLW_U0_S6_AXI_ARREADY_UNCONNECTED),
        .S6_AXI_ARSIZE({1'b0,1'b0,1'b0}),
        .S6_AXI_ARSNOOP({1'b0,1'b0,1'b0,1'b0}),
        .S6_AXI_ARVALID(1'b0),
        .S6_AXI_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S6_AXI_AWBAR({1'b0,1'b0}),
        .S6_AXI_AWBURST({1'b0,1'b0}),
        .S6_AXI_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S6_AXI_AWDOMAIN({1'b0,1'b0}),
        .S6_AXI_AWID(1'b0),
        .S6_AXI_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S6_AXI_AWLOCK(1'b0),
        .S6_AXI_AWPROT({1'b0,1'b0,1'b0}),
        .S6_AXI_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S6_AXI_AWREADY(NLW_U0_S6_AXI_AWREADY_UNCONNECTED),
        .S6_AXI_AWSIZE({1'b0,1'b0,1'b0}),
        .S6_AXI_AWSNOOP({1'b0,1'b0,1'b0}),
        .S6_AXI_AWVALID(1'b0),
        .S6_AXI_BID(NLW_U0_S6_AXI_BID_UNCONNECTED[0]),
        .S6_AXI_BREADY(1'b0),
        .S6_AXI_BRESP(NLW_U0_S6_AXI_BRESP_UNCONNECTED[1:0]),
        .S6_AXI_BVALID(NLW_U0_S6_AXI_BVALID_UNCONNECTED),
        .S6_AXI_CDDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S6_AXI_CDLAST(1'b0),
        .S6_AXI_CDREADY(NLW_U0_S6_AXI_CDREADY_UNCONNECTED),
        .S6_AXI_CDVALID(1'b0),
        .S6_AXI_CRREADY(NLW_U0_S6_AXI_CRREADY_UNCONNECTED),
        .S6_AXI_CRRESP({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S6_AXI_CRVALID(1'b0),
        .S6_AXI_GEN_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S6_AXI_GEN_ARBURST({1'b0,1'b0}),
        .S6_AXI_GEN_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S6_AXI_GEN_ARID(1'b0),
        .S6_AXI_GEN_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S6_AXI_GEN_ARLOCK(1'b0),
        .S6_AXI_GEN_ARPROT({1'b0,1'b0,1'b0}),
        .S6_AXI_GEN_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S6_AXI_GEN_ARREADY(NLW_U0_S6_AXI_GEN_ARREADY_UNCONNECTED),
        .S6_AXI_GEN_ARSIZE({1'b0,1'b0,1'b0}),
        .S6_AXI_GEN_ARVALID(1'b0),
        .S6_AXI_GEN_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S6_AXI_GEN_AWBURST({1'b0,1'b0}),
        .S6_AXI_GEN_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S6_AXI_GEN_AWID(1'b0),
        .S6_AXI_GEN_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S6_AXI_GEN_AWLOCK(1'b0),
        .S6_AXI_GEN_AWPROT({1'b0,1'b0,1'b0}),
        .S6_AXI_GEN_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S6_AXI_GEN_AWREADY(NLW_U0_S6_AXI_GEN_AWREADY_UNCONNECTED),
        .S6_AXI_GEN_AWSIZE({1'b0,1'b0,1'b0}),
        .S6_AXI_GEN_AWVALID(1'b0),
        .S6_AXI_GEN_BID(NLW_U0_S6_AXI_GEN_BID_UNCONNECTED[0]),
        .S6_AXI_GEN_BREADY(1'b0),
        .S6_AXI_GEN_BRESP(NLW_U0_S6_AXI_GEN_BRESP_UNCONNECTED[1:0]),
        .S6_AXI_GEN_BVALID(NLW_U0_S6_AXI_GEN_BVALID_UNCONNECTED),
        .S6_AXI_GEN_RDATA(NLW_U0_S6_AXI_GEN_RDATA_UNCONNECTED[31:0]),
        .S6_AXI_GEN_RID(NLW_U0_S6_AXI_GEN_RID_UNCONNECTED[0]),
        .S6_AXI_GEN_RLAST(NLW_U0_S6_AXI_GEN_RLAST_UNCONNECTED),
        .S6_AXI_GEN_RREADY(1'b0),
        .S6_AXI_GEN_RRESP(NLW_U0_S6_AXI_GEN_RRESP_UNCONNECTED[1:0]),
        .S6_AXI_GEN_RVALID(NLW_U0_S6_AXI_GEN_RVALID_UNCONNECTED),
        .S6_AXI_GEN_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S6_AXI_GEN_WLAST(1'b0),
        .S6_AXI_GEN_WREADY(NLW_U0_S6_AXI_GEN_WREADY_UNCONNECTED),
        .S6_AXI_GEN_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S6_AXI_GEN_WVALID(1'b0),
        .S6_AXI_RACK(1'b0),
        .S6_AXI_RDATA(NLW_U0_S6_AXI_RDATA_UNCONNECTED[31:0]),
        .S6_AXI_RID(NLW_U0_S6_AXI_RID_UNCONNECTED[0]),
        .S6_AXI_RLAST(NLW_U0_S6_AXI_RLAST_UNCONNECTED),
        .S6_AXI_RREADY(1'b0),
        .S6_AXI_RRESP(NLW_U0_S6_AXI_RRESP_UNCONNECTED[1:0]),
        .S6_AXI_RVALID(NLW_U0_S6_AXI_RVALID_UNCONNECTED),
        .S6_AXI_WACK(1'b0),
        .S6_AXI_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S6_AXI_WLAST(1'b0),
        .S6_AXI_WREADY(NLW_U0_S6_AXI_WREADY_UNCONNECTED),
        .S6_AXI_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S6_AXI_WVALID(1'b0),
        .S7_AXI_ACADDR(NLW_U0_S7_AXI_ACADDR_UNCONNECTED[31:0]),
        .S7_AXI_ACPROT(NLW_U0_S7_AXI_ACPROT_UNCONNECTED[2:0]),
        .S7_AXI_ACREADY(1'b0),
        .S7_AXI_ACSNOOP(NLW_U0_S7_AXI_ACSNOOP_UNCONNECTED[3:0]),
        .S7_AXI_ACVALID(NLW_U0_S7_AXI_ACVALID_UNCONNECTED),
        .S7_AXI_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S7_AXI_ARBAR({1'b0,1'b0}),
        .S7_AXI_ARBURST({1'b0,1'b0}),
        .S7_AXI_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S7_AXI_ARDOMAIN({1'b0,1'b0}),
        .S7_AXI_ARID(1'b0),
        .S7_AXI_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S7_AXI_ARLOCK(1'b0),
        .S7_AXI_ARPROT({1'b0,1'b0,1'b0}),
        .S7_AXI_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S7_AXI_ARREADY(NLW_U0_S7_AXI_ARREADY_UNCONNECTED),
        .S7_AXI_ARSIZE({1'b0,1'b0,1'b0}),
        .S7_AXI_ARSNOOP({1'b0,1'b0,1'b0,1'b0}),
        .S7_AXI_ARVALID(1'b0),
        .S7_AXI_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S7_AXI_AWBAR({1'b0,1'b0}),
        .S7_AXI_AWBURST({1'b0,1'b0}),
        .S7_AXI_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S7_AXI_AWDOMAIN({1'b0,1'b0}),
        .S7_AXI_AWID(1'b0),
        .S7_AXI_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S7_AXI_AWLOCK(1'b0),
        .S7_AXI_AWPROT({1'b0,1'b0,1'b0}),
        .S7_AXI_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S7_AXI_AWREADY(NLW_U0_S7_AXI_AWREADY_UNCONNECTED),
        .S7_AXI_AWSIZE({1'b0,1'b0,1'b0}),
        .S7_AXI_AWSNOOP({1'b0,1'b0,1'b0}),
        .S7_AXI_AWVALID(1'b0),
        .S7_AXI_BID(NLW_U0_S7_AXI_BID_UNCONNECTED[0]),
        .S7_AXI_BREADY(1'b0),
        .S7_AXI_BRESP(NLW_U0_S7_AXI_BRESP_UNCONNECTED[1:0]),
        .S7_AXI_BVALID(NLW_U0_S7_AXI_BVALID_UNCONNECTED),
        .S7_AXI_CDDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S7_AXI_CDLAST(1'b0),
        .S7_AXI_CDREADY(NLW_U0_S7_AXI_CDREADY_UNCONNECTED),
        .S7_AXI_CDVALID(1'b0),
        .S7_AXI_CRREADY(NLW_U0_S7_AXI_CRREADY_UNCONNECTED),
        .S7_AXI_CRRESP({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S7_AXI_CRVALID(1'b0),
        .S7_AXI_GEN_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S7_AXI_GEN_ARBURST({1'b0,1'b0}),
        .S7_AXI_GEN_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S7_AXI_GEN_ARID(1'b0),
        .S7_AXI_GEN_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S7_AXI_GEN_ARLOCK(1'b0),
        .S7_AXI_GEN_ARPROT({1'b0,1'b0,1'b0}),
        .S7_AXI_GEN_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S7_AXI_GEN_ARREADY(NLW_U0_S7_AXI_GEN_ARREADY_UNCONNECTED),
        .S7_AXI_GEN_ARSIZE({1'b0,1'b0,1'b0}),
        .S7_AXI_GEN_ARVALID(1'b0),
        .S7_AXI_GEN_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S7_AXI_GEN_AWBURST({1'b0,1'b0}),
        .S7_AXI_GEN_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S7_AXI_GEN_AWID(1'b0),
        .S7_AXI_GEN_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S7_AXI_GEN_AWLOCK(1'b0),
        .S7_AXI_GEN_AWPROT({1'b0,1'b0,1'b0}),
        .S7_AXI_GEN_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S7_AXI_GEN_AWREADY(NLW_U0_S7_AXI_GEN_AWREADY_UNCONNECTED),
        .S7_AXI_GEN_AWSIZE({1'b0,1'b0,1'b0}),
        .S7_AXI_GEN_AWVALID(1'b0),
        .S7_AXI_GEN_BID(NLW_U0_S7_AXI_GEN_BID_UNCONNECTED[0]),
        .S7_AXI_GEN_BREADY(1'b0),
        .S7_AXI_GEN_BRESP(NLW_U0_S7_AXI_GEN_BRESP_UNCONNECTED[1:0]),
        .S7_AXI_GEN_BVALID(NLW_U0_S7_AXI_GEN_BVALID_UNCONNECTED),
        .S7_AXI_GEN_RDATA(NLW_U0_S7_AXI_GEN_RDATA_UNCONNECTED[31:0]),
        .S7_AXI_GEN_RID(NLW_U0_S7_AXI_GEN_RID_UNCONNECTED[0]),
        .S7_AXI_GEN_RLAST(NLW_U0_S7_AXI_GEN_RLAST_UNCONNECTED),
        .S7_AXI_GEN_RREADY(1'b0),
        .S7_AXI_GEN_RRESP(NLW_U0_S7_AXI_GEN_RRESP_UNCONNECTED[1:0]),
        .S7_AXI_GEN_RVALID(NLW_U0_S7_AXI_GEN_RVALID_UNCONNECTED),
        .S7_AXI_GEN_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S7_AXI_GEN_WLAST(1'b0),
        .S7_AXI_GEN_WREADY(NLW_U0_S7_AXI_GEN_WREADY_UNCONNECTED),
        .S7_AXI_GEN_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S7_AXI_GEN_WVALID(1'b0),
        .S7_AXI_RACK(1'b0),
        .S7_AXI_RDATA(NLW_U0_S7_AXI_RDATA_UNCONNECTED[31:0]),
        .S7_AXI_RID(NLW_U0_S7_AXI_RID_UNCONNECTED[0]),
        .S7_AXI_RLAST(NLW_U0_S7_AXI_RLAST_UNCONNECTED),
        .S7_AXI_RREADY(1'b0),
        .S7_AXI_RRESP(NLW_U0_S7_AXI_RRESP_UNCONNECTED[1:0]),
        .S7_AXI_RVALID(NLW_U0_S7_AXI_RVALID_UNCONNECTED),
        .S7_AXI_WACK(1'b0),
        .S7_AXI_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S7_AXI_WLAST(1'b0),
        .S7_AXI_WREADY(NLW_U0_S7_AXI_WREADY_UNCONNECTED),
        .S7_AXI_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S7_AXI_WVALID(1'b0),
        .S8_AXI_ACADDR(NLW_U0_S8_AXI_ACADDR_UNCONNECTED[31:0]),
        .S8_AXI_ACPROT(NLW_U0_S8_AXI_ACPROT_UNCONNECTED[2:0]),
        .S8_AXI_ACREADY(1'b0),
        .S8_AXI_ACSNOOP(NLW_U0_S8_AXI_ACSNOOP_UNCONNECTED[3:0]),
        .S8_AXI_ACVALID(NLW_U0_S8_AXI_ACVALID_UNCONNECTED),
        .S8_AXI_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S8_AXI_ARBAR({1'b0,1'b0}),
        .S8_AXI_ARBURST({1'b0,1'b0}),
        .S8_AXI_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S8_AXI_ARDOMAIN({1'b0,1'b0}),
        .S8_AXI_ARID(1'b0),
        .S8_AXI_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S8_AXI_ARLOCK(1'b0),
        .S8_AXI_ARPROT({1'b0,1'b0,1'b0}),
        .S8_AXI_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S8_AXI_ARREADY(NLW_U0_S8_AXI_ARREADY_UNCONNECTED),
        .S8_AXI_ARSIZE({1'b0,1'b0,1'b0}),
        .S8_AXI_ARSNOOP({1'b0,1'b0,1'b0,1'b0}),
        .S8_AXI_ARVALID(1'b0),
        .S8_AXI_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S8_AXI_AWBAR({1'b0,1'b0}),
        .S8_AXI_AWBURST({1'b0,1'b0}),
        .S8_AXI_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S8_AXI_AWDOMAIN({1'b0,1'b0}),
        .S8_AXI_AWID(1'b0),
        .S8_AXI_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S8_AXI_AWLOCK(1'b0),
        .S8_AXI_AWPROT({1'b0,1'b0,1'b0}),
        .S8_AXI_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S8_AXI_AWREADY(NLW_U0_S8_AXI_AWREADY_UNCONNECTED),
        .S8_AXI_AWSIZE({1'b0,1'b0,1'b0}),
        .S8_AXI_AWSNOOP({1'b0,1'b0,1'b0}),
        .S8_AXI_AWVALID(1'b0),
        .S8_AXI_BID(NLW_U0_S8_AXI_BID_UNCONNECTED[0]),
        .S8_AXI_BREADY(1'b0),
        .S8_AXI_BRESP(NLW_U0_S8_AXI_BRESP_UNCONNECTED[1:0]),
        .S8_AXI_BVALID(NLW_U0_S8_AXI_BVALID_UNCONNECTED),
        .S8_AXI_CDDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S8_AXI_CDLAST(1'b0),
        .S8_AXI_CDREADY(NLW_U0_S8_AXI_CDREADY_UNCONNECTED),
        .S8_AXI_CDVALID(1'b0),
        .S8_AXI_CRREADY(NLW_U0_S8_AXI_CRREADY_UNCONNECTED),
        .S8_AXI_CRRESP({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S8_AXI_CRVALID(1'b0),
        .S8_AXI_GEN_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S8_AXI_GEN_ARBURST({1'b0,1'b0}),
        .S8_AXI_GEN_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S8_AXI_GEN_ARID(1'b0),
        .S8_AXI_GEN_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S8_AXI_GEN_ARLOCK(1'b0),
        .S8_AXI_GEN_ARPROT({1'b0,1'b0,1'b0}),
        .S8_AXI_GEN_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S8_AXI_GEN_ARREADY(NLW_U0_S8_AXI_GEN_ARREADY_UNCONNECTED),
        .S8_AXI_GEN_ARSIZE({1'b0,1'b0,1'b0}),
        .S8_AXI_GEN_ARVALID(1'b0),
        .S8_AXI_GEN_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S8_AXI_GEN_AWBURST({1'b0,1'b0}),
        .S8_AXI_GEN_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S8_AXI_GEN_AWID(1'b0),
        .S8_AXI_GEN_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S8_AXI_GEN_AWLOCK(1'b0),
        .S8_AXI_GEN_AWPROT({1'b0,1'b0,1'b0}),
        .S8_AXI_GEN_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S8_AXI_GEN_AWREADY(NLW_U0_S8_AXI_GEN_AWREADY_UNCONNECTED),
        .S8_AXI_GEN_AWSIZE({1'b0,1'b0,1'b0}),
        .S8_AXI_GEN_AWVALID(1'b0),
        .S8_AXI_GEN_BID(NLW_U0_S8_AXI_GEN_BID_UNCONNECTED[0]),
        .S8_AXI_GEN_BREADY(1'b0),
        .S8_AXI_GEN_BRESP(NLW_U0_S8_AXI_GEN_BRESP_UNCONNECTED[1:0]),
        .S8_AXI_GEN_BVALID(NLW_U0_S8_AXI_GEN_BVALID_UNCONNECTED),
        .S8_AXI_GEN_RDATA(NLW_U0_S8_AXI_GEN_RDATA_UNCONNECTED[31:0]),
        .S8_AXI_GEN_RID(NLW_U0_S8_AXI_GEN_RID_UNCONNECTED[0]),
        .S8_AXI_GEN_RLAST(NLW_U0_S8_AXI_GEN_RLAST_UNCONNECTED),
        .S8_AXI_GEN_RREADY(1'b0),
        .S8_AXI_GEN_RRESP(NLW_U0_S8_AXI_GEN_RRESP_UNCONNECTED[1:0]),
        .S8_AXI_GEN_RVALID(NLW_U0_S8_AXI_GEN_RVALID_UNCONNECTED),
        .S8_AXI_GEN_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S8_AXI_GEN_WLAST(1'b0),
        .S8_AXI_GEN_WREADY(NLW_U0_S8_AXI_GEN_WREADY_UNCONNECTED),
        .S8_AXI_GEN_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S8_AXI_GEN_WVALID(1'b0),
        .S8_AXI_RACK(1'b0),
        .S8_AXI_RDATA(NLW_U0_S8_AXI_RDATA_UNCONNECTED[31:0]),
        .S8_AXI_RID(NLW_U0_S8_AXI_RID_UNCONNECTED[0]),
        .S8_AXI_RLAST(NLW_U0_S8_AXI_RLAST_UNCONNECTED),
        .S8_AXI_RREADY(1'b0),
        .S8_AXI_RRESP(NLW_U0_S8_AXI_RRESP_UNCONNECTED[1:0]),
        .S8_AXI_RVALID(NLW_U0_S8_AXI_RVALID_UNCONNECTED),
        .S8_AXI_WACK(1'b0),
        .S8_AXI_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S8_AXI_WLAST(1'b0),
        .S8_AXI_WREADY(NLW_U0_S8_AXI_WREADY_UNCONNECTED),
        .S8_AXI_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S8_AXI_WVALID(1'b0),
        .S9_AXI_ACADDR(NLW_U0_S9_AXI_ACADDR_UNCONNECTED[31:0]),
        .S9_AXI_ACPROT(NLW_U0_S9_AXI_ACPROT_UNCONNECTED[2:0]),
        .S9_AXI_ACREADY(1'b0),
        .S9_AXI_ACSNOOP(NLW_U0_S9_AXI_ACSNOOP_UNCONNECTED[3:0]),
        .S9_AXI_ACVALID(NLW_U0_S9_AXI_ACVALID_UNCONNECTED),
        .S9_AXI_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S9_AXI_ARBAR({1'b0,1'b0}),
        .S9_AXI_ARBURST({1'b0,1'b0}),
        .S9_AXI_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S9_AXI_ARDOMAIN({1'b0,1'b0}),
        .S9_AXI_ARID(1'b0),
        .S9_AXI_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S9_AXI_ARLOCK(1'b0),
        .S9_AXI_ARPROT({1'b0,1'b0,1'b0}),
        .S9_AXI_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S9_AXI_ARREADY(NLW_U0_S9_AXI_ARREADY_UNCONNECTED),
        .S9_AXI_ARSIZE({1'b0,1'b0,1'b0}),
        .S9_AXI_ARSNOOP({1'b0,1'b0,1'b0,1'b0}),
        .S9_AXI_ARVALID(1'b0),
        .S9_AXI_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S9_AXI_AWBAR({1'b0,1'b0}),
        .S9_AXI_AWBURST({1'b0,1'b0}),
        .S9_AXI_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S9_AXI_AWDOMAIN({1'b0,1'b0}),
        .S9_AXI_AWID(1'b0),
        .S9_AXI_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S9_AXI_AWLOCK(1'b0),
        .S9_AXI_AWPROT({1'b0,1'b0,1'b0}),
        .S9_AXI_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S9_AXI_AWREADY(NLW_U0_S9_AXI_AWREADY_UNCONNECTED),
        .S9_AXI_AWSIZE({1'b0,1'b0,1'b0}),
        .S9_AXI_AWSNOOP({1'b0,1'b0,1'b0}),
        .S9_AXI_AWVALID(1'b0),
        .S9_AXI_BID(NLW_U0_S9_AXI_BID_UNCONNECTED[0]),
        .S9_AXI_BREADY(1'b0),
        .S9_AXI_BRESP(NLW_U0_S9_AXI_BRESP_UNCONNECTED[1:0]),
        .S9_AXI_BVALID(NLW_U0_S9_AXI_BVALID_UNCONNECTED),
        .S9_AXI_CDDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S9_AXI_CDLAST(1'b0),
        .S9_AXI_CDREADY(NLW_U0_S9_AXI_CDREADY_UNCONNECTED),
        .S9_AXI_CDVALID(1'b0),
        .S9_AXI_CRREADY(NLW_U0_S9_AXI_CRREADY_UNCONNECTED),
        .S9_AXI_CRRESP({1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S9_AXI_CRVALID(1'b0),
        .S9_AXI_GEN_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S9_AXI_GEN_ARBURST({1'b0,1'b0}),
        .S9_AXI_GEN_ARCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S9_AXI_GEN_ARID(1'b0),
        .S9_AXI_GEN_ARLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S9_AXI_GEN_ARLOCK(1'b0),
        .S9_AXI_GEN_ARPROT({1'b0,1'b0,1'b0}),
        .S9_AXI_GEN_ARQOS({1'b0,1'b0,1'b0,1'b0}),
        .S9_AXI_GEN_ARREADY(NLW_U0_S9_AXI_GEN_ARREADY_UNCONNECTED),
        .S9_AXI_GEN_ARSIZE({1'b0,1'b0,1'b0}),
        .S9_AXI_GEN_ARVALID(1'b0),
        .S9_AXI_GEN_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S9_AXI_GEN_AWBURST({1'b0,1'b0}),
        .S9_AXI_GEN_AWCACHE({1'b0,1'b0,1'b0,1'b0}),
        .S9_AXI_GEN_AWID(1'b0),
        .S9_AXI_GEN_AWLEN({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S9_AXI_GEN_AWLOCK(1'b0),
        .S9_AXI_GEN_AWPROT({1'b0,1'b0,1'b0}),
        .S9_AXI_GEN_AWQOS({1'b0,1'b0,1'b0,1'b0}),
        .S9_AXI_GEN_AWREADY(NLW_U0_S9_AXI_GEN_AWREADY_UNCONNECTED),
        .S9_AXI_GEN_AWSIZE({1'b0,1'b0,1'b0}),
        .S9_AXI_GEN_AWVALID(1'b0),
        .S9_AXI_GEN_BID(NLW_U0_S9_AXI_GEN_BID_UNCONNECTED[0]),
        .S9_AXI_GEN_BREADY(1'b0),
        .S9_AXI_GEN_BRESP(NLW_U0_S9_AXI_GEN_BRESP_UNCONNECTED[1:0]),
        .S9_AXI_GEN_BVALID(NLW_U0_S9_AXI_GEN_BVALID_UNCONNECTED),
        .S9_AXI_GEN_RDATA(NLW_U0_S9_AXI_GEN_RDATA_UNCONNECTED[31:0]),
        .S9_AXI_GEN_RID(NLW_U0_S9_AXI_GEN_RID_UNCONNECTED[0]),
        .S9_AXI_GEN_RLAST(NLW_U0_S9_AXI_GEN_RLAST_UNCONNECTED),
        .S9_AXI_GEN_RREADY(1'b0),
        .S9_AXI_GEN_RRESP(NLW_U0_S9_AXI_GEN_RRESP_UNCONNECTED[1:0]),
        .S9_AXI_GEN_RVALID(NLW_U0_S9_AXI_GEN_RVALID_UNCONNECTED),
        .S9_AXI_GEN_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S9_AXI_GEN_WLAST(1'b0),
        .S9_AXI_GEN_WREADY(NLW_U0_S9_AXI_GEN_WREADY_UNCONNECTED),
        .S9_AXI_GEN_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S9_AXI_GEN_WVALID(1'b0),
        .S9_AXI_RACK(1'b0),
        .S9_AXI_RDATA(NLW_U0_S9_AXI_RDATA_UNCONNECTED[31:0]),
        .S9_AXI_RID(NLW_U0_S9_AXI_RID_UNCONNECTED[0]),
        .S9_AXI_RLAST(NLW_U0_S9_AXI_RLAST_UNCONNECTED),
        .S9_AXI_RREADY(1'b0),
        .S9_AXI_RRESP(NLW_U0_S9_AXI_RRESP_UNCONNECTED[1:0]),
        .S9_AXI_RVALID(NLW_U0_S9_AXI_RVALID_UNCONNECTED),
        .S9_AXI_WACK(1'b0),
        .S9_AXI_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S9_AXI_WLAST(1'b0),
        .S9_AXI_WREADY(NLW_U0_S9_AXI_WREADY_UNCONNECTED),
        .S9_AXI_WSTRB({1'b0,1'b0,1'b0,1'b0}),
        .S9_AXI_WVALID(1'b0),
        .S_AXI_CTRL_ARADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S_AXI_CTRL_ARPROT({1'b0,1'b1,1'b0}),
        .S_AXI_CTRL_ARREADY(NLW_U0_S_AXI_CTRL_ARREADY_UNCONNECTED),
        .S_AXI_CTRL_ARVALID(1'b0),
        .S_AXI_CTRL_AWADDR({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S_AXI_CTRL_AWPROT({1'b0,1'b1,1'b0}),
        .S_AXI_CTRL_AWREADY(NLW_U0_S_AXI_CTRL_AWREADY_UNCONNECTED),
        .S_AXI_CTRL_AWVALID(1'b0),
        .S_AXI_CTRL_BREADY(1'b0),
        .S_AXI_CTRL_BRESP(NLW_U0_S_AXI_CTRL_BRESP_UNCONNECTED[1:0]),
        .S_AXI_CTRL_BVALID(NLW_U0_S_AXI_CTRL_BVALID_UNCONNECTED),
        .S_AXI_CTRL_RDATA(NLW_U0_S_AXI_CTRL_RDATA_UNCONNECTED[31:0]),
        .S_AXI_CTRL_RREADY(1'b0),
        .S_AXI_CTRL_RRESP(NLW_U0_S_AXI_CTRL_RRESP_UNCONNECTED[1:0]),
        .S_AXI_CTRL_RVALID(NLW_U0_S_AXI_CTRL_RVALID_UNCONNECTED),
        .S_AXI_CTRL_WDATA({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .S_AXI_CTRL_WREADY(NLW_U0_S_AXI_CTRL_WREADY_UNCONNECTED),
        .S_AXI_CTRL_WVALID(1'b0));
endmodule

(* C_CE_LOW = "1'b0" *) (* C_IS_SET = "1'b0" *) (* C_NUM_CE = "1" *) 
(* C_TARGET = "3" *) (* ORIG_REF_NAME = "bit_reg_ce" *) 
module design_1_system_cache_0_0_bit_reg_ce
   (CLK,
    SR,
    CE,
    D,
    Q);
  input CLK;
  input SR;
  input [0:0]CE;
  input D;
  output Q;

  wire [0:0]CE;
  wire CLK;
  wire D;
  wire Q;
  wire SR;

  design_1_system_cache_0_0_reg_ce_284 Inst
       (.CE(CE),
        .CLK(CLK),
        .D(D),
        .Q(Q),
        .SR(SR));
endmodule

(* ORIG_REF_NAME = "bit_reg_ce" *) 
module design_1_system_cache_0_0_bit_reg_ce_102
   (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    Q,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    ACLK);
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  input Q;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input ACLK;

  wire ACLK;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;

  design_1_system_cache_0_0_reg_ce_271 Inst
       (.ACLK(ACLK),
        .Q(Q),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ));
endmodule

(* ORIG_REF_NAME = "bit_reg_ce" *) 
module design_1_system_cache_0_0_bit_reg_ce_103
   (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    \bs_fifo_mem_reg[0][Src][1] ,
    Q,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    ACLK,
    \bs_fifo_mem_reg[0][Src][1]_0 ,
    update_write_hit,
    \update_info[Keep] ,
    queue_push120_out,
    update_write_miss,
    \update_info_reg[Allocate] );
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  output \bs_fifo_mem_reg[0][Src][1] ;
  input Q;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input ACLK;
  input [0:0]\bs_fifo_mem_reg[0][Src][1]_0 ;
  input update_write_hit;
  input \update_info[Keep] ;
  input queue_push120_out;
  input update_write_miss;
  input \update_info_reg[Allocate] ;

  wire ACLK;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \bs_fifo_mem_reg[0][Src][1] ;
  wire [0:0]\bs_fifo_mem_reg[0][Src][1]_0 ;
  wire queue_push120_out;
  wire \update_info[Keep] ;
  wire \update_info_reg[Allocate] ;
  wire update_write_hit;
  wire update_write_miss;

  design_1_system_cache_0_0_reg_ce_270 Inst
       (.ACLK(ACLK),
        .Q(Q),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .\bs_fifo_mem_reg[0][Src][1] (\bs_fifo_mem_reg[0][Src][1] ),
        .\bs_fifo_mem_reg[0][Src][1]_0 (\bs_fifo_mem_reg[0][Src][1]_0 ),
        .queue_push120_out(queue_push120_out),
        .\update_info[Keep] (\update_info[Keep] ),
        .\update_info_reg[Allocate] (\update_info_reg[Allocate] ),
        .update_write_hit(update_write_hit),
        .update_write_miss(update_write_miss));
endmodule

(* ORIG_REF_NAME = "bit_reg_ce" *) 
module design_1_system_cache_0_0_bit_reg_ce_104
   (update_need_bs,
    Q,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    ACLK);
  output update_need_bs;
  input Q;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  input ACLK;

  wire ACLK;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire update_need_bs;

  design_1_system_cache_0_0_reg_ce_269 Inst
       (.ACLK(ACLK),
        .Q(Q),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .update_need_bs(update_need_bs));
endmodule

(* ORIG_REF_NAME = "bit_reg_ce" *) 
module design_1_system_cache_0_0_bit_reg_ce_105
   (lu_check_valid_delayed_reg,
    S,
    wr_port_data_valid_i_reg,
    S_0,
    wr_port_data_ready,
    lud_mem_waiting_for_pipe_reg,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    lookup_write_miss,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_3 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_4 ,
    \update_info_reg[Allocate] ,
    p_185_in,
    A_N160_out,
    lookup_push_write_miss,
    S_1,
    lud_step_delayed_restart_reg,
    S_2,
    lookup_read_miss,
    lud_mem_delayed_read_data0,
    lookup_last_beat,
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ,
    lud_addr_pipeline_full_reg,
    lud_addr_pipeline_full_reg_0,
    E,
    \lookup_read_data_new[0,0][Hit] ,
    \update_old_tag_reg[Addr][14] ,
    wm_evict_reg,
    \lookup_read_data_new[0,1][Valid] ,
    \lookup_read_data_new[0,0][Valid] ,
    lookup_write_hit,
    \update_info_reg[Evict] ,
    lookup_wm_will_use,
    lookup_miss,
    DI,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_5 ,
    ADDRARDADDR,
    \lookup_offset_len_cnt_reg[7] ,
    lookup_next_is_last_beat,
    lu_ds_last_beat_next_last_n,
    SRI,
    DIBDI,
    lru_check_used_way,
    \lookup_offset_cnt_reg[5] ,
    \lud_mem_port_one_hot_reg[0] ,
    \lud_mem_port_one_hot_reg[1] ,
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ,
    S_3,
    lud_addr_pipeline_full_reg_1,
    A141_out,
    S_4,
    S_5,
    A121_out,
    A149_out,
    A134_out,
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_1 ,
    \update_old_tag_reg[Addr][14]_0 ,
    wm_evict_reg_0,
    lud_mem_last_reg,
    \lookup_offset_cnt_reg[5]_0 ,
    \lookup_offset_cnt_reg[3] ,
    lookup_offset_first_reg,
    lu_check_wait_for_update_reg,
    lu_check_wr_already_pushed_reg,
    lud_mem_already_used_reg,
    lud_write_hit_done_reg,
    lu_check_read_info_done_reg,
    \lu_check_protected_way_reg[0] ,
    SRI_6,
    SRI_7,
    Q,
    ACLK,
    \lu_check_info_reg[Port_Num][0] ,
    \wm_port_reg[0] ,
    p_138_in,
    lu_mem_valid_reg,
    \Use_FPGA.Full_Inst ,
    lud_addr_piperun,
    lud_mem_waiting_for_pipe_reg_0,
    \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ,
    lu_check_piperun,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_6 ,
    update_piperun,
    \lu_check_locked_hit_reg[1] ,
    \lu_check_tag_hit_reg[1] ,
    \lu_check_info_reg[KillHit] ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_7 ,
    \lu_check_info_reg[Wr]_0 ,
    \lu_check_info_reg[KillHit]_0 ,
    update_need_bs,
    update_done_tag_write_reg,
    \lu_check_info_reg[Early] ,
    \lu_check_info_reg[Wr] ,
    lookup_miss_dirty,
    lu_mem_protect_conflict_reg,
    lookup_access_data_late,
    lud_mem_delayed_read_data,
    lud_mem_keep_single_during_stall,
    lud_mem_speculative_valid,
    lu_check_wr_already_pushed,
    update_write_miss_full,
    lookup_protect_conflict,
    lookup_push_write_miss_pre,
    lookup_push_wm_stall,
    lud_mem_already_used,
    lud_addr_pipeline_full_reg_2,
    lud_addr_pipeline_full_reg_3,
    lud_step_delayed_restart,
    \update_release_tag_reg[Addr][11] ,
    lookup_restart_mem,
    \lu_mem_info_reg[Wr] ,
    lu_mem_valid_reg_0,
    \lu_check_locked_hit_reg[1]_0 ,
    \read_data_status[0,1][Hit_Full] ,
    \lud_mem_port_one_hot_reg[1]_0 ,
    lud_step_offset_is_read,
    lud_reg_valid_reg,
    lud_step_offset,
    \access_data_info[0,0][Valid] ,
    \access_data_info[0,1][Valid] ,
    lu_check_wait_for_update,
    lookup_data_hit_stall,
    \lu_check_valid_bits_reg[1] ,
    lu_check_read_info_done,
    \lu_check_port_one_hot_reg[0] ,
    \lu_check_info_reg[Keep] ,
    \lookup_offset_cnt_reg[5]_1 ,
    \lu_mem_info_reg[Addr][5] ,
    D,
    lud_mem_completed_reg,
    p_162_in,
    lu_check_single_beat,
    lu_mem_single_beat_reg,
    lookup_next_is_last_beat_reg,
    \lu_mem_info_reg[Len][7] ,
    \lookup_offset_len_cnt_reg[7]_0 ,
    \lu_check_info_reg[Len][7] ,
    lud_mem_waiting_for_pipe_reg_1,
    lookup_offset_first_reg_0,
    \lu_check_info_reg[Allocate] ,
    lru_check_next_way,
    O,
    \lu_check_info_reg[Addr_Use][5] ,
    \lu_mem_info_reg[Addr_Use][5] ,
    \lookup_offset_cnt_reg[4] ,
    \lu_mem_info_reg[Kind] ,
    \lu_check_info_reg[Kind] ,
    \lu_mem_info_reg[Port_Num][0] ,
    \lu_mem_info_reg[Addr][6] ,
    \lu_mem_info_reg[Addr][7] ,
    \lu_mem_info_reg[Addr][8] ,
    \lu_mem_info_reg[Addr][9] ,
    \lu_mem_info_reg[Addr][10] ,
    \lu_mem_info_reg[Addr][11] ,
    \lu_mem_info_reg[Addr][12] ,
    \lu_mem_info_reg[Addr][13] ,
    lud_mem_use_speculative,
    lud_write_hit_done_reg_0,
    \lu_check_tag_hit_copy_wm_reg[1] ,
    access_valid,
    \lu_check_info_reg[Addr_Stp][5] ,
    \lu_mem_info_reg[Addr_Stp][5] ,
    wr_port_data_last_i_reg,
    lu_check_protected_way);
  output lu_check_valid_delayed_reg;
  output S;
  output wr_port_data_valid_i_reg;
  output S_0;
  output wr_port_data_ready;
  output lud_mem_waiting_for_pipe_reg;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  output lookup_write_miss;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_3 ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_4 ;
  output \update_info_reg[Allocate] ;
  output p_185_in;
  output A_N160_out;
  output lookup_push_write_miss;
  output S_1;
  output lud_step_delayed_restart_reg;
  output S_2;
  output lookup_read_miss;
  output lud_mem_delayed_read_data0;
  output lookup_last_beat;
  output \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ;
  output lud_addr_pipeline_full_reg;
  output lud_addr_pipeline_full_reg_0;
  output [0:0]E;
  output \lookup_read_data_new[0,0][Hit] ;
  output \update_old_tag_reg[Addr][14] ;
  output wm_evict_reg;
  output \lookup_read_data_new[0,1][Valid] ;
  output \lookup_read_data_new[0,0][Valid] ;
  output lookup_write_hit;
  output \update_info_reg[Evict] ;
  output lookup_wm_will_use;
  output lookup_miss;
  output [3:0]DI;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_5 ;
  output [9:0]ADDRARDADDR;
  output [7:0]\lookup_offset_len_cnt_reg[7] ;
  output lookup_next_is_last_beat;
  output lu_ds_last_beat_next_last_n;
  output SRI;
  output [0:0]DIBDI;
  output lru_check_used_way;
  output [5:0]\lookup_offset_cnt_reg[5] ;
  output \lud_mem_port_one_hot_reg[0] ;
  output \lud_mem_port_one_hot_reg[1] ;
  output \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ;
  output S_3;
  output lud_addr_pipeline_full_reg_1;
  output A141_out;
  output S_4;
  output S_5;
  output A121_out;
  output A149_out;
  output A134_out;
  output \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_1 ;
  output \update_old_tag_reg[Addr][14]_0 ;
  output wm_evict_reg_0;
  output lud_mem_last_reg;
  output [1:0]\lookup_offset_cnt_reg[5]_0 ;
  output [3:0]\lookup_offset_cnt_reg[3] ;
  output lookup_offset_first_reg;
  output lu_check_wait_for_update_reg;
  output lu_check_wr_already_pushed_reg;
  output lud_mem_already_used_reg;
  output lud_write_hit_done_reg;
  output lu_check_read_info_done_reg;
  output \lu_check_protected_way_reg[0] ;
  output SRI_6;
  output SRI_7;
  input Q;
  input ACLK;
  input \lu_check_info_reg[Port_Num][0] ;
  input \wm_port_reg[0] ;
  input p_138_in;
  input lu_mem_valid_reg;
  input \Use_FPGA.Full_Inst ;
  input lud_addr_piperun;
  input lud_mem_waiting_for_pipe_reg_0;
  input \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ;
  input lu_check_piperun;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_6 ;
  input update_piperun;
  input [1:0]\lu_check_locked_hit_reg[1] ;
  input [1:0]\lu_check_tag_hit_reg[1] ;
  input \lu_check_info_reg[KillHit] ;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_7 ;
  input \lu_check_info_reg[Wr]_0 ;
  input \lu_check_info_reg[KillHit]_0 ;
  input update_need_bs;
  input update_done_tag_write_reg;
  input \lu_check_info_reg[Early] ;
  input \lu_check_info_reg[Wr] ;
  input lookup_miss_dirty;
  input lu_mem_protect_conflict_reg;
  input lookup_access_data_late;
  input lud_mem_delayed_read_data;
  input lud_mem_keep_single_during_stall;
  input lud_mem_speculative_valid;
  input lu_check_wr_already_pushed;
  input update_write_miss_full;
  input lookup_protect_conflict;
  input lookup_push_write_miss_pre;
  input lookup_push_wm_stall;
  input lud_mem_already_used;
  input lud_addr_pipeline_full_reg_2;
  input lud_addr_pipeline_full_reg_3;
  input lud_step_delayed_restart;
  input \update_release_tag_reg[Addr][11] ;
  input lookup_restart_mem;
  input \lu_mem_info_reg[Wr] ;
  input lu_mem_valid_reg_0;
  input \lu_check_locked_hit_reg[1]_0 ;
  input \read_data_status[0,1][Hit_Full] ;
  input \lud_mem_port_one_hot_reg[1]_0 ;
  input lud_step_offset_is_read;
  input lud_reg_valid_reg;
  input lud_step_offset;
  input \access_data_info[0,0][Valid] ;
  input \access_data_info[0,1][Valid] ;
  input lu_check_wait_for_update;
  input lookup_data_hit_stall;
  input [1:0]\lu_check_valid_bits_reg[1] ;
  input lu_check_read_info_done;
  input \lu_check_port_one_hot_reg[0] ;
  input \lu_check_info_reg[Keep] ;
  input [5:0]\lookup_offset_cnt_reg[5]_1 ;
  input [5:0]\lu_mem_info_reg[Addr][5] ;
  input [13:0]D;
  input lud_mem_completed_reg;
  input p_162_in;
  input lu_check_single_beat;
  input lu_mem_single_beat_reg;
  input lookup_next_is_last_beat_reg;
  input [7:0]\lu_mem_info_reg[Len][7] ;
  input [7:0]\lookup_offset_len_cnt_reg[7]_0 ;
  input [7:0]\lu_check_info_reg[Len][7] ;
  input lud_mem_waiting_for_pipe_reg_1;
  input lookup_offset_first_reg_0;
  input \lu_check_info_reg[Allocate] ;
  input lru_check_next_way;
  input [3:0]O;
  input [5:0]\lu_check_info_reg[Addr_Use][5] ;
  input [5:0]\lu_mem_info_reg[Addr_Use][5] ;
  input [1:0]\lookup_offset_cnt_reg[4] ;
  input \lu_mem_info_reg[Kind] ;
  input \lu_check_info_reg[Kind] ;
  input \lu_mem_info_reg[Port_Num][0] ;
  input \lu_mem_info_reg[Addr][6] ;
  input \lu_mem_info_reg[Addr][7] ;
  input \lu_mem_info_reg[Addr][8] ;
  input \lu_mem_info_reg[Addr][9] ;
  input \lu_mem_info_reg[Addr][10] ;
  input \lu_mem_info_reg[Addr][11] ;
  input \lu_mem_info_reg[Addr][12] ;
  input \lu_mem_info_reg[Addr][13] ;
  input lud_mem_use_speculative;
  input lud_write_hit_done_reg_0;
  input [1:0]\lu_check_tag_hit_copy_wm_reg[1] ;
  input access_valid;
  input [5:0]\lu_check_info_reg[Addr_Stp][5] ;
  input [5:0]\lu_mem_info_reg[Addr_Stp][5] ;
  input wr_port_data_last_i_reg;
  input lu_check_protected_way;

  wire A121_out;
  wire A134_out;
  wire A141_out;
  wire A149_out;
  wire ACLK;
  wire [9:0]ADDRARDADDR;
  wire A_N160_out;
  wire [13:0]D;
  wire [3:0]DI;
  wire [0:0]DIBDI;
  wire [0:0]E;
  wire [3:0]O;
  wire Q;
  wire S;
  wire SRI;
  wire SRI_6;
  wire SRI_7;
  wire S_0;
  wire S_1;
  wire S_2;
  wire S_3;
  wire S_4;
  wire S_5;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_3 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_4 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_5 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_6 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_7 ;
  wire \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_1 ;
  wire \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \Use_FPGA.Full_Inst ;
  wire \access_data_info[0,0][Valid] ;
  wire \access_data_info[0,1][Valid] ;
  wire access_valid;
  wire lookup_access_data_late;
  wire lookup_data_hit_stall;
  wire lookup_last_beat;
  wire lookup_miss;
  wire lookup_miss_dirty;
  wire lookup_next_is_last_beat;
  wire lookup_next_is_last_beat_reg;
  wire [3:0]\lookup_offset_cnt_reg[3] ;
  wire [1:0]\lookup_offset_cnt_reg[4] ;
  wire [5:0]\lookup_offset_cnt_reg[5] ;
  wire [1:0]\lookup_offset_cnt_reg[5]_0 ;
  wire [5:0]\lookup_offset_cnt_reg[5]_1 ;
  wire lookup_offset_first_reg;
  wire lookup_offset_first_reg_0;
  wire [7:0]\lookup_offset_len_cnt_reg[7] ;
  wire [7:0]\lookup_offset_len_cnt_reg[7]_0 ;
  wire lookup_protect_conflict;
  wire lookup_push_wm_stall;
  wire lookup_push_write_miss;
  wire lookup_push_write_miss_pre;
  wire \lookup_read_data_new[0,0][Hit] ;
  wire \lookup_read_data_new[0,0][Valid] ;
  wire \lookup_read_data_new[0,1][Valid] ;
  wire lookup_read_miss;
  wire lookup_restart_mem;
  wire lookup_wm_will_use;
  wire lookup_write_hit;
  wire lookup_write_miss;
  wire lru_check_next_way;
  wire lru_check_used_way;
  wire [5:0]\lu_check_info_reg[Addr_Stp][5] ;
  wire [5:0]\lu_check_info_reg[Addr_Use][5] ;
  wire \lu_check_info_reg[Allocate] ;
  wire \lu_check_info_reg[Early] ;
  wire \lu_check_info_reg[Keep] ;
  wire \lu_check_info_reg[KillHit] ;
  wire \lu_check_info_reg[KillHit]_0 ;
  wire \lu_check_info_reg[Kind] ;
  wire [7:0]\lu_check_info_reg[Len][7] ;
  wire \lu_check_info_reg[Port_Num][0] ;
  wire \lu_check_info_reg[Wr] ;
  wire \lu_check_info_reg[Wr]_0 ;
  wire [1:0]\lu_check_locked_hit_reg[1] ;
  wire \lu_check_locked_hit_reg[1]_0 ;
  wire lu_check_piperun;
  wire \lu_check_port_one_hot_reg[0] ;
  wire lu_check_protected_way;
  wire \lu_check_protected_way_reg[0] ;
  wire lu_check_read_info_done;
  wire lu_check_read_info_done_reg;
  wire lu_check_single_beat;
  wire [1:0]\lu_check_tag_hit_copy_wm_reg[1] ;
  wire [1:0]\lu_check_tag_hit_reg[1] ;
  wire [1:0]\lu_check_valid_bits_reg[1] ;
  wire lu_check_valid_delayed_reg;
  wire lu_check_wait_for_update;
  wire lu_check_wait_for_update_reg;
  wire lu_check_wr_already_pushed;
  wire lu_check_wr_already_pushed_reg;
  wire lu_ds_last_beat_next_last_n;
  wire \lu_mem_info_reg[Addr][10] ;
  wire \lu_mem_info_reg[Addr][11] ;
  wire \lu_mem_info_reg[Addr][12] ;
  wire \lu_mem_info_reg[Addr][13] ;
  wire [5:0]\lu_mem_info_reg[Addr][5] ;
  wire \lu_mem_info_reg[Addr][6] ;
  wire \lu_mem_info_reg[Addr][7] ;
  wire \lu_mem_info_reg[Addr][8] ;
  wire \lu_mem_info_reg[Addr][9] ;
  wire [5:0]\lu_mem_info_reg[Addr_Stp][5] ;
  wire [5:0]\lu_mem_info_reg[Addr_Use][5] ;
  wire \lu_mem_info_reg[Kind] ;
  wire [7:0]\lu_mem_info_reg[Len][7] ;
  wire \lu_mem_info_reg[Port_Num][0] ;
  wire \lu_mem_info_reg[Wr] ;
  wire lu_mem_protect_conflict_reg;
  wire lu_mem_single_beat_reg;
  wire lu_mem_valid_reg;
  wire lu_mem_valid_reg_0;
  wire lud_addr_pipeline_full_reg;
  wire lud_addr_pipeline_full_reg_0;
  wire lud_addr_pipeline_full_reg_1;
  wire lud_addr_pipeline_full_reg_2;
  wire lud_addr_pipeline_full_reg_3;
  wire lud_addr_piperun;
  wire lud_mem_already_used;
  wire lud_mem_already_used_reg;
  wire lud_mem_completed_reg;
  wire lud_mem_delayed_read_data;
  wire lud_mem_delayed_read_data0;
  wire lud_mem_keep_single_during_stall;
  wire lud_mem_last_reg;
  wire \lud_mem_port_one_hot_reg[0] ;
  wire \lud_mem_port_one_hot_reg[1] ;
  wire \lud_mem_port_one_hot_reg[1]_0 ;
  wire lud_mem_speculative_valid;
  wire lud_mem_use_speculative;
  wire lud_mem_waiting_for_pipe_reg;
  wire lud_mem_waiting_for_pipe_reg_0;
  wire lud_mem_waiting_for_pipe_reg_1;
  wire lud_reg_valid_reg;
  wire lud_step_delayed_restart;
  wire lud_step_delayed_restart_reg;
  wire lud_step_offset;
  wire lud_step_offset_is_read;
  wire lud_write_hit_done_reg;
  wire lud_write_hit_done_reg_0;
  wire p_138_in;
  wire p_162_in;
  wire p_185_in;
  wire \read_data_status[0,1][Hit_Full] ;
  wire update_done_tag_write_reg;
  wire \update_info_reg[Allocate] ;
  wire \update_info_reg[Evict] ;
  wire update_need_bs;
  wire \update_old_tag_reg[Addr][14] ;
  wire \update_old_tag_reg[Addr][14]_0 ;
  wire update_piperun;
  wire \update_release_tag_reg[Addr][11] ;
  wire update_write_miss_full;
  wire wm_evict_reg;
  wire wm_evict_reg_0;
  wire \wm_port_reg[0] ;
  wire wr_port_data_last_i_reg;
  wire wr_port_data_ready;
  wire wr_port_data_valid_i_reg;

  design_1_system_cache_0_0_reg_ce_268 Inst
       (.A121_out(A121_out),
        .A134_out(A134_out),
        .A141_out(A141_out),
        .A149_out(A149_out),
        .ACLK(ACLK),
        .ADDRARDADDR(ADDRARDADDR),
        .A_N160_out(A_N160_out),
        .D(D),
        .DI(DI),
        .DIBDI(DIBDI),
        .E(E),
        .O(O),
        .Q(Q),
        .S(S),
        .SRI(SRI),
        .SRI_6(SRI_6),
        .SRI_7(SRI_7),
        .S_0(S_0),
        .S_1(S_1),
        .S_2(S_2),
        .S_3(S_3),
        .S_4(S_4),
        .S_5(S_5),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_3 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_4 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_3 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_5 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_4 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_6 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_5 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_7 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_6 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_8 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_7 ),
        .\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst (\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 (\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ),
        .\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_1 (\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_1 ),
        .\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst (\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ),
        .\Use_FPGA.Full_Inst (\Use_FPGA.Full_Inst ),
        .\access_data_info[0,0][Valid] (\access_data_info[0,0][Valid] ),
        .\access_data_info[0,1][Valid] (\access_data_info[0,1][Valid] ),
        .access_valid(access_valid),
        .lookup_access_data_late(lookup_access_data_late),
        .lookup_data_hit_stall(lookup_data_hit_stall),
        .lookup_miss(lookup_miss),
        .lookup_miss_dirty(lookup_miss_dirty),
        .lookup_next_is_last_beat(lookup_next_is_last_beat),
        .lookup_next_is_last_beat_reg(lookup_next_is_last_beat_reg),
        .\lookup_offset_cnt_reg[3] (\lookup_offset_cnt_reg[3] ),
        .\lookup_offset_cnt_reg[4] (\lookup_offset_cnt_reg[4] ),
        .\lookup_offset_cnt_reg[5] (\lookup_offset_cnt_reg[5] ),
        .\lookup_offset_cnt_reg[5]_0 (\lookup_offset_cnt_reg[5]_0 ),
        .\lookup_offset_cnt_reg[5]_1 (\lookup_offset_cnt_reg[5]_1 ),
        .lookup_offset_first_reg(lookup_offset_first_reg),
        .lookup_offset_first_reg_0(lookup_offset_first_reg_0),
        .\lookup_offset_len_cnt_reg[7] (\lookup_offset_len_cnt_reg[7] ),
        .\lookup_offset_len_cnt_reg[7]_0 (\lookup_offset_len_cnt_reg[7]_0 ),
        .lookup_protect_conflict(lookup_protect_conflict),
        .lookup_push_wm_stall(lookup_push_wm_stall),
        .lookup_push_write_miss(lookup_push_write_miss),
        .lookup_push_write_miss_pre(lookup_push_write_miss_pre),
        .\lookup_read_data_new[0,0][Hit] (\lookup_read_data_new[0,0][Hit] ),
        .\lookup_read_data_new[0,0][Valid] (\lookup_read_data_new[0,0][Valid] ),
        .\lookup_read_data_new[0,1][Valid] (\lookup_read_data_new[0,1][Valid] ),
        .lookup_read_hit_d1_reg(p_185_in),
        .lookup_restart_mem(lookup_restart_mem),
        .lookup_wm_will_use(lookup_wm_will_use),
        .lookup_write_hit(lookup_write_hit),
        .lookup_write_miss(lookup_write_miss),
        .lru_check_next_way(lru_check_next_way),
        .lru_check_used_way(lru_check_used_way),
        .\lu_check_info_reg[Addr_Stp][5] (\lu_check_info_reg[Addr_Stp][5] ),
        .\lu_check_info_reg[Addr_Use][5] (\lu_check_info_reg[Addr_Use][5] ),
        .\lu_check_info_reg[Allocate] (\lu_check_info_reg[Allocate] ),
        .\lu_check_info_reg[Early] (\lu_check_info_reg[Early] ),
        .\lu_check_info_reg[Keep] (\lu_check_info_reg[Keep] ),
        .\lu_check_info_reg[KillHit] (\lu_check_info_reg[KillHit] ),
        .\lu_check_info_reg[KillHit]_0 (\lu_check_info_reg[KillHit]_0 ),
        .\lu_check_info_reg[Kind] (\lu_check_info_reg[Kind] ),
        .\lu_check_info_reg[Len][7] (\lu_check_info_reg[Len][7] ),
        .\lu_check_info_reg[Port_Num][0] (\lu_check_info_reg[Port_Num][0] ),
        .\lu_check_info_reg[Wr] (\lu_check_info_reg[Wr] ),
        .\lu_check_info_reg[Wr]_0 (\lu_check_info_reg[Wr]_0 ),
        .\lu_check_locked_hit_reg[1] (\lu_check_locked_hit_reg[1] ),
        .\lu_check_locked_hit_reg[1]_0 (\lu_check_locked_hit_reg[1]_0 ),
        .lu_check_piperun(lu_check_piperun),
        .\lu_check_port_one_hot_reg[0] (\lu_check_port_one_hot_reg[0] ),
        .lu_check_protected_way(lu_check_protected_way),
        .\lu_check_protected_way_reg[0] (\lu_check_protected_way_reg[0] ),
        .lu_check_read_info_done(lu_check_read_info_done),
        .lu_check_read_info_done_reg(lu_check_read_info_done_reg),
        .lu_check_single_beat(lu_check_single_beat),
        .\lu_check_tag_hit_copy_wm_reg[1] (\lu_check_tag_hit_copy_wm_reg[1] ),
        .\lu_check_tag_hit_reg[1] (\lu_check_tag_hit_reg[1] ),
        .\lu_check_valid_bits_reg[1] (\lu_check_valid_bits_reg[1] ),
        .lu_check_valid_delayed_reg(lu_check_valid_delayed_reg),
        .lu_check_wait_for_update(lu_check_wait_for_update),
        .lu_check_wait_for_update_reg(lu_check_wait_for_update_reg),
        .lu_check_wr_already_pushed(lu_check_wr_already_pushed),
        .lu_check_wr_already_pushed_reg(lu_check_wr_already_pushed_reg),
        .lu_ds_last_beat_next_last_n(lu_ds_last_beat_next_last_n),
        .\lu_mem_info_reg[Addr][10] (\lu_mem_info_reg[Addr][10] ),
        .\lu_mem_info_reg[Addr][11] (\lu_mem_info_reg[Addr][11] ),
        .\lu_mem_info_reg[Addr][12] (\lu_mem_info_reg[Addr][12] ),
        .\lu_mem_info_reg[Addr][13] (\lu_mem_info_reg[Addr][13] ),
        .\lu_mem_info_reg[Addr][5] (\lu_mem_info_reg[Addr][5] ),
        .\lu_mem_info_reg[Addr][6] (\lu_mem_info_reg[Addr][6] ),
        .\lu_mem_info_reg[Addr][7] (\lu_mem_info_reg[Addr][7] ),
        .\lu_mem_info_reg[Addr][8] (\lu_mem_info_reg[Addr][8] ),
        .\lu_mem_info_reg[Addr][9] (\lu_mem_info_reg[Addr][9] ),
        .\lu_mem_info_reg[Addr_Stp][5] (\lu_mem_info_reg[Addr_Stp][5] ),
        .\lu_mem_info_reg[Addr_Use][5] (\lu_mem_info_reg[Addr_Use][5] ),
        .\lu_mem_info_reg[Kind] (\lu_mem_info_reg[Kind] ),
        .\lu_mem_info_reg[Len][7] (\lu_mem_info_reg[Len][7] ),
        .\lu_mem_info_reg[Port_Num][0] (\lu_mem_info_reg[Port_Num][0] ),
        .\lu_mem_info_reg[Wr] (\lu_mem_info_reg[Wr] ),
        .lu_mem_protect_conflict_reg(lu_mem_protect_conflict_reg),
        .lu_mem_single_beat_reg(lu_mem_single_beat_reg),
        .lu_mem_valid_reg(lu_mem_valid_reg),
        .lu_mem_valid_reg_0(lu_mem_valid_reg_0),
        .lud_addr_pipeline_full_reg(lud_addr_pipeline_full_reg),
        .lud_addr_pipeline_full_reg_0(lud_addr_pipeline_full_reg_0),
        .lud_addr_pipeline_full_reg_1(lud_addr_pipeline_full_reg_1),
        .lud_addr_pipeline_full_reg_2(lud_addr_pipeline_full_reg_2),
        .lud_addr_pipeline_full_reg_3(lud_addr_pipeline_full_reg_3),
        .lud_addr_piperun(lud_addr_piperun),
        .lud_mem_already_used(lud_mem_already_used),
        .lud_mem_already_used_reg(lud_mem_already_used_reg),
        .lud_mem_completed_reg(lud_mem_completed_reg),
        .lud_mem_delayed_read_data(lud_mem_delayed_read_data),
        .lud_mem_delayed_read_data0(lud_mem_delayed_read_data0),
        .lud_mem_keep_single_during_stall(lud_mem_keep_single_during_stall),
        .lud_mem_last_reg(lookup_last_beat),
        .lud_mem_last_reg_0(lud_mem_last_reg),
        .\lud_mem_port_one_hot_reg[0] (\lud_mem_port_one_hot_reg[0] ),
        .\lud_mem_port_one_hot_reg[1] (\lud_mem_port_one_hot_reg[1] ),
        .\lud_mem_port_one_hot_reg[1]_0 (\lud_mem_port_one_hot_reg[1]_0 ),
        .lud_mem_speculative_valid(lud_mem_speculative_valid),
        .lud_mem_use_speculative(lud_mem_use_speculative),
        .lud_mem_waiting_for_pipe_reg(lud_mem_waiting_for_pipe_reg),
        .lud_mem_waiting_for_pipe_reg_0(lud_mem_waiting_for_pipe_reg_0),
        .lud_mem_waiting_for_pipe_reg_1(lud_mem_waiting_for_pipe_reg_1),
        .lud_reg_valid_reg(lud_reg_valid_reg),
        .lud_step_delayed_restart(lud_step_delayed_restart),
        .lud_step_delayed_restart_reg(lud_step_delayed_restart_reg),
        .lud_step_offset(lud_step_offset),
        .lud_step_offset_is_read(lud_step_offset_is_read),
        .lud_write_hit_done_reg(lud_write_hit_done_reg),
        .lud_write_hit_done_reg_0(lud_write_hit_done_reg_0),
        .p_138_in(p_138_in),
        .p_162_in(p_162_in),
        .\read_data_status[0,1][Hit_Full] (\read_data_status[0,1][Hit_Full] ),
        .update_done_tag_write_reg(update_done_tag_write_reg),
        .\update_info_reg[Allocate] (\update_info_reg[Allocate] ),
        .\update_info_reg[Evict] (\update_info_reg[Evict] ),
        .update_need_bs(update_need_bs),
        .\update_old_tag_reg[Addr][14] (\update_old_tag_reg[Addr][14] ),
        .\update_old_tag_reg[Addr][14]_0 (\update_old_tag_reg[Addr][14]_0 ),
        .update_piperun(update_piperun),
        .update_read_miss_reg(lookup_read_miss),
        .\update_release_tag_reg[Addr][11] (\update_release_tag_reg[Addr][11] ),
        .update_write_miss_full(update_write_miss_full),
        .wm_evict_reg(wm_evict_reg),
        .wm_evict_reg_0(wm_evict_reg_0),
        .\wm_port_reg[0] (\wm_port_reg[0] ),
        .wr_port_data_last_i_reg(wr_port_data_last_i_reg),
        .wr_port_data_ready(wr_port_data_ready),
        .wr_port_data_valid_i_reg(wr_port_data_valid_i_reg));
endmodule

(* ORIG_REF_NAME = "bit_reg_ce" *) 
module design_1_system_cache_0_0_bit_reg_ce_106
   (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    \M_AXI_AWLEN_reg[7] ,
    \M_AXI_AWSIZE_reg[1] ,
    \M_AXI_AWADDR_reg[31] ,
    \M_AXI_AWBURST_reg[1] ,
    Q,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    ACLK,
    \update_info_reg[Len][7] ,
    \update_info_reg[Size][2] ,
    \update_info_reg[Size][2]_0 ,
    \update_info_reg[Size][2]_1 ,
    \update_info_reg[Len][2] ,
    \update_info_reg[Len][1] ,
    \update_info_reg[Len][0] ,
    \update_info_reg[Len][0]_0 ,
    \update_info_reg[Len][1]_0 ,
    \update_info_reg[Len][0]_1 ,
    \update_info_reg[Evict] ,
    \update_old_tag_reg[Addr][31] ,
    \update_info_reg[Addr][31] ,
    \update_info_reg[Kind] );
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  output [7:0]\M_AXI_AWLEN_reg[7] ;
  output [1:0]\M_AXI_AWSIZE_reg[1] ;
  output [23:0]\M_AXI_AWADDR_reg[31] ;
  output \M_AXI_AWBURST_reg[1] ;
  input Q;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input ACLK;
  input [7:0]\update_info_reg[Len][7] ;
  input [2:0]\update_info_reg[Size][2] ;
  input \update_info_reg[Size][2]_0 ;
  input \update_info_reg[Size][2]_1 ;
  input \update_info_reg[Len][2] ;
  input \update_info_reg[Len][1] ;
  input \update_info_reg[Len][0] ;
  input \update_info_reg[Len][0]_0 ;
  input \update_info_reg[Len][1]_0 ;
  input \update_info_reg[Len][0]_1 ;
  input \update_info_reg[Evict] ;
  input [17:0]\update_old_tag_reg[Addr][31] ;
  input [23:0]\update_info_reg[Addr][31] ;
  input \update_info_reg[Kind] ;

  wire ACLK;
  wire [23:0]\M_AXI_AWADDR_reg[31] ;
  wire \M_AXI_AWBURST_reg[1] ;
  wire [7:0]\M_AXI_AWLEN_reg[7] ;
  wire [1:0]\M_AXI_AWSIZE_reg[1] ;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire [23:0]\update_info_reg[Addr][31] ;
  wire \update_info_reg[Evict] ;
  wire \update_info_reg[Kind] ;
  wire \update_info_reg[Len][0] ;
  wire \update_info_reg[Len][0]_0 ;
  wire \update_info_reg[Len][0]_1 ;
  wire \update_info_reg[Len][1] ;
  wire \update_info_reg[Len][1]_0 ;
  wire \update_info_reg[Len][2] ;
  wire [7:0]\update_info_reg[Len][7] ;
  wire [2:0]\update_info_reg[Size][2] ;
  wire \update_info_reg[Size][2]_0 ;
  wire \update_info_reg[Size][2]_1 ;
  wire [17:0]\update_old_tag_reg[Addr][31] ;

  design_1_system_cache_0_0_reg_ce_267 Inst
       (.ACLK(ACLK),
        .\M_AXI_AWADDR_reg[31] (\M_AXI_AWADDR_reg[31] ),
        .\M_AXI_AWBURST_reg[1] (\M_AXI_AWBURST_reg[1] ),
        .\M_AXI_AWLEN_reg[7] (\M_AXI_AWLEN_reg[7] ),
        .\M_AXI_AWSIZE_reg[1] (\M_AXI_AWSIZE_reg[1] ),
        .Q(Q),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .\update_info_reg[Addr][31] (\update_info_reg[Addr][31] ),
        .\update_info_reg[Evict] (\update_info_reg[Evict] ),
        .\update_info_reg[Kind] (\update_info_reg[Kind] ),
        .\update_info_reg[Len][0] (\update_info_reg[Len][0] ),
        .\update_info_reg[Len][0]_0 (\update_info_reg[Len][0]_0 ),
        .\update_info_reg[Len][0]_1 (\update_info_reg[Len][0]_1 ),
        .\update_info_reg[Len][1] (\update_info_reg[Len][1] ),
        .\update_info_reg[Len][1]_0 (\update_info_reg[Len][1]_0 ),
        .\update_info_reg[Len][2] (\update_info_reg[Len][2] ),
        .\update_info_reg[Len][7] (\update_info_reg[Len][7] ),
        .\update_info_reg[Size][2] (\update_info_reg[Size][2] ),
        .\update_info_reg[Size][2]_0 (\update_info_reg[Size][2]_0 ),
        .\update_info_reg[Size][2]_1 (\update_info_reg[Size][2]_1 ),
        .\update_old_tag_reg[Addr][31] (\update_old_tag_reg[Addr][31] ));
endmodule

(* ORIG_REF_NAME = "bit_reg_ce" *) 
module design_1_system_cache_0_0_bit_reg_ce_211
   (\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ,
    DATA_INB,
    update_first_write_hit_reg,
    Q,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    ACLK,
    ri_merge_reg,
    update_readback_available,
    update_first_write_hit,
    update_write_miss,
    \update_info_reg[Allocate] ,
    update_reused_tag,
    update_done_tag_write_reg,
    \lu_check_info_reg[KillHit] ,
    \lu_check_tag_hit_reg[1] );
  output \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ;
  output [1:0]DATA_INB;
  output update_first_write_hit_reg;
  input Q;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  input ACLK;
  input ri_merge_reg;
  input update_readback_available;
  input update_first_write_hit;
  input update_write_miss;
  input \update_info_reg[Allocate] ;
  input update_reused_tag;
  input update_done_tag_write_reg;
  input \lu_check_info_reg[KillHit] ;
  input [1:0]\lu_check_tag_hit_reg[1] ;

  wire ACLK;
  wire [1:0]DATA_INB;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \lu_check_info_reg[KillHit] ;
  wire [1:0]\lu_check_tag_hit_reg[1] ;
  wire ri_merge_reg;
  wire update_done_tag_write_reg;
  wire update_first_write_hit;
  wire update_first_write_hit_reg;
  wire \update_info_reg[Allocate] ;
  wire update_readback_available;
  wire update_reused_tag;
  wire update_write_miss;

  design_1_system_cache_0_0_reg_ce_216 Inst
       (.ACLK(ACLK),
        .DATA_INB(DATA_INB),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 (\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .Q(Q),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .\lu_check_info_reg[KillHit] (\lu_check_info_reg[KillHit] ),
        .\lu_check_tag_hit_reg[1] (\lu_check_tag_hit_reg[1] ),
        .ri_merge_reg(ri_merge_reg),
        .update_done_tag_write_reg(update_done_tag_write_reg),
        .update_first_write_hit(update_first_write_hit),
        .update_first_write_hit_reg(update_first_write_hit_reg),
        .\update_info_reg[Allocate] (\update_info_reg[Allocate] ),
        .update_readback_available(update_readback_available),
        .update_reused_tag(update_reused_tag),
        .update_write_miss(update_write_miss));
endmodule

(* ORIG_REF_NAME = "bit_reg_ce" *) 
module design_1_system_cache_0_0_bit_reg_ce_212
   (lud_mem_use_speculative,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    Q,
    lud_mem_completed_reg,
    ACLK,
    lud_mem_completed_reg_0,
    lud_mem_waiting_for_pipe_reg,
    lookup_protect_conflict,
    lud_addr_piperun,
    \Use_FPGA.Full_Inst );
  output lud_mem_use_speculative;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  input Q;
  input lud_mem_completed_reg;
  input ACLK;
  input lud_mem_completed_reg_0;
  input lud_mem_waiting_for_pipe_reg;
  input lookup_protect_conflict;
  input lud_addr_piperun;
  input \Use_FPGA.Full_Inst ;

  wire ACLK;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \Use_FPGA.Full_Inst ;
  wire lookup_protect_conflict;
  wire lud_addr_piperun;
  wire lud_mem_completed_reg;
  wire lud_mem_completed_reg_0;
  wire lud_mem_use_speculative;
  wire lud_mem_waiting_for_pipe_reg;

  design_1_system_cache_0_0_reg_ce_215 Inst
       (.ACLK(ACLK),
        .Q(Q),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .\Use_FPGA.Full_Inst (\Use_FPGA.Full_Inst ),
        .lookup_protect_conflict(lookup_protect_conflict),
        .lud_addr_piperun(lud_addr_piperun),
        .lud_mem_completed_reg(lud_mem_completed_reg),
        .lud_mem_completed_reg_0(lud_mem_completed_reg_0),
        .lud_mem_use_speculative(lud_mem_use_speculative),
        .lud_mem_waiting_for_pipe_reg(lud_mem_waiting_for_pipe_reg));
endmodule

(* ORIG_REF_NAME = "bit_reg_ce" *) 
module design_1_system_cache_0_0_bit_reg_ce_213
   (\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ,
    DATA_INB,
    Q,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    ACLK,
    update_readback_available,
    \update_info_reg[Allocate] ,
    \update_info_reg[Evict] ,
    update_need_tag_write,
    update_done_tag_write_reg);
  output \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ;
  output [0:0]DATA_INB;
  input Q;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  input ACLK;
  input update_readback_available;
  input \update_info_reg[Allocate] ;
  input \update_info_reg[Evict] ;
  input update_need_tag_write;
  input update_done_tag_write_reg;

  wire ACLK;
  wire [0:0]DATA_INB;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire update_done_tag_write_reg;
  wire \update_info_reg[Allocate] ;
  wire \update_info_reg[Evict] ;
  wire update_need_tag_write;
  wire update_readback_available;

  design_1_system_cache_0_0_reg_ce_214 Inst
       (.ACLK(ACLK),
        .DATA_INB(DATA_INB),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 (\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .Q(Q),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .update_done_tag_write_reg(update_done_tag_write_reg),
        .\update_info_reg[Allocate] (\update_info_reg[Allocate] ),
        .\update_info_reg[Evict] (\update_info_reg[Evict] ),
        .update_need_tag_write(update_need_tag_write),
        .update_readback_available(update_readback_available));
endmodule

(* C_CE_LOW = "1'b0" *) (* C_IS_SET = "1'b0" *) (* C_NUM_CE = "1" *) 
(* C_TARGET = "3" *) (* ORIG_REF_NAME = "bit_reg_ce" *) 
module design_1_system_cache_0_0_bit_reg_ce__10
   (CLK,
    SR,
    CE,
    D,
    Q);
  input CLK;
  input SR;
  input [0:0]CE;
  input D;
  output Q;

  wire [0:0]CE;
  wire CLK;
  wire D;
  wire Q;
  wire SR;

  design_1_system_cache_0_0_reg_ce_23 Inst
       (.CE(CE),
        .CLK(CLK),
        .D(D),
        .Q(Q),
        .SR(SR));
endmodule

(* C_CE_LOW = "1'b0" *) (* C_IS_SET = "1'b0" *) (* C_NUM_CE = "1" *) 
(* C_TARGET = "3" *) (* ORIG_REF_NAME = "bit_reg_ce" *) 
module design_1_system_cache_0_0_bit_reg_ce__11
   (CLK,
    SR,
    CE,
    D,
    Q);
  input CLK;
  input SR;
  input [0:0]CE;
  input D;
  output Q;

  wire [0:0]CE;
  wire CLK;
  wire D;
  wire Q;
  wire SR;

  design_1_system_cache_0_0_reg_ce Inst
       (.CE(CE),
        .CLK(CLK),
        .D(D),
        .Q(Q),
        .SR(SR));
endmodule

(* C_CE_LOW = "1'b0" *) (* C_IS_SET = "1'b0" *) (* C_NUM_CE = "1" *) 
(* C_TARGET = "3" *) (* ORIG_REF_NAME = "bit_reg_ce" *) 
module design_1_system_cache_0_0_bit_reg_ce__12
   (CLK,
    SR,
    CE,
    D,
    Q);
  input CLK;
  input SR;
  input [0:0]CE;
  input D;
  output Q;

  wire [0:0]CE;
  wire CLK;
  wire D;
  wire Q;
  wire SR;

  design_1_system_cache_0_0_reg_ce_40 Inst
       (.CE(CE),
        .CLK(CLK),
        .D(D),
        .Q(Q),
        .SR(SR));
endmodule

(* C_CE_LOW = "1'b0" *) (* C_IS_SET = "1'b0" *) (* C_NUM_CE = "1" *) 
(* C_TARGET = "3" *) (* ORIG_REF_NAME = "bit_reg_ce" *) 
module design_1_system_cache_0_0_bit_reg_ce__13
   (CLK,
    SR,
    CE,
    D,
    Q);
  input CLK;
  input SR;
  input [0:0]CE;
  input D;
  output Q;

  wire [0:0]CE;
  wire CLK;
  wire D;
  wire Q;
  wire SR;

  design_1_system_cache_0_0_reg_ce_272 Inst
       (.CE(CE),
        .CLK(CLK),
        .D(D),
        .Q(Q),
        .SR(SR));
endmodule

(* C_CE_LOW = "1'b0" *) (* C_IS_SET = "1'b0" *) (* C_NUM_CE = "1" *) 
(* C_TARGET = "3" *) (* ORIG_REF_NAME = "bit_reg_ce" *) 
module design_1_system_cache_0_0_bit_reg_ce__14
   (CLK,
    SR,
    CE,
    D,
    Q);
  input CLK;
  input SR;
  input [0:0]CE;
  input D;
  output Q;

  wire [0:0]CE;
  wire CLK;
  wire D;
  wire Q;
  wire SR;

  design_1_system_cache_0_0_reg_ce_101 Inst
       (.CE(CE),
        .CLK(CLK),
        .D(D),
        .Q(Q),
        .SR(SR));
endmodule

(* C_CE_LOW = "1'b0" *) (* C_IS_SET = "1'b0" *) (* C_NUM_CE = "1" *) 
(* C_TARGET = "3" *) (* ORIG_REF_NAME = "bit_reg_ce" *) 
module design_1_system_cache_0_0_bit_reg_ce__15
   (CLK,
    SR,
    CE,
    D,
    Q);
  input CLK;
  input SR;
  input [0:0]CE;
  input D;
  output Q;

  wire [0:0]CE;
  wire CLK;
  wire D;
  wire Q;
  wire SR;

  design_1_system_cache_0_0_reg_ce_283 Inst
       (.CE(CE),
        .CLK(CLK),
        .D(D),
        .Q(Q),
        .SR(SR));
endmodule

(* C_CE_LOW = "1'b0" *) (* C_IS_SET = "1'b0" *) (* C_NUM_CE = "1" *) 
(* C_TARGET = "3" *) (* ORIG_REF_NAME = "bit_reg_ce" *) 
module design_1_system_cache_0_0_bit_reg_ce__16
   (CLK,
    SR,
    CE,
    D,
    Q);
  input CLK;
  input SR;
  input [0:0]CE;
  input D;
  output Q;

  wire [0:0]CE;
  wire CLK;
  wire D;
  wire Q;
  wire SR;

  design_1_system_cache_0_0_reg_ce_273 Inst
       (.CE(CE),
        .CLK(CLK),
        .D(D),
        .Q(Q),
        .SR(SR));
endmodule

(* ORIG_REF_NAME = "bit_reg_ce" *) 
module design_1_system_cache_0_0_bit_reg_ce__17
   (in0,
    ARESET,
    ACLK);
  output in0;
  input ARESET;
  input ACLK;

  wire ACLK;
  wire ARESET;
  wire in0;

  design_1_system_cache_0_0_reg_ce_43 Inst
       (.ACLK(ACLK),
        .ARESET(ARESET),
        .in0(in0));
endmodule

(* ORIG_REF_NAME = "bit_reg_ce" *) 
module design_1_system_cache_0_0_bit_reg_ce__parameterized2
   (lookup_access_data_late,
    S,
    A32_out,
    \Use_FPGA.Full_Inst ,
    lu_mem_valid_reg,
    ACLK,
    lud_mem_speculative_valid,
    \lu_check_info_reg[Wr] ,
    lud_mem_last,
    lud_mem_already_used,
    lu_mem_protect_conflict_reg,
    lu_mem_protect_conflict_d1,
    \lu_check_info_delayed_reg[Wr] ,
    lu_check_valid_delayed,
    lookup_read_hit_d1,
    lookup_offset_first);
  output lookup_access_data_late;
  output S;
  output A32_out;
  input \Use_FPGA.Full_Inst ;
  input lu_mem_valid_reg;
  input ACLK;
  input lud_mem_speculative_valid;
  input \lu_check_info_reg[Wr] ;
  input lud_mem_last;
  input lud_mem_already_used;
  input lu_mem_protect_conflict_reg;
  input lu_mem_protect_conflict_d1;
  input \lu_check_info_delayed_reg[Wr] ;
  input lu_check_valid_delayed;
  input lookup_read_hit_d1;
  input lookup_offset_first;

  wire A32_out;
  wire ACLK;
  wire S;
  wire \Use_FPGA.Full_Inst ;
  wire lookup_access_data_late;
  wire lookup_offset_first;
  wire lookup_read_hit_d1;
  wire \lu_check_info_delayed_reg[Wr] ;
  wire \lu_check_info_reg[Wr] ;
  wire lu_check_valid_delayed;
  wire lu_mem_protect_conflict_d1;
  wire lu_mem_protect_conflict_reg;
  wire lu_mem_valid_reg;
  wire lud_mem_already_used;
  wire lud_mem_last;
  wire lud_mem_speculative_valid;

  design_1_system_cache_0_0_reg_ce__parameterized1 Inst
       (.A32_out(A32_out),
        .ACLK(ACLK),
        .S(S),
        .\Use_FPGA.Full_Inst (\Use_FPGA.Full_Inst ),
        .lookup_access_data_late(lookup_access_data_late),
        .lookup_offset_first(lookup_offset_first),
        .lookup_read_hit_d1(lookup_read_hit_d1),
        .\lu_check_info_delayed_reg[Wr] (\lu_check_info_delayed_reg[Wr] ),
        .\lu_check_info_reg[Wr] (\lu_check_info_reg[Wr] ),
        .lu_check_valid_delayed(lu_check_valid_delayed),
        .lu_mem_protect_conflict_d1(lu_mem_protect_conflict_d1),
        .lu_mem_protect_conflict_reg(lu_mem_protect_conflict_reg),
        .lu_mem_valid_reg(lu_mem_valid_reg),
        .lud_mem_already_used(lud_mem_already_used),
        .lud_mem_last(lud_mem_last),
        .lud_mem_speculative_valid(lud_mem_speculative_valid));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and
   (E,
    w_pop_part,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]E;
  input w_pop_part;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire [0:0]E;
  wire w_pop_part;

  assign E = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_1
   (r_pop_valid,
    \Use_Reg_Ctrl.queue_exist_i_reg ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output r_pop_valid;
  input \Use_Reg_Ctrl.queue_exist_i_reg ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \Use_Reg_Ctrl.queue_exist_i_reg ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire r_pop_valid;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,r_pop_valid}),
        .CYINIT(1'b1),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\Use_Reg_Ctrl.queue_exist_i_reg }));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_100
   (update_tag_match_pre_0,
    \The_Compare[5].sel_reg ,
    carry_5,
    lopt,
    lopt_1);
  output update_tag_match_pre_0;
  input \The_Compare[5].sel_reg ;
  input carry_5;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \The_Compare[5].sel_reg ;
  wire carry_5;
  wire update_tag_match_pre_0;

  assign lopt_1 = \<const0> ;
  assign update_tag_match_pre_0 = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_107
   (lu_mem_valid_carry_0,
    \update_release_tag_reg[Valid] ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output lu_mem_valid_carry_0;
  input \update_release_tag_reg[Valid] ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire lu_mem_valid_carry_0;
  wire \update_release_tag_reg[Valid] ;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,lu_mem_valid_carry_0}),
        .CYINIT(1'b1),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\update_release_tag_reg[Valid] }));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_109
   (D,
    lu_mem_valid_tag_0,
    lu_mem_protect_conflict_reg,
    lu_mem_valid_reg,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]D;
  input lu_mem_valid_tag_0;
  input lu_mem_protect_conflict_reg;
  input lu_mem_valid_reg;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire [0:0]D;
  wire \Using_FPGA.MUXCY_I_i_1__141_n_0 ;
  wire lu_mem_protect_conflict_reg;
  wire lu_mem_valid_reg;
  wire lu_mem_valid_tag_0;

  assign D = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \Using_FPGA.MUXCY_I_i_1__141_n_0 ;
  GND GND
       (.G(\<const0> ));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.MUXCY_I_i_1__141 
       (.I0(lu_mem_protect_conflict_reg),
        .I1(lu_mem_valid_reg),
        .O(\Using_FPGA.MUXCY_I_i_1__141_n_0 ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_11
   (E,
    w_pop_part,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]E;
  input w_pop_part;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire [0:0]E;
  wire w_pop_part;

  assign E = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_110
   (D,
    lu_mem_protect_conflict_reg,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]D;
  input [0:0]lu_mem_protect_conflict_reg;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire [0:0]D;
  wire [0:0]lu_mem_protect_conflict_reg;

  assign D = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_111
   (D,
    lu_mem_protect_conflict_reg,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]D;
  input [0:0]lu_mem_protect_conflict_reg;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire [0:0]D;
  wire [0:0]lu_mem_protect_conflict_reg;

  assign D = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_112
   (D,
    lu_mem_protect_conflict_reg,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output [0:0]D;
  input [0:0]lu_mem_protect_conflict_reg;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire [0:0]D;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [0:0]lu_mem_protect_conflict_reg;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(lu_mem_protect_conflict_reg),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,D}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,1'b1}));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_113
   (D,
    lu_mem_protect_conflict_reg,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]D;
  input [0:0]lu_mem_protect_conflict_reg;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire [0:0]D;
  wire [0:0]lu_mem_protect_conflict_reg;

  assign D = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_114
   (D,
    lu_mem_protect_conflict_reg,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]D;
  input [0:0]lu_mem_protect_conflict_reg;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire [0:0]D;
  wire [0:0]lu_mem_protect_conflict_reg;

  assign D = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_115
   (D,
    lu_mem_protect_conflict_reg,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]D;
  input [0:0]lu_mem_protect_conflict_reg;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire [0:0]D;
  wire [0:0]lu_mem_protect_conflict_reg;

  assign D = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_116
   (D,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 ,
    lu_mem_protect_conflict_reg,
    lu_mem_releasing_lock,
    \lu_mem_release_lock_hold_reg[0] ,
    \lu_mem_info_reg[Force_Hit] ,
    lu_mem_protect_conflict_reg_0,
    \lu_check_info_reg[KillHit] ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output [0:0]D;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 ;
  input [0:0]lu_mem_protect_conflict_reg;
  input [0:0]lu_mem_releasing_lock;
  input \lu_mem_release_lock_hold_reg[0] ;
  input \lu_mem_info_reg[Force_Hit] ;
  input lu_mem_protect_conflict_reg_0;
  input \lu_check_info_reg[KillHit] ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire [0:0]D;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire \lu_check_info_reg[KillHit] ;
  wire \lu_mem_info_reg[Force_Hit] ;
  wire [0:0]lu_mem_protect_conflict_reg;
  wire lu_mem_protect_conflict_reg_0;
  wire \lu_mem_release_lock_hold_reg[0] ;
  wire [0:0]lu_mem_releasing_lock;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  LUT5 #(
    .INIT(32'hFFFE00FE)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_2__4 
       (.I0(lu_mem_releasing_lock),
        .I1(\lu_mem_release_lock_hold_reg[0] ),
        .I2(\lu_mem_info_reg[Force_Hit] ),
        .I3(lu_mem_protect_conflict_reg_0),
        .I4(\lu_check_info_reg[KillHit] ),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(lu_mem_protect_conflict_reg),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,D}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 }));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_117
   (D,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]D;
  input [0:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire [0:0]D;
  wire [0:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 ;

  assign D = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_118
   (D,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 ,
    \lu_check_info_reg[Wr] ,
    lu_mem_protect_conflict_reg,
    \lu_mem_info_reg[Wr] ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]D;
  input [0:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 ;
  input \lu_check_info_reg[Wr] ;
  input lu_mem_protect_conflict_reg;
  input \lu_mem_info_reg[Wr] ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire [0:0]D;
  wire [0:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 ;
  wire \Using_FPGA.MUXCY_I_i_1__143_n_0 ;
  wire \lu_check_info_reg[Wr] ;
  wire \lu_mem_info_reg[Wr] ;
  wire lu_mem_protect_conflict_reg;

  assign D = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \Using_FPGA.MUXCY_I_i_1__143_n_0 ;
  GND GND
       (.G(\<const0> ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.MUXCY_I_i_1__143 
       (.I0(\lu_check_info_reg[Wr] ),
        .I1(lu_mem_protect_conflict_reg),
        .I2(\lu_mem_info_reg[Wr] ),
        .O(\Using_FPGA.MUXCY_I_i_1__143_n_0 ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_124
   (lu_mem_valid_carry_1,
    \update_release_tag_reg[Valid] ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output lu_mem_valid_carry_1;
  input \update_release_tag_reg[Valid] ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire lu_mem_valid_carry_1;
  wire \update_release_tag_reg[Valid] ;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,lu_mem_valid_carry_1}),
        .CYINIT(1'b1),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\update_release_tag_reg[Valid] }));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_126
   (D,
    lu_mem_valid_tag_1,
    lu_mem_protect_conflict_reg,
    lu_mem_valid_reg,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]D;
  input lu_mem_valid_tag_1;
  input lu_mem_protect_conflict_reg;
  input lu_mem_valid_reg;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire [0:0]D;
  wire \Using_FPGA.MUXCY_I_i_1__73_n_0 ;
  wire lu_mem_protect_conflict_reg;
  wire lu_mem_valid_reg;
  wire lu_mem_valid_tag_1;

  assign D = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \Using_FPGA.MUXCY_I_i_1__73_n_0 ;
  GND GND
       (.G(\<const0> ));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.MUXCY_I_i_1__73 
       (.I0(lu_mem_protect_conflict_reg),
        .I1(lu_mem_valid_reg),
        .O(\Using_FPGA.MUXCY_I_i_1__73_n_0 ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_127
   (D,
    lu_mem_protect_conflict_reg,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]D;
  input [0:0]lu_mem_protect_conflict_reg;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire [0:0]D;
  wire [0:0]lu_mem_protect_conflict_reg;

  assign D = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_128
   (D,
    lu_mem_protect_conflict_reg,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]D;
  input [0:0]lu_mem_protect_conflict_reg;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire [0:0]D;
  wire [0:0]lu_mem_protect_conflict_reg;

  assign D = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_129
   (D,
    lu_mem_protect_conflict_reg,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output [0:0]D;
  input [0:0]lu_mem_protect_conflict_reg;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire [0:0]D;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [0:0]lu_mem_protect_conflict_reg;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(lu_mem_protect_conflict_reg),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,D}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,1'b1}));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_130
   (D,
    lu_mem_protect_conflict_reg,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]D;
  input [0:0]lu_mem_protect_conflict_reg;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire [0:0]D;
  wire [0:0]lu_mem_protect_conflict_reg;

  assign D = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_131
   (D,
    lu_mem_protect_conflict_reg,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]D;
  input [0:0]lu_mem_protect_conflict_reg;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire [0:0]D;
  wire [0:0]lu_mem_protect_conflict_reg;

  assign D = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_132
   (D,
    lu_mem_protect_conflict_reg,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]D;
  input [0:0]lu_mem_protect_conflict_reg;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire [0:0]D;
  wire [0:0]lu_mem_protect_conflict_reg;

  assign D = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_133
   (D,
    \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ,
    lu_mem_protect_conflict_reg,
    lu_mem_releasing_lock,
    \lu_mem_release_lock_hold_reg[1] ,
    \lu_mem_info_reg[Force_Hit] ,
    lu_mem_protect_conflict_reg_0,
    \lu_check_info_reg[KillHit] ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output [0:0]D;
  output \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ;
  input [0:0]lu_mem_protect_conflict_reg;
  input [0:0]lu_mem_releasing_lock;
  input \lu_mem_release_lock_hold_reg[1] ;
  input \lu_mem_info_reg[Force_Hit] ;
  input lu_mem_protect_conflict_reg_0;
  input \lu_check_info_reg[KillHit] ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire [0:0]D;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ;
  wire \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire \lu_check_info_reg[KillHit] ;
  wire \lu_mem_info_reg[Force_Hit] ;
  wire [0:0]lu_mem_protect_conflict_reg;
  wire lu_mem_protect_conflict_reg_0;
  wire \lu_mem_release_lock_hold_reg[1] ;
  wire [0:0]lu_mem_releasing_lock;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  LUT5 #(
    .INIT(32'hFFFE00FE)) 
    \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_i_2 
       (.I0(lu_mem_releasing_lock),
        .I1(\lu_mem_release_lock_hold_reg[1] ),
        .I2(\lu_mem_info_reg[Force_Hit] ),
        .I3(lu_mem_protect_conflict_reg_0),
        .I4(\lu_check_info_reg[KillHit] ),
        .O(\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(lu_mem_protect_conflict_reg),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,D}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 }));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_134
   (D,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]D;
  input [0:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire [0:0]D;
  wire [0:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ;

  assign D = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_135
   (D,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ,
    \lu_check_info_reg[Wr] ,
    lu_mem_protect_conflict_reg,
    \lu_mem_info_reg[Wr] ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]D;
  input [0:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ;
  input \lu_check_info_reg[Wr] ;
  input lu_mem_protect_conflict_reg;
  input \lu_mem_info_reg[Wr] ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire [0:0]D;
  wire [0:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ;
  wire \Using_FPGA.MUXCY_I_i_1__79_n_0 ;
  wire \lu_check_info_reg[Wr] ;
  wire \lu_mem_info_reg[Wr] ;
  wire lu_mem_protect_conflict_reg;

  assign D = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \Using_FPGA.MUXCY_I_i_1__79_n_0 ;
  GND GND
       (.G(\<const0> ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.MUXCY_I_i_1__79 
       (.I0(\lu_check_info_reg[Wr] ),
        .I1(lu_mem_protect_conflict_reg),
        .I2(\lu_mem_info_reg[Wr] ),
        .O(\Using_FPGA.MUXCY_I_i_1__79_n_0 ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_146
   (lud_step_offset_is_read,
    \lu_check_info_reg[Wr] ,
    lud_step_offset,
    lopt,
    lopt_1);
  output lud_step_offset_is_read;
  input \lu_check_info_reg[Wr] ;
  input lud_step_offset;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \lu_check_info_reg[Wr] ;
  wire lud_step_offset;
  wire lud_step_offset_is_read;

  assign lopt_1 = \<const0> ;
  assign lud_step_offset_is_read = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_153
   (lu_mem_valid_reg,
    \lu_mem_info_reg[Port_Num][0] ,
    A121_out,
    lu_check_match_addr,
    Q,
    access_valid,
    lu_mem_valid_reg_0,
    \Use_FPGA.Full_Inst ,
    lookup_restart_mem_done_reg,
    lookup_protect_conflict,
    lu_mem_tag_conflict,
    update_tag_conflict,
    lookup_restart_mem_done,
    lu_mem_protect_conflict_reg,
    lopt,
    lopt_1);
  output lu_mem_valid_reg;
  output \lu_mem_info_reg[Port_Num][0] ;
  input A121_out;
  input lu_check_match_addr;
  input Q;
  input access_valid;
  input lu_mem_valid_reg_0;
  input \Use_FPGA.Full_Inst ;
  input lookup_restart_mem_done_reg;
  input lookup_protect_conflict;
  input lu_mem_tag_conflict;
  input update_tag_conflict;
  input lookup_restart_mem_done;
  input lu_mem_protect_conflict_reg;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire A121_out;
  wire \LU_Fetch_PR_And_Inst2/S ;
  wire Q;
  wire \Use_FPGA.Full_Inst ;
  wire access_valid;
  wire lookup_protect_conflict;
  wire lookup_restart_mem_done;
  wire lookup_restart_mem_done_reg;
  wire lu_check_match_addr;
  wire lu_check_tag_conflict;
  wire \lu_mem_info_reg[Port_Num][0] ;
  wire lu_mem_protect_conflict_reg;
  wire lu_mem_tag_conflict;
  wire lu_mem_valid_reg;
  wire lu_mem_valid_reg_0;
  wire update_tag_conflict;

  assign lopt_1 = \<const0> ;
  assign lu_check_tag_conflict = lopt;
  GND GND
       (.G(\<const0> ));
  LUT6 #(
    .INIT(64'h0001000000010001)) 
    \Using_FPGA.MUXCY_I_i_1__128 
       (.I0(lu_check_tag_conflict),
        .I1(lookup_protect_conflict),
        .I2(lu_mem_tag_conflict),
        .I3(update_tag_conflict),
        .I4(lookup_restart_mem_done),
        .I5(lu_mem_protect_conflict_reg),
        .O(\lu_mem_info_reg[Port_Num][0] ));
  LUT6 #(
    .INIT(64'h4040404000005500)) 
    lu_mem_valid_i_1
       (.I0(Q),
        .I1(access_valid),
        .I2(\LU_Fetch_PR_And_Inst2/S ),
        .I3(lu_mem_valid_reg_0),
        .I4(\Use_FPGA.Full_Inst ),
        .I5(lookup_restart_mem_done_reg),
        .O(lu_mem_valid_reg));
  LUT6 #(
    .INIT(64'h0001000000010001)) 
    lu_mem_valid_i_2
       (.I0(lu_check_tag_conflict),
        .I1(lookup_protect_conflict),
        .I2(lu_mem_tag_conflict),
        .I3(update_tag_conflict),
        .I4(lookup_restart_mem_done),
        .I5(lu_mem_protect_conflict_reg),
        .O(\LU_Fetch_PR_And_Inst2/S ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_156
   (lu_io_full_block_read,
    lu_io_selected_full,
    \lu_check_info_reg[Wr] ,
    lud_addr_pipeline_full_reg,
    lud_mem_completed_reg,
    lud_mem_keep_single_during_stall,
    lopt,
    lopt_1,
    lopt_2);
  output lu_io_full_block_read;
  input lu_io_selected_full;
  input \lu_check_info_reg[Wr] ;
  input lud_addr_pipeline_full_reg;
  input lud_mem_completed_reg;
  input lud_mem_keep_single_during_stall;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire A137_out;
  wire \lu_check_info_reg[Wr] ;
  wire lu_io_full_block_read;
  wire lu_io_selected_full;
  wire lud_addr_pipeline_full_reg;
  wire lud_mem_completed_reg;
  wire lud_mem_keep_single_during_stall;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = A137_out;
  assign lu_io_full_block_read = lopt;
  GND GND
       (.G(\<const0> ));
  LUT4 #(
    .INIT(16'h4404)) 
    \Using_FPGA.MUXCY_I_i_1__127 
       (.I0(\lu_check_info_reg[Wr] ),
        .I1(lud_addr_pipeline_full_reg),
        .I2(lud_mem_completed_reg),
        .I3(lud_mem_keep_single_during_stall),
        .O(A137_out));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_159
   (lookup_io_stall_pre_valid,
    A134_out,
    lookup_io_stall_hit_carry_no_last,
    lopt,
    lopt_1);
  output lookup_io_stall_pre_valid;
  input A134_out;
  input lookup_io_stall_hit_carry_no_last;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire A134_out;
  wire lookup_io_stall_hit_carry_no_last;
  wire lookup_io_stall_pre_valid;

  assign lookup_io_stall_pre_valid = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_16
   (r_pop_valid,
    \Use_Reg_Ctrl.queue_exist_i_reg ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output r_pop_valid;
  input \Use_Reg_Ctrl.queue_exist_i_reg ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \Use_Reg_Ctrl.queue_exist_i_reg ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire r_pop_valid;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,r_pop_valid}),
        .CYINIT(1'b1),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\Use_Reg_Ctrl.queue_exist_i_reg }));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_165
   (lu_ds_last_beat_multi_start,
    lu_check_multi_beat,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output lu_ds_last_beat_multi_start;
  input lu_check_multi_beat;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire lu_check_multi_beat;
  wire lu_ds_last_beat_multi_start;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,lu_ds_last_beat_multi_start}),
        .CYINIT(1'b1),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,lu_check_multi_beat}));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_168
   (lu_ds_last_beat_valid_hit,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    Carry_OUT,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5);
  output lu_ds_last_beat_valid_hit;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  input Carry_OUT;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;

  wire Carry_OUT;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire lopt_6;
  wire lu_ds_last_beat_valid_hit;
  wire [3:3]\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = lopt_5;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(Carry_OUT),
        .CO({\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED [3],\^lopt_4 ,\^lopt_1 ,lu_ds_last_beat_valid_hit}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED [3],\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED [3],lopt_6,\^lopt_3 ,\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst }));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_17
   (r_pop,
    S0_AXI_RREADY,
    r_pop_valid,
    lopt,
    lopt_1);
  output r_pop;
  input S0_AXI_RREADY;
  input r_pop_valid;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire S0_AXI_RREADY;
  wire r_pop;
  wire r_pop_valid;

  assign lopt_1 = \<const0> ;
  assign r_pop = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_170
   (lu_ds_rs_read_miss,
    A141_out,
    Carry_Out,
    lopt,
    lopt_1);
  output lu_ds_rs_read_miss;
  input A141_out;
  input Carry_Out;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire A141_out;
  wire Carry_Out;
  wire lu_ds_rs_read_miss;

  assign lopt_1 = \<const0> ;
  assign lu_ds_rs_read_miss = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_171
   (lu_ds_rs_new_read_no_rs,
    lu_ds_rs_read_miss,
    lu_mem_valid_reg,
    \lu_mem_info_reg[Wr] ,
    lopt,
    lopt_1,
    lopt_2);
  output lu_ds_rs_new_read_no_rs;
  input lu_ds_rs_read_miss;
  input lu_mem_valid_reg;
  input \lu_mem_info_reg[Wr] ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \Using_FPGA.MUXCY_I_i_1__134_n_0 ;
  wire lu_ds_rs_new_read_no_rs;
  wire lu_ds_rs_read_miss;
  wire \lu_mem_info_reg[Wr] ;
  wire lu_mem_valid_reg;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = \Using_FPGA.MUXCY_I_i_1__134_n_0 ;
  assign lu_ds_rs_new_read_no_rs = lopt;
  GND GND
       (.G(\<const0> ));
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.MUXCY_I_i_1__134 
       (.I0(lu_mem_valid_reg),
        .I1(\lu_mem_info_reg[Wr] ),
        .O(\Using_FPGA.MUXCY_I_i_1__134_n_0 ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_172
   (lu_ds_rs_del_restart_no_rs,
    lu_ds_rs_new_read_no_rs,
    lu_mem_protect_conflict_reg,
    lud_addr_pipeline_full_reg,
    lopt,
    lopt_1,
    lopt_2);
  output lu_ds_rs_del_restart_no_rs;
  input lu_ds_rs_new_read_no_rs;
  input lu_mem_protect_conflict_reg;
  input lud_addr_pipeline_full_reg;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire A139_out;
  wire lu_ds_rs_del_restart_no_rs;
  wire lu_ds_rs_new_read_no_rs;
  wire lu_mem_protect_conflict_reg;
  wire lud_addr_pipeline_full_reg;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = A139_out;
  assign lu_ds_rs_del_restart_no_rs = lopt;
  GND GND
       (.G(\<const0> ));
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.MUXCY_I_i_1__68 
       (.I0(lu_mem_protect_conflict_reg),
        .I1(lud_addr_pipeline_full_reg),
        .O(A139_out));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_173
   (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    lu_ds_rs_del_restart_no_rs,
    lu_mem_protect_conflict_reg,
    lookup_restart_mem_done,
    lookup_protect_conflict,
    lud_addr_pipeline_full_reg,
    lud_step_delayed_restart,
    lookup_io_data_stall,
    Carry_OUT);
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  input lu_ds_rs_del_restart_no_rs;
  input lu_mem_protect_conflict_reg;
  input lookup_restart_mem_done;
  input lookup_protect_conflict;
  input lud_addr_pipeline_full_reg;
  input lud_step_delayed_restart;
  input lookup_io_data_stall;
  input Carry_OUT;

  wire A138_out;
  wire Carry_OUT;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire lookup_io_data_stall;
  wire lookup_protect_conflict;
  wire lookup_restart_mem_done;
  wire lu_ds_lb_delayed_restart_conflict;
  wire lu_ds_rs_del_restart_no_rs;
  wire lu_mem_protect_conflict_reg;
  wire lud_addr_pipeline_full_reg;
  wire lud_step_delayed_restart;
  wire [3:1]\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED ;

  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(lu_ds_rs_del_restart_no_rs),
        .CO({\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED [3:1],lu_ds_lb_delayed_restart_conflict}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED [3:1],1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED [3:1],A138_out}));
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.MUXCY_I_i_1__64 
       (.I0(lu_mem_protect_conflict_reg),
        .I1(lookup_restart_mem_done),
        .O(A138_out));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFF222)) 
    \Using_FPGA.MUXCY_I_i_4__2 
       (.I0(lu_ds_lb_delayed_restart_conflict),
        .I1(lookup_protect_conflict),
        .I2(lud_addr_pipeline_full_reg),
        .I3(lud_step_delayed_restart),
        .I4(lookup_io_data_stall),
        .I5(Carry_OUT),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_174
   (lookup_raw_hit_carry2,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    lu_check_tag_hit_all_carry,
    lopt,
    lopt_1);
  output lookup_raw_hit_carry2;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  input lu_check_tag_hit_all_carry;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire lookup_raw_hit_carry2;
  wire lu_check_tag_hit_all_carry;

  assign lookup_raw_hit_carry2 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_176
   (lookup_write_hit_carry,
    \lu_check_info_reg[Wr] ,
    lookup_hit_carry,
    lopt,
    lopt_1);
  output lookup_write_hit_carry;
  input \lu_check_info_reg[Wr] ;
  input lookup_hit_carry;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire lookup_hit_carry;
  wire lookup_write_hit_carry;
  wire \lu_check_info_reg[Wr] ;

  assign lookup_write_hit_carry = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_178
   (lu_fetch_piperun_pre2,
    \Use_FPGA.Full_Inst ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output lu_fetch_piperun_pre2;
  input \Use_FPGA.Full_Inst ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \Use_FPGA.Full_Inst ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire lu_fetch_piperun_pre2;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(\Use_FPGA.Full_Inst ),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,lu_fetch_piperun_pre2}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,1'b1}));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_183
   (dirty_miss_valid,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    Carry_OUT,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output dirty_miss_valid;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  input Carry_OUT;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire Carry_OUT;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire dirty_miss_valid;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(Carry_OUT),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,dirty_miss_valid}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst }));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_185
   (lookup_miss_dirty_pre,
    dirty_bit_valid,
    lopt,
    lopt_1,
    lopt_2);
  output lookup_miss_dirty_pre;
  input dirty_bit_valid;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire dirty_bit_valid;
  wire lookup_miss_dirty_pre;

  assign lookup_miss_dirty_pre = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_186
   (lookup_miss_dirty,
    lookup_wm_evict,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    lookup_miss_dirty_pre,
    \lu_check_info_reg[KillHit] ,
    \lu_check_info_reg[Wr] ,
    \lu_check_info_reg[Keep] ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output lookup_miss_dirty;
  output lookup_wm_evict;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  input lookup_miss_dirty_pre;
  input \lu_check_info_reg[KillHit] ;
  input \lu_check_info_reg[Wr] ;
  input \lu_check_info_reg[Keep] ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire lookup_miss_dirty;
  wire lookup_miss_dirty_pre;
  wire lookup_wm_evict;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire \lu_check_info_reg[Keep] ;
  wire \lu_check_info_reg[KillHit] ;
  wire \lu_check_info_reg[Wr] ;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(lookup_miss_dirty_pre),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,lookup_miss_dirty}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst }));
  LUT5 #(
    .INIT(32'hAAAABAAA)) 
    \wm_fifo_mem_reg[15][Evict][-1111111111]_srl16_i_1 
       (.I0(lookup_miss_dirty),
        .I1(\lu_check_info_reg[KillHit] ),
        .I2(\lu_check_info_reg[Wr] ),
        .I3(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I4(\lu_check_info_reg[Keep] ),
        .O(lookup_wm_evict));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_19
   (rip_pop,
    \Use_FPGA_2.S_AXI_RVALID_reg ,
    \Use_Rd_Ctrl_Pipeline.ri_hit_reg ,
    r_pop_safe_i,
    ri_exist,
    \Use_FPGA.Empty_Inst ,
    Q,
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst ,
    p_4_out__2,
    p_3_out__2,
    \Use_Rd_Ctrl_Pipeline.ri_hit_reg_0 ,
    r_hit_last,
    r_miss_last,
    lopt,
    lopt_1,
    lopt_2);
  output rip_pop;
  output \Use_FPGA_2.S_AXI_RVALID_reg ;
  output \Use_Rd_Ctrl_Pipeline.ri_hit_reg ;
  input r_pop_safe_i;
  input ri_exist;
  input \Use_FPGA.Empty_Inst ;
  input Q;
  input \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst ;
  input p_4_out__2;
  input p_3_out__2;
  input \Use_Rd_Ctrl_Pipeline.ri_hit_reg_0 ;
  input r_hit_last;
  input r_miss_last;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire A;
  wire Q;
  wire \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst ;
  wire \Use_FPGA.Empty_Inst ;
  wire \Use_FPGA_2.S_AXI_RVALID_i_2_n_0 ;
  wire \Use_FPGA_2.S_AXI_RVALID_reg ;
  wire \Use_Rd_Ctrl_Pipeline.ri_hit_reg ;
  wire \Use_Rd_Ctrl_Pipeline.ri_hit_reg_0 ;
  wire p_3_out__2;
  wire p_4_out__2;
  wire r_hit_last;
  wire r_miss_last;
  wire r_pop_safe_i;
  wire ri_exist;
  wire rip_pop;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = A;
  assign rip_pop = lopt;
  GND GND
       (.G(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair130" *) 
  LUT5 #(
    .INIT(32'h000008AA)) 
    \Use_FPGA_2.S_AXI_RVALID_i_1 
       (.I0(\Use_FPGA_2.S_AXI_RVALID_i_2_n_0 ),
        .I1(ri_exist),
        .I2(rip_pop),
        .I3(\Use_FPGA.Empty_Inst ),
        .I4(Q),
        .O(\Use_FPGA_2.S_AXI_RVALID_reg ));
  LUT6 #(
    .INIT(64'hFF45BA00FF758A00)) 
    \Use_FPGA_2.S_AXI_RVALID_i_2 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst ),
        .I1(rip_pop),
        .I2(ri_exist),
        .I3(p_4_out__2),
        .I4(p_3_out__2),
        .I5(\Use_Rd_Ctrl_Pipeline.ri_hit_reg_0 ),
        .O(\Use_FPGA_2.S_AXI_RVALID_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair130" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \Use_Rd_Ctrl_Pipeline.ri_hit_i_1 
       (.I0(rip_pop),
        .I1(ri_exist),
        .O(\Use_Rd_Ctrl_Pipeline.ri_hit_reg ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.MUXCY_I_i_1__12 
       (.I0(r_hit_last),
        .I1(\Use_Rd_Ctrl_Pipeline.ri_hit_reg_0 ),
        .I2(r_miss_last),
        .O(A));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_191
   (lu_mem_tag_conflict,
    lu_mem_match_addr,
    lu_mem_valid_reg,
    access_valid,
    lopt,
    lopt_1,
    lopt_2);
  output lu_mem_tag_conflict;
  input lu_mem_match_addr;
  input lu_mem_valid_reg;
  input access_valid;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire A123_out;
  wire access_valid;
  wire lu_mem_match_addr;
  wire lu_mem_tag_conflict;
  wire lu_mem_valid_reg;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = A123_out;
  assign lu_mem_tag_conflict = lopt;
  GND GND
       (.G(\<const0> ));
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.MUXCY_I_i_1__78 
       (.I0(lu_mem_valid_reg),
        .I1(access_valid),
        .O(A123_out));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_195
   (protected_miss_valid,
    A149_out,
    Carry_Out,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output protected_miss_valid;
  input A149_out;
  input Carry_Out;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire A149_out;
  wire Carry_Out;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire protected_miss_valid;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(Carry_Out),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,protected_miss_valid}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,A149_out}));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_197
   (lookup_protect_conflict,
    lud_mem_completed_reg,
    lud_mem_completed_reg_0,
    lud_reg_valid_reg,
    lud_reg_valid_reg_0,
    lud_addr_pipeline_full_reg,
    lud_mem_delayed_read_data_reg,
    ADDRA,
    lookup_restart_mem,
    A21_out,
    lookup_restart_mem_done_reg,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    protection_with_coherency,
    Q,
    lookup_last_beat,
    lud_addr_piperun,
    lud_mem_completed_reg_1,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    lud_reg_valid_reg_1,
    lud_reg_piperun,
    lud_mem_piperun,
    \read_data_status[0,1][Hit_Pop] ,
    \lud_reg_port_num_reg[0] ,
    \read_data_status[0,0][Hit_Pop] ,
    \lu_check_locked_hit_reg[0] ,
    lud_mem_delayed_read_data,
    lud_mem_keep_single_during_stall,
    A_N160_out,
    \lu_check_locked_hit_reg[1] ,
    lu_mem_valid_reg,
    \lu_mem_info_reg[Wr] ,
    \lu_check_info_reg[KillHit] ,
    lookup_restart_mem_done,
    lu_mem_protect_conflict_reg,
    \arb_access_i_reg[Addr][13] ,
    \lu_mem_info_reg[Addr][6] ,
    D,
    \lu_mem_info_reg[Addr][7] ,
    \lu_mem_info_reg[Addr][8] ,
    \lu_mem_info_reg[Addr][9] ,
    \lu_mem_info_reg[Addr][10] ,
    \lu_mem_info_reg[Addr][11] ,
    \lu_mem_info_reg[Addr][12] ,
    \lu_mem_info_reg[Addr][13] ,
    lopt,
    lopt_1);
  output lookup_protect_conflict;
  output lud_mem_completed_reg;
  output lud_mem_completed_reg_0;
  output lud_reg_valid_reg;
  output lud_reg_valid_reg_0;
  output lud_addr_pipeline_full_reg;
  output lud_mem_delayed_read_data_reg;
  output [7:0]ADDRA;
  output lookup_restart_mem;
  output A21_out;
  output lookup_restart_mem_done_reg;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  input protection_with_coherency;
  input Q;
  input lookup_last_beat;
  input lud_addr_piperun;
  input lud_mem_completed_reg_1;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input lud_reg_valid_reg_1;
  input lud_reg_piperun;
  input lud_mem_piperun;
  input \read_data_status[0,1][Hit_Pop] ;
  input \lud_reg_port_num_reg[0] ;
  input \read_data_status[0,0][Hit_Pop] ;
  input \lu_check_locked_hit_reg[0] ;
  input lud_mem_delayed_read_data;
  input lud_mem_keep_single_during_stall;
  input A_N160_out;
  input [1:0]\lu_check_locked_hit_reg[1] ;
  input lu_mem_valid_reg;
  input \lu_mem_info_reg[Wr] ;
  input \lu_check_info_reg[KillHit] ;
  input lookup_restart_mem_done;
  input lu_mem_protect_conflict_reg;
  input [7:0]\arb_access_i_reg[Addr][13] ;
  input \lu_mem_info_reg[Addr][6] ;
  input [7:0]D;
  input \lu_mem_info_reg[Addr][7] ;
  input \lu_mem_info_reg[Addr][8] ;
  input \lu_mem_info_reg[Addr][9] ;
  input \lu_mem_info_reg[Addr][10] ;
  input \lu_mem_info_reg[Addr][11] ;
  input \lu_mem_info_reg[Addr][12] ;
  input \lu_mem_info_reg[Addr][13] ;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire A21_out;
  wire [7:0]ADDRA;
  wire A_N160_out;
  wire [7:0]D;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire [7:0]\arb_access_i_reg[Addr][13] ;
  wire lookup_last_beat;
  wire lookup_protect_conflict;
  wire lookup_restart_mem;
  wire lookup_restart_mem_done;
  wire lookup_restart_mem_done_reg;
  wire \lu_check_info_reg[KillHit] ;
  wire \lu_check_locked_hit_reg[0] ;
  wire [1:0]\lu_check_locked_hit_reg[1] ;
  wire \lu_mem_info_reg[Addr][10] ;
  wire \lu_mem_info_reg[Addr][11] ;
  wire \lu_mem_info_reg[Addr][12] ;
  wire \lu_mem_info_reg[Addr][13] ;
  wire \lu_mem_info_reg[Addr][6] ;
  wire \lu_mem_info_reg[Addr][7] ;
  wire \lu_mem_info_reg[Addr][8] ;
  wire \lu_mem_info_reg[Addr][9] ;
  wire \lu_mem_info_reg[Wr] ;
  wire lu_mem_protect_conflict_reg;
  wire lu_mem_valid_reg;
  wire lud_addr_pipeline_full_reg;
  wire lud_addr_piperun;
  wire lud_mem_completed_reg;
  wire lud_mem_completed_reg_0;
  wire lud_mem_completed_reg_1;
  wire lud_mem_delayed_read_data;
  wire lud_mem_delayed_read_data_reg;
  wire lud_mem_keep_single_during_stall;
  wire lud_mem_piperun;
  wire lud_reg_piperun;
  wire \lud_reg_port_num_reg[0] ;
  wire lud_reg_valid_reg;
  wire lud_reg_valid_reg_0;
  wire lud_reg_valid_reg_1;
  wire protection_with_coherency;
  wire \read_data_status[0,0][Hit_Pop] ;
  wire \read_data_status[0,1][Hit_Pop] ;

  assign lookup_protect_conflict = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
  LUT6 #(
    .INIT(64'hFFFFF4B00000F4B0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_2__0 
       (.I0(lookup_restart_mem_done),
        .I1(lu_mem_protect_conflict_reg),
        .I2(\arb_access_i_reg[Addr][13] [7]),
        .I3(\lu_mem_info_reg[Addr][13] ),
        .I4(lookup_protect_conflict),
        .I5(D[7]),
        .O(ADDRA[7]));
  LUT6 #(
    .INIT(64'hFFFFF4B00000F4B0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_3__0 
       (.I0(lookup_restart_mem_done),
        .I1(lu_mem_protect_conflict_reg),
        .I2(\arb_access_i_reg[Addr][13] [6]),
        .I3(\lu_mem_info_reg[Addr][12] ),
        .I4(lookup_protect_conflict),
        .I5(D[6]),
        .O(ADDRA[6]));
  LUT6 #(
    .INIT(64'hFFFFF4B00000F4B0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_4__0 
       (.I0(lookup_restart_mem_done),
        .I1(lu_mem_protect_conflict_reg),
        .I2(\arb_access_i_reg[Addr][13] [5]),
        .I3(\lu_mem_info_reg[Addr][11] ),
        .I4(lookup_protect_conflict),
        .I5(D[5]),
        .O(ADDRA[5]));
  LUT6 #(
    .INIT(64'hFFFFF4B00000F4B0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_5__0 
       (.I0(lookup_restart_mem_done),
        .I1(lu_mem_protect_conflict_reg),
        .I2(\arb_access_i_reg[Addr][13] [4]),
        .I3(\lu_mem_info_reg[Addr][10] ),
        .I4(lookup_protect_conflict),
        .I5(D[4]),
        .O(ADDRA[4]));
  LUT6 #(
    .INIT(64'hFFFFF4B00000F4B0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_6__0 
       (.I0(lookup_restart_mem_done),
        .I1(lu_mem_protect_conflict_reg),
        .I2(\arb_access_i_reg[Addr][13] [3]),
        .I3(\lu_mem_info_reg[Addr][9] ),
        .I4(lookup_protect_conflict),
        .I5(D[3]),
        .O(ADDRA[3]));
  LUT6 #(
    .INIT(64'hFFFFF4B00000F4B0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_7__0 
       (.I0(lookup_restart_mem_done),
        .I1(lu_mem_protect_conflict_reg),
        .I2(\arb_access_i_reg[Addr][13] [2]),
        .I3(\lu_mem_info_reg[Addr][8] ),
        .I4(lookup_protect_conflict),
        .I5(D[2]),
        .O(ADDRA[2]));
  LUT6 #(
    .INIT(64'hFFFFF4B00000F4B0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_8__0 
       (.I0(lookup_restart_mem_done),
        .I1(lu_mem_protect_conflict_reg),
        .I2(\arb_access_i_reg[Addr][13] [1]),
        .I3(\lu_mem_info_reg[Addr][7] ),
        .I4(lookup_protect_conflict),
        .I5(D[1]),
        .O(ADDRA[1]));
  LUT6 #(
    .INIT(64'hFFFFF4B00000F4B0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_9__0 
       (.I0(lookup_restart_mem_done),
        .I1(lu_mem_protect_conflict_reg),
        .I2(\arb_access_i_reg[Addr][13] [0]),
        .I3(\lu_mem_info_reg[Addr][6] ),
        .I4(lookup_protect_conflict),
        .I5(D[0]),
        .O(ADDRA[0]));
  (* SOFT_HLUTNM = "soft_lutpair46" *) 
  LUT3 #(
    .INIT(8'h04)) 
    \Using_FPGA.MUXCY_I_i_4__1 
       (.I0(lookup_restart_mem_done),
        .I1(lu_mem_protect_conflict_reg),
        .I2(lookup_protect_conflict),
        .O(lookup_restart_mem));
  (* SOFT_HLUTNM = "soft_lutpair46" *) 
  LUT3 #(
    .INIT(8'hBA)) 
    \Using_FPGA.OR2L_Inst1_i_1 
       (.I0(lookup_protect_conflict),
        .I1(lookup_restart_mem_done),
        .I2(lu_mem_protect_conflict_reg),
        .O(A21_out));
  (* SOFT_HLUTNM = "soft_lutpair47" *) 
  LUT3 #(
    .INIT(8'hF4)) 
    lookup_restart_mem_done_i_2
       (.I0(lookup_protect_conflict),
        .I1(lu_mem_protect_conflict_reg),
        .I2(lookup_restart_mem_done),
        .O(lookup_restart_mem_done_reg));
  LUT6 #(
    .INIT(64'h1000105000000000)) 
    lud_addr_pipeline_full_i_3
       (.I0(lud_reg_valid_reg_0),
        .I1(\read_data_status[0,1][Hit_Pop] ),
        .I2(lud_reg_valid_reg_1),
        .I3(\lud_reg_port_num_reg[0] ),
        .I4(\read_data_status[0,0][Hit_Pop] ),
        .I5(\lu_check_locked_hit_reg[0] ),
        .O(lud_addr_pipeline_full_reg));
  LUT4 #(
    .INIT(16'hEF00)) 
    lud_addr_pipeline_full_i_5
       (.I0(lud_mem_delayed_read_data),
        .I1(lud_mem_keep_single_during_stall),
        .I2(lookup_protect_conflict),
        .I3(A_N160_out),
        .O(lud_reg_valid_reg_0));
  LUT6 #(
    .INIT(64'h4055400000000000)) 
    lud_mem_completed_i_1
       (.I0(Q),
        .I1(lud_mem_completed_reg_0),
        .I2(lookup_last_beat),
        .I3(lud_addr_piperun),
        .I4(lud_mem_completed_reg_1),
        .I5(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .O(lud_mem_completed_reg));
  (* SOFT_HLUTNM = "soft_lutpair47" *) 
  LUT3 #(
    .INIT(8'h01)) 
    lud_mem_delayed_read_data_i_2
       (.I0(\lu_check_locked_hit_reg[1] [1]),
        .I1(\lu_check_locked_hit_reg[1] [0]),
        .I2(lookup_protect_conflict),
        .O(lud_mem_delayed_read_data_reg));
  LUT4 #(
    .INIT(16'h0400)) 
    lud_mem_waiting_for_pipe_i_2
       (.I0(lookup_protect_conflict),
        .I1(lu_mem_valid_reg),
        .I2(\lu_mem_info_reg[Wr] ),
        .I3(\lu_check_info_reg[KillHit] ),
        .O(lud_mem_completed_reg_0));
  LUT5 #(
    .INIT(32'h0C0C000A)) 
    lud_reg_valid_i_1
       (.I0(lud_reg_valid_reg_1),
        .I1(lud_reg_valid_reg_0),
        .I2(Q),
        .I3(lud_reg_piperun),
        .I4(lud_mem_piperun),
        .O(lud_reg_valid_reg));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_2
   (r_pop,
    S1_AXI_RREADY,
    r_pop_valid,
    lopt,
    lopt_1);
  output r_pop;
  input S1_AXI_RREADY;
  input r_pop_valid;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire S1_AXI_RREADY;
  wire r_pop;
  wire r_pop_valid;

  assign lopt_1 = \<const0> ;
  assign r_pop = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_203
   (lookup_push_wm_stall,
    update_write_miss_full,
    lookup_push_write_miss_pre,
    lopt,
    lopt_1);
  output lookup_push_wm_stall;
  input update_write_miss_full;
  input lookup_push_write_miss_pre;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire lookup_push_wm_stall;
  wire lookup_push_write_miss_pre;
  wire update_write_miss_full;

  assign lookup_push_wm_stall = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_205
   (lookup_md_wm_whne_valid,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    lookup_md_or_wm_or_whne2,
    lopt,
    lopt_1);
  output lookup_md_wm_whne_valid;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  input lookup_md_or_wm_or_whne2;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire lookup_md_or_wm_or_whne2;
  wire lookup_md_wm_whne_valid;

  assign lookup_md_wm_whne_valid = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_223
   (Carry_IN,
    lru_protected_bit,
    Q,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_IN;
  input lru_protected_bit;
  input [1:0]Q;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire Carry_IN;
  wire [1:0]Q;
  wire \Using_FPGA.MUXCY_I_i_1__58_n_0 ;
  wire lru_protected_bit;

  assign Carry_IN = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \Using_FPGA.MUXCY_I_i_1__58_n_0 ;
  GND GND
       (.G(\<const0> ));
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.MUXCY_I_i_1__58 
       (.I0(Q[1]),
        .I1(Q[0]),
        .O(\Using_FPGA.MUXCY_I_i_1__58_n_0 ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_224
   (carry_1,
    \The_Compare[0].sel_reg ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output carry_1;
  input \The_Compare[0].sel_reg ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \The_Compare[0].sel_reg ;
  wire carry_1;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,carry_1}),
        .CYINIT(1'b1),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\The_Compare[0].sel_reg }));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_225
   (carry_2,
    A_3,
    carry_1,
    lopt,
    lopt_1);
  output carry_2;
  input A_3;
  input carry_1;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire A_3;
  wire carry_1;
  wire carry_2;

  assign carry_2 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_226
   (lu_mem_match_addr,
    carry_2,
    \lu_mem_info_reg[Addr][13] ,
    Q,
    \lu_mem_info_reg[Addr][12] ,
    lopt,
    lopt_1,
    lopt_2);
  output lu_mem_match_addr;
  input carry_2;
  input \lu_mem_info_reg[Addr][13] ;
  input [1:0]Q;
  input \lu_mem_info_reg[Addr][12] ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire [1:0]Q;
  wire \The_Compare[2].sel_reg ;
  wire carry_2;
  wire \lu_mem_info_reg[Addr][12] ;
  wire \lu_mem_info_reg[Addr][13] ;
  wire lu_mem_match_addr;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = \The_Compare[2].sel_reg ;
  assign lu_mem_match_addr = lopt;
  GND GND
       (.G(\<const0> ));
  LUT4 #(
    .INIT(16'h9009)) 
    \Using_FPGA.MUXCY_I_i_1__108 
       (.I0(\lu_mem_info_reg[Addr][13] ),
        .I1(Q[1]),
        .I2(Q[0]),
        .I3(\lu_mem_info_reg[Addr][12] ),
        .O(\The_Compare[2].sel_reg ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_230
   (dirty_bit_valid,
    dirty_bit,
    \lu_check_info_reg[KillHit] ,
    Q,
    lopt,
    lopt_1,
    lopt_2);
  output dirty_bit_valid;
  input dirty_bit;
  input \lu_check_info_reg[KillHit] ;
  input [1:0]Q;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire [1:0]Q;
  wire \Using_FPGA.MUXCY_I_i_1__137_n_0 ;
  wire dirty_bit;
  wire dirty_bit_valid;
  wire \lu_check_info_reg[KillHit] ;

  assign dirty_bit_valid = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \Using_FPGA.MUXCY_I_i_1__137_n_0 ;
  GND GND
       (.G(\<const0> ));
  LUT3 #(
    .INIT(8'hAB)) 
    \Using_FPGA.MUXCY_I_i_1__137 
       (.I0(\lu_check_info_reg[KillHit] ),
        .I1(Q[0]),
        .I2(Q[1]),
        .O(\Using_FPGA.MUXCY_I_i_1__137_n_0 ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_232
   (Carry_IN,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    lru_dirty_bit,
    lopt,
    lopt_1);
  output Carry_IN;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  input lru_dirty_bit;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire Carry_IN;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire lru_dirty_bit;

  assign Carry_IN = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_234
   (Carry_Out,
    Carry_In,
    Q,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_Out;
  input Carry_In;
  input [1:0]Q;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire Carry_In;
  wire Carry_Out;
  wire [1:0]Q;
  wire \Using_FPGA.MUXCY_I_i_1__18_n_0 ;

  assign Carry_Out = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \Using_FPGA.MUXCY_I_i_1__18_n_0 ;
  GND GND
       (.G(\<const0> ));
  LUT2 #(
    .INIT(4'h1)) 
    \Using_FPGA.MUXCY_I_i_1__18 
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(\Using_FPGA.MUXCY_I_i_1__18_n_0 ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_235
   (carry_1,
    \The_Compare[0].sel_reg_5 ,
    Carry_Out,
    lopt,
    lopt_1);
  output carry_1;
  input \The_Compare[0].sel_reg_5 ;
  input Carry_Out;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire Carry_Out;
  wire \The_Compare[0].sel_reg_5 ;
  wire carry_1;

  assign carry_1 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_236
   (WEA,
    A_6,
    carry_1,
    \wr_port_data_info_reg[0][BE][3] ,
    \wr_port_data_info_reg[0][BE][3]_0 ,
    lu_check_wait_for_update,
    lu_check_allow_write_reg,
    \lu_check_info_reg[Port_Num][0] );
  output [3:0]WEA;
  input A_6;
  input carry_1;
  input [3:0]\wr_port_data_info_reg[0][BE][3] ;
  input [3:0]\wr_port_data_info_reg[0][BE][3]_0 ;
  input lu_check_wait_for_update;
  input lu_check_allow_write_reg;
  input \lu_check_info_reg[Port_Num][0] ;

  wire A_6;
  wire [3:0]WEA;
  wire carry_1;
  wire lookup_write_hit_valid;
  wire lu_check_allow_write_reg;
  wire \lu_check_info_reg[Port_Num][0] ;
  wire lu_check_wait_for_update;
  wire [3:0]\wr_port_data_info_reg[0][BE][3] ;
  wire [3:0]\wr_port_data_info_reg[0][BE][3]_0 ;
  wire [3:1]\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED ;

  LUT6 #(
    .INIT(64'h0A0000000C000000)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_41 
       (.I0(\wr_port_data_info_reg[0][BE][3] [0]),
        .I1(\wr_port_data_info_reg[0][BE][3]_0 [0]),
        .I2(lu_check_wait_for_update),
        .I3(lookup_write_hit_valid),
        .I4(lu_check_allow_write_reg),
        .I5(\lu_check_info_reg[Port_Num][0] ),
        .O(WEA[0]));
  LUT6 #(
    .INIT(64'h0A0000000C000000)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_17 
       (.I0(\wr_port_data_info_reg[0][BE][3] [1]),
        .I1(\wr_port_data_info_reg[0][BE][3]_0 [1]),
        .I2(lu_check_wait_for_update),
        .I3(lookup_write_hit_valid),
        .I4(lu_check_allow_write_reg),
        .I5(\lu_check_info_reg[Port_Num][0] ),
        .O(WEA[1]));
  LUT6 #(
    .INIT(64'h0A0000000C000000)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_i_17 
       (.I0(\wr_port_data_info_reg[0][BE][3] [2]),
        .I1(\wr_port_data_info_reg[0][BE][3]_0 [2]),
        .I2(lu_check_wait_for_update),
        .I3(lookup_write_hit_valid),
        .I4(lu_check_allow_write_reg),
        .I5(\lu_check_info_reg[Port_Num][0] ),
        .O(WEA[2]));
  LUT6 #(
    .INIT(64'h0A0000000C000000)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_17 
       (.I0(\wr_port_data_info_reg[0][BE][3] [3]),
        .I1(\wr_port_data_info_reg[0][BE][3]_0 [3]),
        .I2(lu_check_wait_for_update),
        .I3(lookup_write_hit_valid),
        .I4(lu_check_allow_write_reg),
        .I5(\lu_check_info_reg[Port_Num][0] ),
        .O(WEA[3]));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(carry_1),
        .CO({\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED [3:1],lookup_write_hit_valid}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED [3:1],1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED [3:1],A_6}));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_24
   (arbiter_piperun_and_valid,
    reduce_or7_out,
    access_piperun,
    lopt,
    lopt_1);
  output arbiter_piperun_and_valid;
  input reduce_or7_out;
  input access_piperun;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire access_piperun;
  wire arbiter_piperun_and_valid;
  wire reduce_or7_out;

  assign arbiter_piperun_and_valid = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_247
   (lookup_io_data_stall,
    lookup_io_stall_valid,
    \lu_check_info_reg[Wr] ,
    Q,
    lopt,
    lopt_1,
    lopt_2);
  output lookup_io_data_stall;
  input lookup_io_stall_valid;
  input \lu_check_info_reg[Wr] ;
  input [1:0]Q;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire [1:0]Q;
  wire \Using_FPGA.MUXCY_I_i_1__52_n_0 ;
  wire lookup_io_data_stall;
  wire lookup_io_stall_valid;
  wire \lu_check_info_reg[Wr] ;

  assign lookup_io_data_stall = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \Using_FPGA.MUXCY_I_i_1__52_n_0 ;
  GND GND
       (.G(\<const0> ));
  LUT3 #(
    .INIT(8'hAB)) 
    \Using_FPGA.MUXCY_I_i_1__52 
       (.I0(\lu_check_info_reg[Wr] ),
        .I1(Q[1]),
        .I2(Q[0]),
        .O(\Using_FPGA.MUXCY_I_i_1__52_n_0 ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_250
   (carry_1,
    D,
    Q,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output carry_1;
  input [2:0]D;
  input [2:0]Q;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire [2:0]D;
  wire [2:0]Q;
  wire \The_Compare[0].sel_reg ;
  wire carry_1;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,carry_1}),
        .CYINIT(1'b1),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\The_Compare[0].sel_reg }));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.MUXCY_I_i_1__109 
       (.I0(D[1]),
        .I1(Q[1]),
        .I2(D[2]),
        .I3(Q[2]),
        .I4(Q[0]),
        .I5(D[0]),
        .O(\The_Compare[0].sel_reg ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_251
   (carry_2,
    carry_1,
    D,
    Q,
    lopt,
    lopt_1,
    lopt_2);
  output carry_2;
  input carry_1;
  input [2:0]D;
  input [2:0]Q;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire A;
  wire [2:0]D;
  wire [2:0]Q;
  wire carry_1;
  wire carry_2;

  assign carry_2 = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = A;
  GND GND
       (.G(\<const0> ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.MUXCY_I_i_1__110 
       (.I0(D[2]),
        .I1(Q[2]),
        .I2(D[1]),
        .I3(Q[1]),
        .I4(Q[0]),
        .I5(D[0]),
        .O(A));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_252
   (lu_check_match_addr,
    \The_Compare[2].sel_reg ,
    carry_2,
    lopt,
    lopt_1);
  output lu_check_match_addr;
  input \The_Compare[2].sel_reg ;
  input carry_2;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \The_Compare[2].sel_reg ;
  wire carry_2;
  wire lu_check_match_addr;

  assign lopt_1 = \<const0> ;
  assign lu_check_match_addr = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_255
   (carry_1,
    lu_mem_valid_carry_1,
    Q,
    lu_mem_protect_conflict_reg,
    \lu_check_info_reg[Addr][16] ,
    DATA_OUTA,
    \lu_check_info_reg[Addr][14] ,
    lopt,
    lopt_1,
    lopt_2);
  output carry_1;
  input lu_mem_valid_carry_1;
  input [1:0]Q;
  input lu_mem_protect_conflict_reg;
  input [1:0]\lu_check_info_reg[Addr][16] ;
  input [2:0]DATA_OUTA;
  input \lu_check_info_reg[Addr][14] ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire [2:0]DATA_OUTA;
  wire [1:0]Q;
  wire \The_Compare[0].sel_reg ;
  wire \Using_FPGA.MUXCY_I_i_2__14_n_0 ;
  wire carry_1;
  wire \lu_check_info_reg[Addr][14] ;
  wire [1:0]\lu_check_info_reg[Addr][16] ;
  wire lu_mem_protect_conflict_reg;
  wire lu_mem_valid_carry_1;

  assign carry_1 = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \The_Compare[0].sel_reg ;
  GND GND
       (.G(\<const0> ));
  LUT5 #(
    .INIT(32'hA80802A2)) 
    \Using_FPGA.MUXCY_I_i_1__113 
       (.I0(\Using_FPGA.MUXCY_I_i_2__14_n_0 ),
        .I1(Q[0]),
        .I2(lu_mem_protect_conflict_reg),
        .I3(\lu_check_info_reg[Addr][16] [0]),
        .I4(DATA_OUTA[1]),
        .O(\The_Compare[0].sel_reg ));
  LUT6 #(
    .INIT(64'hA95900000000A959)) 
    \Using_FPGA.MUXCY_I_i_2__14 
       (.I0(DATA_OUTA[2]),
        .I1(Q[1]),
        .I2(lu_mem_protect_conflict_reg),
        .I3(\lu_check_info_reg[Addr][16] [1]),
        .I4(\lu_check_info_reg[Addr][14] ),
        .I5(DATA_OUTA[0]),
        .O(\Using_FPGA.MUXCY_I_i_2__14_n_0 ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_256
   (carry_2,
    carry_1,
    Q,
    lu_mem_protect_conflict_reg,
    \lu_check_info_reg[Addr][19] ,
    DATA_OUTA,
    \lu_check_info_reg[Addr][17] ,
    lopt,
    lopt_1,
    lopt_2);
  output carry_2;
  input carry_1;
  input [1:0]Q;
  input lu_mem_protect_conflict_reg;
  input [1:0]\lu_check_info_reg[Addr][19] ;
  input [2:0]DATA_OUTA;
  input \lu_check_info_reg[Addr][17] ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire A;
  wire [2:0]DATA_OUTA;
  wire [1:0]Q;
  wire \Using_FPGA.MUXCY_I_i_2__16_n_0 ;
  wire carry_1;
  wire carry_2;
  wire \lu_check_info_reg[Addr][17] ;
  wire [1:0]\lu_check_info_reg[Addr][19] ;
  wire lu_mem_protect_conflict_reg;

  assign carry_2 = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = A;
  GND GND
       (.G(\<const0> ));
  LUT5 #(
    .INIT(32'hA80802A2)) 
    \Using_FPGA.MUXCY_I_i_1__115 
       (.I0(\Using_FPGA.MUXCY_I_i_2__16_n_0 ),
        .I1(Q[0]),
        .I2(lu_mem_protect_conflict_reg),
        .I3(\lu_check_info_reg[Addr][19] [0]),
        .I4(DATA_OUTA[1]),
        .O(A));
  LUT6 #(
    .INIT(64'hA95900000000A959)) 
    \Using_FPGA.MUXCY_I_i_2__16 
       (.I0(DATA_OUTA[2]),
        .I1(Q[1]),
        .I2(lu_mem_protect_conflict_reg),
        .I3(\lu_check_info_reg[Addr][19] [1]),
        .I4(\lu_check_info_reg[Addr][17] ),
        .I5(DATA_OUTA[0]),
        .O(\Using_FPGA.MUXCY_I_i_2__16_n_0 ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_257
   (carry_3,
    carry_2,
    Q,
    lu_mem_protect_conflict_reg,
    \lu_check_info_reg[Addr][22] ,
    DATA_OUTA,
    \lu_check_info_reg[Addr][20] ,
    lopt,
    lopt_1,
    lopt_2);
  output carry_3;
  input carry_2;
  input [1:0]Q;
  input lu_mem_protect_conflict_reg;
  input [1:0]\lu_check_info_reg[Addr][22] ;
  input [2:0]DATA_OUTA;
  input \lu_check_info_reg[Addr][20] ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire [2:0]DATA_OUTA;
  wire [1:0]Q;
  wire \The_Compare[2].sel_reg ;
  wire \Using_FPGA.MUXCY_I_i_2__18_n_0 ;
  wire carry_2;
  wire carry_3;
  wire \lu_check_info_reg[Addr][20] ;
  wire [1:0]\lu_check_info_reg[Addr][22] ;
  wire lu_mem_protect_conflict_reg;

  assign carry_3 = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \The_Compare[2].sel_reg ;
  GND GND
       (.G(\<const0> ));
  LUT5 #(
    .INIT(32'hA80802A2)) 
    \Using_FPGA.MUXCY_I_i_1__117 
       (.I0(\Using_FPGA.MUXCY_I_i_2__18_n_0 ),
        .I1(Q[0]),
        .I2(lu_mem_protect_conflict_reg),
        .I3(\lu_check_info_reg[Addr][22] [0]),
        .I4(DATA_OUTA[1]),
        .O(\The_Compare[2].sel_reg ));
  LUT6 #(
    .INIT(64'hA95900000000A959)) 
    \Using_FPGA.MUXCY_I_i_2__18 
       (.I0(DATA_OUTA[2]),
        .I1(Q[1]),
        .I2(lu_mem_protect_conflict_reg),
        .I3(\lu_check_info_reg[Addr][22] [1]),
        .I4(\lu_check_info_reg[Addr][20] ),
        .I5(DATA_OUTA[0]),
        .O(\Using_FPGA.MUXCY_I_i_2__18_n_0 ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_258
   (carry_4,
    carry_3,
    Q,
    lu_mem_protect_conflict_reg,
    \lu_check_info_reg[Addr][25] ,
    DATA_OUTA,
    \lu_check_info_reg[Addr][23] ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output carry_4;
  input carry_3;
  input [1:0]Q;
  input lu_mem_protect_conflict_reg;
  input [1:0]\lu_check_info_reg[Addr][25] ;
  input [2:0]DATA_OUTA;
  input \lu_check_info_reg[Addr][23] ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire [2:0]DATA_OUTA;
  wire [1:0]Q;
  wire \The_Compare[3].sel_reg ;
  wire \Using_FPGA.MUXCY_I_i_2__20_n_0 ;
  wire carry_3;
  wire carry_4;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire \lu_check_info_reg[Addr][23] ;
  wire [1:0]\lu_check_info_reg[Addr][25] ;
  wire lu_mem_protect_conflict_reg;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(carry_3),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,carry_4}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\The_Compare[3].sel_reg }));
  LUT5 #(
    .INIT(32'hA80802A2)) 
    \Using_FPGA.MUXCY_I_i_1__119 
       (.I0(\Using_FPGA.MUXCY_I_i_2__20_n_0 ),
        .I1(Q[0]),
        .I2(lu_mem_protect_conflict_reg),
        .I3(\lu_check_info_reg[Addr][25] [0]),
        .I4(DATA_OUTA[1]),
        .O(\The_Compare[3].sel_reg ));
  LUT6 #(
    .INIT(64'hA95900000000A959)) 
    \Using_FPGA.MUXCY_I_i_2__20 
       (.I0(DATA_OUTA[2]),
        .I1(Q[1]),
        .I2(lu_mem_protect_conflict_reg),
        .I3(\lu_check_info_reg[Addr][25] [1]),
        .I4(\lu_check_info_reg[Addr][23] ),
        .I5(DATA_OUTA[0]),
        .O(\Using_FPGA.MUXCY_I_i_2__20_n_0 ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_259
   (carry_5,
    carry_4,
    Q,
    lu_mem_protect_conflict_reg,
    \lu_check_info_reg[Addr][28] ,
    DATA_OUTA,
    \lu_check_info_reg[Addr][26] ,
    lopt,
    lopt_1,
    lopt_2);
  output carry_5;
  input carry_4;
  input [1:0]Q;
  input lu_mem_protect_conflict_reg;
  input [1:0]\lu_check_info_reg[Addr][28] ;
  input [2:0]DATA_OUTA;
  input \lu_check_info_reg[Addr][26] ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire [2:0]DATA_OUTA;
  wire [1:0]Q;
  wire \The_Compare[4].sel_reg ;
  wire \Using_FPGA.MUXCY_I_i_2__22_n_0 ;
  wire carry_4;
  wire carry_5;
  wire \lu_check_info_reg[Addr][26] ;
  wire [1:0]\lu_check_info_reg[Addr][28] ;
  wire lu_mem_protect_conflict_reg;

  assign carry_5 = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \The_Compare[4].sel_reg ;
  GND GND
       (.G(\<const0> ));
  LUT5 #(
    .INIT(32'hA80802A2)) 
    \Using_FPGA.MUXCY_I_i_1__121 
       (.I0(\Using_FPGA.MUXCY_I_i_2__22_n_0 ),
        .I1(Q[0]),
        .I2(lu_mem_protect_conflict_reg),
        .I3(\lu_check_info_reg[Addr][28] [0]),
        .I4(DATA_OUTA[1]),
        .O(\The_Compare[4].sel_reg ));
  LUT6 #(
    .INIT(64'hA95900000000A959)) 
    \Using_FPGA.MUXCY_I_i_2__22 
       (.I0(DATA_OUTA[2]),
        .I1(Q[1]),
        .I2(lu_mem_protect_conflict_reg),
        .I3(\lu_check_info_reg[Addr][28] [1]),
        .I4(\lu_check_info_reg[Addr][26] ),
        .I5(DATA_OUTA[0]),
        .O(\Using_FPGA.MUXCY_I_i_2__22_n_0 ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_26
   (port_ready_0,
    reduce_or7_out,
    ARESET_reg,
    port_ready_no_init_0,
    port_ready_1,
    lopt,
    lopt_1,
    lopt_2);
  output port_ready_0;
  output reduce_or7_out;
  input ARESET_reg;
  input port_ready_no_init_0;
  input port_ready_1;
  output lopt;
  input lopt_1;
  input lopt_2;

  wire ARESET_reg;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire lopt_3;
  wire port_ready_0;
  wire port_ready_1;
  wire port_ready_no_init_0;
  wire reduce_or7_out;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = lopt_2;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(port_ready_no_init_0),
        .CO({\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED [3:2],\^lopt_1 ,port_ready_0}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED [3:2],\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED [3:2],lopt_3,ARESET_reg}));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.MUXCY_I_i_1__11 
       (.I0(port_ready_0),
        .I1(port_ready_1),
        .O(reduce_or7_out));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_260
   (lu_mem_pre_pure_valid_tag_1,
    carry_5,
    Q,
    lu_mem_protect_conflict_reg,
    \lu_check_info_reg[Addr][31] ,
    DATA_OUTA,
    \lu_check_info_reg[Addr][29] ,
    lopt,
    lopt_1,
    lopt_2);
  output lu_mem_pre_pure_valid_tag_1;
  input carry_5;
  input [1:0]Q;
  input lu_mem_protect_conflict_reg;
  input [1:0]\lu_check_info_reg[Addr][31] ;
  input [2:0]DATA_OUTA;
  input \lu_check_info_reg[Addr][29] ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire [2:0]DATA_OUTA;
  wire [1:0]Q;
  wire \The_Compare[5].sel_reg ;
  wire \Using_FPGA.MUXCY_I_i_2__24_n_0 ;
  wire carry_5;
  wire \lu_check_info_reg[Addr][29] ;
  wire [1:0]\lu_check_info_reg[Addr][31] ;
  wire lu_mem_pre_pure_valid_tag_1;
  wire lu_mem_protect_conflict_reg;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = \The_Compare[5].sel_reg ;
  assign lu_mem_pre_pure_valid_tag_1 = lopt;
  GND GND
       (.G(\<const0> ));
  LUT5 #(
    .INIT(32'hA80802A2)) 
    \Using_FPGA.MUXCY_I_i_1__123 
       (.I0(\Using_FPGA.MUXCY_I_i_2__24_n_0 ),
        .I1(Q[0]),
        .I2(lu_mem_protect_conflict_reg),
        .I3(\lu_check_info_reg[Addr][31] [0]),
        .I4(DATA_OUTA[1]),
        .O(\The_Compare[5].sel_reg ));
  LUT6 #(
    .INIT(64'hA95900000000A959)) 
    \Using_FPGA.MUXCY_I_i_2__24 
       (.I0(DATA_OUTA[2]),
        .I1(Q[1]),
        .I2(lu_mem_protect_conflict_reg),
        .I3(\lu_check_info_reg[Addr][31] [1]),
        .I4(\lu_check_info_reg[Addr][29] ),
        .I5(DATA_OUTA[0]),
        .O(\Using_FPGA.MUXCY_I_i_2__24_n_0 ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_261
   (carry_1,
    \lu_check_tag_hit_reg[0] ,
    lu_mem_valid_carry_0,
    D,
    lu_mem_protect_conflict_reg,
    Q,
    DATA_OUTA,
    lopt,
    lopt_1,
    lopt_2);
  output carry_1;
  output \lu_check_tag_hit_reg[0] ;
  input lu_mem_valid_carry_0;
  input [2:0]D;
  input lu_mem_protect_conflict_reg;
  input [2:0]Q;
  input [2:0]DATA_OUTA;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire [2:0]D;
  wire [2:0]DATA_OUTA;
  wire [2:0]Q;
  wire \The_Compare[0].sel_reg ;
  wire \Using_FPGA.MUXCY_I_i_2__15_n_0 ;
  wire carry_1;
  wire \lu_check_tag_hit_reg[0] ;
  wire lu_mem_protect_conflict_reg;
  wire lu_mem_valid_carry_0;

  assign carry_1 = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \The_Compare[0].sel_reg ;
  GND GND
       (.G(\<const0> ));
  LUT5 #(
    .INIT(32'hA80802A2)) 
    \Using_FPGA.MUXCY_I_i_1__114 
       (.I0(\Using_FPGA.MUXCY_I_i_2__15_n_0 ),
        .I1(D[1]),
        .I2(lu_mem_protect_conflict_reg),
        .I3(Q[1]),
        .I4(DATA_OUTA[1]),
        .O(\The_Compare[0].sel_reg ));
  LUT6 #(
    .INIT(64'hA95900000000A959)) 
    \Using_FPGA.MUXCY_I_i_2__15 
       (.I0(DATA_OUTA[2]),
        .I1(D[2]),
        .I2(lu_mem_protect_conflict_reg),
        .I3(Q[2]),
        .I4(\lu_check_tag_hit_reg[0] ),
        .I5(DATA_OUTA[0]),
        .O(\Using_FPGA.MUXCY_I_i_2__15_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.MUXCY_I_i_3__6 
       (.I0(Q[0]),
        .I1(lu_mem_protect_conflict_reg),
        .I2(D[0]),
        .O(\lu_check_tag_hit_reg[0] ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_262
   (carry_2,
    \lu_check_tag_hit_reg[0] ,
    carry_1,
    D,
    lu_mem_protect_conflict_reg,
    Q,
    DATA_OUTA,
    lopt,
    lopt_1,
    lopt_2);
  output carry_2;
  output \lu_check_tag_hit_reg[0] ;
  input carry_1;
  input [2:0]D;
  input lu_mem_protect_conflict_reg;
  input [2:0]Q;
  input [2:0]DATA_OUTA;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire A;
  wire [2:0]D;
  wire [2:0]DATA_OUTA;
  wire [2:0]Q;
  wire \Using_FPGA.MUXCY_I_i_2__17_n_0 ;
  wire carry_1;
  wire carry_2;
  wire \lu_check_tag_hit_reg[0] ;
  wire lu_mem_protect_conflict_reg;

  assign carry_2 = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = A;
  GND GND
       (.G(\<const0> ));
  LUT5 #(
    .INIT(32'hA80802A2)) 
    \Using_FPGA.MUXCY_I_i_1__116 
       (.I0(\Using_FPGA.MUXCY_I_i_2__17_n_0 ),
        .I1(D[1]),
        .I2(lu_mem_protect_conflict_reg),
        .I3(Q[1]),
        .I4(DATA_OUTA[1]),
        .O(A));
  LUT6 #(
    .INIT(64'hA95900000000A959)) 
    \Using_FPGA.MUXCY_I_i_2__17 
       (.I0(DATA_OUTA[2]),
        .I1(D[2]),
        .I2(lu_mem_protect_conflict_reg),
        .I3(Q[2]),
        .I4(\lu_check_tag_hit_reg[0] ),
        .I5(DATA_OUTA[0]),
        .O(\Using_FPGA.MUXCY_I_i_2__17_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.MUXCY_I_i_3__7 
       (.I0(Q[0]),
        .I1(lu_mem_protect_conflict_reg),
        .I2(D[0]),
        .O(\lu_check_tag_hit_reg[0] ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_263
   (carry_3,
    \lu_check_tag_hit_reg[0] ,
    carry_2,
    D,
    lu_mem_protect_conflict_reg,
    Q,
    DATA_OUTA,
    lopt,
    lopt_1,
    lopt_2);
  output carry_3;
  output \lu_check_tag_hit_reg[0] ;
  input carry_2;
  input [2:0]D;
  input lu_mem_protect_conflict_reg;
  input [2:0]Q;
  input [2:0]DATA_OUTA;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire [2:0]D;
  wire [2:0]DATA_OUTA;
  wire [2:0]Q;
  wire \The_Compare[2].sel_reg ;
  wire \Using_FPGA.MUXCY_I_i_2__19_n_0 ;
  wire carry_2;
  wire carry_3;
  wire \lu_check_tag_hit_reg[0] ;
  wire lu_mem_protect_conflict_reg;

  assign carry_3 = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \The_Compare[2].sel_reg ;
  GND GND
       (.G(\<const0> ));
  LUT5 #(
    .INIT(32'hA80802A2)) 
    \Using_FPGA.MUXCY_I_i_1__118 
       (.I0(\Using_FPGA.MUXCY_I_i_2__19_n_0 ),
        .I1(D[1]),
        .I2(lu_mem_protect_conflict_reg),
        .I3(Q[1]),
        .I4(DATA_OUTA[1]),
        .O(\The_Compare[2].sel_reg ));
  LUT6 #(
    .INIT(64'hA95900000000A959)) 
    \Using_FPGA.MUXCY_I_i_2__19 
       (.I0(DATA_OUTA[2]),
        .I1(D[2]),
        .I2(lu_mem_protect_conflict_reg),
        .I3(Q[2]),
        .I4(\lu_check_tag_hit_reg[0] ),
        .I5(DATA_OUTA[0]),
        .O(\Using_FPGA.MUXCY_I_i_2__19_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.MUXCY_I_i_3__8 
       (.I0(Q[0]),
        .I1(lu_mem_protect_conflict_reg),
        .I2(D[0]),
        .O(\lu_check_tag_hit_reg[0] ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_264
   (carry_4,
    \lu_check_tag_hit_reg[0] ,
    carry_3,
    D,
    lu_mem_protect_conflict_reg,
    Q,
    DATA_OUTA,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output carry_4;
  output \lu_check_tag_hit_reg[0] ;
  input carry_3;
  input [2:0]D;
  input lu_mem_protect_conflict_reg;
  input [2:0]Q;
  input [2:0]DATA_OUTA;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire [2:0]D;
  wire [2:0]DATA_OUTA;
  wire [2:0]Q;
  wire \The_Compare[3].sel_reg ;
  wire \Using_FPGA.MUXCY_I_i_2__21_n_0 ;
  wire carry_3;
  wire carry_4;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire \lu_check_tag_hit_reg[0] ;
  wire lu_mem_protect_conflict_reg;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(carry_3),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,carry_4}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\The_Compare[3].sel_reg }));
  LUT5 #(
    .INIT(32'hA80802A2)) 
    \Using_FPGA.MUXCY_I_i_1__120 
       (.I0(\Using_FPGA.MUXCY_I_i_2__21_n_0 ),
        .I1(D[1]),
        .I2(lu_mem_protect_conflict_reg),
        .I3(Q[1]),
        .I4(DATA_OUTA[1]),
        .O(\The_Compare[3].sel_reg ));
  LUT6 #(
    .INIT(64'hA95900000000A959)) 
    \Using_FPGA.MUXCY_I_i_2__21 
       (.I0(DATA_OUTA[2]),
        .I1(D[2]),
        .I2(lu_mem_protect_conflict_reg),
        .I3(Q[2]),
        .I4(\lu_check_tag_hit_reg[0] ),
        .I5(DATA_OUTA[0]),
        .O(\Using_FPGA.MUXCY_I_i_2__21_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.MUXCY_I_i_3__9 
       (.I0(Q[0]),
        .I1(lu_mem_protect_conflict_reg),
        .I2(D[0]),
        .O(\lu_check_tag_hit_reg[0] ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_265
   (carry_5,
    \lu_check_tag_hit_reg[0] ,
    carry_4,
    D,
    lu_mem_protect_conflict_reg,
    Q,
    DATA_OUTA,
    lopt,
    lopt_1,
    lopt_2);
  output carry_5;
  output \lu_check_tag_hit_reg[0] ;
  input carry_4;
  input [2:0]D;
  input lu_mem_protect_conflict_reg;
  input [2:0]Q;
  input [2:0]DATA_OUTA;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire [2:0]D;
  wire [2:0]DATA_OUTA;
  wire [2:0]Q;
  wire \The_Compare[4].sel_reg ;
  wire \Using_FPGA.MUXCY_I_i_2__23_n_0 ;
  wire carry_4;
  wire carry_5;
  wire \lu_check_tag_hit_reg[0] ;
  wire lu_mem_protect_conflict_reg;

  assign carry_5 = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \The_Compare[4].sel_reg ;
  GND GND
       (.G(\<const0> ));
  LUT5 #(
    .INIT(32'hA80802A2)) 
    \Using_FPGA.MUXCY_I_i_1__122 
       (.I0(\Using_FPGA.MUXCY_I_i_2__23_n_0 ),
        .I1(D[1]),
        .I2(lu_mem_protect_conflict_reg),
        .I3(Q[1]),
        .I4(DATA_OUTA[1]),
        .O(\The_Compare[4].sel_reg ));
  LUT6 #(
    .INIT(64'hA95900000000A959)) 
    \Using_FPGA.MUXCY_I_i_2__23 
       (.I0(DATA_OUTA[2]),
        .I1(D[2]),
        .I2(lu_mem_protect_conflict_reg),
        .I3(Q[2]),
        .I4(\lu_check_tag_hit_reg[0] ),
        .I5(DATA_OUTA[0]),
        .O(\Using_FPGA.MUXCY_I_i_2__23_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.MUXCY_I_i_3__10 
       (.I0(Q[0]),
        .I1(lu_mem_protect_conflict_reg),
        .I2(D[0]),
        .O(\lu_check_tag_hit_reg[0] ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_266
   (lu_mem_pre_pure_valid_tag_0,
    \lu_check_tag_hit_reg[0] ,
    carry_5,
    D,
    lu_mem_protect_conflict_reg,
    Q,
    DATA_OUTA,
    lopt,
    lopt_1,
    lopt_2);
  output lu_mem_pre_pure_valid_tag_0;
  output \lu_check_tag_hit_reg[0] ;
  input carry_5;
  input [2:0]D;
  input lu_mem_protect_conflict_reg;
  input [2:0]Q;
  input [2:0]DATA_OUTA;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire [2:0]D;
  wire [2:0]DATA_OUTA;
  wire [2:0]Q;
  wire \The_Compare[5].sel_reg ;
  wire \Using_FPGA.MUXCY_I_i_2__25_n_0 ;
  wire carry_5;
  wire \lu_check_tag_hit_reg[0] ;
  wire lu_mem_pre_pure_valid_tag_0;
  wire lu_mem_protect_conflict_reg;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = \The_Compare[5].sel_reg ;
  assign lu_mem_pre_pure_valid_tag_0 = lopt;
  GND GND
       (.G(\<const0> ));
  LUT5 #(
    .INIT(32'hA80802A2)) 
    \Using_FPGA.MUXCY_I_i_1__124 
       (.I0(\Using_FPGA.MUXCY_I_i_2__25_n_0 ),
        .I1(D[1]),
        .I2(lu_mem_protect_conflict_reg),
        .I3(Q[1]),
        .I4(DATA_OUTA[1]),
        .O(\The_Compare[5].sel_reg ));
  LUT6 #(
    .INIT(64'hA95900000000A959)) 
    \Using_FPGA.MUXCY_I_i_2__25 
       (.I0(DATA_OUTA[2]),
        .I1(D[2]),
        .I2(lu_mem_protect_conflict_reg),
        .I3(Q[2]),
        .I4(\lu_check_tag_hit_reg[0] ),
        .I5(DATA_OUTA[0]),
        .O(\Using_FPGA.MUXCY_I_i_2__25_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.MUXCY_I_i_3__11 
       (.I0(Q[0]),
        .I1(lu_mem_protect_conflict_reg),
        .I2(D[0]),
        .O(\lu_check_tag_hit_reg[0] ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_274
   (\read_req_ordered_info[0][Valid] ,
    M_AXI_ARVALID_I,
    A_0,
    no_write_blocking_read,
    M_AXI_ARVALID_I_reg,
    M0_AXI_ARREADY,
    lopt,
    lopt_1,
    lopt_2);
  output \read_req_ordered_info[0][Valid] ;
  output M_AXI_ARVALID_I;
  input A_0;
  input no_write_blocking_read;
  input M_AXI_ARVALID_I_reg;
  input M0_AXI_ARREADY;
  output lopt;
  input lopt_1;
  input lopt_2;

  wire A_0;
  wire M0_AXI_ARREADY;
  wire M_AXI_ARVALID_I;
  wire M_AXI_ARVALID_I_reg;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire lopt_3;
  wire no_write_blocking_read;
  wire \read_req_ordered_info[0][Valid] ;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = lopt_2;
  LUT3 #(
    .INIT(8'hA2)) 
    M_AXI_ARVALID_I_i_1
       (.I0(\read_req_ordered_info[0][Valid] ),
        .I1(M_AXI_ARVALID_I_reg),
        .I2(M0_AXI_ARREADY),
        .O(M_AXI_ARVALID_I));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(no_write_blocking_read),
        .CO({\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED [3:2],\^lopt_1 ,\read_req_ordered_info[0][Valid] }),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED [3:2],\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED [3:2],lopt_3,A_0}));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_275
   (ar_pop_i,
    M_AXI_ARVALID_I_reg,
    \read_req_ordered_info[0][Valid] ,
    lopt,
    lopt_1);
  output ar_pop_i;
  input M_AXI_ARVALID_I_reg;
  input \read_req_ordered_info[0][Valid] ;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire M_AXI_ARVALID_I_reg;
  wire ar_pop_i;
  wire \read_req_ordered_info[0][Valid] ;

  assign ar_pop_i = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_29
   (port_ready_no_init_0,
    port_allow_ready_0,
    any_port_forbid_0,
    \arb_prohibit_read_reg[0] ,
    S0_AXI_ARVALID,
    read_req_ready,
    queue_full,
    S0_AXI_AWVALID,
    \rd_port_access[0][Valid] ,
    rd_port_multi_part_0,
    \Gen_Port_Ready[0].Use_Slow_Port.Wr_FF_Inst ,
    lopt,
    lopt_1,
    lopt_2);
  output port_ready_no_init_0;
  input port_allow_ready_0;
  input any_port_forbid_0;
  input \arb_prohibit_read_reg[0] ;
  input S0_AXI_ARVALID;
  input read_req_ready;
  input queue_full;
  input S0_AXI_AWVALID;
  input \rd_port_access[0][Valid] ;
  input rd_port_multi_part_0;
  input \Gen_Port_Ready[0].Use_Slow_Port.Wr_FF_Inst ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire A16_out;
  wire \Gen_Port_Ready[0].Use_Slow_Port.Wr_FF_Inst ;
  wire \Gen_Port_Ready[0].wr_port_exist_reg ;
  wire S0_AXI_ARVALID;
  wire S0_AXI_AWVALID;
  wire any_port_forbid_0;
  wire \arb_prohibit_read_reg[0] ;
  wire port_allow_ready_0;
  wire port_ready_no_init_0;
  wire queue_full;
  wire \rd_port_access[0][Valid] ;
  wire rd_port_multi_part_0;
  wire read_req_ready;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = A16_out;
  assign port_ready_no_init_0 = lopt;
  GND GND
       (.G(\<const0> ));
  LUT5 #(
    .INIT(32'hABAAAAAA)) 
    \Using_FPGA.MUXCY_I_i_1 
       (.I0(\Gen_Port_Ready[0].wr_port_exist_reg ),
        .I1(any_port_forbid_0),
        .I2(\arb_prohibit_read_reg[0] ),
        .I3(S0_AXI_ARVALID),
        .I4(read_req_ready),
        .O(A16_out));
  LUT6 #(
    .INIT(64'h0000000000000004)) 
    \Using_FPGA.MUXCY_I_i_2 
       (.I0(queue_full),
        .I1(S0_AXI_AWVALID),
        .I2(any_port_forbid_0),
        .I3(\rd_port_access[0][Valid] ),
        .I4(rd_port_multi_part_0),
        .I5(\Gen_Port_Ready[0].Use_Slow_Port.Wr_FF_Inst ),
        .O(\Gen_Port_Ready[0].wr_port_exist_reg ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_3
   (rip_pop,
    \Use_FPGA_2.S_AXI_RVALID_reg ,
    \Use_Rd_Ctrl_Pipeline.ri_hit_reg ,
    r_pop_safe_i,
    ri_exist,
    \Use_FPGA.Empty_Inst ,
    Q,
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst ,
    p_4_out__2,
    p_3_out__2,
    \Use_Rd_Ctrl_Pipeline.ri_hit_reg_0 ,
    \r_hit_read_fifo_addr_reg[0] ,
    \r_miss_read_fifo_addr_reg[0] ,
    lopt,
    lopt_1,
    lopt_2);
  output rip_pop;
  output \Use_FPGA_2.S_AXI_RVALID_reg ;
  output \Use_Rd_Ctrl_Pipeline.ri_hit_reg ;
  input r_pop_safe_i;
  input ri_exist;
  input \Use_FPGA.Empty_Inst ;
  input Q;
  input \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst ;
  input p_4_out__2;
  input p_3_out__2;
  input \Use_Rd_Ctrl_Pipeline.ri_hit_reg_0 ;
  input \r_hit_read_fifo_addr_reg[0] ;
  input \r_miss_read_fifo_addr_reg[0] ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire A;
  wire Q;
  wire \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst ;
  wire \Use_FPGA.Empty_Inst ;
  wire \Use_FPGA_2.S_AXI_RVALID_i_2__0_n_0 ;
  wire \Use_FPGA_2.S_AXI_RVALID_reg ;
  wire \Use_Rd_Ctrl_Pipeline.ri_hit_reg ;
  wire \Use_Rd_Ctrl_Pipeline.ri_hit_reg_0 ;
  wire p_3_out__2;
  wire p_4_out__2;
  wire \r_hit_read_fifo_addr_reg[0] ;
  wire \r_miss_read_fifo_addr_reg[0] ;
  wire r_pop_safe_i;
  wire ri_exist;
  wire rip_pop;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = A;
  assign rip_pop = lopt;
  GND GND
       (.G(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair156" *) 
  LUT5 #(
    .INIT(32'h000008AA)) 
    \Use_FPGA_2.S_AXI_RVALID_i_1__0 
       (.I0(\Use_FPGA_2.S_AXI_RVALID_i_2__0_n_0 ),
        .I1(ri_exist),
        .I2(rip_pop),
        .I3(\Use_FPGA.Empty_Inst ),
        .I4(Q),
        .O(\Use_FPGA_2.S_AXI_RVALID_reg ));
  LUT6 #(
    .INIT(64'hFF45BA00FF758A00)) 
    \Use_FPGA_2.S_AXI_RVALID_i_2__0 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst ),
        .I1(rip_pop),
        .I2(ri_exist),
        .I3(p_4_out__2),
        .I4(p_3_out__2),
        .I5(\Use_Rd_Ctrl_Pipeline.ri_hit_reg_0 ),
        .O(\Use_FPGA_2.S_AXI_RVALID_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair156" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \Use_Rd_Ctrl_Pipeline.ri_hit_i_1__0 
       (.I0(rip_pop),
        .I1(ri_exist),
        .O(\Use_Rd_Ctrl_Pipeline.ri_hit_reg ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.MUXCY_I_i_1__13 
       (.I0(\r_hit_read_fifo_addr_reg[0] ),
        .I1(\Use_Rd_Ctrl_Pipeline.ri_hit_reg_0 ),
        .I2(\r_miss_read_fifo_addr_reg[0] ),
        .O(A));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_31
   (wr_port_ready_cmb_0,
    ctrl_ready_i_reg,
    reduce_or4_out,
    \arbiter_bp_push_i[0][Valid] ,
    \arb_access_i_reg[Port_Num][0] ,
    \arb_access_i_reg[Valid] ,
    \arb_access_i_reg[Wr] ,
    port_ready_0,
    ctrl_ready_i_reg_0,
    reduce_or__0,
    \ctrl_access[Internal_Cmd] ,
    Q,
    access_piperun,
    wr_port_ready_cmb_1,
    \Multi_Port.Gen_Token[1].Forbid_FF_Inst ,
    \Multi_Port.Gen_Token[0].Forbid_FF_Inst ,
    port_ready_1,
    queue_full,
    S0_AXI_AWVALID,
    any_port_forbid_0,
    \rd_port_access[0][Valid] ,
    rd_port_multi_part_0,
    \Gen_Port_Ready[0].Use_Slow_Port.Wr_FF_Inst ,
    lopt,
    lopt_1,
    lopt_2);
  output wr_port_ready_cmb_0;
  output ctrl_ready_i_reg;
  output reduce_or4_out;
  output \arbiter_bp_push_i[0][Valid] ;
  output \arb_access_i_reg[Port_Num][0] ;
  output \arb_access_i_reg[Valid] ;
  output \arb_access_i_reg[Wr] ;
  input port_ready_0;
  input ctrl_ready_i_reg_0;
  input reduce_or__0;
  input \ctrl_access[Internal_Cmd] ;
  input Q;
  input access_piperun;
  input wr_port_ready_cmb_1;
  input \Multi_Port.Gen_Token[1].Forbid_FF_Inst ;
  input \Multi_Port.Gen_Token[0].Forbid_FF_Inst ;
  input port_ready_1;
  input queue_full;
  input S0_AXI_AWVALID;
  input any_port_forbid_0;
  input \rd_port_access[0][Valid] ;
  input rd_port_multi_part_0;
  input \Gen_Port_Ready[0].Use_Slow_Port.Wr_FF_Inst ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \Gen_Port_Ready[0].Use_Slow_Port.Wr_FF_Inst ;
  wire \Multi_Port.Gen_Token[0].Forbid_FF_Inst ;
  wire \Multi_Port.Gen_Token[1].Forbid_FF_Inst ;
  wire Q;
  wire S0_AXI_AWVALID;
  wire \Using_FPGA.MUXCY_I_i_1__16_n_0 ;
  wire access_piperun;
  wire any_port_forbid_0;
  wire \arb_access_i_reg[Port_Num][0] ;
  wire \arb_access_i_reg[Valid] ;
  wire \arb_access_i_reg[Wr] ;
  wire \arbiter_bp_push_i[0][Valid] ;
  wire \ctrl_access[Internal_Cmd] ;
  wire ctrl_ready_i_reg;
  wire ctrl_ready_i_reg_0;
  wire port_ready_0;
  wire port_ready_1;
  wire queue_full;
  wire \rd_port_access[0][Valid] ;
  wire rd_port_multi_part_0;
  wire reduce_or4_out;
  wire reduce_or__0;
  wire wr_port_ready_cmb_0;
  wire wr_port_ready_cmb_1;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = \Using_FPGA.MUXCY_I_i_1__16_n_0 ;
  assign wr_port_ready_cmb_0 = lopt;
  GND GND
       (.G(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair108" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Port_Ready[0].Use_Slow_Port.Wr_FF_Inst_i_1 
       (.I0(wr_port_ready_cmb_0),
        .I1(access_piperun),
        .O(\arbiter_bp_push_i[0][Valid] ));
  LUT6 #(
    .INIT(64'h0000000000000004)) 
    \Using_FPGA.MUXCY_I_i_1__16 
       (.I0(queue_full),
        .I1(S0_AXI_AWVALID),
        .I2(any_port_forbid_0),
        .I3(\rd_port_access[0][Valid] ),
        .I4(rd_port_multi_part_0),
        .I5(\Gen_Port_Ready[0].Use_Slow_Port.Wr_FF_Inst ),
        .O(\Using_FPGA.MUXCY_I_i_1__16_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair107" *) 
  LUT5 #(
    .INIT(32'hFFFE0000)) 
    \arb_access_i[Port_Num][0]_i_1 
       (.I0(wr_port_ready_cmb_0),
        .I1(wr_port_ready_cmb_1),
        .I2(\Multi_Port.Gen_Token[1].Forbid_FF_Inst ),
        .I3(\Multi_Port.Gen_Token[0].Forbid_FF_Inst ),
        .I4(port_ready_1),
        .O(\arb_access_i_reg[Port_Num][0] ));
  LUT6 #(
    .INIT(64'hFCA8FCA8FCFDFCA8)) 
    \arb_access_i[Valid]_i_1 
       (.I0(reduce_or4_out),
        .I1(port_ready_0),
        .I2(port_ready_1),
        .I3(reduce_or__0),
        .I4(\ctrl_access[Internal_Cmd] ),
        .I5(ctrl_ready_i_reg_0),
        .O(\arb_access_i_reg[Valid] ));
  (* SOFT_HLUTNM = "soft_lutpair107" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \arb_access_i[Valid]_i_2 
       (.I0(wr_port_ready_cmb_0),
        .I1(wr_port_ready_cmb_1),
        .O(reduce_or4_out));
  (* SOFT_HLUTNM = "soft_lutpair108" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \arb_access_i[Wr]_i_1 
       (.I0(wr_port_ready_cmb_0),
        .I1(wr_port_ready_cmb_1),
        .O(\arb_access_i_reg[Wr] ));
  LUT6 #(
    .INIT(64'hAAAAA9A8AAAA0000)) 
    ctrl_ready_i_i_1
       (.I0(ctrl_ready_i_reg_0),
        .I1(reduce_or4_out),
        .I2(reduce_or__0),
        .I3(\ctrl_access[Internal_Cmd] ),
        .I4(Q),
        .I5(access_piperun),
        .O(ctrl_ready_i_reg));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_34
   (port_ready_1,
    \arb_access_i[Allocate]1__0 ,
    \arb_access_i_reg[Early] ,
    dvm_2nd_part0,
    D,
    \arb_access_i_reg[Addr][31] ,
    \arb_access_i_reg[Size][2] ,
    \arb_access_i_reg[Kind] ,
    \arb_access_i_reg[Allocate] ,
    \Multi_Port.Gen_Token[1].Multi_FF_Inst ,
    \Multi_Port.Gen_Token[1].Forbid_FF_Inst ,
    A_10,
    port_ready_no_init_1,
    S1_AXI_AWCACHE,
    wr_port_keep,
    S1_AXI_AWBAR,
    \Gen_Port_Ready[0].wr_port_early_reg ,
    \Multi_Port.Gen_Token[0].Forbid_FF_Inst ,
    \Multi_Port.Gen_Token[1].Forbid_FF_Inst_0 ,
    arb_want_multi_part,
    S1_AXI_AWLEN,
    S0_AXI_AWLEN,
    wr_port_ready_cmb_0,
    wr_port_ready_cmb_1,
    \Multi_Port.Gen_Token[1].Forbid_FF_Inst_1 ,
    \Multi_Port.Gen_Token[1].Forbid_FF_Inst_2 ,
    \Multi_Port.Gen_Token[1].Forbid_FF_Inst_3 ,
    \Multi_Port.Gen_Token[1].Forbid_FF_Inst_4 ,
    \Multi_Port.Gen_Token[1].Forbid_FF_Inst_5 ,
    \Multi_Port.Gen_Token[1].Forbid_FF_Inst_6 ,
    \Multi_Port.Gen_Token[1].Forbid_FF_Inst_7 ,
    \Multi_Port.Gen_Token[1].Forbid_FF_Inst_8 ,
    S1_AXI_AWADDR,
    S0_AXI_AWADDR,
    S1_AXI_ARADDR,
    S0_AXI_ARADDR,
    \ctrl_access[Addr] ,
    \Multi_Port.Gen_Token[1].Forbid_FF_Inst_9 ,
    \Multi_Port.Gen_Token[1].Forbid_FF_Inst_10 ,
    \Multi_Port.Gen_Token[1].Forbid_FF_Inst_11 ,
    \Multi_Port.Gen_Token[1].Forbid_FF_Inst_12 ,
    \Multi_Port.Gen_Token[1].Forbid_FF_Inst_13 ,
    \Multi_Port.Gen_Token[1].Forbid_FF_Inst_14 ,
    \Multi_Port.Gen_Token[1].Forbid_FF_Inst_15 ,
    \Multi_Port.Gen_Token[1].Forbid_FF_Inst_16 ,
    \Multi_Port.Gen_Token[1].Forbid_FF_Inst_17 ,
    \Multi_Port.Gen_Token[1].Forbid_FF_Inst_18 ,
    \Multi_Port.Gen_Token[1].Forbid_FF_Inst_19 ,
    \Multi_Port.Gen_Token[1].Forbid_FF_Inst_20 ,
    \Multi_Port.Gen_Token[1].Forbid_FF_Inst_21 ,
    \Multi_Port.Gen_Token[1].Forbid_FF_Inst_22 ,
    \Multi_Port.Gen_Token[1].Forbid_FF_Inst_23 ,
    \Multi_Port.Gen_Token[1].Forbid_FF_Inst_24 ,
    \Multi_Port.Gen_Token[1].Forbid_FF_Inst_25 ,
    \Multi_Port.Gen_Token[1].Forbid_FF_Inst_26 ,
    \Multi_Port.Gen_Token[1].Forbid_FF_Inst_27 ,
    \Multi_Port.Gen_Token[1].Forbid_FF_Inst_28 ,
    \Multi_Port.Gen_Token[1].Forbid_FF_Inst_29 ,
    \Multi_Port.Gen_Token[1].Forbid_FF_Inst_30 ,
    \Multi_Port.Gen_Token[1].Forbid_FF_Inst_31 ,
    S1_AXI_AWSIZE,
    S0_AXI_AWSIZE,
    S1_AXI_ARSIZE,
    S0_AXI_ARSIZE,
    \ctrl_access[Size] ,
    \Multi_Port.Gen_Token[1].Forbid_FF_Inst_32 ,
    \Multi_Port.Gen_Token[1].Forbid_FF_Inst_33 ,
    reduce_or4_out,
    \ctrl_access[Internal_Cmd] ,
    S1_AXI_ARBURST,
    S0_AXI_ARBURST,
    S1_AXI_AWBURST,
    S0_AXI_AWBURST,
    S1_AXI_ARCACHE,
    S0_AXI_ARCACHE,
    lopt,
    lopt_1);
  output port_ready_1;
  output \arb_access_i[Allocate]1__0 ;
  output \arb_access_i_reg[Early] ;
  output dvm_2nd_part0;
  output [7:0]D;
  output [31:0]\arb_access_i_reg[Addr][31] ;
  output [2:0]\arb_access_i_reg[Size][2] ;
  output \arb_access_i_reg[Kind] ;
  output \arb_access_i_reg[Allocate] ;
  output \Multi_Port.Gen_Token[1].Multi_FF_Inst ;
  output \Multi_Port.Gen_Token[1].Forbid_FF_Inst ;
  input A_10;
  input port_ready_no_init_1;
  input [2:0]S1_AXI_AWCACHE;
  input [0:0]wr_port_keep;
  input [0:0]S1_AXI_AWBAR;
  input \Gen_Port_Ready[0].wr_port_early_reg ;
  input \Multi_Port.Gen_Token[0].Forbid_FF_Inst ;
  input \Multi_Port.Gen_Token[1].Forbid_FF_Inst_0 ;
  input [1:0]arb_want_multi_part;
  input [7:0]S1_AXI_AWLEN;
  input [7:0]S0_AXI_AWLEN;
  input wr_port_ready_cmb_0;
  input wr_port_ready_cmb_1;
  input \Multi_Port.Gen_Token[1].Forbid_FF_Inst_1 ;
  input \Multi_Port.Gen_Token[1].Forbid_FF_Inst_2 ;
  input \Multi_Port.Gen_Token[1].Forbid_FF_Inst_3 ;
  input \Multi_Port.Gen_Token[1].Forbid_FF_Inst_4 ;
  input \Multi_Port.Gen_Token[1].Forbid_FF_Inst_5 ;
  input \Multi_Port.Gen_Token[1].Forbid_FF_Inst_6 ;
  input \Multi_Port.Gen_Token[1].Forbid_FF_Inst_7 ;
  input \Multi_Port.Gen_Token[1].Forbid_FF_Inst_8 ;
  input [31:0]S1_AXI_AWADDR;
  input [31:0]S0_AXI_AWADDR;
  input [8:0]S1_AXI_ARADDR;
  input [8:0]S0_AXI_ARADDR;
  input [8:0]\ctrl_access[Addr] ;
  input \Multi_Port.Gen_Token[1].Forbid_FF_Inst_9 ;
  input \Multi_Port.Gen_Token[1].Forbid_FF_Inst_10 ;
  input \Multi_Port.Gen_Token[1].Forbid_FF_Inst_11 ;
  input \Multi_Port.Gen_Token[1].Forbid_FF_Inst_12 ;
  input \Multi_Port.Gen_Token[1].Forbid_FF_Inst_13 ;
  input \Multi_Port.Gen_Token[1].Forbid_FF_Inst_14 ;
  input \Multi_Port.Gen_Token[1].Forbid_FF_Inst_15 ;
  input \Multi_Port.Gen_Token[1].Forbid_FF_Inst_16 ;
  input \Multi_Port.Gen_Token[1].Forbid_FF_Inst_17 ;
  input \Multi_Port.Gen_Token[1].Forbid_FF_Inst_18 ;
  input \Multi_Port.Gen_Token[1].Forbid_FF_Inst_19 ;
  input \Multi_Port.Gen_Token[1].Forbid_FF_Inst_20 ;
  input \Multi_Port.Gen_Token[1].Forbid_FF_Inst_21 ;
  input \Multi_Port.Gen_Token[1].Forbid_FF_Inst_22 ;
  input \Multi_Port.Gen_Token[1].Forbid_FF_Inst_23 ;
  input \Multi_Port.Gen_Token[1].Forbid_FF_Inst_24 ;
  input \Multi_Port.Gen_Token[1].Forbid_FF_Inst_25 ;
  input \Multi_Port.Gen_Token[1].Forbid_FF_Inst_26 ;
  input \Multi_Port.Gen_Token[1].Forbid_FF_Inst_27 ;
  input \Multi_Port.Gen_Token[1].Forbid_FF_Inst_28 ;
  input \Multi_Port.Gen_Token[1].Forbid_FF_Inst_29 ;
  input \Multi_Port.Gen_Token[1].Forbid_FF_Inst_30 ;
  input \Multi_Port.Gen_Token[1].Forbid_FF_Inst_31 ;
  input [2:0]S1_AXI_AWSIZE;
  input [2:0]S0_AXI_AWSIZE;
  input [0:0]S1_AXI_ARSIZE;
  input [0:0]S0_AXI_ARSIZE;
  input [0:0]\ctrl_access[Size] ;
  input \Multi_Port.Gen_Token[1].Forbid_FF_Inst_32 ;
  input \Multi_Port.Gen_Token[1].Forbid_FF_Inst_33 ;
  input reduce_or4_out;
  input \ctrl_access[Internal_Cmd] ;
  input [1:0]S1_AXI_ARBURST;
  input [1:0]S0_AXI_ARBURST;
  input [1:0]S1_AXI_AWBURST;
  input [1:0]S0_AXI_AWBURST;
  input [0:0]S1_AXI_ARCACHE;
  input [0:0]S0_AXI_ARCACHE;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire A_10;
  wire [7:0]D;
  wire \Gen_Port_Ready[0].wr_port_early_reg ;
  wire \Multi_Port.Gen_Token[0].Forbid_FF_Inst ;
  wire \Multi_Port.Gen_Token[1].Forbid_FF_Inst ;
  wire \Multi_Port.Gen_Token[1].Forbid_FF_Inst_0 ;
  wire \Multi_Port.Gen_Token[1].Forbid_FF_Inst_1 ;
  wire \Multi_Port.Gen_Token[1].Forbid_FF_Inst_10 ;
  wire \Multi_Port.Gen_Token[1].Forbid_FF_Inst_11 ;
  wire \Multi_Port.Gen_Token[1].Forbid_FF_Inst_12 ;
  wire \Multi_Port.Gen_Token[1].Forbid_FF_Inst_13 ;
  wire \Multi_Port.Gen_Token[1].Forbid_FF_Inst_14 ;
  wire \Multi_Port.Gen_Token[1].Forbid_FF_Inst_15 ;
  wire \Multi_Port.Gen_Token[1].Forbid_FF_Inst_16 ;
  wire \Multi_Port.Gen_Token[1].Forbid_FF_Inst_17 ;
  wire \Multi_Port.Gen_Token[1].Forbid_FF_Inst_18 ;
  wire \Multi_Port.Gen_Token[1].Forbid_FF_Inst_19 ;
  wire \Multi_Port.Gen_Token[1].Forbid_FF_Inst_2 ;
  wire \Multi_Port.Gen_Token[1].Forbid_FF_Inst_20 ;
  wire \Multi_Port.Gen_Token[1].Forbid_FF_Inst_21 ;
  wire \Multi_Port.Gen_Token[1].Forbid_FF_Inst_22 ;
  wire \Multi_Port.Gen_Token[1].Forbid_FF_Inst_23 ;
  wire \Multi_Port.Gen_Token[1].Forbid_FF_Inst_24 ;
  wire \Multi_Port.Gen_Token[1].Forbid_FF_Inst_25 ;
  wire \Multi_Port.Gen_Token[1].Forbid_FF_Inst_26 ;
  wire \Multi_Port.Gen_Token[1].Forbid_FF_Inst_27 ;
  wire \Multi_Port.Gen_Token[1].Forbid_FF_Inst_28 ;
  wire \Multi_Port.Gen_Token[1].Forbid_FF_Inst_29 ;
  wire \Multi_Port.Gen_Token[1].Forbid_FF_Inst_3 ;
  wire \Multi_Port.Gen_Token[1].Forbid_FF_Inst_30 ;
  wire \Multi_Port.Gen_Token[1].Forbid_FF_Inst_31 ;
  wire \Multi_Port.Gen_Token[1].Forbid_FF_Inst_32 ;
  wire \Multi_Port.Gen_Token[1].Forbid_FF_Inst_33 ;
  wire \Multi_Port.Gen_Token[1].Forbid_FF_Inst_4 ;
  wire \Multi_Port.Gen_Token[1].Forbid_FF_Inst_5 ;
  wire \Multi_Port.Gen_Token[1].Forbid_FF_Inst_6 ;
  wire \Multi_Port.Gen_Token[1].Forbid_FF_Inst_7 ;
  wire \Multi_Port.Gen_Token[1].Forbid_FF_Inst_8 ;
  wire \Multi_Port.Gen_Token[1].Forbid_FF_Inst_9 ;
  wire \Multi_Port.Gen_Token[1].Multi_FF_Inst ;
  wire [8:0]S0_AXI_ARADDR;
  wire [1:0]S0_AXI_ARBURST;
  wire [0:0]S0_AXI_ARCACHE;
  wire [0:0]S0_AXI_ARSIZE;
  wire [31:0]S0_AXI_AWADDR;
  wire [1:0]S0_AXI_AWBURST;
  wire [7:0]S0_AXI_AWLEN;
  wire [2:0]S0_AXI_AWSIZE;
  wire [8:0]S1_AXI_ARADDR;
  wire [1:0]S1_AXI_ARBURST;
  wire [0:0]S1_AXI_ARCACHE;
  wire [0:0]S1_AXI_ARSIZE;
  wire [31:0]S1_AXI_AWADDR;
  wire [0:0]S1_AXI_AWBAR;
  wire [1:0]S1_AXI_AWBURST;
  wire [2:0]S1_AXI_AWCACHE;
  wire [7:0]S1_AXI_AWLEN;
  wire [2:0]S1_AXI_AWSIZE;
  wire any_port_forbid_cmb1__0;
  wire \arb_access_i[Addr][10]_i_2_n_0 ;
  wire \arb_access_i[Addr][11]_i_2_n_0 ;
  wire \arb_access_i[Addr][12]_i_2_n_0 ;
  wire \arb_access_i[Addr][13]_i_2_n_0 ;
  wire \arb_access_i[Addr][14]_i_2_n_0 ;
  wire \arb_access_i[Addr][6]_i_2_n_0 ;
  wire \arb_access_i[Addr][7]_i_2_n_0 ;
  wire \arb_access_i[Addr][8]_i_2_n_0 ;
  wire \arb_access_i[Addr][9]_i_2_n_0 ;
  wire \arb_access_i[Allocate]1__0 ;
  wire \arb_access_i[Kind]_i_2_n_0 ;
  wire \arb_access_i[Kind]_i_3_n_0 ;
  wire \arb_access_i[Size][1]_i_2_n_0 ;
  wire [31:0]\arb_access_i_reg[Addr][31] ;
  wire \arb_access_i_reg[Allocate] ;
  wire \arb_access_i_reg[Early] ;
  wire \arb_access_i_reg[Kind] ;
  wire [2:0]\arb_access_i_reg[Size][2] ;
  wire [1:0]arb_want_multi_part;
  wire [8:0]\ctrl_access[Addr] ;
  wire \ctrl_access[Internal_Cmd] ;
  wire [0:0]\ctrl_access[Size] ;
  wire dvm_2nd_part0;
  wire port_ready_1;
  wire port_ready_no_init_1;
  wire reduce_or4_out;
  wire [0:0]wr_port_keep;
  wire wr_port_ready_cmb_0;
  wire wr_port_ready_cmb_1;

  assign lopt_1 = \<const0> ;
  assign port_ready_1 = lopt;
  GND GND
       (.G(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair109" *) 
  LUT4 #(
    .INIT(16'hA800)) 
    \Multi_Port.Gen_Token[0].Forbid_FF_Inst_i_1 
       (.I0(any_port_forbid_cmb1__0),
        .I1(\Multi_Port.Gen_Token[1].Forbid_FF_Inst_0 ),
        .I2(\Multi_Port.Gen_Token[0].Forbid_FF_Inst ),
        .I3(port_ready_1),
        .O(\Multi_Port.Gen_Token[1].Multi_FF_Inst ));
  LUT4 #(
    .INIT(16'h00A8)) 
    \Multi_Port.Gen_Token[0].Multi_FF_Inst_i_1 
       (.I0(any_port_forbid_cmb1__0),
        .I1(\Multi_Port.Gen_Token[1].Forbid_FF_Inst_0 ),
        .I2(\Multi_Port.Gen_Token[0].Forbid_FF_Inst ),
        .I3(port_ready_1),
        .O(\Multi_Port.Gen_Token[1].Forbid_FF_Inst ));
  MUXF7 \Multi_Port.Gen_Token[0].Multi_FF_Inst_i_2 
       (.I0(arb_want_multi_part[0]),
        .I1(arb_want_multi_part[1]),
        .O(any_port_forbid_cmb1__0),
        .S(port_ready_1));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][0]_i_1 
       (.I0(S1_AXI_AWADDR[0]),
        .I1(port_ready_1),
        .I2(S0_AXI_AWADDR[0]),
        .I3(wr_port_ready_cmb_0),
        .I4(wr_port_ready_cmb_1),
        .I5(\Multi_Port.Gen_Token[1].Forbid_FF_Inst_31 ),
        .O(\arb_access_i_reg[Addr][31] [0]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][10]_i_1 
       (.I0(S1_AXI_AWADDR[10]),
        .I1(port_ready_1),
        .I2(S0_AXI_AWADDR[10]),
        .I3(wr_port_ready_cmb_0),
        .I4(wr_port_ready_cmb_1),
        .I5(\arb_access_i[Addr][10]_i_2_n_0 ),
        .O(\arb_access_i_reg[Addr][31] [10]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][10]_i_2 
       (.I0(S1_AXI_ARADDR[4]),
        .I1(port_ready_1),
        .I2(S0_AXI_ARADDR[4]),
        .I3(\Multi_Port.Gen_Token[0].Forbid_FF_Inst ),
        .I4(\Multi_Port.Gen_Token[1].Forbid_FF_Inst_0 ),
        .I5(\ctrl_access[Addr] [4]),
        .O(\arb_access_i[Addr][10]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][11]_i_1 
       (.I0(S1_AXI_AWADDR[11]),
        .I1(port_ready_1),
        .I2(S0_AXI_AWADDR[11]),
        .I3(wr_port_ready_cmb_0),
        .I4(wr_port_ready_cmb_1),
        .I5(\arb_access_i[Addr][11]_i_2_n_0 ),
        .O(\arb_access_i_reg[Addr][31] [11]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][11]_i_2 
       (.I0(S1_AXI_ARADDR[5]),
        .I1(port_ready_1),
        .I2(S0_AXI_ARADDR[5]),
        .I3(\Multi_Port.Gen_Token[0].Forbid_FF_Inst ),
        .I4(\Multi_Port.Gen_Token[1].Forbid_FF_Inst_0 ),
        .I5(\ctrl_access[Addr] [5]),
        .O(\arb_access_i[Addr][11]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][12]_i_1 
       (.I0(S1_AXI_AWADDR[12]),
        .I1(port_ready_1),
        .I2(S0_AXI_AWADDR[12]),
        .I3(wr_port_ready_cmb_0),
        .I4(wr_port_ready_cmb_1),
        .I5(\arb_access_i[Addr][12]_i_2_n_0 ),
        .O(\arb_access_i_reg[Addr][31] [12]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][12]_i_2 
       (.I0(S1_AXI_ARADDR[6]),
        .I1(port_ready_1),
        .I2(S0_AXI_ARADDR[6]),
        .I3(\Multi_Port.Gen_Token[0].Forbid_FF_Inst ),
        .I4(\Multi_Port.Gen_Token[1].Forbid_FF_Inst_0 ),
        .I5(\ctrl_access[Addr] [6]),
        .O(\arb_access_i[Addr][12]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][13]_i_1 
       (.I0(S1_AXI_AWADDR[13]),
        .I1(port_ready_1),
        .I2(S0_AXI_AWADDR[13]),
        .I3(wr_port_ready_cmb_0),
        .I4(wr_port_ready_cmb_1),
        .I5(\arb_access_i[Addr][13]_i_2_n_0 ),
        .O(\arb_access_i_reg[Addr][31] [13]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][13]_i_2 
       (.I0(S1_AXI_ARADDR[7]),
        .I1(port_ready_1),
        .I2(S0_AXI_ARADDR[7]),
        .I3(\Multi_Port.Gen_Token[0].Forbid_FF_Inst ),
        .I4(\Multi_Port.Gen_Token[1].Forbid_FF_Inst_0 ),
        .I5(\ctrl_access[Addr] [7]),
        .O(\arb_access_i[Addr][13]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][14]_i_1 
       (.I0(S1_AXI_AWADDR[14]),
        .I1(port_ready_1),
        .I2(S0_AXI_AWADDR[14]),
        .I3(wr_port_ready_cmb_0),
        .I4(wr_port_ready_cmb_1),
        .I5(\arb_access_i[Addr][14]_i_2_n_0 ),
        .O(\arb_access_i_reg[Addr][31] [14]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][14]_i_2 
       (.I0(S1_AXI_ARADDR[8]),
        .I1(port_ready_1),
        .I2(S0_AXI_ARADDR[8]),
        .I3(\Multi_Port.Gen_Token[0].Forbid_FF_Inst ),
        .I4(\Multi_Port.Gen_Token[1].Forbid_FF_Inst_0 ),
        .I5(\ctrl_access[Addr] [8]),
        .O(\arb_access_i[Addr][14]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][15]_i_1 
       (.I0(S1_AXI_AWADDR[15]),
        .I1(port_ready_1),
        .I2(S0_AXI_AWADDR[15]),
        .I3(wr_port_ready_cmb_0),
        .I4(wr_port_ready_cmb_1),
        .I5(\Multi_Port.Gen_Token[1].Forbid_FF_Inst_24 ),
        .O(\arb_access_i_reg[Addr][31] [15]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][16]_i_1 
       (.I0(S1_AXI_AWADDR[16]),
        .I1(port_ready_1),
        .I2(S0_AXI_AWADDR[16]),
        .I3(wr_port_ready_cmb_0),
        .I4(wr_port_ready_cmb_1),
        .I5(\Multi_Port.Gen_Token[1].Forbid_FF_Inst_25 ),
        .O(\arb_access_i_reg[Addr][31] [16]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][17]_i_1 
       (.I0(S1_AXI_AWADDR[17]),
        .I1(port_ready_1),
        .I2(S0_AXI_AWADDR[17]),
        .I3(wr_port_ready_cmb_0),
        .I4(wr_port_ready_cmb_1),
        .I5(\Multi_Port.Gen_Token[1].Forbid_FF_Inst_21 ),
        .O(\arb_access_i_reg[Addr][31] [17]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][18]_i_1 
       (.I0(S1_AXI_AWADDR[18]),
        .I1(port_ready_1),
        .I2(S0_AXI_AWADDR[18]),
        .I3(wr_port_ready_cmb_0),
        .I4(wr_port_ready_cmb_1),
        .I5(\Multi_Port.Gen_Token[1].Forbid_FF_Inst_22 ),
        .O(\arb_access_i_reg[Addr][31] [18]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][19]_i_1 
       (.I0(S1_AXI_AWADDR[19]),
        .I1(port_ready_1),
        .I2(S0_AXI_AWADDR[19]),
        .I3(wr_port_ready_cmb_0),
        .I4(wr_port_ready_cmb_1),
        .I5(\Multi_Port.Gen_Token[1].Forbid_FF_Inst_23 ),
        .O(\arb_access_i_reg[Addr][31] [19]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][1]_i_1 
       (.I0(S1_AXI_AWADDR[1]),
        .I1(port_ready_1),
        .I2(S0_AXI_AWADDR[1]),
        .I3(wr_port_ready_cmb_0),
        .I4(wr_port_ready_cmb_1),
        .I5(\Multi_Port.Gen_Token[1].Forbid_FF_Inst_30 ),
        .O(\arb_access_i_reg[Addr][31] [1]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][20]_i_1 
       (.I0(S1_AXI_AWADDR[20]),
        .I1(port_ready_1),
        .I2(S0_AXI_AWADDR[20]),
        .I3(wr_port_ready_cmb_0),
        .I4(wr_port_ready_cmb_1),
        .I5(\Multi_Port.Gen_Token[1].Forbid_FF_Inst_18 ),
        .O(\arb_access_i_reg[Addr][31] [20]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][21]_i_1 
       (.I0(S1_AXI_AWADDR[21]),
        .I1(port_ready_1),
        .I2(S0_AXI_AWADDR[21]),
        .I3(wr_port_ready_cmb_0),
        .I4(wr_port_ready_cmb_1),
        .I5(\Multi_Port.Gen_Token[1].Forbid_FF_Inst_19 ),
        .O(\arb_access_i_reg[Addr][31] [21]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][22]_i_1 
       (.I0(S1_AXI_AWADDR[22]),
        .I1(port_ready_1),
        .I2(S0_AXI_AWADDR[22]),
        .I3(wr_port_ready_cmb_0),
        .I4(wr_port_ready_cmb_1),
        .I5(\Multi_Port.Gen_Token[1].Forbid_FF_Inst_20 ),
        .O(\arb_access_i_reg[Addr][31] [22]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][23]_i_1 
       (.I0(S1_AXI_AWADDR[23]),
        .I1(port_ready_1),
        .I2(S0_AXI_AWADDR[23]),
        .I3(wr_port_ready_cmb_0),
        .I4(wr_port_ready_cmb_1),
        .I5(\Multi_Port.Gen_Token[1].Forbid_FF_Inst_15 ),
        .O(\arb_access_i_reg[Addr][31] [23]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][24]_i_1 
       (.I0(S1_AXI_AWADDR[24]),
        .I1(port_ready_1),
        .I2(S0_AXI_AWADDR[24]),
        .I3(wr_port_ready_cmb_0),
        .I4(wr_port_ready_cmb_1),
        .I5(\Multi_Port.Gen_Token[1].Forbid_FF_Inst_16 ),
        .O(\arb_access_i_reg[Addr][31] [24]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][25]_i_1 
       (.I0(S1_AXI_AWADDR[25]),
        .I1(port_ready_1),
        .I2(S0_AXI_AWADDR[25]),
        .I3(wr_port_ready_cmb_0),
        .I4(wr_port_ready_cmb_1),
        .I5(\Multi_Port.Gen_Token[1].Forbid_FF_Inst_17 ),
        .O(\arb_access_i_reg[Addr][31] [25]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][26]_i_1 
       (.I0(S1_AXI_AWADDR[26]),
        .I1(port_ready_1),
        .I2(S0_AXI_AWADDR[26]),
        .I3(wr_port_ready_cmb_0),
        .I4(wr_port_ready_cmb_1),
        .I5(\Multi_Port.Gen_Token[1].Forbid_FF_Inst_12 ),
        .O(\arb_access_i_reg[Addr][31] [26]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][27]_i_1 
       (.I0(S1_AXI_AWADDR[27]),
        .I1(port_ready_1),
        .I2(S0_AXI_AWADDR[27]),
        .I3(wr_port_ready_cmb_0),
        .I4(wr_port_ready_cmb_1),
        .I5(\Multi_Port.Gen_Token[1].Forbid_FF_Inst_13 ),
        .O(\arb_access_i_reg[Addr][31] [27]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][28]_i_1 
       (.I0(S1_AXI_AWADDR[28]),
        .I1(port_ready_1),
        .I2(S0_AXI_AWADDR[28]),
        .I3(wr_port_ready_cmb_0),
        .I4(wr_port_ready_cmb_1),
        .I5(\Multi_Port.Gen_Token[1].Forbid_FF_Inst_14 ),
        .O(\arb_access_i_reg[Addr][31] [28]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][29]_i_1 
       (.I0(S1_AXI_AWADDR[29]),
        .I1(port_ready_1),
        .I2(S0_AXI_AWADDR[29]),
        .I3(wr_port_ready_cmb_0),
        .I4(wr_port_ready_cmb_1),
        .I5(\Multi_Port.Gen_Token[1].Forbid_FF_Inst_9 ),
        .O(\arb_access_i_reg[Addr][31] [29]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][2]_i_1 
       (.I0(S1_AXI_AWADDR[2]),
        .I1(port_ready_1),
        .I2(S0_AXI_AWADDR[2]),
        .I3(wr_port_ready_cmb_0),
        .I4(wr_port_ready_cmb_1),
        .I5(\Multi_Port.Gen_Token[1].Forbid_FF_Inst_29 ),
        .O(\arb_access_i_reg[Addr][31] [2]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][30]_i_1 
       (.I0(S1_AXI_AWADDR[30]),
        .I1(port_ready_1),
        .I2(S0_AXI_AWADDR[30]),
        .I3(wr_port_ready_cmb_0),
        .I4(wr_port_ready_cmb_1),
        .I5(\Multi_Port.Gen_Token[1].Forbid_FF_Inst_10 ),
        .O(\arb_access_i_reg[Addr][31] [30]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][31]_i_1 
       (.I0(S1_AXI_AWADDR[31]),
        .I1(port_ready_1),
        .I2(S0_AXI_AWADDR[31]),
        .I3(wr_port_ready_cmb_0),
        .I4(wr_port_ready_cmb_1),
        .I5(\Multi_Port.Gen_Token[1].Forbid_FF_Inst_11 ),
        .O(\arb_access_i_reg[Addr][31] [31]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][3]_i_1 
       (.I0(S1_AXI_AWADDR[3]),
        .I1(port_ready_1),
        .I2(S0_AXI_AWADDR[3]),
        .I3(wr_port_ready_cmb_0),
        .I4(wr_port_ready_cmb_1),
        .I5(\Multi_Port.Gen_Token[1].Forbid_FF_Inst_28 ),
        .O(\arb_access_i_reg[Addr][31] [3]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][4]_i_1 
       (.I0(S1_AXI_AWADDR[4]),
        .I1(port_ready_1),
        .I2(S0_AXI_AWADDR[4]),
        .I3(wr_port_ready_cmb_0),
        .I4(wr_port_ready_cmb_1),
        .I5(\Multi_Port.Gen_Token[1].Forbid_FF_Inst_27 ),
        .O(\arb_access_i_reg[Addr][31] [4]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][5]_i_1 
       (.I0(S1_AXI_AWADDR[5]),
        .I1(port_ready_1),
        .I2(S0_AXI_AWADDR[5]),
        .I3(wr_port_ready_cmb_0),
        .I4(wr_port_ready_cmb_1),
        .I5(\Multi_Port.Gen_Token[1].Forbid_FF_Inst_26 ),
        .O(\arb_access_i_reg[Addr][31] [5]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][6]_i_1 
       (.I0(S1_AXI_AWADDR[6]),
        .I1(port_ready_1),
        .I2(S0_AXI_AWADDR[6]),
        .I3(wr_port_ready_cmb_0),
        .I4(wr_port_ready_cmb_1),
        .I5(\arb_access_i[Addr][6]_i_2_n_0 ),
        .O(\arb_access_i_reg[Addr][31] [6]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][6]_i_2 
       (.I0(S1_AXI_ARADDR[0]),
        .I1(port_ready_1),
        .I2(S0_AXI_ARADDR[0]),
        .I3(\Multi_Port.Gen_Token[0].Forbid_FF_Inst ),
        .I4(\Multi_Port.Gen_Token[1].Forbid_FF_Inst_0 ),
        .I5(\ctrl_access[Addr] [0]),
        .O(\arb_access_i[Addr][6]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][7]_i_1 
       (.I0(S1_AXI_AWADDR[7]),
        .I1(port_ready_1),
        .I2(S0_AXI_AWADDR[7]),
        .I3(wr_port_ready_cmb_0),
        .I4(wr_port_ready_cmb_1),
        .I5(\arb_access_i[Addr][7]_i_2_n_0 ),
        .O(\arb_access_i_reg[Addr][31] [7]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][7]_i_2 
       (.I0(S1_AXI_ARADDR[1]),
        .I1(port_ready_1),
        .I2(S0_AXI_ARADDR[1]),
        .I3(\Multi_Port.Gen_Token[0].Forbid_FF_Inst ),
        .I4(\Multi_Port.Gen_Token[1].Forbid_FF_Inst_0 ),
        .I5(\ctrl_access[Addr] [1]),
        .O(\arb_access_i[Addr][7]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][8]_i_1 
       (.I0(S1_AXI_AWADDR[8]),
        .I1(port_ready_1),
        .I2(S0_AXI_AWADDR[8]),
        .I3(wr_port_ready_cmb_0),
        .I4(wr_port_ready_cmb_1),
        .I5(\arb_access_i[Addr][8]_i_2_n_0 ),
        .O(\arb_access_i_reg[Addr][31] [8]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][8]_i_2 
       (.I0(S1_AXI_ARADDR[2]),
        .I1(port_ready_1),
        .I2(S0_AXI_ARADDR[2]),
        .I3(\Multi_Port.Gen_Token[0].Forbid_FF_Inst ),
        .I4(\Multi_Port.Gen_Token[1].Forbid_FF_Inst_0 ),
        .I5(\ctrl_access[Addr] [2]),
        .O(\arb_access_i[Addr][8]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][9]_i_1 
       (.I0(S1_AXI_AWADDR[9]),
        .I1(port_ready_1),
        .I2(S0_AXI_AWADDR[9]),
        .I3(wr_port_ready_cmb_0),
        .I4(wr_port_ready_cmb_1),
        .I5(\arb_access_i[Addr][9]_i_2_n_0 ),
        .O(\arb_access_i_reg[Addr][31] [9]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Addr][9]_i_2 
       (.I0(S1_AXI_ARADDR[3]),
        .I1(port_ready_1),
        .I2(S0_AXI_ARADDR[3]),
        .I3(\Multi_Port.Gen_Token[0].Forbid_FF_Inst ),
        .I4(\Multi_Port.Gen_Token[1].Forbid_FF_Inst_0 ),
        .I5(\ctrl_access[Addr] [3]),
        .O(\arb_access_i[Addr][9]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h00000000B8B8B800)) 
    \arb_access_i[Allocate]_i_1 
       (.I0(S1_AXI_ARCACHE),
        .I1(port_ready_1),
        .I2(S0_AXI_ARCACHE),
        .I3(\Multi_Port.Gen_Token[0].Forbid_FF_Inst ),
        .I4(\Multi_Port.Gen_Token[1].Forbid_FF_Inst_0 ),
        .I5(reduce_or4_out),
        .O(\arb_access_i_reg[Allocate] ));
  LUT5 #(
    .INIT(32'hFEFFFE00)) 
    \arb_access_i[Early]_i_2 
       (.I0(S1_AXI_AWBAR),
        .I1(S1_AXI_AWCACHE[2]),
        .I2(S1_AXI_AWCACHE[0]),
        .I3(port_ready_1),
        .I4(\Gen_Port_Ready[0].wr_port_early_reg ),
        .O(\arb_access_i_reg[Early] ));
  LUT5 #(
    .INIT(32'h80FF8000)) 
    \arb_access_i[Keep]_i_2 
       (.I0(S1_AXI_AWCACHE[1]),
        .I1(S1_AXI_AWCACHE[2]),
        .I2(S1_AXI_AWCACHE[0]),
        .I3(port_ready_1),
        .I4(wr_port_keep),
        .O(\arb_access_i[Allocate]1__0 ));
  LUT6 #(
    .INIT(64'hB8B8B8BBB8B8B888)) 
    \arb_access_i[Kind]_i_1 
       (.I0(\arb_access_i[Kind]_i_2_n_0 ),
        .I1(reduce_or4_out),
        .I2(\arb_access_i[Kind]_i_3_n_0 ),
        .I3(\Multi_Port.Gen_Token[0].Forbid_FF_Inst ),
        .I4(\Multi_Port.Gen_Token[1].Forbid_FF_Inst_0 ),
        .I5(\ctrl_access[Internal_Cmd] ),
        .O(\arb_access_i_reg[Kind] ));
  LUT5 #(
    .INIT(32'h20202F20)) 
    \arb_access_i[Kind]_i_2 
       (.I0(S1_AXI_AWBURST[1]),
        .I1(S1_AXI_AWBURST[0]),
        .I2(port_ready_1),
        .I3(S0_AXI_AWBURST[1]),
        .I4(S0_AXI_AWBURST[0]),
        .O(\arb_access_i[Kind]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h20202F20)) 
    \arb_access_i[Kind]_i_3 
       (.I0(S1_AXI_ARBURST[1]),
        .I1(S1_AXI_ARBURST[0]),
        .I2(port_ready_1),
        .I3(S0_AXI_ARBURST[1]),
        .I4(S0_AXI_ARBURST[0]),
        .O(\arb_access_i[Kind]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Len][0]_i_1 
       (.I0(S1_AXI_AWLEN[0]),
        .I1(port_ready_1),
        .I2(S0_AXI_AWLEN[0]),
        .I3(wr_port_ready_cmb_0),
        .I4(wr_port_ready_cmb_1),
        .I5(\Multi_Port.Gen_Token[1].Forbid_FF_Inst_1 ),
        .O(D[0]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Len][1]_i_1 
       (.I0(S1_AXI_AWLEN[1]),
        .I1(port_ready_1),
        .I2(S0_AXI_AWLEN[1]),
        .I3(wr_port_ready_cmb_0),
        .I4(wr_port_ready_cmb_1),
        .I5(\Multi_Port.Gen_Token[1].Forbid_FF_Inst_2 ),
        .O(D[1]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Len][2]_i_1 
       (.I0(S1_AXI_AWLEN[2]),
        .I1(port_ready_1),
        .I2(S0_AXI_AWLEN[2]),
        .I3(wr_port_ready_cmb_0),
        .I4(wr_port_ready_cmb_1),
        .I5(\Multi_Port.Gen_Token[1].Forbid_FF_Inst_3 ),
        .O(D[2]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Len][3]_i_1 
       (.I0(S1_AXI_AWLEN[3]),
        .I1(port_ready_1),
        .I2(S0_AXI_AWLEN[3]),
        .I3(wr_port_ready_cmb_0),
        .I4(wr_port_ready_cmb_1),
        .I5(\Multi_Port.Gen_Token[1].Forbid_FF_Inst_4 ),
        .O(D[3]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Len][4]_i_1 
       (.I0(S1_AXI_AWLEN[4]),
        .I1(port_ready_1),
        .I2(S0_AXI_AWLEN[4]),
        .I3(wr_port_ready_cmb_0),
        .I4(wr_port_ready_cmb_1),
        .I5(\Multi_Port.Gen_Token[1].Forbid_FF_Inst_5 ),
        .O(D[4]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Len][5]_i_1 
       (.I0(S1_AXI_AWLEN[5]),
        .I1(port_ready_1),
        .I2(S0_AXI_AWLEN[5]),
        .I3(wr_port_ready_cmb_0),
        .I4(wr_port_ready_cmb_1),
        .I5(\Multi_Port.Gen_Token[1].Forbid_FF_Inst_6 ),
        .O(D[5]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Len][6]_i_1 
       (.I0(S1_AXI_AWLEN[6]),
        .I1(port_ready_1),
        .I2(S0_AXI_AWLEN[6]),
        .I3(wr_port_ready_cmb_0),
        .I4(wr_port_ready_cmb_1),
        .I5(\Multi_Port.Gen_Token[1].Forbid_FF_Inst_8 ),
        .O(D[6]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Len][7]_i_1 
       (.I0(S1_AXI_AWLEN[7]),
        .I1(port_ready_1),
        .I2(S0_AXI_AWLEN[7]),
        .I3(wr_port_ready_cmb_0),
        .I4(wr_port_ready_cmb_1),
        .I5(\Multi_Port.Gen_Token[1].Forbid_FF_Inst_7 ),
        .O(D[7]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Size][0]_i_1 
       (.I0(S1_AXI_AWSIZE[0]),
        .I1(port_ready_1),
        .I2(S0_AXI_AWSIZE[0]),
        .I3(wr_port_ready_cmb_0),
        .I4(wr_port_ready_cmb_1),
        .I5(\Multi_Port.Gen_Token[1].Forbid_FF_Inst_33 ),
        .O(\arb_access_i_reg[Size][2] [0]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Size][1]_i_1 
       (.I0(S1_AXI_AWSIZE[1]),
        .I1(port_ready_1),
        .I2(S0_AXI_AWSIZE[1]),
        .I3(wr_port_ready_cmb_0),
        .I4(wr_port_ready_cmb_1),
        .I5(\arb_access_i[Size][1]_i_2_n_0 ),
        .O(\arb_access_i_reg[Size][2] [1]));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Size][1]_i_2 
       (.I0(S1_AXI_ARSIZE),
        .I1(port_ready_1),
        .I2(S0_AXI_ARSIZE),
        .I3(\Multi_Port.Gen_Token[0].Forbid_FF_Inst ),
        .I4(\Multi_Port.Gen_Token[1].Forbid_FF_Inst_0 ),
        .I5(\ctrl_access[Size] ),
        .O(\arb_access_i[Size][1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8B8FFB8B8B800)) 
    \arb_access_i[Size][2]_i_1 
       (.I0(S1_AXI_AWSIZE[2]),
        .I1(port_ready_1),
        .I2(S0_AXI_AWSIZE[2]),
        .I3(wr_port_ready_cmb_0),
        .I4(wr_port_ready_cmb_1),
        .I5(\Multi_Port.Gen_Token[1].Forbid_FF_Inst_32 ),
        .O(\arb_access_i_reg[Size][2] [2]));
  (* SOFT_HLUTNM = "soft_lutpair109" *) 
  LUT4 #(
    .INIT(16'hE200)) 
    dvm_2nd_part_i_1
       (.I0(\Multi_Port.Gen_Token[0].Forbid_FF_Inst ),
        .I1(port_ready_1),
        .I2(\Multi_Port.Gen_Token[1].Forbid_FF_Inst_0 ),
        .I3(any_port_forbid_cmb1__0),
        .O(dvm_2nd_part0));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_37
   (port_ready_no_init_1,
    port_allow_ready_1,
    \Gen_Port_Ready[1].Use_Slow_Port.Wr_FF_Inst ,
    rd_port_multi_part_1,
    \Use_FPGA.Full_Inst ,
    any_port_forbid_1,
    rd_port_ready_block_1,
    \rd_port_access[1][Valid] ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5);
  output port_ready_no_init_1;
  input port_allow_ready_1;
  input \Gen_Port_Ready[1].Use_Slow_Port.Wr_FF_Inst ;
  input rd_port_multi_part_1;
  input \Use_FPGA.Full_Inst ;
  input any_port_forbid_1;
  input rd_port_ready_block_1;
  input \rd_port_access[1][Valid] ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;

  wire A18_out;
  wire \Gen_Port_Ready[1].Use_Slow_Port.Wr_FF_Inst ;
  wire \Use_FPGA.Full_Inst ;
  wire any_port_forbid_1;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire lopt_6;
  wire port_allow_ready_1;
  wire port_ready_no_init_1;
  wire \rd_port_access[1][Valid] ;
  wire rd_port_multi_part_1;
  wire rd_port_ready_block_1;
  wire [3:3]\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = lopt_5;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(port_allow_ready_1),
        .CO({\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED [3],\^lopt_4 ,\^lopt_1 ,port_ready_no_init_1}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED [3],\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED [3],lopt_6,\^lopt_3 ,A18_out}));
  LUT6 #(
    .INIT(64'h000000FF00100010)) 
    \Using_FPGA.MUXCY_I_i_1__4 
       (.I0(\Gen_Port_Ready[1].Use_Slow_Port.Wr_FF_Inst ),
        .I1(rd_port_multi_part_1),
        .I2(\Use_FPGA.Full_Inst ),
        .I3(any_port_forbid_1),
        .I4(rd_port_ready_block_1),
        .I5(\rd_port_access[1][Valid] ),
        .O(A18_out));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_39
   (wr_port_ready_cmb_1,
    \arbiter_bp_push_i[1][Valid] ,
    port_ready_1,
    queue_full_1,
    S1_AXI_AWVALID,
    any_port_forbid_1,
    \rd_port_access[1][Valid] ,
    rd_port_multi_part_1,
    \Gen_Port_Ready[1].Use_Slow_Port.Wr_FF_Inst ,
    access_piperun,
    lopt,
    lopt_1,
    lopt_2);
  output wr_port_ready_cmb_1;
  output \arbiter_bp_push_i[1][Valid] ;
  input port_ready_1;
  input queue_full_1;
  input S1_AXI_AWVALID;
  input any_port_forbid_1;
  input \rd_port_access[1][Valid] ;
  input rd_port_multi_part_1;
  input \Gen_Port_Ready[1].Use_Slow_Port.Wr_FF_Inst ;
  input access_piperun;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire A0_in;
  wire \Gen_Port_Ready[1].Use_Slow_Port.Wr_FF_Inst ;
  wire S1_AXI_AWVALID;
  wire access_piperun;
  wire any_port_forbid_1;
  wire \arbiter_bp_push_i[1][Valid] ;
  wire port_ready_1;
  wire queue_full_1;
  wire \rd_port_access[1][Valid] ;
  wire rd_port_multi_part_1;
  wire wr_port_ready_cmb_1;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = A0_in;
  assign wr_port_ready_cmb_1 = lopt;
  GND GND
       (.G(\<const0> ));
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Port_Ready[1].Use_Slow_Port.Wr_FF_Inst_i_1 
       (.I0(wr_port_ready_cmb_1),
        .I1(access_piperun),
        .O(\arbiter_bp_push_i[1][Valid] ));
  LUT6 #(
    .INIT(64'h0000000000000004)) 
    \Using_FPGA.MUXCY_I_i_1__5 
       (.I0(queue_full_1),
        .I1(S1_AXI_AWVALID),
        .I2(any_port_forbid_1),
        .I3(\rd_port_access[1][Valid] ),
        .I4(rd_port_multi_part_1),
        .I5(\Gen_Port_Ready[1].Use_Slow_Port.Wr_FF_Inst ),
        .O(A0_in));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_52
   (update_sel_readback_tag_0,
    ri_allocate_reg,
    \update_cur_tag_rd_way_reg[0] ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output update_sel_readback_tag_0;
  input ri_allocate_reg;
  input \update_cur_tag_rd_way_reg[0] ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \Gen_Set_Tag[0].update_select_readback_reg ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire ri_allocate_reg;
  wire \update_cur_tag_rd_way_reg[0] ;
  wire update_sel_readback_tag_0;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,update_sel_readback_tag_0}),
        .CYINIT(ri_allocate_reg),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\Gen_Set_Tag[0].update_select_readback_reg }));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.MUXCY_I_i_1__21 
       (.I0(\update_cur_tag_rd_way_reg[0] ),
        .O(\Gen_Set_Tag[0].update_select_readback_reg ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_53
   (update_tag_is_alive_0,
    update_readback_available_reg,
    update_tag_match_pre_0,
    lopt,
    lopt_1);
  output update_tag_is_alive_0;
  input update_readback_available_reg;
  input update_tag_match_pre_0;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire update_readback_available_reg;
  wire update_tag_is_alive_0;
  wire update_tag_match_pre_0;

  assign lopt_1 = \<const0> ;
  assign update_tag_is_alive_0 = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_54
   (update_tag_remove_lock_0,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    update_tag_is_alive_0,
    lopt,
    lopt_1,
    lopt_2);
  output update_tag_remove_lock_0;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  input update_tag_is_alive_0;
  output lopt;
  input lopt_1;
  input lopt_2;

  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire lopt_3;
  wire update_tag_is_alive_0;
  wire update_tag_remove_lock_0;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = lopt_2;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(update_tag_is_alive_0),
        .CO({\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED [3:2],\^lopt_1 ,update_tag_remove_lock_0}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED [3:2],\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED [3:2],lopt_3,\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst }));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_56
   (update_sel_readback_tag_1,
    \update_cur_tag_rd_way_reg[0] ,
    ri_allocate_reg,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output update_sel_readback_tag_1;
  input \update_cur_tag_rd_way_reg[0] ;
  input ri_allocate_reg;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire ri_allocate_reg;
  wire \update_cur_tag_rd_way_reg[0] ;
  wire update_sel_readback_tag_1;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,update_sel_readback_tag_1}),
        .CYINIT(ri_allocate_reg),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\update_cur_tag_rd_way_reg[0] }));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_57
   (update_tag_is_alive_1,
    update_readback_available_reg,
    update_tag_match_pre_1,
    lopt,
    lopt_1);
  output update_tag_is_alive_1;
  input update_readback_available_reg;
  input update_tag_match_pre_1;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire update_readback_available_reg;
  wire update_tag_is_alive_1;
  wire update_tag_match_pre_1;

  assign lopt_1 = \<const0> ;
  assign update_tag_is_alive_1 = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_58
   (update_tag_remove_lock_1,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    update_tag_is_alive_1,
    lopt,
    lopt_1,
    lopt_2);
  output update_tag_remove_lock_1;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  input update_tag_is_alive_1;
  output lopt;
  input lopt_1;
  input lopt_2;

  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire lopt_3;
  wire update_tag_is_alive_1;
  wire update_tag_remove_lock_1;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = lopt_2;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(update_tag_is_alive_1),
        .CO({\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED [3:2],\^lopt_1 ,update_tag_remove_lock_1}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED [3:2],\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED [3:2],lopt_3,\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst }));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_61
   (ud_rm_use_resize_part_ok,
    update_read_miss_use_ok,
    lopt,
    lopt_1,
    lopt_2);
  output ud_rm_use_resize_part_ok;
  input update_read_miss_use_ok;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire ud_rm_use_resize_part_ok;
  wire update_read_miss_use_ok;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  assign ud_rm_use_resize_part_ok = lopt;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_67
   (ud_rm_available,
    A136_out,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output ud_rm_available;
  input A136_out;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire A136_out;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire ud_rm_available;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,ud_rm_available}),
        .CYINIT(1'b1),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,A136_out}));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_68
   (ud_rm_use_pre_safe,
    ri_merge_reg,
    update_read_miss_resize_ok,
    lopt,
    lopt_1);
  output ud_rm_use_pre_safe;
  input ri_merge_reg;
  input update_read_miss_resize_ok;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire ri_merge_reg;
  wire ud_rm_use_pre_safe;
  wire update_read_miss_resize_ok;

  assign lopt_1 = \<const0> ;
  assign ud_rm_use_pre_safe = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_69
   (ud_rm_use_safe,
    update_read_miss_ongoing_reg,
    ud_rm_use_pre_safe,
    lopt,
    lopt_1);
  output ud_rm_use_safe;
  input update_read_miss_ongoing_reg;
  input ud_rm_use_pre_safe;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire ud_rm_use_pre_safe;
  wire ud_rm_use_safe;
  wire update_read_miss_ongoing_reg;

  assign lopt_1 = \<const0> ;
  assign ud_rm_use_safe = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_70
   (ud_rm_use_and_lock_safe,
    ud_rm_use_safe,
    update_rm_alloc_ongoing_reg,
    update_word_cnt_almost_last,
    update_need_tag_write,
    update_readback_available_reg,
    update_done_tag_write_reg,
    update_remove_locked_safe3,
    lopt,
    lopt_1,
    lopt_2);
  output ud_rm_use_and_lock_safe;
  input ud_rm_use_safe;
  input update_rm_alloc_ongoing_reg;
  input update_word_cnt_almost_last;
  input update_need_tag_write;
  input update_readback_available_reg;
  input update_done_tag_write_reg;
  input update_remove_locked_safe3;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \Using_FPGA.MUXCY_I_i_1__49_n_0 ;
  wire ud_rm_use_and_lock_safe;
  wire ud_rm_use_safe;
  wire update_done_tag_write_reg;
  wire update_need_tag_write;
  wire update_readback_available_reg;
  wire update_remove_locked_safe3;
  wire update_rm_alloc_ongoing_reg;
  wire update_word_cnt_almost_last;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = \Using_FPGA.MUXCY_I_i_1__49_n_0 ;
  assign ud_rm_use_and_lock_safe = lopt;
  GND GND
       (.G(\<const0> ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFF7F)) 
    \Using_FPGA.MUXCY_I_i_1__49 
       (.I0(update_rm_alloc_ongoing_reg),
        .I1(update_word_cnt_almost_last),
        .I2(update_need_tag_write),
        .I3(update_readback_available_reg),
        .I4(update_done_tag_write_reg),
        .I5(update_remove_locked_safe3),
        .O(\Using_FPGA.MUXCY_I_i_1__49_n_0 ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_72
   (Carry_IN,
    M0_AXI_RVALID,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    lopt,
    lopt_1);
  output Carry_IN;
  input M0_AXI_RVALID;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire Carry_IN;
  wire M0_AXI_RVALID;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;

  assign Carry_IN = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_74
   (update_data_we,
    update_rm_alloc_ongoing,
    Carry_OUT,
    Q,
    Carry_IN,
    update_word_cnt_last_reg,
    update_read_miss_ongoing_reg,
    ri_allocate_reg,
    update_evict_ongoing_reg,
    lopt,
    lopt_1,
    lopt_2);
  output update_data_we;
  output update_rm_alloc_ongoing;
  input Carry_OUT;
  input Q;
  input Carry_IN;
  input update_word_cnt_last_reg;
  input update_read_miss_ongoing_reg;
  input ri_allocate_reg;
  input update_evict_ongoing_reg;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire Carry_IN;
  wire Carry_OUT;
  wire Q;
  wire \Using_FPGA.MUXCY_I_i_1__157_n_0 ;
  wire ri_allocate_reg;
  wire update_data_we;
  wire update_evict_ongoing_reg;
  wire update_read_miss_ongoing_reg;
  wire update_rm_alloc_ongoing;
  wire update_word_cnt_last_reg;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = \Using_FPGA.MUXCY_I_i_1__157_n_0 ;
  assign update_data_we = lopt;
  GND GND
       (.G(\<const0> ));
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.MUXCY_I_i_1__157 
       (.I0(ri_allocate_reg),
        .I1(update_evict_ongoing_reg),
        .O(\Using_FPGA.MUXCY_I_i_1__157_n_0 ));
  LUT5 #(
    .INIT(32'hEAAAAAAA)) 
    update_rm_alloc_ongoing_i_2
       (.I0(Q),
        .I1(update_data_we),
        .I2(Carry_IN),
        .I3(update_word_cnt_last_reg),
        .I4(update_read_miss_ongoing_reg),
        .O(update_rm_alloc_ongoing));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_77
   (update_tag_conflict,
    access_valid,
    update_match_addr,
    lopt,
    lopt_1);
  output update_tag_conflict;
  input access_valid;
  input update_match_addr;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire access_valid;
  wire update_match_addr;
  wire update_tag_conflict;

  assign lopt_1 = \<const0> ;
  assign update_tag_conflict = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_78
   (update_need_tag_write_pre4,
    update_read_miss,
    update_need_tag_write_pre5,
    lopt,
    lopt_1);
  output update_need_tag_write_pre4;
  input update_read_miss;
  input update_need_tag_write_pre5;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire update_need_tag_write_pre4;
  wire update_need_tag_write_pre5;
  wire update_read_miss;

  assign lopt_1 = \<const0> ;
  assign update_need_tag_write_pre4 = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_79
   (update_need_tag_write_carry,
    update_valid,
    update_need_tag_write_pre1,
    lopt,
    lopt_1);
  output update_need_tag_write_carry;
  input update_valid;
  input update_need_tag_write_pre1;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire update_need_tag_write_carry;
  wire update_need_tag_write_pre1;
  wire update_valid;

  assign lopt_1 = \<const0> ;
  assign update_need_tag_write_carry = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_84
   (carry_1,
    \The_Compare[0].sel_reg ,
    update_need_tag_write_carry,
    lopt,
    lopt_1);
  output carry_1;
  input \The_Compare[0].sel_reg ;
  input update_need_tag_write_carry;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \The_Compare[0].sel_reg ;
  wire carry_1;
  wire update_need_tag_write_carry;

  assign carry_1 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_85
   (carry_2,
    A_0,
    carry_1,
    lopt,
    lopt_1);
  output carry_2;
  input A_0;
  input carry_1;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire A_0;
  wire carry_1;
  wire carry_2;

  assign carry_2 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_86
   (update_match_addr,
    \The_Compare[2].sel_reg ,
    carry_2,
    lopt,
    lopt_1,
    lopt_2);
  output update_match_addr;
  input \The_Compare[2].sel_reg ;
  input carry_2;
  output lopt;
  input lopt_1;
  input lopt_2;

  wire \The_Compare[2].sel_reg ;
  wire carry_2;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire lopt_3;
  wire update_match_addr;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = lopt_2;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(carry_2),
        .CO({\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED [3:2],\^lopt_1 ,update_match_addr}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED [3:2],\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED [3:2],lopt_3,\The_Compare[2].sel_reg }));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_87
   (carry_1,
    ud_rm_use_resize_part_ok,
    ri_port,
    r_miss_fifo_full,
    \read_data_status[0,0][Hit_Full] ,
    \lookup_read_data_info[0,0][Valid] ,
    update_read_resize_finish_reg,
    update_read_resize_selected_reg,
    lopt,
    lopt_1,
    lopt_2);
  output carry_1;
  input ud_rm_use_resize_part_ok;
  input ri_port;
  input r_miss_fifo_full;
  input \read_data_status[0,0][Hit_Full] ;
  input \lookup_read_data_info[0,0][Valid] ;
  input update_read_resize_finish_reg;
  input update_read_resize_selected_reg;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \The_Compare[0].sel_reg ;
  wire carry_1;
  wire \lookup_read_data_info[0,0][Valid] ;
  wire r_miss_fifo_full;
  wire \read_data_status[0,0][Hit_Full] ;
  wire ri_port;
  wire ud_rm_use_resize_part_ok;
  wire update_read_resize_finish_reg;
  wire update_read_resize_selected_reg;

  assign carry_1 = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \The_Compare[0].sel_reg ;
  GND GND
       (.G(\<const0> ));
  LUT6 #(
    .INIT(64'hFFFFBABBFFFFFFFF)) 
    \Using_FPGA.MUXCY_I_i_1__19 
       (.I0(ri_port),
        .I1(r_miss_fifo_full),
        .I2(\read_data_status[0,0][Hit_Full] ),
        .I3(\lookup_read_data_info[0,0][Valid] ),
        .I4(update_read_resize_finish_reg),
        .I5(update_read_resize_selected_reg),
        .O(\The_Compare[0].sel_reg ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_88
   (update_read_miss_resize_ok,
    carry_1,
    r_miss_fifo_full_8,
    \read_data_status[0,1][Hit_Full] ,
    \lookup_read_data_info[0,1][Valid] ,
    update_read_resize_finish_reg,
    update_read_resize_selected_reg,
    ri_port,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output update_read_miss_resize_ok;
  input carry_1;
  input r_miss_fifo_full_8;
  input \read_data_status[0,1][Hit_Full] ;
  input \lookup_read_data_info[0,1][Valid] ;
  input update_read_resize_finish_reg;
  input update_read_resize_selected_reg;
  input ri_port;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \Using_FPGA.MUXCY_I_i_1__152_n_0 ;
  wire carry_1;
  wire \lookup_read_data_info[0,1][Valid] ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire r_miss_fifo_full_8;
  wire \read_data_status[0,1][Hit_Full] ;
  wire ri_port;
  wire update_read_miss_resize_ok;
  wire update_read_resize_finish_reg;
  wire update_read_resize_selected_reg;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(carry_1),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,update_read_miss_resize_ok}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\Using_FPGA.MUXCY_I_i_1__152_n_0 }));
  LUT6 #(
    .INIT(64'hFF45FFFFFFFFFFFF)) 
    \Using_FPGA.MUXCY_I_i_1__152 
       (.I0(r_miss_fifo_full_8),
        .I1(\read_data_status[0,1][Hit_Full] ),
        .I2(\lookup_read_data_info[0,1][Valid] ),
        .I3(update_read_resize_finish_reg),
        .I4(update_read_resize_selected_reg),
        .I5(ri_port),
        .O(\Using_FPGA.MUXCY_I_i_1__152_n_0 ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_89
   (carry_1,
    \The_Compare[0].sel_reg_6 ,
    update_sel_readback_tag_1,
    lopt,
    lopt_1);
  output carry_1;
  input \The_Compare[0].sel_reg_6 ;
  input update_sel_readback_tag_1;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \The_Compare[0].sel_reg_6 ;
  wire carry_1;
  wire update_sel_readback_tag_1;

  assign carry_1 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_90
   (carry_2,
    A_7,
    carry_1,
    lopt,
    lopt_1);
  output carry_2;
  input A_7;
  input carry_1;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire A_7;
  wire carry_1;
  wire carry_2;

  assign carry_2 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_91
   (carry_3,
    \The_Compare[2].sel_reg_8 ,
    carry_2,
    lopt,
    lopt_1);
  output carry_3;
  input \The_Compare[2].sel_reg_8 ;
  input carry_2;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \The_Compare[2].sel_reg_8 ;
  wire carry_2;
  wire carry_3;

  assign carry_3 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_92
   (carry_4,
    \The_Compare[3].sel_reg_9 ,
    carry_3,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output carry_4;
  input \The_Compare[3].sel_reg_9 ;
  input carry_3;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \The_Compare[3].sel_reg_9 ;
  wire carry_3;
  wire carry_4;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(carry_3),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,carry_4}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\The_Compare[3].sel_reg_9 }));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_93
   (carry_5,
    \The_Compare[4].sel_reg_10 ,
    carry_4,
    lopt,
    lopt_1);
  output carry_5;
  input \The_Compare[4].sel_reg_10 ;
  input carry_4;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \The_Compare[4].sel_reg_10 ;
  wire carry_4;
  wire carry_5;

  assign carry_5 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_94
   (update_tag_match_pre_1,
    \The_Compare[5].sel_reg_11 ,
    carry_5,
    lopt,
    lopt_1);
  output update_tag_match_pre_1;
  input \The_Compare[5].sel_reg_11 ;
  input carry_5;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \The_Compare[5].sel_reg_11 ;
  wire carry_5;
  wire update_tag_match_pre_1;

  assign lopt_1 = \<const0> ;
  assign update_tag_match_pre_1 = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_95
   (carry_1,
    \The_Compare[0].sel_reg_3 ,
    update_sel_readback_tag_0,
    lopt,
    lopt_1);
  output carry_1;
  input \The_Compare[0].sel_reg_3 ;
  input update_sel_readback_tag_0;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \The_Compare[0].sel_reg_3 ;
  wire carry_1;
  wire update_sel_readback_tag_0;

  assign carry_1 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_96
   (carry_2,
    A_4,
    carry_1,
    lopt,
    lopt_1);
  output carry_2;
  input A_4;
  input carry_1;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire A_4;
  wire carry_1;
  wire carry_2;

  assign carry_2 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_97
   (carry_3,
    \The_Compare[2].sel_reg_5 ,
    carry_2,
    lopt,
    lopt_1);
  output carry_3;
  input \The_Compare[2].sel_reg_5 ;
  input carry_2;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \The_Compare[2].sel_reg_5 ;
  wire carry_2;
  wire carry_3;

  assign carry_3 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_98
   (carry_4,
    \The_Compare[3].sel_reg ,
    carry_3,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output carry_4;
  input \The_Compare[3].sel_reg ;
  input carry_3;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \The_Compare[3].sel_reg ;
  wire carry_3;
  wire carry_4;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(carry_3),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,carry_4}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\The_Compare[3].sel_reg }));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and_99
   (carry_5,
    \The_Compare[4].sel_reg ,
    carry_4,
    lopt,
    lopt_1);
  output carry_5;
  input \The_Compare[4].sel_reg ;
  input carry_4;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire \The_Compare[4].sel_reg ;
  wire carry_4;
  wire carry_5;

  assign carry_5 = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and__parameterized3
   (Carry_OUT,
    Q,
    Carry_IN,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_OUT;
  input [1:0]Q;
  input Carry_IN;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire Carry_IN;
  wire Carry_OUT;
  wire [1:0]Q;
  (* RTL_KEEP = "true" *) wire a_loc;

  assign Carry_OUT = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = a_loc;
  GND GND
       (.G(\<const0> ));
  LUT2 #(
    .INIT(4'hE)) 
    a_loc_inferred_i_1__4
       (.I0(Q[1]),
        .I1(Q[0]),
        .O(a_loc));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and__parameterized3_167
   (Carry_OUT,
    Q,
    Carry_IN,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_OUT;
  input [1:0]Q;
  input Carry_IN;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire Carry_IN;
  wire Carry_OUT;
  wire [1:0]Q;
  (* RTL_KEEP = "true" *) wire a_loc;

  assign Carry_OUT = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = a_loc;
  GND GND
       (.G(\<const0> ));
  LUT2 #(
    .INIT(4'hE)) 
    a_loc_inferred_i_1__3
       (.I0(Q[1]),
        .I1(Q[0]),
        .O(a_loc));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and__parameterized3_222
   (Carry_Out,
    Carry_In,
    Q,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_Out;
  input Carry_In;
  input [1:0]Q;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire Carry_In;
  wire Carry_Out;
  wire [1:0]Q;
  (* RTL_KEEP = "true" *) wire a_loc;

  assign Carry_Out = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = a_loc;
  GND GND
       (.G(\<const0> ));
  LUT2 #(
    .INIT(4'h1)) 
    a_loc_inferred_i_1__0
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(a_loc));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and__parameterized3_231
   (Carry_OUT,
    Q,
    Carry_IN,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_OUT;
  input [1:0]Q;
  input Carry_IN;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire Carry_IN;
  wire Carry_OUT;
  wire [1:0]Q;
  (* RTL_KEEP = "true" *) wire a_loc;

  assign Carry_OUT = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = a_loc;
  GND GND
       (.G(\<const0> ));
  LUT2 #(
    .INIT(4'h1)) 
    a_loc_inferred_i_1__2
       (.I0(Q[1]),
        .I1(Q[0]),
        .O(a_loc));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and__parameterized3_239
   (Carry_Out,
    Q,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output Carry_Out;
  input [1:0]Q;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire Carry_Out;
  wire [1:0]Q;
  (* RTL_KEEP = "true" *) wire a_loc;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [3:0]\NLW_Using_FPGA_Keep.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA_Keep.MUXCY_I_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,Carry_Out}),
        .CYINIT(1'b1),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA_Keep.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,a_loc}));
  LUT2 #(
    .INIT(4'h1)) 
    a_loc_inferred_i_1
       (.I0(Q[0]),
        .I1(Q[1]),
        .O(a_loc));
endmodule

(* ORIG_REF_NAME = "carry_and" *) 
module design_1_system_cache_0_0_carry_and__parameterized3_240
   (Carry_OUT,
    Q,
    \lu_check_info_reg[Wr] ,
    Carry_IN,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_OUT;
  input [1:0]Q;
  input \lu_check_info_reg[Wr] ;
  input Carry_IN;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire Carry_IN;
  wire Carry_OUT;
  wire [1:0]Q;
  (* RTL_KEEP = "true" *) wire a_loc;
  wire \lu_check_info_reg[Wr] ;

  assign Carry_OUT = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = a_loc;
  GND GND
       (.G(\<const0> ));
  LUT3 #(
    .INIT(8'hF1)) 
    a_loc_inferred_i_1__1
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(\lu_check_info_reg[Wr] ),
        .O(a_loc));
endmodule

(* ORIG_REF_NAME = "carry_and_di" *) 
module design_1_system_cache_0_0_carry_and_di
   (lu_ds_last_beat,
    A32_out,
    lu_ds_last_beat_next_last_n_reg,
    lu_ds_last_beat_multi_start,
    lopt);
  output lu_ds_last_beat;
  input A32_out;
  input lu_ds_last_beat_next_last_n_reg;
  input lu_ds_last_beat_multi_start;
  input lopt;

  wire A32_out;
  wire lu_ds_last_beat;
  wire lu_ds_last_beat_multi_start;
  wire lu_ds_last_beat_next_last_n_reg;

  assign lu_ds_last_beat = lopt;
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module design_1_system_cache_0_0_carry_and_n
   (r_pop_safe_i,
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[1] ,
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[2] ,
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3] ,
    p_3_out__2,
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0] ,
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0]_0 ,
    r_pop,
    rip_pop,
    ri_exist,
    r_next_fifo_addr__7,
    Q,
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst ,
    \Use_Rd_Ctrl_Pipeline.ri_hit_reg ,
    \r_miss_read_fifo_addr_reg[1] ,
    \Use_Reg_Ctrl.queue_exist_i_reg ,
    r_miss_fifo_empty,
    I4,
    r_miss_push,
    r_miss_fifo_almost_empty,
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0]_1 ,
    lopt,
    lopt_1,
    lopt_2);
  output r_pop_safe_i;
  output \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[1] ;
  output \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[2] ;
  output \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3] ;
  output p_3_out__2;
  output \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0] ;
  output \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0]_0 ;
  input r_pop;
  input rip_pop;
  input ri_exist;
  input [2:0]r_next_fifo_addr__7;
  input [3:0]Q;
  input \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst ;
  input \Use_Rd_Ctrl_Pipeline.ri_hit_reg ;
  input [1:0]\r_miss_read_fifo_addr_reg[1] ;
  input \Use_Reg_Ctrl.queue_exist_i_reg ;
  input r_miss_fifo_empty;
  input I4;
  input r_miss_push;
  input r_miss_fifo_almost_empty;
  input \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0]_1 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire I4;
  wire [3:0]Q;
  wire S;
  wire \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst ;
  wire \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[0]_i_2__0_n_0 ;
  wire \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[1]_i_2__0_n_0 ;
  wire \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0] ;
  wire \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0]_0 ;
  wire \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0]_1 ;
  wire \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[1] ;
  wire \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[2] ;
  wire \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3] ;
  wire \Use_Rd_Ctrl_Pipeline.ri_hit_reg ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg ;
  wire p_3_out__2;
  wire r_miss_fifo_almost_empty;
  wire r_miss_fifo_empty;
  wire r_miss_push;
  wire [1:0]\r_miss_read_fifo_addr_reg[1] ;
  wire [2:0]r_next_fifo_addr__7;
  wire r_pop;
  wire r_pop_safe_i;
  wire ri_exist;
  wire rip_pop;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = S;
  assign r_pop_safe_i = lopt;
  GND GND
       (.G(\<const0> ));
  LUT5 #(
    .INIT(32'hAAAAEFFF)) 
    \Use_FPGA_2.S_AXI_RVALID_i_4__0 
       (.I0(r_miss_push),
        .I1(\Use_Rd_Ctrl_Pipeline.ri_hit_reg ),
        .I2(r_pop_safe_i),
        .I3(r_miss_fifo_almost_empty),
        .I4(r_miss_fifo_empty),
        .O(p_3_out__2));
  LUT4 #(
    .INIT(16'hC5CC)) 
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[0]_i_1__0 
       (.I0(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0]_1 ),
        .I1(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[0]_i_2__0_n_0 ),
        .I2(rip_pop),
        .I3(ri_exist),
        .O(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0]_0 ));
  LUT6 #(
    .INIT(64'h5FCFC5CF50C0C5C0)) 
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[0]_i_2__0 
       (.I0(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0]_1 ),
        .I1(Q[0]),
        .I2(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst ),
        .I3(r_pop_safe_i),
        .I4(\Use_Rd_Ctrl_Pipeline.ri_hit_reg ),
        .I5(\r_miss_read_fifo_addr_reg[1] [0]),
        .O(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[0]_i_2__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair155" *) 
  LUT4 #(
    .INIT(16'hBA8A)) 
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[1]_i_1__0 
       (.I0(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[1]_i_2__0_n_0 ),
        .I1(rip_pop),
        .I2(ri_exist),
        .I3(r_next_fifo_addr__7[0]),
        .O(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[1] ));
  LUT6 #(
    .INIT(64'hF3BBB8BBC088B888)) 
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[1]_i_2__0 
       (.I0(Q[1]),
        .I1(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst ),
        .I2(r_next_fifo_addr__7[0]),
        .I3(r_pop_safe_i),
        .I4(\Use_Rd_Ctrl_Pipeline.ri_hit_reg ),
        .I5(\r_miss_read_fifo_addr_reg[1] [1]),
        .O(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[1]_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'hFBBBFFFF38BB0000)) 
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[2]_i_1__0 
       (.I0(Q[2]),
        .I1(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst ),
        .I2(\Use_Rd_Ctrl_Pipeline.ri_hit_reg ),
        .I3(r_pop_safe_i),
        .I4(\Use_Reg_Ctrl.queue_exist_i_reg ),
        .I5(r_next_fifo_addr__7[1]),
        .O(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[2] ));
  (* SOFT_HLUTNM = "soft_lutpair155" *) 
  LUT3 #(
    .INIT(8'hEF)) 
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[3]_i_1__0 
       (.I0(r_pop_safe_i),
        .I1(rip_pop),
        .I2(ri_exist),
        .O(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0] ));
  LUT6 #(
    .INIT(64'hFBBBFFFF38BB0000)) 
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[3]_i_2__0 
       (.I0(Q[3]),
        .I1(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst ),
        .I2(\Use_Rd_Ctrl_Pipeline.ri_hit_reg ),
        .I3(r_pop_safe_i),
        .I4(\Use_Reg_Ctrl.queue_exist_i_reg ),
        .I5(r_next_fifo_addr__7[2]),
        .O(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3] ));
  LUT3 #(
    .INIT(8'h1D)) 
    \Using_FPGA.MUXCY_I_i_1__7 
       (.I0(r_miss_fifo_empty),
        .I1(\Use_Rd_Ctrl_Pipeline.ri_hit_reg ),
        .I2(I4),
        .O(S));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module design_1_system_cache_0_0_carry_and_n_108
   (lu_mem_masked_valid_tag_0,
    lu_mem_pre_pure_valid_tag_0,
    \lu_mem_info_reg[Force_Hit] ,
    lu_mem_protect_conflict_reg,
    \lu_check_info_reg[KillHit] ,
    lopt,
    lopt_1,
    lopt_2);
  output lu_mem_masked_valid_tag_0;
  input lu_mem_pre_pure_valid_tag_0;
  input \lu_mem_info_reg[Force_Hit] ;
  input lu_mem_protect_conflict_reg;
  input \lu_check_info_reg[KillHit] ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \Using_FPGA.MUXCY_I_i_1__140_n_0 ;
  wire \lu_check_info_reg[KillHit] ;
  wire \lu_mem_info_reg[Force_Hit] ;
  wire lu_mem_masked_valid_tag_0;
  wire lu_mem_pre_pure_valid_tag_0;
  wire lu_mem_protect_conflict_reg;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = \Using_FPGA.MUXCY_I_i_1__140_n_0 ;
  assign lu_mem_masked_valid_tag_0 = lopt;
  GND GND
       (.G(\<const0> ));
  LUT3 #(
    .INIT(8'h1D)) 
    \Using_FPGA.MUXCY_I_i_1__140 
       (.I0(\lu_mem_info_reg[Force_Hit] ),
        .I1(lu_mem_protect_conflict_reg),
        .I2(\lu_check_info_reg[KillHit] ),
        .O(\Using_FPGA.MUXCY_I_i_1__140_n_0 ));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module design_1_system_cache_0_0_carry_and_n_125
   (lu_mem_masked_valid_tag_1,
    lu_mem_pre_pure_valid_tag_1,
    \lu_mem_info_reg[Force_Hit] ,
    lu_mem_protect_conflict_reg,
    \lu_check_info_reg[KillHit] ,
    lopt,
    lopt_1,
    lopt_2);
  output lu_mem_masked_valid_tag_1;
  input lu_mem_pre_pure_valid_tag_1;
  input \lu_mem_info_reg[Force_Hit] ;
  input lu_mem_protect_conflict_reg;
  input \lu_check_info_reg[KillHit] ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \lu_check_info_reg[KillHit] ;
  wire \lu_mem_info_reg[Force_Hit] ;
  wire lu_mem_masked_valid_tag_1;
  wire lu_mem_pre_pure_valid_tag_1;
  wire lu_mem_protect_conflict_reg;
  wire lu_mem_sel_locked_10;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = lu_mem_sel_locked_10;
  assign lu_mem_masked_valid_tag_1 = lopt;
  GND GND
       (.G(\<const0> ));
  LUT3 #(
    .INIT(8'h1D)) 
    \Using_FPGA.MUXCY_I_i_1__76 
       (.I0(\lu_mem_info_reg[Force_Hit] ),
        .I1(lu_mem_protect_conflict_reg),
        .I2(\lu_check_info_reg[KillHit] ),
        .O(lu_mem_sel_locked_10));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module design_1_system_cache_0_0_carry_and_n_142
   (lud_addr_piperun_pre2,
    S,
    lud_addr_piperun_pre1,
    lopt,
    lopt_1);
  output lud_addr_piperun_pre2;
  input S;
  input lud_addr_piperun_pre1;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire S;
  wire lud_addr_piperun_pre1;
  wire lud_addr_piperun_pre2;

  assign lopt_1 = \<const0> ;
  assign lud_addr_piperun_pre2 = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module design_1_system_cache_0_0_carry_and_n_145
   (lud_mem_piperun,
    SR,
    \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][0] ,
    lud_mem_completed_reg,
    lud_mem_keep_single_during_stall_reg,
    \lud_mem_way_d1_reg[0] ,
    \lud_reg_port_num_reg[0] ,
    lud_reg_last_reg,
    lud_reg_piperun,
    lud_mem_completed_reg_0,
    lookup_protect_conflict,
    p_185_in,
    Q,
    lud_mem_waiting_for_pipe_reg,
    lud_mem_way_d1,
    lud_mem_keep_single_during_stall,
    lud_mem_delayed_read_data,
    \lu_check_tag_hit_reg[1] ,
    lud_addr_piperun,
    \lud_mem_port_one_hot_reg[1] ,
    \lud_reg_port_num_reg[0]_0 ,
    lud_mem_last,
    \lookup_read_data_info[0,0][Last] ,
    lopt,
    lopt_1,
    lopt_2);
  output lud_mem_piperun;
  output [0:0]SR;
  output [0:0]\Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][0] ;
  output lud_mem_completed_reg;
  output lud_mem_keep_single_during_stall_reg;
  output \lud_mem_way_d1_reg[0] ;
  output \lud_reg_port_num_reg[0] ;
  output lud_reg_last_reg;
  input lud_reg_piperun;
  input lud_mem_completed_reg_0;
  input lookup_protect_conflict;
  input p_185_in;
  input [1:0]Q;
  input lud_mem_waiting_for_pipe_reg;
  input lud_mem_way_d1;
  input lud_mem_keep_single_during_stall;
  input lud_mem_delayed_read_data;
  input [0:0]\lu_check_tag_hit_reg[1] ;
  input lud_addr_piperun;
  input \lud_mem_port_one_hot_reg[1] ;
  input \lud_reg_port_num_reg[0]_0 ;
  input lud_mem_last;
  input \lookup_read_data_info[0,0][Last] ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire [1:0]Q;
  wire [0:0]SR;
  wire [0:0]\Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][0] ;
  wire lookup_protect_conflict;
  wire \lookup_read_data_info[0,0][Last] ;
  wire [0:0]\lu_check_tag_hit_reg[1] ;
  wire lud_addr_piperun;
  wire lud_mem_completed_reg;
  wire lud_mem_completed_reg_0;
  wire lud_mem_delayed_read_data;
  wire lud_mem_keep_single_during_stall;
  wire lud_mem_keep_single_during_stall0;
  wire lud_mem_keep_single_during_stall_reg;
  wire lud_mem_last;
  wire lud_mem_piperun;
  wire \lud_mem_port_one_hot_reg[1] ;
  wire lud_mem_waiting_for_pipe_reg;
  wire lud_mem_way_d1;
  wire \lud_mem_way_d1_reg[0] ;
  wire lud_reg_last_reg;
  wire lud_reg_piperun;
  wire \lud_reg_port_num_reg[0] ;
  wire \lud_reg_port_num_reg[0]_0 ;
  wire lud_step_pos_read_in_mem1;
  wire p_185_in;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = lud_step_pos_read_in_mem1;
  assign lud_mem_piperun = lopt;
  GND GND
       (.G(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair42" *) 
  LUT5 #(
    .INIT(32'h888A8880)) 
    \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i[0][31]_i_1 
       (.I0(lud_mem_piperun),
        .I1(lud_mem_way_d1),
        .I2(lud_mem_keep_single_during_stall),
        .I3(lud_mem_delayed_read_data),
        .I4(\lu_check_tag_hit_reg[1] ),
        .O(SR));
  (* SOFT_HLUTNM = "soft_lutpair42" *) 
  LUT5 #(
    .INIT(32'h2220222A)) 
    \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i[1][31]_i_1 
       (.I0(lud_mem_piperun),
        .I1(lud_mem_way_d1),
        .I2(lud_mem_keep_single_during_stall),
        .I3(lud_mem_delayed_read_data),
        .I4(\lu_check_tag_hit_reg[1] ),
        .O(\Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][0] ));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.MUXCY_I_i_1__65 
       (.I0(lud_mem_waiting_for_pipe_reg),
        .O(lud_step_pos_read_in_mem1));
  (* SOFT_HLUTNM = "soft_lutpair43" *) 
  LUT3 #(
    .INIT(8'hF1)) 
    lud_mem_completed_i_2
       (.I0(lud_mem_piperun),
        .I1(lookup_protect_conflict),
        .I2(lud_addr_piperun),
        .O(lud_mem_completed_reg));
  (* SOFT_HLUTNM = "soft_lutpair43" *) 
  LUT3 #(
    .INIT(8'hDC)) 
    lud_mem_keep_single_during_stall_i_1
       (.I0(lud_mem_piperun),
        .I1(lud_mem_keep_single_during_stall0),
        .I2(lud_mem_keep_single_during_stall),
        .O(lud_mem_keep_single_during_stall_reg));
  LUT6 #(
    .INIT(64'h0000000000000200)) 
    lud_mem_keep_single_during_stall_i_2
       (.I0(lud_mem_completed_reg_0),
        .I1(lud_mem_piperun),
        .I2(lookup_protect_conflict),
        .I3(p_185_in),
        .I4(Q[0]),
        .I5(Q[1]),
        .O(lud_mem_keep_single_during_stall0));
  LUT5 #(
    .INIT(32'hAAEFAA20)) 
    \lud_mem_way_d1[0]_i_1 
       (.I0(\lu_check_tag_hit_reg[1] ),
        .I1(lud_mem_keep_single_during_stall),
        .I2(lud_mem_keep_single_during_stall0),
        .I3(lud_addr_piperun),
        .I4(lud_mem_way_d1),
        .O(\lud_mem_way_d1_reg[0] ));
  (* SOFT_HLUTNM = "soft_lutpair44" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    lud_reg_last_i_1
       (.I0(lud_mem_last),
        .I1(lud_mem_piperun),
        .I2(\lookup_read_data_info[0,0][Last] ),
        .O(lud_reg_last_reg));
  (* SOFT_HLUTNM = "soft_lutpair44" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \lud_reg_port_num[0]_i_1 
       (.I0(\lud_mem_port_one_hot_reg[1] ),
        .I1(lud_mem_piperun),
        .I2(\lud_reg_port_num_reg[0]_0 ),
        .O(\lud_reg_port_num_reg[0] ));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module design_1_system_cache_0_0_carry_and_n_148
   (lud_step_offset,
    lud_step_delayed_restart_reg,
    S,
    lookup_data_en_ii_2,
    Q,
    lud_step_delayed_restart,
    lud_addr_pipeline_full_reg,
    lu_mem_protect_conflict_reg,
    lud_mem_already_used_reg,
    lopt,
    lopt_1,
    lopt_2);
  output lud_step_offset;
  output lud_step_delayed_restart_reg;
  input S;
  input lookup_data_en_ii_2;
  input Q;
  input lud_step_delayed_restart;
  input lud_addr_pipeline_full_reg;
  input lu_mem_protect_conflict_reg;
  input lud_mem_already_used_reg;
  output lopt;
  input lopt_1;
  input lopt_2;

  wire Q;
  wire S;
  wire lookup_data_en_ii_2;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire lopt_3;
  wire lu_mem_protect_conflict_reg;
  wire lud_addr_pipeline_full_reg;
  wire lud_mem_already_used_reg;
  wire lud_step_delayed_restart;
  wire lud_step_delayed_restart_reg;
  wire lud_step_offset;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = lopt_2;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(lookup_data_en_ii_2),
        .CO({\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED [3:2],\^lopt_1 ,lud_step_offset}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED [3:2],\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED [3:2],lopt_3,S}));
  LUT6 #(
    .INIT(64'h1010101011101010)) 
    lud_step_delayed_restart_i_1
       (.I0(Q),
        .I1(lud_step_offset),
        .I2(lud_step_delayed_restart),
        .I3(lud_addr_pipeline_full_reg),
        .I4(lu_mem_protect_conflict_reg),
        .I5(lud_mem_already_used_reg),
        .O(lud_step_delayed_restart_reg));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module design_1_system_cache_0_0_carry_and_n_150
   (lu_check_piperun_pre2,
    lu_check_wr_already_pushed_reg,
    lu_check_piperun_pre1,
    lopt,
    lopt_1);
  output lu_check_piperun_pre2;
  input lu_check_wr_already_pushed_reg;
  input lu_check_piperun_pre1;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire lu_check_piperun_pre1;
  wire lu_check_piperun_pre2;
  wire lu_check_wr_already_pushed_reg;

  assign lopt_1 = \<const0> ;
  assign lu_check_piperun_pre2 = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module design_1_system_cache_0_0_carry_and_n_151
   (lu_check_piperun,
    update_reused_tag_reg,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ,
    lu_check_piperun_pre2,
    Q,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_3 ,
    \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ,
    \lru_check_next_way_i_reg[0] ,
    update_reused_tag,
    \lu_check_info_reg[Allocate] ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_4 ,
    update_piperun,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_5 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_6 ,
    \write_req_info[0][Internal] ,
    \lu_check_info_reg[KillHit] ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_7 ,
    \lu_check_info_reg[KillHit]_0 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output lu_check_piperun;
  output update_reused_tag_reg;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ;
  input lu_check_piperun_pre2;
  input [0:0]Q;
  input [0:0]\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_3 ;
  input \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ;
  input \lru_check_next_way_i_reg[0] ;
  input update_reused_tag;
  input \lu_check_info_reg[Allocate] ;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_4 ;
  input update_piperun;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_5 ;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_6 ;
  input \write_req_info[0][Internal] ;
  input \lu_check_info_reg[KillHit] ;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_7 ;
  input \lu_check_info_reg[KillHit]_0 ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire [0:0]Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ;
  wire [0:0]\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_3 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_4 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_5 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_6 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_7 ;
  wire \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire \lru_check_next_way_i_reg[0] ;
  wire \lu_check_info_reg[Allocate] ;
  wire \lu_check_info_reg[KillHit] ;
  wire \lu_check_info_reg[KillHit]_0 ;
  wire lu_check_piperun;
  wire lu_check_piperun_pre2;
  wire update_piperun;
  wire update_reused_tag;
  wire update_reused_tag_i_2_n_0;
  wire update_reused_tag_reg;
  wire \write_req_info[0][Internal] ;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  LUT4 #(
    .INIT(16'hFF10)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_1__1 
       (.I0(lu_check_piperun),
        .I1(update_piperun),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_5 ),
        .I3(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_6 ),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ));
  (* SOFT_HLUTNM = "soft_lutpair45" *) 
  LUT4 #(
    .INIT(16'hFF10)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_1__3 
       (.I0(lu_check_piperun),
        .I1(update_piperun),
        .I2(\write_req_info[0][Internal] ),
        .I3(\lu_check_info_reg[KillHit] ),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ));
  LUT4 #(
    .INIT(16'h10FF)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_1__4 
       (.I0(lu_check_piperun),
        .I1(update_piperun),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_7 ),
        .I3(\lu_check_info_reg[KillHit]_0 ),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ));
  (* SOFT_HLUTNM = "soft_lutpair45" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_3__2 
       (.I0(lu_check_piperun),
        .I1(update_piperun),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(lu_check_piperun_pre2),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,lu_check_piperun}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,1'b1}));
  LUT6 #(
    .INIT(64'h008000AAAAAAAAAA)) 
    update_reused_tag_i_1
       (.I0(update_reused_tag_i_2_n_0),
        .I1(Q),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_3 ),
        .I3(\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ),
        .I4(\lru_check_next_way_i_reg[0] ),
        .I5(lu_check_piperun),
        .O(update_reused_tag_reg));
  LUT4 #(
    .INIT(16'h00E2)) 
    update_reused_tag_i_2
       (.I0(update_reused_tag),
        .I1(lu_check_piperun),
        .I2(\lu_check_info_reg[Allocate] ),
        .I3(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_4 ),
        .O(update_reused_tag_i_2_n_0));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module design_1_system_cache_0_0_carry_and_n_157
   (lookup_io_stall_carry_no_wait,
    lookup_io_stall_carry,
    lu_check_wait_for_update,
    lopt,
    lopt_1,
    lopt_2);
  output lookup_io_stall_carry_no_wait;
  input lookup_io_stall_carry;
  input lu_check_wait_for_update;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire lookup_io_stall_carry;
  wire lookup_io_stall_carry_no_wait;
  wire lu_check_wait_for_update;
  wire lud_step_want_check_step3;

  assign lookup_io_stall_carry_no_wait = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = lud_step_want_check_step3;
  GND GND
       (.G(\<const0> ));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.MUXCY_I_i_1__62 
       (.I0(lu_check_wait_for_update),
        .O(lud_step_want_check_step3));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module design_1_system_cache_0_0_carry_and_n_158
   (lookup_io_stall_hit_carry_no_last,
    S,
    Carry_OUT,
    lopt,
    lopt_1);
  output lookup_io_stall_hit_carry_no_last;
  input S;
  input Carry_OUT;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire Carry_OUT;
  wire S;
  wire lookup_io_stall_hit_carry_no_last;

  assign lookup_io_stall_hit_carry_no_last = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module design_1_system_cache_0_0_carry_and_n_160
   (lookup_io_stall_valid,
    lookup_io_stall_pre_valid,
    \lu_check_info_reg[KillHit] ,
    lopt,
    lopt_1,
    lopt_2);
  output lookup_io_stall_valid;
  input lookup_io_stall_pre_valid;
  input \lu_check_info_reg[KillHit] ;
  output lopt;
  input lopt_1;
  input lopt_2;

  wire \Using_FPGA.MUXCY_I_i_1__133_n_0 ;
  wire lookup_io_stall_pre_valid;
  wire lookup_io_stall_valid;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire lopt_3;
  wire \lu_check_info_reg[KillHit] ;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = lopt_2;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(lookup_io_stall_pre_valid),
        .CO({\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED [3:2],\^lopt_1 ,lookup_io_stall_valid}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED [3:2],\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED [3:2],lopt_3,\Using_FPGA.MUXCY_I_i_1__133_n_0 }));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.MUXCY_I_i_1__133 
       (.I0(\lu_check_info_reg[KillHit] ),
        .O(\Using_FPGA.MUXCY_I_i_1__133_n_0 ));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module design_1_system_cache_0_0_carry_and_n_166
   (Carry_IN,
    lu_ds_last_beat,
    lud_write_hit_done_reg,
    lu_check_wait_for_update,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_IN;
  input lu_ds_last_beat;
  input lud_write_hit_done_reg;
  input lu_check_wait_for_update;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire Carry_IN;
  wire S;
  wire lu_check_wait_for_update;
  wire lu_ds_last_beat;
  wire lud_write_hit_done_reg;

  assign Carry_IN = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = S;
  GND GND
       (.G(\<const0> ));
  LUT2 #(
    .INIT(4'h1)) 
    \Using_FPGA.MUXCY_I_i_1__94 
       (.I0(lud_write_hit_done_reg),
        .I1(lu_check_wait_for_update),
        .O(S));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module design_1_system_cache_0_0_carry_and_n_169
   (Carry_IN,
    lu_ds_last_beat_valid_hit,
    \lu_check_info_reg[KillHit] ,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_IN;
  input lu_ds_last_beat_valid_hit;
  input \lu_check_info_reg[KillHit] ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire Carry_IN;
  wire lookup_hit0;
  wire \lu_check_info_reg[KillHit] ;
  wire lu_ds_last_beat_valid_hit;

  assign Carry_IN = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = lookup_hit0;
  GND GND
       (.G(\<const0> ));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.MUXCY_I_i_1__60 
       (.I0(\lu_check_info_reg[KillHit] ),
        .O(lookup_hit0));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module design_1_system_cache_0_0_carry_and_n_175
   (lookup_hit_carry,
    lookup_raw_hit_carry2,
    lopt,
    lopt_1,
    lopt_2);
  output lookup_hit_carry;
  input lookup_raw_hit_carry2;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire lookup_hit_carry;
  wire lookup_raw_hit_carry2;

  assign lookup_hit_carry = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module design_1_system_cache_0_0_carry_and_n_179
   (\lu_mem_info_reg[Port_Num][0] ,
    lu_mem_release_lock_hold,
    lookup_restart_mem_done_reg,
    lu_fetch_piperun_pre1,
    Q,
    lopt,
    lopt_1);
  output \lu_mem_info_reg[Port_Num][0] ;
  output lu_mem_release_lock_hold;
  input lookup_restart_mem_done_reg;
  input lu_fetch_piperun_pre1;
  input Q;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire Q;
  wire lookup_restart_mem_done_reg;
  wire lu_fetch_piperun_pre1;
  wire \lu_mem_info_reg[Port_Num][0] ;
  wire lu_mem_release_lock_hold;

  assign lopt_1 = \<const0> ;
  assign \lu_mem_info_reg[Port_Num][0]  = lopt;
  GND GND
       (.G(\<const0> ));
  LUT2 #(
    .INIT(4'hE)) 
    \lu_mem_removed_way_hold[1]_i_1 
       (.I0(Q),
        .I1(\lu_mem_info_reg[Port_Num][0] ),
        .O(lu_mem_release_lock_hold));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module design_1_system_cache_0_0_carry_and_n_18
   (r_pop_safe_i,
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[1] ,
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[2] ,
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3] ,
    p_3_out__2,
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0] ,
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0]_0 ,
    r_pop,
    rip_pop,
    ri_exist,
    r_next_fifo_addr__7,
    Q,
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst ,
    \Use_Rd_Ctrl_Pipeline.ri_hit_reg ,
    r_miss_full_fifo_addr,
    \Use_Reg_Ctrl.queue_exist_i_reg ,
    r_miss_fifo_empty,
    I4,
    r_miss_push,
    r_miss_fifo_almost_empty,
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0]_1 ,
    lopt,
    lopt_1,
    lopt_2);
  output r_pop_safe_i;
  output \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[1] ;
  output \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[2] ;
  output \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3] ;
  output p_3_out__2;
  output \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0] ;
  output \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0]_0 ;
  input r_pop;
  input rip_pop;
  input ri_exist;
  input [2:0]r_next_fifo_addr__7;
  input [3:0]Q;
  input \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst ;
  input \Use_Rd_Ctrl_Pipeline.ri_hit_reg ;
  input [1:0]r_miss_full_fifo_addr;
  input \Use_Reg_Ctrl.queue_exist_i_reg ;
  input r_miss_fifo_empty;
  input I4;
  input r_miss_push;
  input r_miss_fifo_almost_empty;
  input \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0]_1 ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire I4;
  wire [3:0]Q;
  wire S;
  wire \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst ;
  wire \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[0]_i_2_n_0 ;
  wire \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[1]_i_2_n_0 ;
  wire \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0] ;
  wire \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0]_0 ;
  wire \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0]_1 ;
  wire \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[1] ;
  wire \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[2] ;
  wire \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3] ;
  wire \Use_Rd_Ctrl_Pipeline.ri_hit_reg ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg ;
  wire p_3_out__2;
  wire r_miss_fifo_almost_empty;
  wire r_miss_fifo_empty;
  wire [1:0]r_miss_full_fifo_addr;
  wire r_miss_push;
  wire [2:0]r_next_fifo_addr__7;
  wire r_pop;
  wire r_pop_safe_i;
  wire ri_exist;
  wire rip_pop;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = S;
  assign r_pop_safe_i = lopt;
  GND GND
       (.G(\<const0> ));
  LUT5 #(
    .INIT(32'hAAAAEFFF)) 
    \Use_FPGA_2.S_AXI_RVALID_i_4 
       (.I0(r_miss_push),
        .I1(\Use_Rd_Ctrl_Pipeline.ri_hit_reg ),
        .I2(r_pop_safe_i),
        .I3(r_miss_fifo_almost_empty),
        .I4(r_miss_fifo_empty),
        .O(p_3_out__2));
  LUT4 #(
    .INIT(16'hC5CC)) 
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[0]_i_1 
       (.I0(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0]_1 ),
        .I1(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[0]_i_2_n_0 ),
        .I2(rip_pop),
        .I3(ri_exist),
        .O(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0]_0 ));
  LUT6 #(
    .INIT(64'h5FCFC5CF50C0C5C0)) 
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[0]_i_2 
       (.I0(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0]_1 ),
        .I1(Q[0]),
        .I2(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst ),
        .I3(r_pop_safe_i),
        .I4(\Use_Rd_Ctrl_Pipeline.ri_hit_reg ),
        .I5(r_miss_full_fifo_addr[0]),
        .O(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[0]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair129" *) 
  LUT4 #(
    .INIT(16'hBA8A)) 
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[1]_i_1 
       (.I0(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[1]_i_2_n_0 ),
        .I1(rip_pop),
        .I2(ri_exist),
        .I3(r_next_fifo_addr__7[0]),
        .O(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[1] ));
  LUT6 #(
    .INIT(64'hF3BBB8BBC088B888)) 
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[1]_i_2 
       (.I0(Q[1]),
        .I1(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst ),
        .I2(r_next_fifo_addr__7[0]),
        .I3(r_pop_safe_i),
        .I4(\Use_Rd_Ctrl_Pipeline.ri_hit_reg ),
        .I5(r_miss_full_fifo_addr[1]),
        .O(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFBBBFFFF38BB0000)) 
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[2]_i_1 
       (.I0(Q[2]),
        .I1(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst ),
        .I2(\Use_Rd_Ctrl_Pipeline.ri_hit_reg ),
        .I3(r_pop_safe_i),
        .I4(\Use_Reg_Ctrl.queue_exist_i_reg ),
        .I5(r_next_fifo_addr__7[1]),
        .O(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[2] ));
  (* SOFT_HLUTNM = "soft_lutpair129" *) 
  LUT3 #(
    .INIT(8'hEF)) 
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[3]_i_1 
       (.I0(r_pop_safe_i),
        .I1(rip_pop),
        .I2(ri_exist),
        .O(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0] ));
  LUT6 #(
    .INIT(64'hFBBBFFFF38BB0000)) 
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[3]_i_2 
       (.I0(Q[3]),
        .I1(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst ),
        .I2(\Use_Rd_Ctrl_Pipeline.ri_hit_reg ),
        .I3(r_pop_safe_i),
        .I4(\Use_Reg_Ctrl.queue_exist_i_reg ),
        .I5(r_next_fifo_addr__7[2]),
        .O(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3] ));
  LUT3 #(
    .INIT(8'h1D)) 
    \Using_FPGA.MUXCY_I_i_1__2 
       (.I0(r_miss_fifo_empty),
        .I1(\Use_Rd_Ctrl_Pipeline.ri_hit_reg ),
        .I2(I4),
        .O(S));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module design_1_system_cache_0_0_carry_and_n_188
   (\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ,
    lud_write_hit_done,
    p_162_in,
    S_2,
    lu_mem_piperun_pre1,
    Q,
    lu_mem_valid_reg,
    \lu_mem_info_reg[Wr] ,
    lopt,
    lopt_1);
  output \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ;
  output lud_write_hit_done;
  output p_162_in;
  input S_2;
  input lu_mem_piperun_pre1;
  input Q;
  input lu_mem_valid_reg;
  input \lu_mem_info_reg[Wr] ;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire Q;
  wire S_2;
  wire \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ;
  wire \lu_mem_info_reg[Wr] ;
  wire lu_mem_piperun_pre1;
  wire lu_mem_valid_reg;
  wire lud_write_hit_done;
  wire p_162_in;

  assign \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst  = lopt;
  assign lopt_1 = \<const0> ;
  GND GND
       (.G(\<const0> ));
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.MUXCY_I_i_3__3 
       (.I0(lu_mem_valid_reg),
        .I1(\lu_mem_info_reg[Wr] ),
        .O(p_162_in));
  LUT2 #(
    .INIT(4'hE)) 
    lookup_restart_mem_done_i_1
       (.I0(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I1(Q),
        .O(lud_write_hit_done));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module design_1_system_cache_0_0_carry_and_n_204
   (lookup_miss_dirty_no_clean,
    lookup_miss_dirty,
    \lu_check_info_reg[KillHit] ,
    lopt,
    lopt_1,
    lopt_2);
  output lookup_miss_dirty_no_clean;
  input lookup_miss_dirty;
  input \lu_check_info_reg[KillHit] ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \Using_FPGA.MUXCY_I_i_1__131_n_0 ;
  wire lookup_miss_dirty;
  wire lookup_miss_dirty_no_clean;
  wire \lu_check_info_reg[KillHit] ;

  assign lookup_miss_dirty_no_clean = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \Using_FPGA.MUXCY_I_i_1__131_n_0 ;
  GND GND
       (.G(\<const0> ));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.MUXCY_I_i_1__131 
       (.I0(\lu_check_info_reg[KillHit] ),
        .O(\Using_FPGA.MUXCY_I_i_1__131_n_0 ));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module design_1_system_cache_0_0_carry_and_n_206
   (lookup_push_write_miss_pre,
    lookup_md_wm_whne_valid,
    lu_check_wait_for_update,
    lopt,
    lopt_1,
    lopt_2);
  output lookup_push_write_miss_pre;
  input lookup_md_wm_whne_valid;
  input lu_check_wait_for_update;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \Using_FPGA.MUXCY_I_i_1__132_n_0 ;
  wire lookup_md_wm_whne_valid;
  wire lookup_push_write_miss_pre;
  wire lu_check_wait_for_update;

  assign lookup_push_write_miss_pre = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \Using_FPGA.MUXCY_I_i_1__132_n_0 ;
  GND GND
       (.G(\<const0> ));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.MUXCY_I_i_1__132 
       (.I0(lu_check_wait_for_update),
        .O(\Using_FPGA.MUXCY_I_i_1__132_n_0 ));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module design_1_system_cache_0_0_carry_and_n_21
   (queue_pop_srl,
    \Use_FPGA.Use_Normal_Line.Line_Fit_Inst ,
    \Use_FPGA.Empty_Inst ,
    \Use_FPGA.Almost_Empty_Inst ,
    \Use_FPGA.Full_Inst ,
    D,
    rip_refresh_reg,
    \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst ,
    \Gen_Port_Ready[0].Use_Slow_Port.Rd_FF_Inst ,
    \Use_FPGA.Empty_Inst_0 ,
    \Use_FPGA.Use_Normal_Line.Line_Fit_Inst_0 ,
    \Use_FPGA.Almost_Empty_Inst_0 ,
    \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst ,
    \Use_FPGA.Almost_Full_Inst ,
    \Use_FPGA.Full_Inst_0 ,
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst ,
    lopt,
    lopt_1,
    lopt_2);
  output queue_pop_srl;
  output \Use_FPGA.Use_Normal_Line.Line_Fit_Inst ;
  output \Use_FPGA.Empty_Inst ;
  output \Use_FPGA.Almost_Empty_Inst ;
  output \Use_FPGA.Full_Inst ;
  output D;
  input rip_refresh_reg;
  input \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst ;
  input \Gen_Port_Ready[0].Use_Slow_Port.Rd_FF_Inst ;
  input \Use_FPGA.Empty_Inst_0 ;
  input \Use_FPGA.Use_Normal_Line.Line_Fit_Inst_0 ;
  input \Use_FPGA.Almost_Empty_Inst_0 ;
  input \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst ;
  input \Use_FPGA.Almost_Full_Inst ;
  input \Use_FPGA.Full_Inst_0 ;
  input \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire D;
  wire \Gen_Port_Ready[0].Use_Slow_Port.Rd_FF_Inst ;
  wire \Use_FPGA.Almost_Empty_Inst ;
  wire \Use_FPGA.Almost_Empty_Inst_0 ;
  wire \Use_FPGA.Almost_Full_Inst ;
  wire \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst ;
  wire \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst ;
  wire \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst ;
  wire \Use_FPGA.Empty_Inst ;
  wire \Use_FPGA.Empty_Inst_0 ;
  wire \Use_FPGA.Full_Inst ;
  wire \Use_FPGA.Full_Inst_0 ;
  wire \Use_FPGA.Use_Normal_Line.Line_Fit_Inst ;
  wire \Use_FPGA.Use_Normal_Line.Line_Fit_Inst_0 ;
  wire queue_pop_srl;
  wire refresh_counter1;
  wire rip_refresh_reg;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = refresh_counter1;
  assign queue_pop_srl = lopt;
  GND GND
       (.G(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair124" *) 
  LUT5 #(
    .INIT(32'hFEF3C2C0)) 
    \Use_FPGA.Almost_Empty_Inst_i_1__2 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst ),
        .I1(\Gen_Port_Ready[0].Use_Slow_Port.Rd_FF_Inst ),
        .I2(\Use_FPGA.Empty_Inst_0 ),
        .I3(queue_pop_srl),
        .I4(\Use_FPGA.Almost_Empty_Inst_0 ),
        .O(\Use_FPGA.Almost_Empty_Inst ));
  LUT6 #(
    .INIT(64'hAFFCAFAFA00CA0A0)) 
    \Use_FPGA.Almost_Full_Inst_i_1__1 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst ),
        .I1(\Use_FPGA.Full_Inst_0 ),
        .I2(\Gen_Port_Ready[0].Use_Slow_Port.Rd_FF_Inst ),
        .I3(\Use_FPGA.Empty_Inst_0 ),
        .I4(queue_pop_srl),
        .I5(\Use_FPGA.Almost_Full_Inst ),
        .O(D));
  (* SOFT_HLUTNM = "soft_lutpair124" *) 
  LUT4 #(
    .INIT(16'h3230)) 
    \Use_FPGA.Empty_Inst_i_1__2 
       (.I0(\Use_FPGA.Almost_Empty_Inst_0 ),
        .I1(\Gen_Port_Ready[0].Use_Slow_Port.Rd_FF_Inst ),
        .I2(\Use_FPGA.Empty_Inst_0 ),
        .I3(queue_pop_srl),
        .O(\Use_FPGA.Empty_Inst ));
  LUT5 #(
    .INIT(32'hBCBB8088)) 
    \Use_FPGA.Full_Inst_i_1__1 
       (.I0(\Use_FPGA.Almost_Full_Inst ),
        .I1(\Gen_Port_Ready[0].Use_Slow_Port.Rd_FF_Inst ),
        .I2(\Use_FPGA.Empty_Inst_0 ),
        .I3(queue_pop_srl),
        .I4(\Use_FPGA.Full_Inst_0 ),
        .O(\Use_FPGA.Full_Inst ));
  LUT5 #(
    .INIT(32'hBEBB8288)) 
    \Use_FPGA.Use_Normal_Line.Line_Fit_Inst_i_1 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst ),
        .I1(\Gen_Port_Ready[0].Use_Slow_Port.Rd_FF_Inst ),
        .I2(\Use_FPGA.Empty_Inst_0 ),
        .I3(queue_pop_srl),
        .I4(\Use_FPGA.Use_Normal_Line.Line_Fit_Inst_0 ),
        .O(\Use_FPGA.Use_Normal_Line.Line_Fit_Inst ));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.MUXCY_I_i_1__3 
       (.I0(\Use_FPGA.Empty_Inst_0 ),
        .O(refresh_counter1));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module design_1_system_cache_0_0_carry_and_n_220
   (carry_1,
    protected_bit,
    lu_mem_protect_conflict_d1,
    \lu_check_protected_reg[0] ,
    lu_check_protected_way,
    lopt,
    lopt_1,
    lopt_2);
  output carry_1;
  input protected_bit;
  input lu_mem_protect_conflict_d1;
  input [0:0]\lu_check_protected_reg[0] ;
  input lu_check_protected_way;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire S;
  wire carry_1;
  wire [0:0]\lu_check_protected_reg[0] ;
  wire lu_check_protected_way;
  wire lu_mem_protect_conflict_d1;
  wire protected_bit;

  assign carry_1 = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = S;
  GND GND
       (.G(\<const0> ));
  LUT3 #(
    .INIT(8'hFD)) 
    \Using_FPGA.MUXCY_I_i_1__101 
       (.I0(lu_mem_protect_conflict_d1),
        .I1(\lu_check_protected_reg[0] ),
        .I2(lu_check_protected_way),
        .O(S));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module design_1_system_cache_0_0_carry_and_n_221
   (filtered_protection_bit,
    carry_1,
    lu_mem_protect_conflict_d1,
    lu_check_protected_way,
    \lu_check_protected_reg[1] ,
    lopt,
    lopt_1,
    lopt_2);
  output filtered_protection_bit;
  input carry_1;
  input lu_mem_protect_conflict_d1;
  input lu_check_protected_way;
  input [0:0]\lu_check_protected_reg[1] ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire S;
  wire carry_1;
  wire filtered_protection_bit;
  wire [0:0]\lu_check_protected_reg[1] ;
  wire lu_check_protected_way;
  wire lu_mem_protect_conflict_d1;

  assign filtered_protection_bit = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = S;
  GND GND
       (.G(\<const0> ));
  LUT3 #(
    .INIT(8'hF7)) 
    \Using_FPGA.MUXCY_I_i_1__102 
       (.I0(lu_mem_protect_conflict_d1),
        .I1(lu_check_protected_way),
        .I2(\lu_check_protected_reg[1] ),
        .O(S));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module design_1_system_cache_0_0_carry_and_n_237
   (carry_1,
    lookup_write_hit_carry,
    \lu_check_info_reg[Port_Num][0] ,
    update_write_miss_busy,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output carry_1;
  input lookup_write_hit_carry;
  input \lu_check_info_reg[Port_Num][0] ;
  input [0:0]update_write_miss_busy;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire S;
  wire carry_1;
  wire lookup_write_hit_carry;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire \lu_check_info_reg[Port_Num][0] ;
  wire [0:0]update_write_miss_busy;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(lookup_write_hit_carry),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,carry_1}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,S}));
  LUT2 #(
    .INIT(4'hB)) 
    \Using_FPGA.MUXCY_I_i_1__84 
       (.I0(\lu_check_info_reg[Port_Num][0] ),
        .I1(update_write_miss_busy),
        .O(S));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module design_1_system_cache_0_0_carry_and_n_238
   (Carry_In,
    carry_1,
    \lu_check_info_reg[Port_Num][0] ,
    update_write_miss_busy,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_In;
  input carry_1;
  input \lu_check_info_reg[Port_Num][0] ;
  input [0:0]update_write_miss_busy;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire Carry_In;
  wire S;
  wire carry_1;
  wire \lu_check_info_reg[Port_Num][0] ;
  wire [0:0]update_write_miss_busy;

  assign Carry_In = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = S;
  GND GND
       (.G(\<const0> ));
  LUT2 #(
    .INIT(4'h7)) 
    \Using_FPGA.MUXCY_I_i_1__87 
       (.I0(\lu_check_info_reg[Port_Num][0] ),
        .I1(update_write_miss_busy),
        .O(S));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module design_1_system_cache_0_0_carry_and_n_25
   (idle_carry_3,
    rd_port_multi_part_1,
    \rd_port_access[1][Valid] ,
    S1_AXI_AWVALID,
    queue_full_1,
    any_port_forbid_1,
    arb_token_1,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7);
  output idle_carry_3;
  input rd_port_multi_part_1;
  input \rd_port_access[1][Valid] ;
  input S1_AXI_AWVALID;
  input queue_full_1;
  input any_port_forbid_1;
  input arb_token_1;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  output lopt_5;
  input lopt_6;
  input lopt_7;

  wire S1_AXI_AWVALID;
  wire \Using_FPGA.MUXCY_I_i_1__147_n_0 ;
  wire any_port_forbid_1;
  wire arb_token_1;
  wire idle_carry_3;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire lopt_8;
  wire queue_full_1;
  wire \rd_port_access[1][Valid] ;
  wire rd_port_multi_part_1;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_7  = lopt_6;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_5 = \^lopt_6 ;
  assign lopt_8 = lopt_7;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_6 ,\^lopt_4 ,\^lopt_1 ,idle_carry_3}),
        .CYINIT(1'b1),
        .DI({\^lopt_7 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_8,\^lopt_5 ,\^lopt_3 ,\Using_FPGA.MUXCY_I_i_1__147_n_0 }));
  LUT6 #(
    .INIT(64'h7777330377777777)) 
    \Using_FPGA.MUXCY_I_i_1__147 
       (.I0(rd_port_multi_part_1),
        .I1(\rd_port_access[1][Valid] ),
        .I2(S1_AXI_AWVALID),
        .I3(queue_full_1),
        .I4(any_port_forbid_1),
        .I5(arb_token_1),
        .O(\Using_FPGA.MUXCY_I_i_1__147_n_0 ));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module design_1_system_cache_0_0_carry_and_n_282
   (Carry_IN,
    Carry_OUT,
    \update_info_reg[Evict] ,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_IN;
  input Carry_OUT;
  input \update_info_reg[Evict] ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire Carry_IN;
  wire Carry_OUT;
  wire S;
  wire \update_info_reg[Evict] ;

  assign Carry_IN = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = S;
  GND GND
       (.G(\<const0> ));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.MUXCY_I_i_1__153 
       (.I0(\update_info_reg[Evict] ),
        .O(S));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module design_1_system_cache_0_0_carry_and_n_32
   (idle_carry_1,
    any_port_forbid_0,
    \arb_prohibit_read_reg[0] ,
    S0_AXI_ARVALID,
    read_req_ready,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7);
  output idle_carry_1;
  input any_port_forbid_0;
  input \arb_prohibit_read_reg[0] ;
  input S0_AXI_ARVALID;
  input read_req_ready;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;

  wire S0_AXI_ARVALID;
  wire \Using_FPGA.MUXCY_I_i_1__17_n_0 ;
  wire any_port_forbid_0;
  wire \arb_prohibit_read_reg[0] ;
  wire idle_carry_1;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire lopt_8;
  wire read_req_ready;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_8 = lopt_7;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,idle_carry_1}),
        .CYINIT(1'b1),
        .DI({lopt_8,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_8,\^lopt_6 ,\^lopt_3 ,\Using_FPGA.MUXCY_I_i_1__17_n_0 }));
  LUT4 #(
    .INIT(16'hEFFF)) 
    \Using_FPGA.MUXCY_I_i_1__17 
       (.I0(any_port_forbid_0),
        .I1(\arb_prohibit_read_reg[0] ),
        .I2(S0_AXI_ARVALID),
        .I3(read_req_ready),
        .O(\Using_FPGA.MUXCY_I_i_1__17_n_0 ));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module design_1_system_cache_0_0_carry_and_n_33
   (idle_carry_2,
    idle_carry_1,
    \Gen_Port_Ready[0].Use_Slow_Port.Wr_FF_Inst ,
    rd_port_multi_part_0,
    \rd_port_access[0][Valid] ,
    any_port_forbid_0,
    S0_AXI_AWVALID,
    queue_full,
    lopt,
    lopt_1,
    lopt_2);
  output idle_carry_2;
  input idle_carry_1;
  input \Gen_Port_Ready[0].Use_Slow_Port.Wr_FF_Inst ;
  input rd_port_multi_part_0;
  input \rd_port_access[0][Valid] ;
  input any_port_forbid_0;
  input S0_AXI_AWVALID;
  input queue_full;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \Gen_Port_Ready[0].Use_Slow_Port.Wr_FF_Inst ;
  wire S;
  wire S0_AXI_AWVALID;
  wire any_port_forbid_0;
  wire idle_carry_1;
  wire idle_carry_2;
  wire queue_full;
  wire \rd_port_access[0][Valid] ;
  wire rd_port_multi_part_0;

  assign idle_carry_2 = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = S;
  GND GND
       (.G(\<const0> ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFEFFFF)) 
    \Using_FPGA.MUXCY_I_i_1__0 
       (.I0(\Gen_Port_Ready[0].Use_Slow_Port.Wr_FF_Inst ),
        .I1(rd_port_multi_part_0),
        .I2(\rd_port_access[0][Valid] ),
        .I3(any_port_forbid_0),
        .I4(S0_AXI_AWVALID),
        .I5(queue_full),
        .O(S));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module design_1_system_cache_0_0_carry_and_n_4
   (queue_pop_srl,
    \Use_FPGA.Use_Normal_Line.Line_Fit_Inst ,
    \Use_FPGA.Empty_Inst ,
    \Use_FPGA.Almost_Empty_Inst ,
    \Use_FPGA.Full_Inst ,
    D,
    rip_refresh_reg,
    \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst ,
    \Gen_Port_Ready[1].Use_Slow_Port.Rd_FF_Inst ,
    \Use_FPGA.Empty_Inst_0 ,
    \Use_FPGA.Use_Normal_Line.Line_Fit_Inst_0 ,
    \Use_FPGA.Almost_Empty_Inst_0 ,
    \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst ,
    \Use_FPGA.Almost_Full_Inst ,
    \Use_FPGA.Full_Inst_0 ,
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst ,
    lopt,
    lopt_1,
    lopt_2);
  output queue_pop_srl;
  output \Use_FPGA.Use_Normal_Line.Line_Fit_Inst ;
  output \Use_FPGA.Empty_Inst ;
  output \Use_FPGA.Almost_Empty_Inst ;
  output \Use_FPGA.Full_Inst ;
  output D;
  input rip_refresh_reg;
  input \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst ;
  input \Gen_Port_Ready[1].Use_Slow_Port.Rd_FF_Inst ;
  input \Use_FPGA.Empty_Inst_0 ;
  input \Use_FPGA.Use_Normal_Line.Line_Fit_Inst_0 ;
  input \Use_FPGA.Almost_Empty_Inst_0 ;
  input \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst ;
  input \Use_FPGA.Almost_Full_Inst ;
  input \Use_FPGA.Full_Inst_0 ;
  input \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire D;
  wire \Gen_Port_Ready[1].Use_Slow_Port.Rd_FF_Inst ;
  wire \Use_FPGA.Almost_Empty_Inst ;
  wire \Use_FPGA.Almost_Empty_Inst_0 ;
  wire \Use_FPGA.Almost_Full_Inst ;
  wire \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst ;
  wire \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst ;
  wire \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst ;
  wire \Use_FPGA.Empty_Inst ;
  wire \Use_FPGA.Empty_Inst_0 ;
  wire \Use_FPGA.Full_Inst ;
  wire \Use_FPGA.Full_Inst_0 ;
  wire \Use_FPGA.Use_Normal_Line.Line_Fit_Inst ;
  wire \Use_FPGA.Use_Normal_Line.Line_Fit_Inst_0 ;
  wire queue_pop_srl;
  wire refresh_counter1;
  wire rip_refresh_reg;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = refresh_counter1;
  assign queue_pop_srl = lopt;
  GND GND
       (.G(\<const0> ));
  (* SOFT_HLUTNM = "soft_lutpair150" *) 
  LUT5 #(
    .INIT(32'hFEF3C2C0)) 
    \Use_FPGA.Almost_Empty_Inst_i_1__7 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst ),
        .I1(\Gen_Port_Ready[1].Use_Slow_Port.Rd_FF_Inst ),
        .I2(\Use_FPGA.Empty_Inst_0 ),
        .I3(queue_pop_srl),
        .I4(\Use_FPGA.Almost_Empty_Inst_0 ),
        .O(\Use_FPGA.Almost_Empty_Inst ));
  LUT6 #(
    .INIT(64'hAFFCAFAFA00CA0A0)) 
    \Use_FPGA.Almost_Full_Inst_i_1__5 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst ),
        .I1(\Use_FPGA.Full_Inst_0 ),
        .I2(\Gen_Port_Ready[1].Use_Slow_Port.Rd_FF_Inst ),
        .I3(\Use_FPGA.Empty_Inst_0 ),
        .I4(queue_pop_srl),
        .I5(\Use_FPGA.Almost_Full_Inst ),
        .O(D));
  (* SOFT_HLUTNM = "soft_lutpair150" *) 
  LUT4 #(
    .INIT(16'h3230)) 
    \Use_FPGA.Empty_Inst_i_1__7 
       (.I0(\Use_FPGA.Almost_Empty_Inst_0 ),
        .I1(\Gen_Port_Ready[1].Use_Slow_Port.Rd_FF_Inst ),
        .I2(\Use_FPGA.Empty_Inst_0 ),
        .I3(queue_pop_srl),
        .O(\Use_FPGA.Empty_Inst ));
  LUT5 #(
    .INIT(32'hBCBB8088)) 
    \Use_FPGA.Full_Inst_i_1__5 
       (.I0(\Use_FPGA.Almost_Full_Inst ),
        .I1(\Gen_Port_Ready[1].Use_Slow_Port.Rd_FF_Inst ),
        .I2(\Use_FPGA.Empty_Inst_0 ),
        .I3(queue_pop_srl),
        .I4(\Use_FPGA.Full_Inst_0 ),
        .O(\Use_FPGA.Full_Inst ));
  LUT5 #(
    .INIT(32'hBEBB8288)) 
    \Use_FPGA.Use_Normal_Line.Line_Fit_Inst_i_1__0 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst ),
        .I1(\Gen_Port_Ready[1].Use_Slow_Port.Rd_FF_Inst ),
        .I2(\Use_FPGA.Empty_Inst_0 ),
        .I3(queue_pop_srl),
        .I4(\Use_FPGA.Use_Normal_Line.Line_Fit_Inst_0 ),
        .O(\Use_FPGA.Use_Normal_Line.Line_Fit_Inst ));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.MUXCY_I_i_1__8 
       (.I0(\Use_FPGA.Empty_Inst_0 ),
        .O(refresh_counter1));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module design_1_system_cache_0_0_carry_and_n_41
   (access_piperun,
    lookup_piperun_post1,
    lopt,
    lopt_1,
    lopt_2);
  output access_piperun;
  input lookup_piperun_post1;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \<const1> ;
  wire access_piperun;
  wire lookup_piperun_post1;

  assign access_piperun = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module design_1_system_cache_0_0_carry_and_n_66
   (update_piperun,
    update_done_tag_write,
    update_piperun_pre1,
    Q,
    update_done_tag_write_reg,
    update_readback_available_reg,
    update_need_tag_write,
    update_valid,
    \Long_External_Burst.update_rb_pos_phase_reg ,
    update_read_miss_ongoing_reg,
    lopt,
    lopt_1,
    lopt_2);
  output update_piperun;
  output update_done_tag_write;
  input update_piperun_pre1;
  input Q;
  input update_done_tag_write_reg;
  input update_readback_available_reg;
  input update_need_tag_write;
  input update_valid;
  input \Long_External_Burst.update_rb_pos_phase_reg ;
  input update_read_miss_ongoing_reg;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire \Long_External_Burst.update_rb_pos_phase_reg ;
  wire Q;
  wire \Using_FPGA.MUXCY_I_i_1__151_n_0 ;
  wire update_done_tag_write;
  wire update_done_tag_write_reg;
  wire update_need_tag_write;
  wire update_piperun;
  wire update_piperun_pre1;
  wire update_read_miss_ongoing_reg;
  wire update_readback_available_reg;
  wire update_valid;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = \Using_FPGA.MUXCY_I_i_1__151_n_0 ;
  assign update_piperun = lopt;
  GND GND
       (.G(\<const0> ));
  LUT6 #(
    .INIT(64'h1000FFFFFFFFFFFF)) 
    \Using_FPGA.MUXCY_I_i_1__151 
       (.I0(update_done_tag_write_reg),
        .I1(update_readback_available_reg),
        .I2(update_need_tag_write),
        .I3(update_valid),
        .I4(\Long_External_Burst.update_rb_pos_phase_reg ),
        .I5(update_read_miss_ongoing_reg),
        .O(\Using_FPGA.MUXCY_I_i_1__151_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    update_done_tag_write_i_1
       (.I0(Q),
        .I1(update_piperun),
        .O(update_done_tag_write));
endmodule

(* ORIG_REF_NAME = "carry_and_n" *) 
module design_1_system_cache_0_0_carry_and_n_71
   (M0_AXI_RREADY,
    queue_pop129_out,
    queue_pop134_out,
    \Use_Reg_Ctrl.queue_exist_i_reg ,
    ud_rm_use_and_lock_safe,
    M0_AXI_RVALID,
    M0_AXI_RLAST,
    ri_evicted,
    Q,
    ri_exist,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5);
  output M0_AXI_RREADY;
  output queue_pop129_out;
  output queue_pop134_out;
  output \Use_Reg_Ctrl.queue_exist_i_reg ;
  input ud_rm_use_and_lock_safe;
  input M0_AXI_RVALID;
  input M0_AXI_RLAST;
  input ri_evicted;
  input Q;
  input ri_exist;
  output lopt;
  input lopt_1;
  output lopt_2;
  input lopt_3;
  input lopt_4;
  output lopt_5;

  wire M0_AXI_RLAST;
  wire M0_AXI_RREADY;
  wire M0_AXI_RVALID;
  wire Q;
  wire S;
  wire \Use_Reg_Ctrl.queue_exist_i_reg ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire lopt_6;
  wire queue_pop129_out;
  wire queue_pop134_out;
  wire ri_evicted;
  wire ri_exist;
  wire ud_rm_use_and_lock_safe;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_4  = lopt_3;
  assign \^lopt_5  = lopt_4;
  assign lopt = \^lopt_1 ;
  assign lopt_2 = \^lopt_3 ;
  assign lopt_5 = lopt_6;
  (* SOFT_HLUTNM = "soft_lutpair89" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst_i_1__3 
       (.I0(M0_AXI_RVALID),
        .I1(M0_AXI_RREADY),
        .I2(M0_AXI_RLAST),
        .I3(ri_evicted),
        .O(queue_pop129_out));
  LUT3 #(
    .INIT(8'h80)) 
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_1__1 
       (.I0(M0_AXI_RLAST),
        .I1(M0_AXI_RREADY),
        .I2(M0_AXI_RVALID),
        .O(queue_pop134_out));
  (* SOFT_HLUTNM = "soft_lutpair89" *) 
  LUT4 #(
    .INIT(16'h80FF)) 
    \Use_Reg_Ctrl.queue_exist_i_i_1__4 
       (.I0(M0_AXI_RVALID),
        .I1(M0_AXI_RREADY),
        .I2(M0_AXI_RLAST),
        .I3(ri_exist),
        .O(\Use_Reg_Ctrl.queue_exist_i_reg ));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(ud_rm_use_and_lock_safe),
        .CO({lopt_6,\^lopt_3 ,\^lopt_1 ,M0_AXI_RREADY}),
        .CYINIT(1'b0),
        .DI({\^lopt_4 ,\^lopt_4 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({\^lopt_5 ,\^lopt_5 ,M0_AXI_RVALID,S}));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.MUXCY_I_i_1__26 
       (.I0(Q),
        .O(S));
endmodule

(* ORIG_REF_NAME = "carry_compare" *) 
module design_1_system_cache_0_0_carry_compare
   (update_match_addr,
    \The_Compare[0].sel_reg ,
    update_need_tag_write_carry,
    A_0,
    \The_Compare[2].sel_reg ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6);
  output update_match_addr;
  input \The_Compare[0].sel_reg ;
  input update_need_tag_write_carry;
  input A_0;
  input \The_Compare[2].sel_reg ;
  input lopt;
  output lopt_1;
  input lopt_2;
  output lopt_3;
  output lopt_4;
  input lopt_5;
  input lopt_6;

  wire A_0;
  wire \The_Compare[0].sel_reg ;
  wire \The_Compare[2].sel_reg ;
  wire carry_1;
  wire carry_2;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire update_match_addr;
  wire update_need_tag_write_carry;

  design_1_system_cache_0_0_carry_and_84 \The_Compare[0].carry_and_I1 
       (.\The_Compare[0].sel_reg (\The_Compare[0].sel_reg ),
        .carry_1(carry_1),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .update_need_tag_write_carry(update_need_tag_write_carry));
  design_1_system_cache_0_0_carry_and_85 \The_Compare[1].carry_and_I1 
       (.A_0(A_0),
        .carry_1(carry_1),
        .carry_2(carry_2),
        .lopt(lopt_2),
        .lopt_1(lopt_3));
  design_1_system_cache_0_0_carry_and_86 \The_Compare[2].carry_and_I1 
       (.\The_Compare[2].sel_reg (\The_Compare[2].sel_reg ),
        .carry_2(carry_2),
        .lopt(lopt_4),
        .lopt_1(lopt_5),
        .lopt_2(lopt_6),
        .update_match_addr(update_match_addr));
endmodule

(* ORIG_REF_NAME = "carry_compare" *) 
module design_1_system_cache_0_0_carry_compare_154
   (lu_check_match_addr,
    \The_Compare[2].sel_reg ,
    D,
    Q,
    lopt,
    lopt_1,
    lopt_2);
  output lu_check_match_addr;
  input \The_Compare[2].sel_reg ;
  input [5:0]D;
  input [5:0]Q;
  output lopt;
  input lopt_1;
  input lopt_2;

  wire [5:0]D;
  wire [5:0]Q;
  wire \The_Compare[2].sel_reg ;
  wire carry_1;
  wire carry_2;
  wire \^lopt ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lu_check_match_addr;

  assign lopt = lopt_5;
  assign lopt_6 = lopt_1;
  assign lopt_7 = lopt_2;
  design_1_system_cache_0_0_carry_and_250 \The_Compare[0].carry_and_I1 
       (.D(D[2:0]),
        .Q(Q[2:0]),
        .carry_1(carry_1),
        .lopt(\^lopt ),
        .lopt_1(\^lopt_1 ),
        .lopt_2(\^lopt_2 ),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(\The_Compare[2].sel_reg ),
        .lopt_6(lopt_5),
        .lopt_7(lopt_6),
        .lopt_8(lopt_7));
  design_1_system_cache_0_0_carry_and_251 \The_Compare[1].carry_and_I1 
       (.D(D[5:3]),
        .Q(Q[5:3]),
        .carry_1(carry_1),
        .carry_2(carry_2),
        .lopt(\^lopt ),
        .lopt_1(\^lopt_1 ),
        .lopt_2(\^lopt_2 ));
  design_1_system_cache_0_0_carry_and_252 \The_Compare[2].carry_and_I1 
       (.\The_Compare[2].sel_reg (\The_Compare[2].sel_reg ),
        .carry_2(carry_2),
        .lopt(lopt_3),
        .lopt_1(lopt_4),
        .lu_check_match_addr(lu_check_match_addr));
endmodule

(* ORIG_REF_NAME = "carry_compare" *) 
module design_1_system_cache_0_0_carry_compare_192
   (lu_mem_match_addr,
    \The_Compare[0].sel_reg ,
    A_3,
    \lu_mem_info_reg[Addr][13] ,
    Q,
    \lu_mem_info_reg[Addr][12] ,
    lopt,
    lopt_1,
    lopt_2);
  output lu_mem_match_addr;
  input \The_Compare[0].sel_reg ;
  input A_3;
  input \lu_mem_info_reg[Addr][13] ;
  input [1:0]Q;
  input \lu_mem_info_reg[Addr][12] ;
  output lopt;
  input lopt_1;
  input lopt_2;

  wire A_3;
  wire [1:0]Q;
  wire \The_Compare[0].sel_reg ;
  wire carry_1;
  wire carry_2;
  wire \^lopt ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire \lu_mem_info_reg[Addr][12] ;
  wire \lu_mem_info_reg[Addr][13] ;
  wire lu_mem_match_addr;

  assign lopt = lopt_5;
  assign lopt_6 = lopt_1;
  assign lopt_7 = lopt_2;
  design_1_system_cache_0_0_carry_and_224 \The_Compare[0].carry_and_I1 
       (.\The_Compare[0].sel_reg (\The_Compare[0].sel_reg ),
        .carry_1(carry_1),
        .lopt(\^lopt ),
        .lopt_1(\^lopt_1 ),
        .lopt_2(A_3),
        .lopt_3(\^lopt_2 ),
        .lopt_4(lopt_3),
        .lopt_5(lopt_4),
        .lopt_6(lopt_5),
        .lopt_7(lopt_6),
        .lopt_8(lopt_7));
  design_1_system_cache_0_0_carry_and_225 \The_Compare[1].carry_and_I1 
       (.A_3(A_3),
        .carry_1(carry_1),
        .carry_2(carry_2),
        .lopt(\^lopt ),
        .lopt_1(\^lopt_1 ));
  design_1_system_cache_0_0_carry_and_226 \The_Compare[2].carry_and_I1 
       (.Q(Q),
        .carry_2(carry_2),
        .lopt(\^lopt_2 ),
        .lopt_1(lopt_3),
        .lopt_2(lopt_4),
        .\lu_mem_info_reg[Addr][12] (\lu_mem_info_reg[Addr][12] ),
        .\lu_mem_info_reg[Addr][13] (\lu_mem_info_reg[Addr][13] ),
        .lu_mem_match_addr(lu_mem_match_addr));
endmodule

(* ORIG_REF_NAME = "carry_compare" *) 
module design_1_system_cache_0_0_carry_compare__parameterized2
   (update_tag_match_pre_0,
    \The_Compare[0].sel_reg_3 ,
    update_sel_readback_tag_0,
    A_4,
    \The_Compare[2].sel_reg_5 ,
    \The_Compare[3].sel_reg ,
    \The_Compare[4].sel_reg ,
    \The_Compare[5].sel_reg ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output update_tag_match_pre_0;
  input \The_Compare[0].sel_reg_3 ;
  input update_sel_readback_tag_0;
  input A_4;
  input \The_Compare[2].sel_reg_5 ;
  input \The_Compare[3].sel_reg ;
  input \The_Compare[4].sel_reg ;
  input \The_Compare[5].sel_reg ;
  input lopt;
  output lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  output lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire A_4;
  wire \The_Compare[0].sel_reg_3 ;
  wire \The_Compare[2].sel_reg_5 ;
  wire \The_Compare[3].sel_reg ;
  wire \The_Compare[4].sel_reg ;
  wire \The_Compare[5].sel_reg ;
  wire carry_1;
  wire carry_2;
  wire carry_3;
  wire carry_4;
  wire carry_5;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_12;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire update_sel_readback_tag_0;
  wire update_tag_match_pre_0;

  assign lopt_11 = lopt_7;
  assign lopt_12 = lopt_8;
  assign lopt_6 = lopt_10;
  design_1_system_cache_0_0_carry_and_95 \The_Compare[0].carry_and_I1 
       (.\The_Compare[0].sel_reg_3 (\The_Compare[0].sel_reg_3 ),
        .carry_1(carry_1),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .update_sel_readback_tag_0(update_sel_readback_tag_0));
  design_1_system_cache_0_0_carry_and_96 \The_Compare[1].carry_and_I1 
       (.A_4(A_4),
        .carry_1(carry_1),
        .carry_2(carry_2),
        .lopt(lopt_2),
        .lopt_1(lopt_3));
  design_1_system_cache_0_0_carry_and_97 \The_Compare[2].carry_and_I1 
       (.\The_Compare[2].sel_reg_5 (\The_Compare[2].sel_reg_5 ),
        .carry_2(carry_2),
        .carry_3(carry_3),
        .lopt(lopt_4),
        .lopt_1(lopt_5));
  design_1_system_cache_0_0_carry_and_98 \The_Compare[3].carry_and_I1 
       (.\The_Compare[3].sel_reg (\The_Compare[3].sel_reg ),
        .carry_3(carry_3),
        .carry_4(carry_4),
        .lopt(\^lopt_6 ),
        .lopt_1(\^lopt_7 ),
        .lopt_2(\The_Compare[4].sel_reg ),
        .lopt_3(\^lopt_8 ),
        .lopt_4(lopt_9),
        .lopt_5(\The_Compare[5].sel_reg ),
        .lopt_6(lopt_10),
        .lopt_7(lopt_11),
        .lopt_8(lopt_12));
  design_1_system_cache_0_0_carry_and_99 \The_Compare[4].carry_and_I1 
       (.\The_Compare[4].sel_reg (\The_Compare[4].sel_reg ),
        .carry_4(carry_4),
        .carry_5(carry_5),
        .lopt(\^lopt_6 ),
        .lopt_1(\^lopt_7 ));
  design_1_system_cache_0_0_carry_and_100 \The_Compare[5].carry_and_I1 
       (.\The_Compare[5].sel_reg (\The_Compare[5].sel_reg ),
        .carry_5(carry_5),
        .lopt(\^lopt_8 ),
        .lopt_1(lopt_9),
        .update_tag_match_pre_0(update_tag_match_pre_0));
endmodule

(* ORIG_REF_NAME = "carry_compare" *) 
module design_1_system_cache_0_0_carry_compare__parameterized2_119
   (lu_mem_pre_pure_valid_tag_0,
    \lu_check_tag_hit_reg[0] ,
    \lu_check_tag_hit_reg[0]_0 ,
    \lu_check_tag_hit_reg[0]_1 ,
    \lu_check_tag_hit_reg[0]_2 ,
    \lu_check_tag_hit_reg[0]_3 ,
    \lu_check_tag_hit_reg[0]_4 ,
    lu_mem_valid_carry_0,
    D,
    lu_mem_protect_conflict_reg,
    Q,
    DATA_OUTA,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output lu_mem_pre_pure_valid_tag_0;
  output \lu_check_tag_hit_reg[0] ;
  output \lu_check_tag_hit_reg[0]_0 ;
  output \lu_check_tag_hit_reg[0]_1 ;
  output \lu_check_tag_hit_reg[0]_2 ;
  output \lu_check_tag_hit_reg[0]_3 ;
  output \lu_check_tag_hit_reg[0]_4 ;
  input lu_mem_valid_carry_0;
  input [17:0]D;
  input lu_mem_protect_conflict_reg;
  input [17:0]Q;
  input [17:0]DATA_OUTA;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;
  output lopt_4;
  output lopt_5;
  input lopt_6;
  output lopt_7;
  output lopt_8;
  output lopt_9;
  input lopt_10;
  input lopt_11;

  wire [17:0]D;
  wire [17:0]DATA_OUTA;
  wire [17:0]Q;
  wire carry_1;
  wire carry_2;
  wire carry_3;
  wire carry_4;
  wire carry_5;
  wire lopt;
  wire lopt_1;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire lopt_13;
  wire lopt_14;
  wire lopt_15;
  wire lopt_16;
  wire lopt_17;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire \^lopt_9 ;
  wire \lu_check_tag_hit_reg[0] ;
  wire \lu_check_tag_hit_reg[0]_0 ;
  wire \lu_check_tag_hit_reg[0]_1 ;
  wire \lu_check_tag_hit_reg[0]_2 ;
  wire \lu_check_tag_hit_reg[0]_3 ;
  wire \lu_check_tag_hit_reg[0]_4 ;
  wire lu_mem_pre_pure_valid_tag_0;
  wire lu_mem_protect_conflict_reg;
  wire lu_mem_valid_carry_0;

  assign lopt_16 = lopt_10;
  assign lopt_17 = lopt_11;
  assign lopt_9 = lopt_15;
  design_1_system_cache_0_0_carry_and_261 \The_Compare[0].carry_and_I1 
       (.D(D[2:0]),
        .DATA_OUTA(DATA_OUTA[2:0]),
        .Q(Q[2:0]),
        .carry_1(carry_1),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .\lu_check_tag_hit_reg[0] (\lu_check_tag_hit_reg[0] ),
        .lu_mem_protect_conflict_reg(lu_mem_protect_conflict_reg),
        .lu_mem_valid_carry_0(lu_mem_valid_carry_0));
  design_1_system_cache_0_0_carry_and_262 \The_Compare[1].carry_and_I1 
       (.D(D[5:3]),
        .DATA_OUTA(DATA_OUTA[5:3]),
        .Q(Q[5:3]),
        .carry_1(carry_1),
        .carry_2(carry_2),
        .lopt(lopt_3),
        .lopt_1(lopt_4),
        .lopt_2(lopt_5),
        .\lu_check_tag_hit_reg[0] (\lu_check_tag_hit_reg[0]_0 ),
        .lu_mem_protect_conflict_reg(lu_mem_protect_conflict_reg));
  design_1_system_cache_0_0_carry_and_263 \The_Compare[2].carry_and_I1 
       (.D(D[8:6]),
        .DATA_OUTA(DATA_OUTA[8:6]),
        .Q(Q[8:6]),
        .carry_2(carry_2),
        .carry_3(carry_3),
        .lopt(lopt_6),
        .lopt_1(lopt_7),
        .lopt_2(lopt_8),
        .\lu_check_tag_hit_reg[0] (\lu_check_tag_hit_reg[0]_1 ),
        .lu_mem_protect_conflict_reg(lu_mem_protect_conflict_reg));
  design_1_system_cache_0_0_carry_and_264 \The_Compare[3].carry_and_I1 
       (.D(D[11:9]),
        .DATA_OUTA(DATA_OUTA[11:9]),
        .Q(Q[11:9]),
        .carry_3(carry_3),
        .carry_4(carry_4),
        .lopt(\^lopt_9 ),
        .lopt_1(\^lopt_10 ),
        .lopt_2(\^lopt_11 ),
        .lopt_3(lopt_12),
        .lopt_4(lopt_13),
        .lopt_5(lopt_14),
        .lopt_6(lopt_15),
        .lopt_7(lopt_16),
        .lopt_8(lopt_17),
        .\lu_check_tag_hit_reg[0] (\lu_check_tag_hit_reg[0]_2 ),
        .lu_mem_protect_conflict_reg(lu_mem_protect_conflict_reg));
  design_1_system_cache_0_0_carry_and_265 \The_Compare[4].carry_and_I1 
       (.D(D[14:12]),
        .DATA_OUTA(DATA_OUTA[14:12]),
        .Q(Q[14:12]),
        .carry_4(carry_4),
        .carry_5(carry_5),
        .lopt(\^lopt_9 ),
        .lopt_1(\^lopt_10 ),
        .lopt_2(\^lopt_11 ),
        .\lu_check_tag_hit_reg[0] (\lu_check_tag_hit_reg[0]_3 ),
        .lu_mem_protect_conflict_reg(lu_mem_protect_conflict_reg));
  design_1_system_cache_0_0_carry_and_266 \The_Compare[5].carry_and_I1 
       (.D(D[17:15]),
        .DATA_OUTA(DATA_OUTA[17:15]),
        .Q(Q[17:15]),
        .carry_5(carry_5),
        .lopt(lopt_12),
        .lopt_1(lopt_13),
        .lopt_2(lopt_14),
        .\lu_check_tag_hit_reg[0] (\lu_check_tag_hit_reg[0]_4 ),
        .lu_mem_pre_pure_valid_tag_0(lu_mem_pre_pure_valid_tag_0),
        .lu_mem_protect_conflict_reg(lu_mem_protect_conflict_reg));
endmodule

(* ORIG_REF_NAME = "carry_compare" *) 
module design_1_system_cache_0_0_carry_compare__parameterized2_136
   (lu_mem_pre_pure_valid_tag_1,
    lu_mem_valid_carry_1,
    Q,
    lu_mem_protect_conflict_reg,
    \lu_check_info_reg[Addr][31] ,
    DATA_OUTA,
    \lu_check_info_reg[Addr][14] ,
    \lu_check_info_reg[Addr][17] ,
    \lu_check_info_reg[Addr][20] ,
    \lu_check_info_reg[Addr][23] ,
    \lu_check_info_reg[Addr][26] ,
    \lu_check_info_reg[Addr][29] ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output lu_mem_pre_pure_valid_tag_1;
  input lu_mem_valid_carry_1;
  input [11:0]Q;
  input lu_mem_protect_conflict_reg;
  input [11:0]\lu_check_info_reg[Addr][31] ;
  input [17:0]DATA_OUTA;
  input \lu_check_info_reg[Addr][14] ;
  input \lu_check_info_reg[Addr][17] ;
  input \lu_check_info_reg[Addr][20] ;
  input \lu_check_info_reg[Addr][23] ;
  input \lu_check_info_reg[Addr][26] ;
  input \lu_check_info_reg[Addr][29] ;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;
  output lopt_4;
  output lopt_5;
  input lopt_6;
  output lopt_7;
  output lopt_8;
  output lopt_9;
  input lopt_10;
  input lopt_11;

  wire [17:0]DATA_OUTA;
  wire [11:0]Q;
  wire carry_1;
  wire carry_2;
  wire carry_3;
  wire carry_4;
  wire carry_5;
  wire lopt;
  wire lopt_1;
  wire \^lopt_10 ;
  wire \^lopt_11 ;
  wire lopt_12;
  wire lopt_13;
  wire lopt_14;
  wire lopt_15;
  wire lopt_16;
  wire lopt_17;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire \^lopt_9 ;
  wire \lu_check_info_reg[Addr][14] ;
  wire \lu_check_info_reg[Addr][17] ;
  wire \lu_check_info_reg[Addr][20] ;
  wire \lu_check_info_reg[Addr][23] ;
  wire \lu_check_info_reg[Addr][26] ;
  wire \lu_check_info_reg[Addr][29] ;
  wire [11:0]\lu_check_info_reg[Addr][31] ;
  wire lu_mem_pre_pure_valid_tag_1;
  wire lu_mem_protect_conflict_reg;
  wire lu_mem_valid_carry_1;

  assign lopt_16 = lopt_10;
  assign lopt_17 = lopt_11;
  assign lopt_9 = lopt_15;
  design_1_system_cache_0_0_carry_and_255 \The_Compare[0].carry_and_I1 
       (.DATA_OUTA(DATA_OUTA[2:0]),
        .Q(Q[1:0]),
        .carry_1(carry_1),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .\lu_check_info_reg[Addr][14] (\lu_check_info_reg[Addr][14] ),
        .\lu_check_info_reg[Addr][16] (\lu_check_info_reg[Addr][31] [1:0]),
        .lu_mem_protect_conflict_reg(lu_mem_protect_conflict_reg),
        .lu_mem_valid_carry_1(lu_mem_valid_carry_1));
  design_1_system_cache_0_0_carry_and_256 \The_Compare[1].carry_and_I1 
       (.DATA_OUTA(DATA_OUTA[5:3]),
        .Q(Q[3:2]),
        .carry_1(carry_1),
        .carry_2(carry_2),
        .lopt(lopt_3),
        .lopt_1(lopt_4),
        .lopt_2(lopt_5),
        .\lu_check_info_reg[Addr][17] (\lu_check_info_reg[Addr][17] ),
        .\lu_check_info_reg[Addr][19] (\lu_check_info_reg[Addr][31] [3:2]),
        .lu_mem_protect_conflict_reg(lu_mem_protect_conflict_reg));
  design_1_system_cache_0_0_carry_and_257 \The_Compare[2].carry_and_I1 
       (.DATA_OUTA(DATA_OUTA[8:6]),
        .Q(Q[5:4]),
        .carry_2(carry_2),
        .carry_3(carry_3),
        .lopt(lopt_6),
        .lopt_1(lopt_7),
        .lopt_2(lopt_8),
        .\lu_check_info_reg[Addr][20] (\lu_check_info_reg[Addr][20] ),
        .\lu_check_info_reg[Addr][22] (\lu_check_info_reg[Addr][31] [5:4]),
        .lu_mem_protect_conflict_reg(lu_mem_protect_conflict_reg));
  design_1_system_cache_0_0_carry_and_258 \The_Compare[3].carry_and_I1 
       (.DATA_OUTA(DATA_OUTA[11:9]),
        .Q(Q[7:6]),
        .carry_3(carry_3),
        .carry_4(carry_4),
        .lopt(\^lopt_9 ),
        .lopt_1(\^lopt_10 ),
        .lopt_2(\^lopt_11 ),
        .lopt_3(lopt_12),
        .lopt_4(lopt_13),
        .lopt_5(lopt_14),
        .lopt_6(lopt_15),
        .lopt_7(lopt_16),
        .lopt_8(lopt_17),
        .\lu_check_info_reg[Addr][23] (\lu_check_info_reg[Addr][23] ),
        .\lu_check_info_reg[Addr][25] (\lu_check_info_reg[Addr][31] [7:6]),
        .lu_mem_protect_conflict_reg(lu_mem_protect_conflict_reg));
  design_1_system_cache_0_0_carry_and_259 \The_Compare[4].carry_and_I1 
       (.DATA_OUTA(DATA_OUTA[14:12]),
        .Q(Q[9:8]),
        .carry_4(carry_4),
        .carry_5(carry_5),
        .lopt(\^lopt_9 ),
        .lopt_1(\^lopt_10 ),
        .lopt_2(\^lopt_11 ),
        .\lu_check_info_reg[Addr][26] (\lu_check_info_reg[Addr][26] ),
        .\lu_check_info_reg[Addr][28] (\lu_check_info_reg[Addr][31] [9:8]),
        .lu_mem_protect_conflict_reg(lu_mem_protect_conflict_reg));
  design_1_system_cache_0_0_carry_and_260 \The_Compare[5].carry_and_I1 
       (.DATA_OUTA(DATA_OUTA[17:15]),
        .Q(Q[11:10]),
        .carry_5(carry_5),
        .lopt(lopt_12),
        .lopt_1(lopt_13),
        .lopt_2(lopt_14),
        .\lu_check_info_reg[Addr][29] (\lu_check_info_reg[Addr][29] ),
        .\lu_check_info_reg[Addr][31] (\lu_check_info_reg[Addr][31] [11:10]),
        .lu_mem_pre_pure_valid_tag_1(lu_mem_pre_pure_valid_tag_1),
        .lu_mem_protect_conflict_reg(lu_mem_protect_conflict_reg));
endmodule

(* ORIG_REF_NAME = "carry_compare" *) 
module design_1_system_cache_0_0_carry_compare__parameterized2_59
   (update_tag_match_pre_1,
    \The_Compare[0].sel_reg_6 ,
    update_sel_readback_tag_1,
    A_7,
    \The_Compare[2].sel_reg_8 ,
    \The_Compare[3].sel_reg_9 ,
    \The_Compare[4].sel_reg_10 ,
    \The_Compare[5].sel_reg_11 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output update_tag_match_pre_1;
  input \The_Compare[0].sel_reg_6 ;
  input update_sel_readback_tag_1;
  input A_7;
  input \The_Compare[2].sel_reg_8 ;
  input \The_Compare[3].sel_reg_9 ;
  input \The_Compare[4].sel_reg_10 ;
  input \The_Compare[5].sel_reg_11 ;
  input lopt;
  output lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  output lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire A_7;
  wire \The_Compare[0].sel_reg_6 ;
  wire \The_Compare[2].sel_reg_8 ;
  wire \The_Compare[3].sel_reg_9 ;
  wire \The_Compare[4].sel_reg_10 ;
  wire \The_Compare[5].sel_reg_11 ;
  wire carry_1;
  wire carry_2;
  wire carry_3;
  wire carry_4;
  wire carry_5;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_12;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire update_sel_readback_tag_1;
  wire update_tag_match_pre_1;

  assign lopt_11 = lopt_7;
  assign lopt_12 = lopt_8;
  assign lopt_6 = lopt_10;
  design_1_system_cache_0_0_carry_and_89 \The_Compare[0].carry_and_I1 
       (.\The_Compare[0].sel_reg_6 (\The_Compare[0].sel_reg_6 ),
        .carry_1(carry_1),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .update_sel_readback_tag_1(update_sel_readback_tag_1));
  design_1_system_cache_0_0_carry_and_90 \The_Compare[1].carry_and_I1 
       (.A_7(A_7),
        .carry_1(carry_1),
        .carry_2(carry_2),
        .lopt(lopt_2),
        .lopt_1(lopt_3));
  design_1_system_cache_0_0_carry_and_91 \The_Compare[2].carry_and_I1 
       (.\The_Compare[2].sel_reg_8 (\The_Compare[2].sel_reg_8 ),
        .carry_2(carry_2),
        .carry_3(carry_3),
        .lopt(lopt_4),
        .lopt_1(lopt_5));
  design_1_system_cache_0_0_carry_and_92 \The_Compare[3].carry_and_I1 
       (.\The_Compare[3].sel_reg_9 (\The_Compare[3].sel_reg_9 ),
        .carry_3(carry_3),
        .carry_4(carry_4),
        .lopt(\^lopt_6 ),
        .lopt_1(\^lopt_7 ),
        .lopt_2(\The_Compare[4].sel_reg_10 ),
        .lopt_3(\^lopt_8 ),
        .lopt_4(lopt_9),
        .lopt_5(\The_Compare[5].sel_reg_11 ),
        .lopt_6(lopt_10),
        .lopt_7(lopt_11),
        .lopt_8(lopt_12));
  design_1_system_cache_0_0_carry_and_93 \The_Compare[4].carry_and_I1 
       (.\The_Compare[4].sel_reg_10 (\The_Compare[4].sel_reg_10 ),
        .carry_4(carry_4),
        .carry_5(carry_5),
        .lopt(\^lopt_6 ),
        .lopt_1(\^lopt_7 ));
  design_1_system_cache_0_0_carry_and_94 \The_Compare[5].carry_and_I1 
       (.\The_Compare[5].sel_reg_11 (\The_Compare[5].sel_reg_11 ),
        .carry_5(carry_5),
        .lopt(\^lopt_8 ),
        .lopt_1(lopt_9),
        .update_tag_match_pre_1(update_tag_match_pre_1));
endmodule

(* ORIG_REF_NAME = "carry_compare_const" *) 
module design_1_system_cache_0_0_carry_compare_const
   (lookup_io_data_stall,
    lookup_io_stall_valid,
    \lu_check_info_reg[Wr] ,
    Q,
    lopt,
    lopt_1,
    lopt_2);
  output lookup_io_data_stall;
  input lookup_io_stall_valid;
  input \lu_check_info_reg[Wr] ;
  input [1:0]Q;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire [1:0]Q;
  wire lookup_io_data_stall;
  wire lookup_io_stall_valid;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire \lu_check_info_reg[Wr] ;

  design_1_system_cache_0_0_carry_and_247 \The_Compare[0].carry_and_I1 
       (.Q(Q),
        .lookup_io_data_stall(lookup_io_data_stall),
        .lookup_io_stall_valid(lookup_io_stall_valid),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .\lu_check_info_reg[Wr] (\lu_check_info_reg[Wr] ));
endmodule

(* ORIG_REF_NAME = "carry_compare_const" *) 
module design_1_system_cache_0_0_carry_compare_const_184
   (dirty_bit_valid,
    dirty_bit,
    \lu_check_info_reg[KillHit] ,
    Q,
    lopt,
    lopt_1,
    lopt_2);
  output dirty_bit_valid;
  input dirty_bit;
  input \lu_check_info_reg[KillHit] ;
  input [1:0]Q;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire [1:0]Q;
  wire dirty_bit;
  wire dirty_bit_valid;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire \lu_check_info_reg[KillHit] ;

  design_1_system_cache_0_0_carry_and_230 \The_Compare[0].carry_and_I1 
       (.Q(Q),
        .dirty_bit(dirty_bit),
        .dirty_bit_valid(dirty_bit_valid),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .\lu_check_info_reg[KillHit] (\lu_check_info_reg[KillHit] ));
endmodule

(* ORIG_REF_NAME = "carry_compare_const" *) 
module design_1_system_cache_0_0_carry_compare_const__parameterized1
   (Carry_OUT,
    Q,
    \lu_check_info_reg[Wr] ,
    Carry_IN,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_OUT;
  input [1:0]Q;
  input \lu_check_info_reg[Wr] ;
  input Carry_IN;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire Carry_IN;
  wire Carry_OUT;
  wire [1:0]Q;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire \lu_check_info_reg[Wr] ;

  design_1_system_cache_0_0_carry_and__parameterized3_240 \The_Compare[0].carry_and_I1 
       (.Carry_IN(Carry_IN),
        .Carry_OUT(Carry_OUT),
        .Q(Q),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .\lu_check_info_reg[Wr] (\lu_check_info_reg[Wr] ));
endmodule

(* ORIG_REF_NAME = "carry_compare_const" *) 
module design_1_system_cache_0_0_carry_compare_const__parameterized3
   (Carry_Out,
    Q,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output Carry_Out;
  input [1:0]Q;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire Carry_Out;
  wire [1:0]Q;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;

  design_1_system_cache_0_0_carry_and__parameterized3_239 \The_Compare[0].carry_and_I1 
       (.Carry_Out(Carry_Out),
        .Q(Q),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8));
endmodule

(* ORIG_REF_NAME = "carry_compare_const" *) 
module design_1_system_cache_0_0_carry_compare_const__parameterized3_182
   (Carry_OUT,
    Q,
    Carry_IN,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_OUT;
  input [1:0]Q;
  input Carry_IN;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire Carry_IN;
  wire Carry_OUT;
  wire [1:0]Q;
  wire lopt;
  wire lopt_1;
  wire lopt_2;

  design_1_system_cache_0_0_carry_and__parameterized3_231 \The_Compare[0].carry_and_I1 
       (.Carry_IN(Carry_IN),
        .Carry_OUT(Carry_OUT),
        .Q(Q),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2));
endmodule

(* ORIG_REF_NAME = "carry_compare_const" *) 
module design_1_system_cache_0_0_carry_compare_const__parameterized3_194
   (Carry_Out,
    Carry_In,
    Q,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_Out;
  input Carry_In;
  input [1:0]Q;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire Carry_In;
  wire Carry_Out;
  wire [1:0]Q;
  wire lopt;
  wire lopt_1;
  wire lopt_2;

  design_1_system_cache_0_0_carry_and__parameterized3_222 \The_Compare[0].carry_and_I1 
       (.Carry_In(Carry_In),
        .Carry_Out(Carry_Out),
        .Q(Q),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2));
endmodule

(* ORIG_REF_NAME = "carry_compare_const" *) 
module design_1_system_cache_0_0_carry_compare_const__parameterized5
   (Carry_Out,
    Carry_In,
    Q,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_Out;
  input Carry_In;
  input [1:0]Q;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire Carry_In;
  wire Carry_Out;
  wire [1:0]Q;
  wire lopt;
  wire lopt_1;
  wire lopt_2;

  design_1_system_cache_0_0_carry_and_234 \The_Compare[0].carry_and_I1 
       (.Carry_In(Carry_In),
        .Carry_Out(Carry_Out),
        .Q(Q),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2));
endmodule

(* ORIG_REF_NAME = "carry_compare_const" *) 
module design_1_system_cache_0_0_carry_compare_const__parameterized7
   (Carry_IN,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    lru_dirty_bit,
    lopt,
    lopt_1);
  output Carry_IN;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  input lru_dirty_bit;
  input lopt;
  output lopt_1;

  wire Carry_IN;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire lopt;
  wire lopt_1;
  wire lru_dirty_bit;

  design_1_system_cache_0_0_carry_and_232 \The_Compare[0].carry_and_I1 
       (.Carry_IN(Carry_IN),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lru_dirty_bit(lru_dirty_bit));
endmodule

(* ORIG_REF_NAME = "carry_compare_const" *) 
module design_1_system_cache_0_0_carry_compare_const__parameterized7_193
   (Carry_IN,
    lru_protected_bit,
    Q,
    lopt,
    lopt_1,
    lopt_2);
  output Carry_IN;
  input lru_protected_bit;
  input [1:0]Q;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire Carry_IN;
  wire [1:0]Q;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lru_protected_bit;

  design_1_system_cache_0_0_carry_and_223 \The_Compare[0].carry_and_I1 
       (.Carry_IN(Carry_IN),
        .Q(Q),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lru_protected_bit(lru_protected_bit));
endmodule

(* ORIG_REF_NAME = "carry_latch_and" *) 
module design_1_system_cache_0_0_carry_latch_and
   (E,
    p_4_out__2,
    r_pop_safe_i,
    \lud_reg_valid_one_hot_reg[1] ,
    r_hit_fifo_almost_empty,
    I4,
    \Use_Rd_Ctrl_Pipeline.ri_hit_reg );
  output [0:0]E;
  output p_4_out__2;
  input r_pop_safe_i;
  input [0:0]\lud_reg_valid_one_hot_reg[1] ;
  input r_hit_fifo_almost_empty;
  input I4;
  input \Use_Rd_Ctrl_Pipeline.ri_hit_reg ;

  wire [0:0]E;
  wire I4;
  wire SRI;
  wire \Use_Rd_Ctrl_Pipeline.ri_hit_reg ;
  wire [0:0]\lud_reg_valid_one_hot_reg[1] ;
  wire p_4_out__2;
  wire r_hit_fifo_almost_empty;
  wire r_pop_safe_i;

  LUT4 #(
    .INIT(16'hAABF)) 
    \Use_FPGA_2.S_AXI_RVALID_i_3__0 
       (.I0(\lud_reg_valid_one_hot_reg[1] ),
        .I1(E),
        .I2(r_hit_fifo_almost_empty),
        .I3(I4),
        .O(p_4_out__2));
  (* box_type = "PRIMITIVE" *) 
  AND2B1L #(
    .IS_SRI_INVERTED(1'b0)) 
    \Using_FPGA.AND2B1L_Inst1 
       (.DI(r_pop_safe_i),
        .O(E),
        .SRI(SRI));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.AND2B1L_Inst1_i_1__2 
       (.I0(\Use_Rd_Ctrl_Pipeline.ri_hit_reg ),
        .O(SRI));
endmodule

(* ORIG_REF_NAME = "carry_latch_and" *) 
module design_1_system_cache_0_0_carry_latch_and_141
   (\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 ,
    lud_step_want_step_offset,
    SRI);
  output \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 ;
  input lud_step_want_step_offset;
  input SRI;

  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 ;
  wire SRI;
  wire lud_step_want_step_offset;

  (* box_type = "PRIMITIVE" *) 
  AND2B1L #(
    .IS_SRI_INVERTED(1'b0)) 
    \Using_FPGA.AND2B1L_Inst1 
       (.DI(lud_step_want_step_offset),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 ),
        .SRI(SRI));
endmodule

(* ORIG_REF_NAME = "carry_latch_and" *) 
module design_1_system_cache_0_0_carry_latch_and_181
   (WEBWE,
    E,
    SRI);
  output [0:0]WEBWE;
  input [0:0]E;
  input SRI;

  wire [0:0]E;
  wire SRI;
  wire [0:0]WEBWE;

  (* box_type = "PRIMITIVE" *) 
  AND2B1L #(
    .IS_SRI_INVERTED(1'b0)) 
    \Using_FPGA.AND2B1L_Inst1 
       (.DI(E),
        .O(WEBWE),
        .SRI(SRI));
endmodule

(* ORIG_REF_NAME = "carry_latch_and" *) 
module design_1_system_cache_0_0_carry_latch_and_20
   (E,
    p_4_out__2,
    lud_addr_pipeline_full0,
    r_pop_safe_i,
    \lud_reg_valid_one_hot_reg[0] ,
    r_hit_fifo_almost_empty,
    I4,
    \Use_Rd_Ctrl_Pipeline.ri_hit_reg ,
    \Use_FPGA_Flag_Hit.Full_Inst ,
    lud_addr_pipeline_full,
    lud_reg_valid_reg,
    p_57_in,
    \lud_mem_port_one_hot_reg[1] ,
    \Use_Rd_Ctrl_Pipeline.ri_hit_reg_0 ,
    \Use_FPGA_Flag_Hit.Full_Inst_0 ,
    \Use_FPGA_Flag_Hit.Full_Inst_1 ,
    lud_reg_valid_reg_0,
    \read_data_status[0,0][Hit_Almost_Full] ,
    lud_reg_port_num,
    \read_data_status[0,1][Hit_Almost_Full] );
  output [0:0]E;
  output p_4_out__2;
  output lud_addr_pipeline_full0;
  input r_pop_safe_i;
  input [0:0]\lud_reg_valid_one_hot_reg[0] ;
  input r_hit_fifo_almost_empty;
  input I4;
  input \Use_Rd_Ctrl_Pipeline.ri_hit_reg ;
  input \Use_FPGA_Flag_Hit.Full_Inst ;
  input lud_addr_pipeline_full;
  input lud_reg_valid_reg;
  input p_57_in;
  input [0:0]\lud_mem_port_one_hot_reg[1] ;
  input [0:0]\Use_Rd_Ctrl_Pipeline.ri_hit_reg_0 ;
  input \Use_FPGA_Flag_Hit.Full_Inst_0 ;
  input \Use_FPGA_Flag_Hit.Full_Inst_1 ;
  input lud_reg_valid_reg_0;
  input \read_data_status[0,0][Hit_Almost_Full] ;
  input lud_reg_port_num;
  input \read_data_status[0,1][Hit_Almost_Full] ;

  wire [0:0]E;
  wire I4;
  wire SRI;
  wire \Use_FPGA_Flag_Hit.Full_Inst ;
  wire \Use_FPGA_Flag_Hit.Full_Inst_0 ;
  wire \Use_FPGA_Flag_Hit.Full_Inst_1 ;
  wire \Use_Rd_Ctrl_Pipeline.ri_hit_reg ;
  wire [0:0]\Use_Rd_Ctrl_Pipeline.ri_hit_reg_0 ;
  wire lud_addr_pipeline_full;
  wire lud_addr_pipeline_full0;
  wire lud_addr_pipeline_full_i_4_n_0;
  wire lud_addr_pipeline_full_i_6_n_0;
  wire [0:0]\lud_mem_port_one_hot_reg[1] ;
  wire lud_reg_port_num;
  wire [0:0]\lud_reg_valid_one_hot_reg[0] ;
  wire lud_reg_valid_reg;
  wire lud_reg_valid_reg_0;
  wire p_4_out__2;
  wire p_57_in;
  wire r_hit_fifo_almost_empty;
  wire r_pop_safe_i;
  wire \read_data_status[0,0][Hit_Almost_Full] ;
  wire \read_data_status[0,1][Hit_Almost_Full] ;

  LUT4 #(
    .INIT(16'hAABF)) 
    \Use_FPGA_2.S_AXI_RVALID_i_3 
       (.I0(\lud_reg_valid_one_hot_reg[0] ),
        .I1(E),
        .I2(r_hit_fifo_almost_empty),
        .I3(I4),
        .O(p_4_out__2));
  (* box_type = "PRIMITIVE" *) 
  AND2B1L #(
    .IS_SRI_INVERTED(1'b0)) 
    \Using_FPGA.AND2B1L_Inst1 
       (.DI(r_pop_safe_i),
        .O(E),
        .SRI(SRI));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.AND2B1L_Inst1_i_1__1 
       (.I0(\Use_Rd_Ctrl_Pipeline.ri_hit_reg ),
        .O(SRI));
  LUT6 #(
    .INIT(64'hFFFFA8A8A8FFA8A8)) 
    lud_addr_pipeline_full_i_1
       (.I0(\Use_FPGA_Flag_Hit.Full_Inst ),
        .I1(lud_addr_pipeline_full),
        .I2(lud_reg_valid_reg),
        .I3(lud_addr_pipeline_full_i_4_n_0),
        .I4(p_57_in),
        .I5(lud_addr_pipeline_full_i_6_n_0),
        .O(lud_addr_pipeline_full0));
  LUT5 #(
    .INIT(32'hFFFFD8DD)) 
    lud_addr_pipeline_full_i_4
       (.I0(\lud_mem_port_one_hot_reg[1] ),
        .I1(\Use_Rd_Ctrl_Pipeline.ri_hit_reg_0 ),
        .I2(E),
        .I3(\Use_FPGA_Flag_Hit.Full_Inst_0 ),
        .I4(\Use_FPGA_Flag_Hit.Full_Inst_1 ),
        .O(lud_addr_pipeline_full_i_4_n_0));
  LUT6 #(
    .INIT(64'h0C0C440000004400)) 
    lud_addr_pipeline_full_i_6
       (.I0(E),
        .I1(lud_reg_valid_reg_0),
        .I2(\Use_Rd_Ctrl_Pipeline.ri_hit_reg_0 ),
        .I3(\read_data_status[0,0][Hit_Almost_Full] ),
        .I4(lud_reg_port_num),
        .I5(\read_data_status[0,1][Hit_Almost_Full] ),
        .O(lud_addr_pipeline_full_i_6_n_0));
endmodule

(* ORIG_REF_NAME = "carry_latch_and" *) 
module design_1_system_cache_0_0_carry_latch_and_30
   (\arb_prohibit_read_reg[0] ,
    \arb_access_i_reg[Evict] ,
    reduce_or__0,
    arb_prohibit_read,
    \arb_access_i_reg[Keep] ,
    \arb_access_i_reg[Early] ,
    \arb_prohibit_read_reg[0]_0 ,
    port_ready_0,
    \arb_access_i_reg[Evict]_0 ,
    \ctrl_access[Internal_Cmd] ,
    access_piperun,
    reduce_or4_out,
    Q,
    any_port_forbid_0,
    \arb_prohibit_read_reg[0]_1 ,
    S0_AXI_ARVALID,
    read_req_ready,
    \Multi_Port.Gen_Token[1].Forbid_FF_Inst ,
    \arb_access_i[Allocate]1__0 ,
    \access_info[0][Keep] ,
    ARESET_reg,
    \access_info[0][Early] ,
    \lookup_read_data_new[0,0][Valid] ,
    \arb_prohibit_quick_reg[0] );
  output \arb_prohibit_read_reg[0] ;
  output \arb_access_i_reg[Evict] ;
  output reduce_or__0;
  output [0:0]arb_prohibit_read;
  output \arb_access_i_reg[Keep] ;
  output \arb_access_i_reg[Early] ;
  output \arb_prohibit_read_reg[0]_0 ;
  input port_ready_0;
  input \arb_access_i_reg[Evict]_0 ;
  input \ctrl_access[Internal_Cmd] ;
  input access_piperun;
  input reduce_or4_out;
  input Q;
  input any_port_forbid_0;
  input \arb_prohibit_read_reg[0]_1 ;
  input S0_AXI_ARVALID;
  input read_req_ready;
  input \Multi_Port.Gen_Token[1].Forbid_FF_Inst ;
  input \arb_access_i[Allocate]1__0 ;
  input \access_info[0][Keep] ;
  input ARESET_reg;
  input \access_info[0][Early] ;
  input \lookup_read_data_new[0,0][Valid] ;
  input \arb_prohibit_quick_reg[0] ;

  wire ARESET_reg;
  wire \Gen_Port_Ready[1].Detect_Idle[0].Lower_Prio.LP_Rd_Inst/S ;
  wire \Multi_Port.Gen_Token[1].Forbid_FF_Inst ;
  wire Q;
  wire S0_AXI_ARVALID;
  wire \access_info[0][Early] ;
  wire \access_info[0][Keep] ;
  wire access_piperun;
  wire any_port_forbid_0;
  wire \arb_access_i[Allocate]1__0 ;
  wire \arb_access_i_reg[Early] ;
  wire \arb_access_i_reg[Evict] ;
  wire \arb_access_i_reg[Evict]_0 ;
  wire \arb_access_i_reg[Keep] ;
  wire \arb_prohibit_quick_reg[0] ;
  wire [0:0]arb_prohibit_read;
  wire \arb_prohibit_read_reg[0] ;
  wire \arb_prohibit_read_reg[0]_0 ;
  wire \arb_prohibit_read_reg[0]_1 ;
  wire \ctrl_access[Internal_Cmd] ;
  wire \lookup_read_data_new[0,0][Valid] ;
  wire port_ready_0;
  wire read_req_ready;
  wire reduce_or4_out;
  wire reduce_or__0;

  (* SOFT_HLUTNM = "soft_lutpair106" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Port_Ready[0].Use_Slow_Port.Rd_FF_Inst_i_1 
       (.I0(\arb_prohibit_read_reg[0] ),
        .I1(access_piperun),
        .O(arb_prohibit_read));
  (* box_type = "PRIMITIVE" *) 
  AND2B1L #(
    .IS_SRI_INVERTED(1'b0)) 
    \Using_FPGA.AND2B1L_Inst1 
       (.DI(port_ready_0),
        .O(\arb_prohibit_read_reg[0] ),
        .SRI(\Gen_Port_Ready[1].Detect_Idle[0].Lower_Prio.LP_Rd_Inst/S ));
  LUT4 #(
    .INIT(16'hEFFF)) 
    \Using_FPGA.AND2B1L_Inst1_i_1 
       (.I0(any_port_forbid_0),
        .I1(\arb_prohibit_read_reg[0]_1 ),
        .I2(S0_AXI_ARVALID),
        .I3(read_req_ready),
        .O(\Gen_Port_Ready[1].Detect_Idle[0].Lower_Prio.LP_Rd_Inst/S ));
  LUT6 #(
    .INIT(64'h00E200FF00E20000)) 
    \arb_access_i[Early]_i_1 
       (.I0(reduce_or__0),
        .I1(reduce_or4_out),
        .I2(ARESET_reg),
        .I3(Q),
        .I4(access_piperun),
        .I5(\access_info[0][Early] ),
        .O(\arb_access_i_reg[Early] ));
  LUT6 #(
    .INIT(64'h000000000A0A0ACA)) 
    \arb_access_i[Evict]_i_1 
       (.I0(\arb_access_i_reg[Evict]_0 ),
        .I1(\ctrl_access[Internal_Cmd] ),
        .I2(access_piperun),
        .I3(reduce_or__0),
        .I4(reduce_or4_out),
        .I5(Q),
        .O(\arb_access_i_reg[Evict] ));
  LUT6 #(
    .INIT(64'h00E200FF00E20000)) 
    \arb_access_i[Keep]_i_1 
       (.I0(reduce_or__0),
        .I1(reduce_or4_out),
        .I2(\arb_access_i[Allocate]1__0 ),
        .I3(Q),
        .I4(access_piperun),
        .I5(\access_info[0][Keep] ),
        .O(\arb_access_i_reg[Keep] ));
  LUT2 #(
    .INIT(4'hE)) 
    \arb_access_i[Valid]_i_3 
       (.I0(\arb_prohibit_read_reg[0] ),
        .I1(\Multi_Port.Gen_Token[1].Forbid_FF_Inst ),
        .O(reduce_or__0));
  (* SOFT_HLUTNM = "soft_lutpair106" *) 
  LUT5 #(
    .INIT(32'hF111F000)) 
    \arb_prohibit_read[0]_i_1 
       (.I0(\lookup_read_data_new[0,0][Valid] ),
        .I1(\arb_prohibit_quick_reg[0] ),
        .I2(\arb_prohibit_read_reg[0] ),
        .I3(access_piperun),
        .I4(\arb_prohibit_read_reg[0]_1 ),
        .O(\arb_prohibit_read_reg[0]_0 ));
endmodule

(* ORIG_REF_NAME = "carry_latch_and" *) 
module design_1_system_cache_0_0_carry_latch_and_38
   (\arb_prohibit_read_reg[1] ,
    arb_prohibit_read1,
    \arb_access_i_reg[Len][0] ,
    \arb_access_i_reg[Len][1] ,
    \arb_access_i_reg[Len][2] ,
    \arb_access_i_reg[Len][3] ,
    \arb_access_i_reg[Len][4] ,
    \arb_access_i_reg[Len][5] ,
    \arb_access_i_reg[Len][7] ,
    \arb_access_i_reg[Len][6] ,
    \arb_access_i_reg[Addr][29] ,
    \arb_access_i_reg[Addr][30] ,
    \arb_access_i_reg[Addr][31] ,
    \arb_access_i_reg[Addr][26] ,
    \arb_access_i_reg[Addr][27] ,
    \arb_access_i_reg[Addr][28] ,
    \arb_access_i_reg[Addr][23] ,
    \arb_access_i_reg[Addr][24] ,
    \arb_access_i_reg[Addr][25] ,
    \arb_access_i_reg[Addr][20] ,
    \arb_access_i_reg[Addr][21] ,
    \arb_access_i_reg[Addr][22] ,
    \arb_access_i_reg[Addr][17] ,
    \arb_access_i_reg[Addr][18] ,
    \arb_access_i_reg[Addr][19] ,
    \arb_access_i_reg[Addr][15] ,
    \arb_access_i_reg[Addr][16] ,
    \arb_access_i_reg[Addr][5] ,
    \arb_access_i_reg[Addr][4] ,
    \arb_access_i_reg[Addr][3] ,
    \arb_access_i_reg[Addr][2] ,
    \arb_access_i_reg[Addr][1] ,
    \arb_access_i_reg[Addr][0] ,
    \arb_access_i_reg[Size][2] ,
    \arb_access_i_reg[Size][0] ,
    \arb_prohibit_read_reg[1]_0 ,
    port_ready_1,
    any_port_forbid_1,
    rd_port_ready_block_1,
    S1_AXI_ARVALID,
    read_req_ready_2,
    access_piperun,
    \Multi_Port.Gen_Token[0].Forbid_FF_Inst ,
    S0_AXI_ARLEN,
    S1_AXI_ARLEN,
    S0_AXI_ARADDR,
    S1_AXI_ARADDR,
    S0_AXI_ARSIZE,
    S1_AXI_ARSIZE,
    \lookup_read_data_new[0,1][Valid] ,
    p_0_in8_in);
  output \arb_prohibit_read_reg[1] ;
  output arb_prohibit_read1;
  output \arb_access_i_reg[Len][0] ;
  output \arb_access_i_reg[Len][1] ;
  output \arb_access_i_reg[Len][2] ;
  output \arb_access_i_reg[Len][3] ;
  output \arb_access_i_reg[Len][4] ;
  output \arb_access_i_reg[Len][5] ;
  output \arb_access_i_reg[Len][7] ;
  output \arb_access_i_reg[Len][6] ;
  output \arb_access_i_reg[Addr][29] ;
  output \arb_access_i_reg[Addr][30] ;
  output \arb_access_i_reg[Addr][31] ;
  output \arb_access_i_reg[Addr][26] ;
  output \arb_access_i_reg[Addr][27] ;
  output \arb_access_i_reg[Addr][28] ;
  output \arb_access_i_reg[Addr][23] ;
  output \arb_access_i_reg[Addr][24] ;
  output \arb_access_i_reg[Addr][25] ;
  output \arb_access_i_reg[Addr][20] ;
  output \arb_access_i_reg[Addr][21] ;
  output \arb_access_i_reg[Addr][22] ;
  output \arb_access_i_reg[Addr][17] ;
  output \arb_access_i_reg[Addr][18] ;
  output \arb_access_i_reg[Addr][19] ;
  output \arb_access_i_reg[Addr][15] ;
  output \arb_access_i_reg[Addr][16] ;
  output \arb_access_i_reg[Addr][5] ;
  output \arb_access_i_reg[Addr][4] ;
  output \arb_access_i_reg[Addr][3] ;
  output \arb_access_i_reg[Addr][2] ;
  output \arb_access_i_reg[Addr][1] ;
  output \arb_access_i_reg[Addr][0] ;
  output \arb_access_i_reg[Size][2] ;
  output \arb_access_i_reg[Size][0] ;
  output \arb_prohibit_read_reg[1]_0 ;
  input port_ready_1;
  input any_port_forbid_1;
  input rd_port_ready_block_1;
  input S1_AXI_ARVALID;
  input read_req_ready_2;
  input access_piperun;
  input \Multi_Port.Gen_Token[0].Forbid_FF_Inst ;
  input [7:0]S0_AXI_ARLEN;
  input [7:0]S1_AXI_ARLEN;
  input [22:0]S0_AXI_ARADDR;
  input [22:0]S1_AXI_ARADDR;
  input [1:0]S0_AXI_ARSIZE;
  input [1:0]S1_AXI_ARSIZE;
  input \lookup_read_data_new[0,1][Valid] ;
  input p_0_in8_in;

  wire \Multi_Port.Gen_Token[0].Forbid_FF_Inst ;
  wire [22:0]S0_AXI_ARADDR;
  wire [7:0]S0_AXI_ARLEN;
  wire [1:0]S0_AXI_ARSIZE;
  wire [22:0]S1_AXI_ARADDR;
  wire [7:0]S1_AXI_ARLEN;
  wire [1:0]S1_AXI_ARSIZE;
  wire S1_AXI_ARVALID;
  wire SRI;
  wire access_piperun;
  wire any_port_forbid_1;
  wire \arb_access_i_reg[Addr][0] ;
  wire \arb_access_i_reg[Addr][15] ;
  wire \arb_access_i_reg[Addr][16] ;
  wire \arb_access_i_reg[Addr][17] ;
  wire \arb_access_i_reg[Addr][18] ;
  wire \arb_access_i_reg[Addr][19] ;
  wire \arb_access_i_reg[Addr][1] ;
  wire \arb_access_i_reg[Addr][20] ;
  wire \arb_access_i_reg[Addr][21] ;
  wire \arb_access_i_reg[Addr][22] ;
  wire \arb_access_i_reg[Addr][23] ;
  wire \arb_access_i_reg[Addr][24] ;
  wire \arb_access_i_reg[Addr][25] ;
  wire \arb_access_i_reg[Addr][26] ;
  wire \arb_access_i_reg[Addr][27] ;
  wire \arb_access_i_reg[Addr][28] ;
  wire \arb_access_i_reg[Addr][29] ;
  wire \arb_access_i_reg[Addr][2] ;
  wire \arb_access_i_reg[Addr][30] ;
  wire \arb_access_i_reg[Addr][31] ;
  wire \arb_access_i_reg[Addr][3] ;
  wire \arb_access_i_reg[Addr][4] ;
  wire \arb_access_i_reg[Addr][5] ;
  wire \arb_access_i_reg[Len][0] ;
  wire \arb_access_i_reg[Len][1] ;
  wire \arb_access_i_reg[Len][2] ;
  wire \arb_access_i_reg[Len][3] ;
  wire \arb_access_i_reg[Len][4] ;
  wire \arb_access_i_reg[Len][5] ;
  wire \arb_access_i_reg[Len][6] ;
  wire \arb_access_i_reg[Len][7] ;
  wire \arb_access_i_reg[Size][0] ;
  wire \arb_access_i_reg[Size][2] ;
  wire arb_prohibit_read1;
  wire \arb_prohibit_read_reg[1] ;
  wire \arb_prohibit_read_reg[1]_0 ;
  wire \lookup_read_data_new[0,1][Valid] ;
  wire p_0_in8_in;
  wire port_ready_1;
  wire rd_port_ready_block_1;
  wire read_req_ready_2;

  (* SOFT_HLUTNM = "soft_lutpair110" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Gen_Port_Ready[1].Use_Slow_Port.Rd_FF_Inst_i_1 
       (.I0(\arb_prohibit_read_reg[1] ),
        .I1(access_piperun),
        .O(arb_prohibit_read1));
  (* box_type = "PRIMITIVE" *) 
  AND2B1L #(
    .IS_SRI_INVERTED(1'b0)) 
    \Using_FPGA.AND2B1L_Inst1 
       (.DI(port_ready_1),
        .O(\arb_prohibit_read_reg[1] ),
        .SRI(SRI));
  LUT4 #(
    .INIT(16'hEFFF)) 
    \Using_FPGA.AND2B1L_Inst1_i_1__0 
       (.I0(any_port_forbid_1),
        .I1(rd_port_ready_block_1),
        .I2(S1_AXI_ARVALID),
        .I3(read_req_ready_2),
        .O(SRI));
  LUT5 #(
    .INIT(32'hEEE000E0)) 
    \arb_access_i[Addr][0]_i_2 
       (.I0(\arb_prohibit_read_reg[1] ),
        .I1(\Multi_Port.Gen_Token[0].Forbid_FF_Inst ),
        .I2(S0_AXI_ARADDR[0]),
        .I3(port_ready_1),
        .I4(S1_AXI_ARADDR[0]),
        .O(\arb_access_i_reg[Addr][0] ));
  LUT5 #(
    .INIT(32'hEEE000E0)) 
    \arb_access_i[Addr][15]_i_2 
       (.I0(\arb_prohibit_read_reg[1] ),
        .I1(\Multi_Port.Gen_Token[0].Forbid_FF_Inst ),
        .I2(S0_AXI_ARADDR[6]),
        .I3(port_ready_1),
        .I4(S1_AXI_ARADDR[6]),
        .O(\arb_access_i_reg[Addr][15] ));
  LUT5 #(
    .INIT(32'hEEE000E0)) 
    \arb_access_i[Addr][16]_i_2 
       (.I0(\arb_prohibit_read_reg[1] ),
        .I1(\Multi_Port.Gen_Token[0].Forbid_FF_Inst ),
        .I2(S0_AXI_ARADDR[7]),
        .I3(port_ready_1),
        .I4(S1_AXI_ARADDR[7]),
        .O(\arb_access_i_reg[Addr][16] ));
  LUT5 #(
    .INIT(32'hEEE000E0)) 
    \arb_access_i[Addr][17]_i_2 
       (.I0(\arb_prohibit_read_reg[1] ),
        .I1(\Multi_Port.Gen_Token[0].Forbid_FF_Inst ),
        .I2(S0_AXI_ARADDR[8]),
        .I3(port_ready_1),
        .I4(S1_AXI_ARADDR[8]),
        .O(\arb_access_i_reg[Addr][17] ));
  LUT5 #(
    .INIT(32'hEEE000E0)) 
    \arb_access_i[Addr][18]_i_2 
       (.I0(\arb_prohibit_read_reg[1] ),
        .I1(\Multi_Port.Gen_Token[0].Forbid_FF_Inst ),
        .I2(S0_AXI_ARADDR[9]),
        .I3(port_ready_1),
        .I4(S1_AXI_ARADDR[9]),
        .O(\arb_access_i_reg[Addr][18] ));
  LUT5 #(
    .INIT(32'hEEE000E0)) 
    \arb_access_i[Addr][19]_i_2 
       (.I0(\arb_prohibit_read_reg[1] ),
        .I1(\Multi_Port.Gen_Token[0].Forbid_FF_Inst ),
        .I2(S0_AXI_ARADDR[10]),
        .I3(port_ready_1),
        .I4(S1_AXI_ARADDR[10]),
        .O(\arb_access_i_reg[Addr][19] ));
  LUT5 #(
    .INIT(32'hEEE000E0)) 
    \arb_access_i[Addr][1]_i_2 
       (.I0(\arb_prohibit_read_reg[1] ),
        .I1(\Multi_Port.Gen_Token[0].Forbid_FF_Inst ),
        .I2(S0_AXI_ARADDR[1]),
        .I3(port_ready_1),
        .I4(S1_AXI_ARADDR[1]),
        .O(\arb_access_i_reg[Addr][1] ));
  LUT5 #(
    .INIT(32'hEEE000E0)) 
    \arb_access_i[Addr][20]_i_2 
       (.I0(\arb_prohibit_read_reg[1] ),
        .I1(\Multi_Port.Gen_Token[0].Forbid_FF_Inst ),
        .I2(S0_AXI_ARADDR[11]),
        .I3(port_ready_1),
        .I4(S1_AXI_ARADDR[11]),
        .O(\arb_access_i_reg[Addr][20] ));
  LUT5 #(
    .INIT(32'hEEE000E0)) 
    \arb_access_i[Addr][21]_i_2 
       (.I0(\arb_prohibit_read_reg[1] ),
        .I1(\Multi_Port.Gen_Token[0].Forbid_FF_Inst ),
        .I2(S0_AXI_ARADDR[12]),
        .I3(port_ready_1),
        .I4(S1_AXI_ARADDR[12]),
        .O(\arb_access_i_reg[Addr][21] ));
  LUT5 #(
    .INIT(32'hEEE000E0)) 
    \arb_access_i[Addr][22]_i_2 
       (.I0(\arb_prohibit_read_reg[1] ),
        .I1(\Multi_Port.Gen_Token[0].Forbid_FF_Inst ),
        .I2(S0_AXI_ARADDR[13]),
        .I3(port_ready_1),
        .I4(S1_AXI_ARADDR[13]),
        .O(\arb_access_i_reg[Addr][22] ));
  LUT5 #(
    .INIT(32'hEEE000E0)) 
    \arb_access_i[Addr][23]_i_2 
       (.I0(\arb_prohibit_read_reg[1] ),
        .I1(\Multi_Port.Gen_Token[0].Forbid_FF_Inst ),
        .I2(S0_AXI_ARADDR[14]),
        .I3(port_ready_1),
        .I4(S1_AXI_ARADDR[14]),
        .O(\arb_access_i_reg[Addr][23] ));
  LUT5 #(
    .INIT(32'hEEE000E0)) 
    \arb_access_i[Addr][24]_i_2 
       (.I0(\arb_prohibit_read_reg[1] ),
        .I1(\Multi_Port.Gen_Token[0].Forbid_FF_Inst ),
        .I2(S0_AXI_ARADDR[15]),
        .I3(port_ready_1),
        .I4(S1_AXI_ARADDR[15]),
        .O(\arb_access_i_reg[Addr][24] ));
  LUT5 #(
    .INIT(32'hEEE000E0)) 
    \arb_access_i[Addr][25]_i_2 
       (.I0(\arb_prohibit_read_reg[1] ),
        .I1(\Multi_Port.Gen_Token[0].Forbid_FF_Inst ),
        .I2(S0_AXI_ARADDR[16]),
        .I3(port_ready_1),
        .I4(S1_AXI_ARADDR[16]),
        .O(\arb_access_i_reg[Addr][25] ));
  LUT5 #(
    .INIT(32'hEEE000E0)) 
    \arb_access_i[Addr][26]_i_2 
       (.I0(\arb_prohibit_read_reg[1] ),
        .I1(\Multi_Port.Gen_Token[0].Forbid_FF_Inst ),
        .I2(S0_AXI_ARADDR[17]),
        .I3(port_ready_1),
        .I4(S1_AXI_ARADDR[17]),
        .O(\arb_access_i_reg[Addr][26] ));
  LUT5 #(
    .INIT(32'hEEE000E0)) 
    \arb_access_i[Addr][27]_i_2 
       (.I0(\arb_prohibit_read_reg[1] ),
        .I1(\Multi_Port.Gen_Token[0].Forbid_FF_Inst ),
        .I2(S0_AXI_ARADDR[18]),
        .I3(port_ready_1),
        .I4(S1_AXI_ARADDR[18]),
        .O(\arb_access_i_reg[Addr][27] ));
  LUT5 #(
    .INIT(32'hEEE000E0)) 
    \arb_access_i[Addr][28]_i_2 
       (.I0(\arb_prohibit_read_reg[1] ),
        .I1(\Multi_Port.Gen_Token[0].Forbid_FF_Inst ),
        .I2(S0_AXI_ARADDR[19]),
        .I3(port_ready_1),
        .I4(S1_AXI_ARADDR[19]),
        .O(\arb_access_i_reg[Addr][28] ));
  LUT5 #(
    .INIT(32'hEEE000E0)) 
    \arb_access_i[Addr][29]_i_2 
       (.I0(\arb_prohibit_read_reg[1] ),
        .I1(\Multi_Port.Gen_Token[0].Forbid_FF_Inst ),
        .I2(S0_AXI_ARADDR[20]),
        .I3(port_ready_1),
        .I4(S1_AXI_ARADDR[20]),
        .O(\arb_access_i_reg[Addr][29] ));
  LUT5 #(
    .INIT(32'hEEE000E0)) 
    \arb_access_i[Addr][2]_i_2 
       (.I0(\arb_prohibit_read_reg[1] ),
        .I1(\Multi_Port.Gen_Token[0].Forbid_FF_Inst ),
        .I2(S0_AXI_ARADDR[2]),
        .I3(port_ready_1),
        .I4(S1_AXI_ARADDR[2]),
        .O(\arb_access_i_reg[Addr][2] ));
  LUT5 #(
    .INIT(32'hEEE000E0)) 
    \arb_access_i[Addr][30]_i_2 
       (.I0(\arb_prohibit_read_reg[1] ),
        .I1(\Multi_Port.Gen_Token[0].Forbid_FF_Inst ),
        .I2(S0_AXI_ARADDR[21]),
        .I3(port_ready_1),
        .I4(S1_AXI_ARADDR[21]),
        .O(\arb_access_i_reg[Addr][30] ));
  LUT5 #(
    .INIT(32'hEEE000E0)) 
    \arb_access_i[Addr][31]_i_2 
       (.I0(\arb_prohibit_read_reg[1] ),
        .I1(\Multi_Port.Gen_Token[0].Forbid_FF_Inst ),
        .I2(S0_AXI_ARADDR[22]),
        .I3(port_ready_1),
        .I4(S1_AXI_ARADDR[22]),
        .O(\arb_access_i_reg[Addr][31] ));
  LUT5 #(
    .INIT(32'hEEE000E0)) 
    \arb_access_i[Addr][3]_i_2 
       (.I0(\arb_prohibit_read_reg[1] ),
        .I1(\Multi_Port.Gen_Token[0].Forbid_FF_Inst ),
        .I2(S0_AXI_ARADDR[3]),
        .I3(port_ready_1),
        .I4(S1_AXI_ARADDR[3]),
        .O(\arb_access_i_reg[Addr][3] ));
  LUT5 #(
    .INIT(32'hEEE000E0)) 
    \arb_access_i[Addr][4]_i_2 
       (.I0(\arb_prohibit_read_reg[1] ),
        .I1(\Multi_Port.Gen_Token[0].Forbid_FF_Inst ),
        .I2(S0_AXI_ARADDR[4]),
        .I3(port_ready_1),
        .I4(S1_AXI_ARADDR[4]),
        .O(\arb_access_i_reg[Addr][4] ));
  LUT5 #(
    .INIT(32'hEEE000E0)) 
    \arb_access_i[Addr][5]_i_2 
       (.I0(\arb_prohibit_read_reg[1] ),
        .I1(\Multi_Port.Gen_Token[0].Forbid_FF_Inst ),
        .I2(S0_AXI_ARADDR[5]),
        .I3(port_ready_1),
        .I4(S1_AXI_ARADDR[5]),
        .O(\arb_access_i_reg[Addr][5] ));
  LUT5 #(
    .INIT(32'hEEE000E0)) 
    \arb_access_i[Len][0]_i_2 
       (.I0(\arb_prohibit_read_reg[1] ),
        .I1(\Multi_Port.Gen_Token[0].Forbid_FF_Inst ),
        .I2(S0_AXI_ARLEN[0]),
        .I3(port_ready_1),
        .I4(S1_AXI_ARLEN[0]),
        .O(\arb_access_i_reg[Len][0] ));
  LUT5 #(
    .INIT(32'hEEE000E0)) 
    \arb_access_i[Len][1]_i_2 
       (.I0(\arb_prohibit_read_reg[1] ),
        .I1(\Multi_Port.Gen_Token[0].Forbid_FF_Inst ),
        .I2(S0_AXI_ARLEN[1]),
        .I3(port_ready_1),
        .I4(S1_AXI_ARLEN[1]),
        .O(\arb_access_i_reg[Len][1] ));
  LUT5 #(
    .INIT(32'hEEE000E0)) 
    \arb_access_i[Len][2]_i_2 
       (.I0(\arb_prohibit_read_reg[1] ),
        .I1(\Multi_Port.Gen_Token[0].Forbid_FF_Inst ),
        .I2(S0_AXI_ARLEN[2]),
        .I3(port_ready_1),
        .I4(S1_AXI_ARLEN[2]),
        .O(\arb_access_i_reg[Len][2] ));
  LUT5 #(
    .INIT(32'hEEE000E0)) 
    \arb_access_i[Len][3]_i_2 
       (.I0(\arb_prohibit_read_reg[1] ),
        .I1(\Multi_Port.Gen_Token[0].Forbid_FF_Inst ),
        .I2(S0_AXI_ARLEN[3]),
        .I3(port_ready_1),
        .I4(S1_AXI_ARLEN[3]),
        .O(\arb_access_i_reg[Len][3] ));
  LUT5 #(
    .INIT(32'hEEE000E0)) 
    \arb_access_i[Len][4]_i_2 
       (.I0(\arb_prohibit_read_reg[1] ),
        .I1(\Multi_Port.Gen_Token[0].Forbid_FF_Inst ),
        .I2(S0_AXI_ARLEN[4]),
        .I3(port_ready_1),
        .I4(S1_AXI_ARLEN[4]),
        .O(\arb_access_i_reg[Len][4] ));
  LUT5 #(
    .INIT(32'hEEE000E0)) 
    \arb_access_i[Len][5]_i_2 
       (.I0(\arb_prohibit_read_reg[1] ),
        .I1(\Multi_Port.Gen_Token[0].Forbid_FF_Inst ),
        .I2(S0_AXI_ARLEN[5]),
        .I3(port_ready_1),
        .I4(S1_AXI_ARLEN[5]),
        .O(\arb_access_i_reg[Len][5] ));
  LUT5 #(
    .INIT(32'hEEE000E0)) 
    \arb_access_i[Len][6]_i_2 
       (.I0(\arb_prohibit_read_reg[1] ),
        .I1(\Multi_Port.Gen_Token[0].Forbid_FF_Inst ),
        .I2(S0_AXI_ARLEN[6]),
        .I3(port_ready_1),
        .I4(S1_AXI_ARLEN[6]),
        .O(\arb_access_i_reg[Len][6] ));
  LUT5 #(
    .INIT(32'hEEE000E0)) 
    \arb_access_i[Len][7]_i_2 
       (.I0(\arb_prohibit_read_reg[1] ),
        .I1(\Multi_Port.Gen_Token[0].Forbid_FF_Inst ),
        .I2(S0_AXI_ARLEN[7]),
        .I3(port_ready_1),
        .I4(S1_AXI_ARLEN[7]),
        .O(\arb_access_i_reg[Len][7] ));
  LUT5 #(
    .INIT(32'hEEE000E0)) 
    \arb_access_i[Size][0]_i_2 
       (.I0(\arb_prohibit_read_reg[1] ),
        .I1(\Multi_Port.Gen_Token[0].Forbid_FF_Inst ),
        .I2(S0_AXI_ARSIZE[0]),
        .I3(port_ready_1),
        .I4(S1_AXI_ARSIZE[0]),
        .O(\arb_access_i_reg[Size][0] ));
  LUT5 #(
    .INIT(32'hEEE000E0)) 
    \arb_access_i[Size][2]_i_2 
       (.I0(\arb_prohibit_read_reg[1] ),
        .I1(\Multi_Port.Gen_Token[0].Forbid_FF_Inst ),
        .I2(S0_AXI_ARSIZE[1]),
        .I3(port_ready_1),
        .I4(S1_AXI_ARSIZE[1]),
        .O(\arb_access_i_reg[Size][2] ));
  (* SOFT_HLUTNM = "soft_lutpair110" *) 
  LUT5 #(
    .INIT(32'h888F8888)) 
    \arb_prohibit_read[1]_i_1 
       (.I0(access_piperun),
        .I1(\arb_prohibit_read_reg[1] ),
        .I2(\lookup_read_data_new[0,1][Valid] ),
        .I3(p_0_in8_in),
        .I4(rd_port_ready_block_1),
        .O(\arb_prohibit_read_reg[1]_0 ));
endmodule

(* ORIG_REF_NAME = "carry_latch_and" *) 
module design_1_system_cache_0_0_carry_latch_and__parameterized2
   (\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 ,
    lookup_data_en_ii_2,
    \lu_check_valid_bits_reg[1] ,
    SRI,
    lud_step_want_step_offset,
    \lu_mem_info_reg[Addr][10] ,
    \update_release_tag_reg[Addr][10] ,
    \lu_mem_info_reg[Addr][9] ,
    update_lock_release,
    lu_mem_valid_reg);
  output \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 ;
  output lookup_data_en_ii_2;
  output \lu_check_valid_bits_reg[1] ;
  input SRI;
  input lud_step_want_step_offset;
  input \lu_mem_info_reg[Addr][10] ;
  input [1:0]\update_release_tag_reg[Addr][10] ;
  input \lu_mem_info_reg[Addr][9] ;
  input update_lock_release;
  input lu_mem_valid_reg;

  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 ;
  wire SRI;
  wire carry_pad_1;
  wire carry_pad_2;
  wire carry_pad_3;
  wire lookup_data_en_ii_2;
  wire \lu_check_valid_bits_reg[1] ;
  wire \lu_mem_info_reg[Addr][10] ;
  wire \lu_mem_info_reg[Addr][9] ;
  wire lu_mem_valid_reg;
  wire lud_step_want_step_offset;
  wire update_lock_release;
  wire [1:0]\update_release_tag_reg[Addr][10] ;
  wire [3:0]\NLW_Using_FPGA.The_Pad[0].MUXCY_Inst_CARRY4_O_UNCONNECTED ;

  (* box_type = "PRIMITIVE" *) 
  AND2B1L #(
    .IS_SRI_INVERTED(1'b0)) 
    \Using_FPGA.AND2B1L_Inst1 
       (.DI(lookup_data_en_ii_2),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 ),
        .SRI(SRI));
  LUT6 #(
    .INIT(64'h6FF6FFFFFFFFFFFF)) 
    \Using_FPGA.MUXCY_I_i_7 
       (.I0(\lu_mem_info_reg[Addr][10] ),
        .I1(\update_release_tag_reg[Addr][10] [1]),
        .I2(\lu_mem_info_reg[Addr][9] ),
        .I3(\update_release_tag_reg[Addr][10] [0]),
        .I4(update_lock_release),
        .I5(lu_mem_valid_reg),
        .O(\lu_check_valid_bits_reg[1] ));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.The_Pad[0].MUXCY_Inst_CARRY4 
       (.CI(lud_step_want_step_offset),
        .CO({lookup_data_en_ii_2,carry_pad_3,carry_pad_2,carry_pad_1}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,1'b0}),
        .O(\NLW_Using_FPGA.The_Pad[0].MUXCY_Inst_CARRY4_O_UNCONNECTED [3:0]),
        .S({1'b1,1'b1,1'b1,1'b1}));
endmodule

(* ORIG_REF_NAME = "carry_latch_and_n" *) 
module design_1_system_cache_0_0_carry_latch_and_n
   (O,
    Carry_OUT,
    A_N,
    Carry_IN,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output O;
  output Carry_OUT;
  input A_N;
  input Carry_IN;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;

  wire A_N;
  wire Carry_IN;
  wire Carry_OUT;
  wire O;
  wire carry_pad_1;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire lopt_4;
  wire [3:0]\NLW_Using_FPGA.The_Pad[0].MUXCY_Inst_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = lopt_4;
  (* box_type = "PRIMITIVE" *) 
  AND2B1L #(
    .IS_SRI_INVERTED(1'b0)) 
    \Using_FPGA.AND2B1L_Inst1 
       (.DI(Carry_OUT),
        .O(O),
        .SRI(A_N));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.The_Pad[0].MUXCY_Inst_CARRY4 
       (.CI(Carry_IN),
        .CO({lopt_4,\^lopt_1 ,Carry_OUT,carry_pad_1}),
        .CYINIT(1'b0),
        .DI({\^lopt_2 ,\^lopt_2 ,1'b0,1'b0}),
        .O(\NLW_Using_FPGA.The_Pad[0].MUXCY_Inst_CARRY4_O_UNCONNECTED [3:0]),
        .S({\^lopt_3 ,\^lopt_3 ,1'b1,1'b1}));
endmodule

(* ORIG_REF_NAME = "carry_latch_and_n" *) 
module design_1_system_cache_0_0_carry_latch_and_n__parameterized1
   (\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 ,
    A_N,
    Carry_IN,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3);
  output \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 ;
  input A_N;
  input Carry_IN;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;

  wire \<const0> ;
  wire \<const1> ;
  wire A_N;
  wire Carry_IN;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 ;
  wire \Using_FPGA.The_Pad[3].MUXCY_Inst_n_0 ;
  wire carry_pad_1;
  wire carry_pad_2;
  wire carry_pad_3;
  wire [3:2]\NLW_Using_FPGA.The_Pad[2].MUXCY_Inst_CARRY4_CO_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.The_Pad[2].MUXCY_Inst_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.The_Pad[2].MUXCY_Inst_CARRY4_O_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.The_Pad[2].MUXCY_Inst_CARRY4_S_UNCONNECTED ;

  assign carry_pad_1 = lopt;
  assign carry_pad_2 = lopt_3;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  GND GND
       (.G(\<const0> ));
  (* box_type = "PRIMITIVE" *) 
  AND2B1L #(
    .IS_SRI_INVERTED(1'b0)) 
    \Using_FPGA.AND2B1L_Inst1 
       (.DI(\Using_FPGA.The_Pad[3].MUXCY_Inst_n_0 ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 ),
        .SRI(A_N));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.The_Pad[2].MUXCY_Inst_CARRY4 
       (.CI(carry_pad_2),
        .CO({\NLW_Using_FPGA.The_Pad[2].MUXCY_Inst_CARRY4_CO_UNCONNECTED [3:2],\Using_FPGA.The_Pad[3].MUXCY_Inst_n_0 ,carry_pad_3}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.The_Pad[2].MUXCY_Inst_CARRY4_DI_UNCONNECTED [3:2],1'b0,1'b0}),
        .O(\NLW_Using_FPGA.The_Pad[2].MUXCY_Inst_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.The_Pad[2].MUXCY_Inst_CARRY4_S_UNCONNECTED [3:2],1'b1,1'b1}));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_latch_and_n" *) 
module design_1_system_cache_0_0_carry_latch_and_n__parameterized1_73
   (O,
    Carry_OUT,
    A_N,
    Carry_IN,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9);
  output O;
  output Carry_OUT;
  input A_N;
  input Carry_IN;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;
  output lopt_4;
  input lopt_5;
  input lopt_6;
  output lopt_7;
  input lopt_8;
  input lopt_9;

  wire \<const0> ;
  wire \<const1> ;
  wire A_N;
  wire Carry_IN;
  wire Carry_OUT;
  wire O;
  wire carry_pad_1;
  wire carry_pad_2;
  wire carry_pad_3;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire [3:0]\NLW_Using_FPGA.The_Pad[2].MUXCY_Inst_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_5;
  assign \^lopt_3  = lopt_6;
  assign \^lopt_5  = lopt_8;
  assign \^lopt_6  = lopt_9;
  assign carry_pad_1 = lopt;
  assign carry_pad_2 = lopt_3;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = \<const1> ;
  assign lopt_4 = \^lopt_1 ;
  assign lopt_7 = \^lopt_4 ;
  GND GND
       (.G(\<const0> ));
  (* box_type = "PRIMITIVE" *) 
  AND2B1L #(
    .IS_SRI_INVERTED(1'b0)) 
    \Using_FPGA.AND2B1L_Inst1 
       (.DI(Carry_OUT),
        .O(O),
        .SRI(A_N));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.The_Pad[2].MUXCY_Inst_CARRY4 
       (.CI(carry_pad_2),
        .CO({\^lopt_4 ,\^lopt_1 ,Carry_OUT,carry_pad_3}),
        .CYINIT(1'b0),
        .DI({\^lopt_5 ,\^lopt_2 ,1'b0,1'b0}),
        .O(\NLW_Using_FPGA.The_Pad[2].MUXCY_Inst_CARRY4_O_UNCONNECTED [3:0]),
        .S({\^lopt_6 ,\^lopt_3 ,1'b1,1'b1}));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_latch_and_n" *) 
module design_1_system_cache_0_0_carry_latch_and_n__parameterized3
   (update_lock_release_reg,
    update_remove_locked,
    Carry_IN,
    M0_AXI_RLAST,
    ri_allocate_reg,
    CO,
    update_readback_available_reg);
  output update_lock_release_reg;
  output update_remove_locked;
  input Carry_IN;
  input M0_AXI_RLAST;
  input ri_allocate_reg;
  input [0:0]CO;
  input update_readback_available_reg;

  wire [0:0]CO;
  wire Carry_IN;
  wire M0_AXI_RLAST;
  wire \Using_FPGA.AND2B1L_Inst1_i_1__3_n_0 ;
  wire ri_allocate_reg;
  wire update_lock_release_reg;
  wire update_readback_available_reg;
  wire update_remove_locked;

  (* box_type = "PRIMITIVE" *) 
  AND2B1L #(
    .IS_SRI_INVERTED(1'b0)) 
    \Using_FPGA.AND2B1L_Inst1 
       (.DI(Carry_IN),
        .O(update_lock_release_reg),
        .SRI(\Using_FPGA.AND2B1L_Inst1_i_1__3_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.AND2B1L_Inst1_i_1__3 
       (.I0(M0_AXI_RLAST),
        .O(\Using_FPGA.AND2B1L_Inst1_i_1__3_n_0 ));
  LUT4 #(
    .INIT(16'h2000)) 
    update_lock_release_i_1
       (.I0(ri_allocate_reg),
        .I1(CO),
        .I2(update_lock_release_reg),
        .I3(update_readback_available_reg),
        .O(update_remove_locked));
endmodule

(* ORIG_REF_NAME = "carry_latch_or" *) 
module design_1_system_cache_0_0_carry_latch_or
   (E,
    \Use_FPGA.Full_Inst ,
    lu_mem_protect_conflict_reg);
  output [0:0]E;
  input \Use_FPGA.Full_Inst ;
  input lu_mem_protect_conflict_reg;

  wire [0:0]E;
  wire \Use_FPGA.Full_Inst ;
  wire lu_mem_protect_conflict_reg;

  (* box_type = "PRIMITIVE" *) 
  OR2L #(
    .IS_SRI_INVERTED(1'b0)) 
    \Using_FPGA.OR2L_Inst1 
       (.DI(\Use_FPGA.Full_Inst ),
        .O(E),
        .SRI(lu_mem_protect_conflict_reg));
endmodule

(* ORIG_REF_NAME = "carry_latch_or" *) 
module design_1_system_cache_0_0_carry_latch_or_202
   (ENA,
    lookup_restart_mem_done_reg,
    A21_out);
  output ENA;
  input lookup_restart_mem_done_reg;
  input A21_out;

  wire A21_out;
  wire ENA;
  wire lookup_restart_mem_done_reg;

  (* box_type = "PRIMITIVE" *) 
  OR2L #(
    .IS_SRI_INVERTED(1'b0)) 
    \Using_FPGA.OR2L_Inst1 
       (.DI(lookup_restart_mem_done_reg),
        .O(ENA),
        .SRI(A21_out));
endmodule

(* ORIG_REF_NAME = "carry_latch_or" *) 
module design_1_system_cache_0_0_carry_latch_or_277
   (SR,
    ar_pop_i,
    Q);
  output [0:0]SR;
  input ar_pop_i;
  input Q;

  wire Q;
  wire [0:0]SR;
  wire ar_pop_i;

  (* box_type = "PRIMITIVE" *) 
  OR2L #(
    .IS_SRI_INVERTED(1'b0)) 
    \Using_FPGA.OR2L_Inst1 
       (.DI(ar_pop_i),
        .O(SR),
        .SRI(Q));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module design_1_system_cache_0_0_carry_or
   (w_ready,
    S_9,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5);
  output w_ready;
  input S_9;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;

  wire S_9;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire lopt_6;
  wire w_ready;
  wire [3:3]\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = lopt_5;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(1'b0),
        .CO({\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED [3],\^lopt_4 ,\^lopt_1 ,w_ready}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED [3],\^lopt_5 ,\^lopt_2 ,1'b1}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED [3],lopt_6,\^lopt_3 ,S_9}));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module design_1_system_cache_0_0_carry_or_12
   (w_ready,
    S_8,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5);
  output w_ready;
  input S_8;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;

  wire S_8;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire lopt_6;
  wire w_ready;
  wire [3:3]\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = lopt_5;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(1'b0),
        .CO({\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED [3],\^lopt_4 ,\^lopt_1 ,w_ready}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED [3],\^lopt_5 ,\^lopt_2 ,1'b1}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED [3],lopt_6,\^lopt_3 ,S_8}));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module design_1_system_cache_0_0_carry_or_120
   (lu_mem_valid_tag_0,
    lu_mem_masked_valid_tag_0,
    D,
    \lu_mem_info_reg[Force_Hit] ,
    lu_mem_protect_conflict_reg,
    \lu_check_info_reg[KillHit] ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output lu_mem_valid_tag_0;
  input lu_mem_masked_valid_tag_0;
  input [0:0]D;
  input \lu_mem_info_reg[Force_Hit] ;
  input lu_mem_protect_conflict_reg;
  input \lu_check_info_reg[KillHit] ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire [0:0]D;
  wire S;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire \lu_check_info_reg[KillHit] ;
  wire \lu_mem_info_reg[Force_Hit] ;
  wire lu_mem_masked_valid_tag_0;
  wire lu_mem_protect_conflict_reg;
  wire lu_mem_valid_tag_0;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(lu_mem_masked_valid_tag_0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,lu_mem_valid_tag_0}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b1}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,S}));
  LUT4 #(
    .INIT(16'hABFB)) 
    \Using_FPGA.MUXCY_I_i_1__75 
       (.I0(D),
        .I1(\lu_mem_info_reg[Force_Hit] ),
        .I2(lu_mem_protect_conflict_reg),
        .I3(\lu_check_info_reg[KillHit] ),
        .O(S));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module design_1_system_cache_0_0_carry_or_121
   (lu_mem_protected_pre1_0,
    D,
    \update_release_tag_reg[Valid] ,
    lu_mem_protect_conflict_reg,
    lu_mem_valid_reg,
    \lu_mem_release_lock_hold_reg[0] ,
    DATA_OUTA,
    lopt,
    lopt_1,
    lopt_2);
  output lu_mem_protected_pre1_0;
  input [0:0]D;
  input [0:0]\update_release_tag_reg[Valid] ;
  input lu_mem_protect_conflict_reg;
  input lu_mem_valid_reg;
  input \lu_mem_release_lock_hold_reg[0] ;
  input [1:0]DATA_OUTA;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const1> ;
  wire [0:0]D;
  wire [1:0]DATA_OUTA;
  wire S;
  wire lu_mem_protect_conflict_reg;
  wire lu_mem_protected_pre1_0;
  wire \lu_mem_release_lock_hold_reg[0] ;
  wire lu_mem_valid_reg;
  wire [0:0]\update_release_tag_reg[Valid] ;

  assign lopt_1 = \<const1> ;
  assign lopt_2 = S;
  assign lu_mem_protected_pre1_0 = lopt;
  LUT6 #(
    .INIT(64'hFF57FFFFFFFFFFFF)) 
    \Using_FPGA.MUXCY_I_i_1__72 
       (.I0(\update_release_tag_reg[Valid] ),
        .I1(lu_mem_protect_conflict_reg),
        .I2(lu_mem_valid_reg),
        .I3(\lu_mem_release_lock_hold_reg[0] ),
        .I4(DATA_OUTA[1]),
        .I5(DATA_OUTA[0]),
        .O(S));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module design_1_system_cache_0_0_carry_or_122
   (lu_mem_protected_pre2_0,
    \lu_check_protected_reg[0] ,
    lu_mem_protected_pre1_0,
    \update_release_tag_reg[Valid] ,
    DATA_OUTA,
    \lu_mem_release_lock_hold_reg[0] ,
    lu_mem_protect_conflict_reg,
    lu_mem_releasing_lock,
    lu_mem_valid_reg,
    lu_mem_write_alloc,
    lu_check_write_alloc,
    lopt,
    lopt_1);
  output lu_mem_protected_pre2_0;
  output \lu_check_protected_reg[0] ;
  input lu_mem_protected_pre1_0;
  input [0:0]\update_release_tag_reg[Valid] ;
  input [0:0]DATA_OUTA;
  input \lu_mem_release_lock_hold_reg[0] ;
  input lu_mem_protect_conflict_reg;
  input [0:0]lu_mem_releasing_lock;
  input lu_mem_valid_reg;
  input lu_mem_write_alloc;
  input lu_check_write_alloc;
  output lopt;
  input lopt_1;

  wire [0:0]DATA_OUTA;
  wire S;
  wire \^lopt_1 ;
  wire lopt_2;
  wire \lu_check_protected_reg[0] ;
  wire lu_check_write_alloc;
  wire lu_mem_protect_conflict_reg;
  wire lu_mem_protected_pre1_0;
  wire lu_mem_protected_pre2_0;
  wire \lu_mem_release_lock_hold_reg[0] ;
  wire [0:0]lu_mem_releasing_lock;
  wire lu_mem_valid_reg;
  wire lu_mem_write_alloc;
  wire [0:0]\update_release_tag_reg[Valid] ;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED ;

  assign lopt = \^lopt_1 ;
  assign lopt_2 = lopt_1;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(lu_mem_protected_pre1_0),
        .CO({\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED [3:2],\^lopt_1 ,lu_mem_protected_pre2_0}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED [3:2],lopt_2,1'b1}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED [3:2],lopt_2,S}));
  LUT6 #(
    .INIT(64'hDFDFFFFFDFDFFFDF)) 
    \Using_FPGA.MUXCY_I_i_1__71 
       (.I0(\update_release_tag_reg[Valid] ),
        .I1(\lu_check_protected_reg[0] ),
        .I2(DATA_OUTA),
        .I3(\lu_mem_release_lock_hold_reg[0] ),
        .I4(lu_mem_protect_conflict_reg),
        .I5(lu_mem_releasing_lock),
        .O(S));
  LUT4 #(
    .INIT(16'h0F77)) 
    \Using_FPGA.MUXCY_I_i_2__9 
       (.I0(lu_mem_valid_reg),
        .I1(lu_mem_write_alloc),
        .I2(lu_check_write_alloc),
        .I3(lu_mem_protect_conflict_reg),
        .O(\lu_check_protected_reg[0] ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module design_1_system_cache_0_0_carry_or_123
   (D,
    lu_mem_protected_pre2_0,
    lopt,
    lopt_1);
  output [0:0]D;
  input lu_mem_protected_pre2_0;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire [0:0]D;
  wire lu_mem_protected_pre2_0;

  assign D = lopt;
  assign lopt_1 = \<const1> ;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module design_1_system_cache_0_0_carry_or_137
   (lu_mem_valid_tag_1,
    lu_mem_masked_valid_tag_1,
    D,
    \lu_mem_info_reg[Force_Hit] ,
    lu_mem_protect_conflict_reg,
    \lu_check_info_reg[KillHit] ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output lu_mem_valid_tag_1;
  input lu_mem_masked_valid_tag_1;
  input [0:0]D;
  input \lu_mem_info_reg[Force_Hit] ;
  input lu_mem_protect_conflict_reg;
  input \lu_check_info_reg[KillHit] ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire [0:0]D;
  wire S;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire \lu_check_info_reg[KillHit] ;
  wire \lu_mem_info_reg[Force_Hit] ;
  wire lu_mem_masked_valid_tag_1;
  wire lu_mem_protect_conflict_reg;
  wire lu_mem_valid_tag_1;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(lu_mem_masked_valid_tag_1),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,lu_mem_valid_tag_1}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b1}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,S}));
  LUT4 #(
    .INIT(16'h57F7)) 
    \Using_FPGA.MUXCY_I_i_1__74 
       (.I0(D),
        .I1(\lu_mem_info_reg[Force_Hit] ),
        .I2(lu_mem_protect_conflict_reg),
        .I3(\lu_check_info_reg[KillHit] ),
        .O(S));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module design_1_system_cache_0_0_carry_or_138
   (lu_mem_protected_pre1_1,
    D,
    \update_release_tag_reg[Valid] ,
    lu_mem_protect_conflict_reg,
    lu_mem_valid_reg,
    \lu_mem_release_lock_hold_reg[1] ,
    DATA_OUTA,
    lopt,
    lopt_1,
    lopt_2);
  output lu_mem_protected_pre1_1;
  input [0:0]D;
  input [0:0]\update_release_tag_reg[Valid] ;
  input lu_mem_protect_conflict_reg;
  input lu_mem_valid_reg;
  input \lu_mem_release_lock_hold_reg[1] ;
  input [1:0]DATA_OUTA;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const1> ;
  wire [0:0]D;
  wire [1:0]DATA_OUTA;
  wire S;
  wire lu_mem_protect_conflict_reg;
  wire lu_mem_protected_pre1_1;
  wire \lu_mem_release_lock_hold_reg[1] ;
  wire lu_mem_valid_reg;
  wire [0:0]\update_release_tag_reg[Valid] ;

  assign lopt_1 = \<const1> ;
  assign lopt_2 = S;
  assign lu_mem_protected_pre1_1 = lopt;
  LUT6 #(
    .INIT(64'hFF57FFFFFFFFFFFF)) 
    \Using_FPGA.MUXCY_I_i_1__69 
       (.I0(\update_release_tag_reg[Valid] ),
        .I1(lu_mem_protect_conflict_reg),
        .I2(lu_mem_valid_reg),
        .I3(\lu_mem_release_lock_hold_reg[1] ),
        .I4(DATA_OUTA[1]),
        .I5(DATA_OUTA[0]),
        .O(S));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module design_1_system_cache_0_0_carry_or_139
   (lu_mem_protected_pre2_1,
    lu_mem_protected_pre1_1,
    \update_release_tag_reg[Valid] ,
    lu_mem_valid_reg,
    DATA_OUTA,
    \lu_mem_release_lock_hold_reg[1] ,
    lu_mem_protect_conflict_reg,
    lu_mem_releasing_lock,
    lopt,
    lopt_1);
  output lu_mem_protected_pre2_1;
  input lu_mem_protected_pre1_1;
  input [0:0]\update_release_tag_reg[Valid] ;
  input lu_mem_valid_reg;
  input [0:0]DATA_OUTA;
  input \lu_mem_release_lock_hold_reg[1] ;
  input lu_mem_protect_conflict_reg;
  input [0:0]lu_mem_releasing_lock;
  output lopt;
  input lopt_1;

  wire [0:0]DATA_OUTA;
  wire S;
  wire \^lopt_1 ;
  wire lopt_2;
  wire lu_mem_protect_conflict_reg;
  wire lu_mem_protected_pre1_1;
  wire lu_mem_protected_pre2_1;
  wire \lu_mem_release_lock_hold_reg[1] ;
  wire [0:0]lu_mem_releasing_lock;
  wire lu_mem_valid_reg;
  wire [0:0]\update_release_tag_reg[Valid] ;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED ;

  assign lopt = \^lopt_1 ;
  assign lopt_2 = lopt_1;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(lu_mem_protected_pre1_1),
        .CO({\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED [3:2],\^lopt_1 ,lu_mem_protected_pre2_1}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED [3:2],lopt_2,1'b1}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED [3:2],lopt_2,S}));
  LUT6 #(
    .INIT(64'hDFDFFFFFDFDFFFDF)) 
    \Using_FPGA.MUXCY_I_i_1__70 
       (.I0(\update_release_tag_reg[Valid] ),
        .I1(lu_mem_valid_reg),
        .I2(DATA_OUTA),
        .I3(\lu_mem_release_lock_hold_reg[1] ),
        .I4(lu_mem_protect_conflict_reg),
        .I5(lu_mem_releasing_lock),
        .O(S));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module design_1_system_cache_0_0_carry_or_140
   (D,
    lu_mem_protected_pre2_1,
    lopt,
    lopt_1);
  output [0:0]D;
  input lu_mem_protected_pre2_1;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire [0:0]D;
  wire lu_mem_protected_pre2_1;

  assign D = lopt;
  assign lopt_1 = \<const1> ;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module design_1_system_cache_0_0_carry_or_144
   (lud_addr_piperun,
    lud_mem_speculative_valid_reg,
    S,
    lud_addr_piperun_pre2,
    lud_mem_piperun,
    lud_mem_speculative_valid,
    lopt,
    lopt_1);
  output lud_addr_piperun;
  output lud_mem_speculative_valid_reg;
  input S;
  input lud_addr_piperun_pre2;
  input lud_mem_piperun;
  input lud_mem_speculative_valid;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire S;
  wire lud_addr_piperun;
  wire lud_addr_piperun_pre2;
  wire lud_mem_piperun;
  wire lud_mem_speculative_valid;
  wire lud_mem_speculative_valid_reg;

  assign lopt_1 = \<const1> ;
  assign lud_addr_piperun = lopt;
  VCC VCC
       (.P(\<const1> ));
  LUT3 #(
    .INIT(8'hBA)) 
    lud_mem_speculative_valid_i_1
       (.I0(lud_addr_piperun),
        .I1(lud_mem_piperun),
        .I2(lud_mem_speculative_valid),
        .O(lud_mem_speculative_valid_reg));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module design_1_system_cache_0_0_carry_or_149
   (lud_step_want_step_offset,
    S,
    lud_addr_piperun,
    lopt,
    lopt_1);
  output lud_step_want_step_offset;
  input S;
  input lud_addr_piperun;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire S;
  wire lud_addr_piperun;
  wire lud_step_want_step_offset;

  assign lopt_1 = \<const1> ;
  assign lud_step_want_step_offset = lopt;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module design_1_system_cache_0_0_carry_or_155
   (lookup_data_hit_stall,
    lookup_data_hit_pre_stall,
    lud_write_hit_done_reg);
  output lookup_data_hit_stall;
  input lookup_data_hit_pre_stall;
  input lud_write_hit_done_reg;

  wire S;
  wire lookup_data_hit_pre_stall;
  wire lookup_data_hit_stall;
  wire lud_write_hit_done_reg;
  wire [3:1]\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED ;

  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(lookup_data_hit_pre_stall),
        .CO({\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED [3:1],lookup_data_hit_stall}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED [3:1],1'b1}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED [3:1],S}));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.MUXCY_I_i_1__88 
       (.I0(lud_write_hit_done_reg),
        .O(S));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module design_1_system_cache_0_0_carry_or_162
   (lu_io_lud_stall_pipe,
    S,
    lu_io_full_block_read,
    lopt,
    lopt_1);
  output lu_io_lud_stall_pipe;
  input S;
  input lu_io_full_block_read;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire S;
  wire lu_io_full_block_read;
  wire lu_io_lud_stall_pipe;

  assign lopt_1 = \<const1> ;
  assign lu_io_lud_stall_pipe = lopt;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module design_1_system_cache_0_0_carry_or_189
   (lu_mem_piperun_pre2,
    lu_check_wr_already_pushed_reg,
    E,
    lopt,
    lopt_1);
  output lu_mem_piperun_pre2;
  input lu_check_wr_already_pushed_reg;
  input [0:0]E;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire [0:0]E;
  wire lu_check_wr_already_pushed_reg;
  wire lu_mem_piperun_pre2;

  assign lopt_1 = \<const1> ;
  assign lu_mem_piperun_pre2 = lopt;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module design_1_system_cache_0_0_carry_or_200
   (protection_with_coherency,
    filtered_protection_bit,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output protection_with_coherency;
  input filtered_protection_bit;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire filtered_protection_bit;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire protection_with_coherency;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(filtered_protection_bit),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,protection_with_coherency}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b1}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,1'b1}));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module design_1_system_cache_0_0_carry_or_217
   (protected_bit,
    protected_miss_valid,
    Q,
    \lu_check_protected_reg[1] ,
    lopt,
    lopt_1,
    lopt_2);
  output protected_bit;
  input protected_miss_valid;
  input [1:0]Q;
  input [1:0]\lu_check_protected_reg[1] ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const1> ;
  wire [1:0]Q;
  wire S;
  wire [1:0]\lu_check_protected_reg[1] ;
  wire protected_bit;
  wire protected_miss_valid;

  assign lopt_1 = \<const1> ;
  assign lopt_2 = S;
  assign protected_bit = lopt;
  LUT4 #(
    .INIT(16'h0777)) 
    \Using_FPGA.MUXCY_I_i_1__100 
       (.I0(Q[0]),
        .I1(\lu_check_protected_reg[1] [0]),
        .I2(\lu_check_protected_reg[1] [1]),
        .I3(Q[1]),
        .O(S));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module design_1_system_cache_0_0_carry_or_218
   (carry_1,
    S_7,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output carry_1;
  input S_7;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire S_7;
  wire carry_1;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,carry_1}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b1}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,S_7}));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module design_1_system_cache_0_0_carry_or_219
   (lru_protected_bit,
    S_8,
    carry_1,
    lopt,
    lopt_1);
  output lru_protected_bit;
  input S_8;
  input carry_1;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire S_8;
  wire carry_1;
  wire lru_protected_bit;

  assign lopt_1 = \<const1> ;
  assign lru_protected_bit = lopt;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module design_1_system_cache_0_0_carry_or_227
   (dirty_bit,
    S,
    dirty_miss_valid,
    lopt,
    lopt_1);
  output dirty_bit;
  input S;
  input dirty_miss_valid;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire S;
  wire dirty_bit;
  wire dirty_miss_valid;

  assign dirty_bit = lopt;
  assign lopt_1 = \<const1> ;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module design_1_system_cache_0_0_carry_or_228
   (carry_1,
    S_6,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output carry_1;
  input S_6;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire S_6;
  wire carry_1;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,carry_1}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b1}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,S_6}));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module design_1_system_cache_0_0_carry_or_229
   (lru_dirty_bit,
    S,
    carry_1,
    lopt,
    lopt_1);
  output lru_dirty_bit;
  input S;
  input carry_1;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire S;
  wire carry_1;
  wire lru_dirty_bit;

  assign lopt_1 = \<const1> ;
  assign lru_dirty_bit = lopt;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module design_1_system_cache_0_0_carry_or_233
   (lu_check_tag_hit_all_carry,
    Q,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output lu_check_tag_hit_all_carry;
  input [1:0]Q;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire [1:0]Q;
  wire \Using_FPGA.MUXCY_I_i_1__135_n_0 ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire lu_check_tag_hit_all_carry;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,lu_check_tag_hit_all_carry}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b1}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\Using_FPGA.MUXCY_I_i_1__135_n_0 }));
  LUT2 #(
    .INIT(4'h1)) 
    \Using_FPGA.MUXCY_I_i_1__135 
       (.I0(Q[1]),
        .I1(Q[0]),
        .O(\Using_FPGA.MUXCY_I_i_1__135_n_0 ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module design_1_system_cache_0_0_carry_or_241
   (carry_1,
    lookup_io_stall_carry_no_wait,
    lu_check_wait_for_update,
    \lu_check_info_reg[Port_Num][0] ,
    update_write_miss_busy,
    \lu_check_info_reg[Wr] ,
    lopt,
    lopt_1,
    lopt_2);
  output carry_1;
  input lookup_io_stall_carry_no_wait;
  input lu_check_wait_for_update;
  input \lu_check_info_reg[Port_Num][0] ;
  input [0:0]update_write_miss_busy;
  input \lu_check_info_reg[Wr] ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const1> ;
  wire S;
  wire carry_1;
  wire lookup_io_stall_carry_no_wait;
  wire \lu_check_info_reg[Port_Num][0] ;
  wire \lu_check_info_reg[Wr] ;
  wire lu_check_wait_for_update;
  wire [0:0]update_write_miss_busy;

  assign carry_1 = lopt;
  assign lopt_1 = \<const1> ;
  assign lopt_2 = S;
  LUT4 #(
    .INIT(16'hEFFF)) 
    \Using_FPGA.MUXCY_I_i_1__82 
       (.I0(lu_check_wait_for_update),
        .I1(\lu_check_info_reg[Port_Num][0] ),
        .I2(update_write_miss_busy),
        .I3(\lu_check_info_reg[Wr] ),
        .O(S));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module design_1_system_cache_0_0_carry_or_242
   (Carry_IN,
    carry_1,
    lu_check_wait_for_update,
    \lu_check_info_reg[Port_Num][0] ,
    update_write_miss_busy,
    \lu_check_info_reg[Wr] ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output Carry_IN;
  input carry_1;
  input lu_check_wait_for_update;
  input \lu_check_info_reg[Port_Num][0] ;
  input [0:0]update_write_miss_busy;
  input \lu_check_info_reg[Wr] ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire Carry_IN;
  wire S;
  wire carry_1;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire \lu_check_info_reg[Port_Num][0] ;
  wire \lu_check_info_reg[Wr] ;
  wire lu_check_wait_for_update;
  wire [0:0]update_write_miss_busy;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(carry_1),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,Carry_IN}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b1}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,S}));
  LUT4 #(
    .INIT(16'hBFFF)) 
    \Using_FPGA.MUXCY_I_i_1__85 
       (.I0(lu_check_wait_for_update),
        .I1(\lu_check_info_reg[Port_Num][0] ),
        .I2(update_write_miss_busy),
        .I3(\lu_check_info_reg[Wr] ),
        .O(S));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module design_1_system_cache_0_0_carry_or_243
   (carry_1,
    lu_io_lud_stall_pipe,
    \lu_check_info_reg[Wr] ,
    \access_data_info[0,0][Valid] ,
    \lu_check_info_reg[Port_Num][0] ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output carry_1;
  input lu_io_lud_stall_pipe;
  input \lu_check_info_reg[Wr] ;
  input \access_data_info[0,0][Valid] ;
  input \lu_check_info_reg[Port_Num][0] ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire S;
  wire \access_data_info[0,0][Valid] ;
  wire carry_1;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire \lu_check_info_reg[Port_Num][0] ;
  wire \lu_check_info_reg[Wr] ;
  wire lu_io_lud_stall_pipe;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(lu_io_lud_stall_pipe),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,carry_1}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b1}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,S}));
  LUT3 #(
    .INIT(8'hFD)) 
    \Using_FPGA.MUXCY_I_i_1__53 
       (.I0(\lu_check_info_reg[Wr] ),
        .I1(\access_data_info[0,0][Valid] ),
        .I2(\lu_check_info_reg[Port_Num][0] ),
        .O(S));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module design_1_system_cache_0_0_carry_or_244
   (lookup_io_stall_carry,
    carry_1,
    \lu_check_info_reg[Wr] ,
    \access_data_info[0,1][Valid] ,
    \lu_check_info_reg[Port_Num][0] ,
    lopt,
    lopt_1,
    lopt_2);
  output lookup_io_stall_carry;
  input carry_1;
  input \lu_check_info_reg[Wr] ;
  input \access_data_info[0,1][Valid] ;
  input \lu_check_info_reg[Port_Num][0] ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const1> ;
  wire S;
  wire \access_data_info[0,1][Valid] ;
  wire carry_1;
  wire lookup_io_stall_carry;
  wire \lu_check_info_reg[Port_Num][0] ;
  wire \lu_check_info_reg[Wr] ;

  assign lookup_io_stall_carry = lopt;
  assign lopt_1 = \<const1> ;
  assign lopt_2 = S;
  LUT3 #(
    .INIT(8'hDF)) 
    \Using_FPGA.MUXCY_I_i_1__92 
       (.I0(\lu_check_info_reg[Wr] ),
        .I1(\access_data_info[0,1][Valid] ),
        .I2(\lu_check_info_reg[Port_Num][0] ),
        .O(S));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module design_1_system_cache_0_0_carry_or_245
   (carry_1,
    \lud_reg_port_num_reg[0] ,
    \read_data_status[0,0][Hit_Full] ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output carry_1;
  input \lud_reg_port_num_reg[0] ;
  input \read_data_status[0,0][Hit_Full] ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire S;
  wire carry_1;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire \lud_reg_port_num_reg[0] ;
  wire \read_data_status[0,0][Hit_Full] ;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,carry_1}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b1}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,S}));
  LUT2 #(
    .INIT(4'hB)) 
    \Using_FPGA.MUXCY_I_i_1__89 
       (.I0(\lud_reg_port_num_reg[0] ),
        .I1(\read_data_status[0,0][Hit_Full] ),
        .O(S));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module design_1_system_cache_0_0_carry_or_246
   (lu_io_selected_full,
    S_4,
    carry_1,
    lopt,
    lopt_1);
  output lu_io_selected_full;
  input S_4;
  input carry_1;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire S_4;
  wire carry_1;
  wire lu_io_selected_full;

  assign lopt_1 = \<const1> ;
  assign lu_io_selected_full = lopt;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module design_1_system_cache_0_0_carry_or_248
   (carry_1,
    lookup_protect_conflict,
    update_write_miss_busy,
    \lu_check_info_reg[Port_Num][0] ,
    lu_check_wait_for_update,
    lopt,
    lopt_1,
    lopt_2);
  output carry_1;
  input lookup_protect_conflict;
  input [0:0]update_write_miss_busy;
  input \lu_check_info_reg[Port_Num][0] ;
  input lu_check_wait_for_update;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const1> ;
  wire S;
  wire carry_1;
  wire lookup_protect_conflict;
  wire \lu_check_info_reg[Port_Num][0] ;
  wire lu_check_wait_for_update;
  wire [0:0]update_write_miss_busy;

  assign carry_1 = lopt;
  assign lopt_1 = \<const1> ;
  assign lopt_2 = S;
  LUT3 #(
    .INIT(8'hFD)) 
    \Using_FPGA.MUXCY_I_i_1__83 
       (.I0(update_write_miss_busy),
        .I1(\lu_check_info_reg[Port_Num][0] ),
        .I2(lu_check_wait_for_update),
        .O(S));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module design_1_system_cache_0_0_carry_or_249
   (lookup_data_hit_pre_stall,
    carry_1,
    update_write_miss_busy,
    \lu_check_info_reg[Port_Num][0] ,
    lu_check_wait_for_update,
    lopt,
    lopt_1,
    lopt_2);
  output lookup_data_hit_pre_stall;
  input carry_1;
  input [0:0]update_write_miss_busy;
  input \lu_check_info_reg[Port_Num][0] ;
  input lu_check_wait_for_update;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const1> ;
  wire S;
  wire carry_1;
  wire lookup_data_hit_pre_stall;
  wire \lu_check_info_reg[Port_Num][0] ;
  wire lu_check_wait_for_update;
  wire [0:0]update_write_miss_busy;

  assign lookup_data_hit_pre_stall = lopt;
  assign lopt_1 = \<const1> ;
  assign lopt_2 = S;
  LUT3 #(
    .INIT(8'hF7)) 
    \Using_FPGA.MUXCY_I_i_1__86 
       (.I0(update_write_miss_busy),
        .I1(\lu_check_info_reg[Port_Num][0] ),
        .I2(lu_check_wait_for_update),
        .O(S));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module design_1_system_cache_0_0_carry_or_27
   (port_allow_ready_0,
    port_allow_ready_pre_0,
    lopt,
    lopt_1);
  output port_allow_ready_0;
  input port_allow_ready_pre_0;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire port_allow_ready_0;
  wire port_allow_ready_pre_0;

  assign lopt_1 = \<const1> ;
  assign port_allow_ready_0 = lopt;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module design_1_system_cache_0_0_carry_or_278
   (be_no_block_1to2_part,
    \Use_FPGA.Full_Inst ,
    Carry_OUT,
    lopt,
    lopt_1);
  output be_no_block_1to2_part;
  input \Use_FPGA.Full_Inst ;
  input Carry_OUT;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire Carry_OUT;
  wire \Use_FPGA.Full_Inst ;
  wire be_no_block_1to2_part;

  assign be_no_block_1to2_part = lopt;
  assign lopt_1 = \<const1> ;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module design_1_system_cache_0_0_carry_or_279
   (be_no_block_1to3,
    \Order_Optimization_4.search_count_reg[0] ,
    be_no_block_1to2,
    Q,
    \Order_Optimization_4.search_count_reg[4] ,
    lopt,
    lopt_1,
    lopt_2);
  output be_no_block_1to3;
  output \Order_Optimization_4.search_count_reg[0] ;
  input be_no_block_1to2;
  input [4:0]Q;
  input [4:0]\Order_Optimization_4.search_count_reg[4] ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const1> ;
  wire \Order_Optimization_4.search_count_reg[0] ;
  wire [4:0]\Order_Optimization_4.search_count_reg[4] ;
  wire [4:0]Q;
  wire S;
  wire \Using_FPGA.MUXCY_I_i_3__5_n_0 ;
  wire \Using_FPGA.MUXCY_I_i_4__3_n_0 ;
  wire be_no_block_1to2;
  wire be_no_block_1to3;

  assign be_no_block_1to3 = lopt;
  assign lopt_1 = \<const1> ;
  assign lopt_2 = S;
  LUT3 #(
    .INIT(8'h0B)) 
    \Using_FPGA.MUXCY_I_i_1__104 
       (.I0(Q[4]),
        .I1(\Order_Optimization_4.search_count_reg[4] [4]),
        .I2(\Order_Optimization_4.search_count_reg[0] ),
        .O(S));
  LUT6 #(
    .INIT(64'hFFFF00004F440000)) 
    \Using_FPGA.MUXCY_I_i_2__13 
       (.I0(Q[3]),
        .I1(\Order_Optimization_4.search_count_reg[4] [3]),
        .I2(Q[2]),
        .I3(\Order_Optimization_4.search_count_reg[4] [2]),
        .I4(\Using_FPGA.MUXCY_I_i_3__5_n_0 ),
        .I5(\Using_FPGA.MUXCY_I_i_4__3_n_0 ),
        .O(\Order_Optimization_4.search_count_reg[0] ));
  LUT4 #(
    .INIT(16'hD0DD)) 
    \Using_FPGA.MUXCY_I_i_3__5 
       (.I0(Q[3]),
        .I1(\Order_Optimization_4.search_count_reg[4] [3]),
        .I2(\Order_Optimization_4.search_count_reg[4] [4]),
        .I3(Q[4]),
        .O(\Using_FPGA.MUXCY_I_i_3__5_n_0 ));
  LUT6 #(
    .INIT(64'h2202FF0F00002202)) 
    \Using_FPGA.MUXCY_I_i_4__3 
       (.I0(\Order_Optimization_4.search_count_reg[4] [0]),
        .I1(Q[0]),
        .I2(Q[2]),
        .I3(\Order_Optimization_4.search_count_reg[4] [2]),
        .I4(Q[1]),
        .I5(\Order_Optimization_4.search_count_reg[4] [1]),
        .O(\Using_FPGA.MUXCY_I_i_4__3_n_0 ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module design_1_system_cache_0_0_carry_or_28
   (port_allow_ready_pre_0,
    idle_carry_3,
    arb_token_0,
    lopt,
    lopt_1,
    lopt_2);
  output port_allow_ready_pre_0;
  input idle_carry_3;
  input arb_token_0;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const1> ;
  wire S;
  wire arb_token_0;
  wire idle_carry_3;
  wire port_allow_ready_pre_0;

  assign lopt_1 = \<const1> ;
  assign lopt_2 = S;
  assign port_allow_ready_pre_0 = lopt;
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.MUXCY_I_i_1__9 
       (.I0(arb_token_0),
        .O(S));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module design_1_system_cache_0_0_carry_or_280
   (be_no_block_1to4,
    S,
    be_no_block_1to3,
    lopt,
    lopt_1);
  output be_no_block_1to4;
  input S;
  input be_no_block_1to3;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire S;
  wire be_no_block_1to3;
  wire be_no_block_1to4;

  assign be_no_block_1to4 = lopt;
  assign lopt_1 = \<const1> ;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module design_1_system_cache_0_0_carry_or_281
   (no_write_blocking_read,
    be_no_block_1to4,
    Q,
    lopt,
    lopt_1,
    lopt_2);
  output no_write_blocking_read;
  input be_no_block_1to4;
  input [4:0]Q;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const1> ;
  wire [4:0]Q;
  wire S;
  wire be_no_block_1to4;
  wire no_write_blocking_read;

  assign lopt_1 = \<const1> ;
  assign lopt_2 = S;
  assign no_write_blocking_read = lopt;
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \Using_FPGA.MUXCY_I_i_1__103 
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(Q[4]),
        .I3(Q[3]),
        .I4(Q[2]),
        .O(S));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module design_1_system_cache_0_0_carry_or_35
   (port_allow_ready_1,
    port_allow_ready_pre_1,
    lopt,
    lopt_1);
  output port_allow_ready_1;
  input port_allow_ready_pre_1;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire port_allow_ready_1;
  wire port_allow_ready_pre_1;

  assign lopt_1 = \<const1> ;
  assign port_allow_ready_1 = lopt;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module design_1_system_cache_0_0_carry_or_36
   (port_allow_ready_pre_1,
    idle_carry_2,
    arb_token_1,
    lopt,
    lopt_1,
    lopt_2);
  output port_allow_ready_pre_1;
  input idle_carry_2;
  input arb_token_1;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const1> ;
  wire S;
  wire arb_token_1;
  wire idle_carry_2;
  wire port_allow_ready_pre_1;

  assign lopt_1 = \<const1> ;
  assign lopt_2 = S;
  assign port_allow_ready_pre_1 = lopt;
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.MUXCY_I_i_1__10 
       (.I0(arb_token_1),
        .O(S));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module design_1_system_cache_0_0_carry_or_55
   (WEB,
    update_tag_remove_lock_0,
    update_way,
    update_remove_locked_safe3,
    \ri_way_reg[0] ,
    update_readback_available_reg,
    update_need_tag_write,
    update_done_tag_write_reg,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]WEB;
  input update_tag_remove_lock_0;
  input update_way;
  input update_remove_locked_safe3;
  input \ri_way_reg[0] ;
  input update_readback_available_reg;
  input update_need_tag_write;
  input update_done_tag_write_reg;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const1> ;
  wire \Using_FPGA.MUXCY_I_i_1__148_n_0 ;
  wire [0:0]WEB;
  wire \ri_way_reg[0] ;
  wire update_done_tag_write_reg;
  wire update_need_tag_write;
  wire update_readback_available_reg;
  wire update_remove_locked_safe3;
  wire update_tag_remove_lock_0;
  wire update_way;

  assign WEB = lopt;
  assign lopt_1 = \<const1> ;
  assign lopt_2 = \Using_FPGA.MUXCY_I_i_1__148_n_0 ;
  LUT6 #(
    .INIT(64'hFFFFFFFFFFE2FFFF)) 
    \Using_FPGA.MUXCY_I_i_1__148 
       (.I0(update_way),
        .I1(update_remove_locked_safe3),
        .I2(\ri_way_reg[0] ),
        .I3(update_readback_available_reg),
        .I4(update_need_tag_write),
        .I5(update_done_tag_write_reg),
        .O(\Using_FPGA.MUXCY_I_i_1__148_n_0 ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module design_1_system_cache_0_0_carry_or_60
   (WEB,
    update_tag_remove_lock_1,
    update_readback_available_reg,
    update_way,
    update_need_tag_write,
    update_done_tag_write_reg,
    update_remove_locked_safe3,
    \ri_way_reg[0] ,
    lopt,
    lopt_1,
    lopt_2);
  output [0:0]WEB;
  input update_tag_remove_lock_1;
  input update_readback_available_reg;
  input update_way;
  input update_need_tag_write;
  input update_done_tag_write_reg;
  input update_remove_locked_safe3;
  input \ri_way_reg[0] ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const1> ;
  wire \Using_FPGA.MUXCY_I_i_1__149_n_0 ;
  wire [0:0]WEB;
  wire \ri_way_reg[0] ;
  wire update_done_tag_write_reg;
  wire update_need_tag_write;
  wire update_readback_available_reg;
  wire update_remove_locked_safe3;
  wire update_tag_remove_lock_1;
  wire update_way;

  assign WEB = lopt;
  assign lopt_1 = \<const1> ;
  assign lopt_2 = \Using_FPGA.MUXCY_I_i_1__149_n_0 ;
  LUT6 #(
    .INIT(64'hFFAFFFBFFFFFFFBF)) 
    \Using_FPGA.MUXCY_I_i_1__149 
       (.I0(update_readback_available_reg),
        .I1(update_way),
        .I2(update_need_tag_write),
        .I3(update_done_tag_write_reg),
        .I4(update_remove_locked_safe3),
        .I5(\ri_way_reg[0] ),
        .O(\Using_FPGA.MUXCY_I_i_1__149_n_0 ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module design_1_system_cache_0_0_carry_or_75
   (update_read_miss_use_ok,
    update_read_miss_ongoing_reg,
    ud_rm_available,
    lopt,
    lopt_1);
  output update_read_miss_use_ok;
  input update_read_miss_ongoing_reg;
  input ud_rm_available;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire ud_rm_available;
  wire update_read_miss_ongoing_reg;
  wire update_read_miss_use_ok;

  assign lopt_1 = \<const1> ;
  assign update_read_miss_use_ok = lopt;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module design_1_system_cache_0_0_carry_or_76
   (Carry_IN,
    \Long_External_Burst.update_rb_pos_phase_reg ,
    S,
    update_data_we,
    \Long_External_Burst.update_rb_pos_phase_reg_0 ,
    ri_allocate_reg,
    update_read_miss_ongoing_reg,
    Q,
    \update_word_cnt_len_reg[5] ,
    lopt,
    lopt_1);
  output Carry_IN;
  output \Long_External_Burst.update_rb_pos_phase_reg ;
  input S;
  input update_data_we;
  input \Long_External_Burst.update_rb_pos_phase_reg_0 ;
  input ri_allocate_reg;
  input update_read_miss_ongoing_reg;
  input Q;
  input [3:0]\update_word_cnt_len_reg[5] ;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire Carry_IN;
  wire \Long_External_Burst.update_rb_pos_phase_i_2_n_0 ;
  wire \Long_External_Burst.update_rb_pos_phase_reg ;
  wire \Long_External_Burst.update_rb_pos_phase_reg_0 ;
  wire Q;
  wire S;
  wire ri_allocate_reg;
  wire update_data_we;
  wire update_read_miss_ongoing_reg;
  wire [3:0]\update_word_cnt_len_reg[5] ;

  assign Carry_IN = lopt;
  assign lopt_1 = \<const1> ;
  LUT5 #(
    .INIT(32'h0000E222)) 
    \Long_External_Burst.update_rb_pos_phase_i_1 
       (.I0(\Long_External_Burst.update_rb_pos_phase_reg_0 ),
        .I1(Carry_IN),
        .I2(ri_allocate_reg),
        .I3(update_read_miss_ongoing_reg),
        .I4(\Long_External_Burst.update_rb_pos_phase_i_2_n_0 ),
        .O(\Long_External_Burst.update_rb_pos_phase_reg ));
  LUT6 #(
    .INIT(64'hEEEEEEEEEEEEEEAE)) 
    \Long_External_Burst.update_rb_pos_phase_i_2 
       (.I0(Q),
        .I1(Carry_IN),
        .I2(\update_word_cnt_len_reg[5] [1]),
        .I3(\update_word_cnt_len_reg[5] [2]),
        .I4(\update_word_cnt_len_reg[5] [0]),
        .I5(\update_word_cnt_len_reg[5] [3]),
        .O(\Long_External_Burst.update_rb_pos_phase_i_2_n_0 ));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module design_1_system_cache_0_0_carry_or_80
   (update_need_tag_write_pre5,
    ud_new_tag_valid2,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output update_need_tag_write_pre5;
  input ud_new_tag_valid2;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire ud_new_tag_valid2;
  wire update_need_tag_write_pre5;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,update_need_tag_write_pre5}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b1}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,ud_new_tag_valid2}));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module design_1_system_cache_0_0_carry_or_81
   (update_need_tag_write_pre3,
    S,
    update_need_tag_write_pre4,
    lopt,
    lopt_1);
  output update_need_tag_write_pre3;
  input S;
  input update_need_tag_write_pre4;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire S;
  wire update_need_tag_write_pre3;
  wire update_need_tag_write_pre4;

  assign lopt_1 = \<const1> ;
  assign update_need_tag_write_pre3 = lopt;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module design_1_system_cache_0_0_carry_or_82
   (update_need_tag_write_pre2,
    S_2,
    update_need_tag_write_pre3,
    lopt,
    lopt_1);
  output update_need_tag_write_pre2;
  input S_2;
  input update_need_tag_write_pre3;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire S_2;
  wire update_need_tag_write_pre2;
  wire update_need_tag_write_pre3;

  assign lopt_1 = \<const1> ;
  assign update_need_tag_write_pre2 = lopt;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module design_1_system_cache_0_0_carry_or_83
   (update_need_tag_write_pre1,
    \update_info_reg[Allocate] ,
    update_need_tag_write_pre2,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output update_need_tag_write_pre1;
  input \update_info_reg[Allocate] ;
  input update_need_tag_write_pre2;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire \update_info_reg[Allocate] ;
  wire update_need_tag_write_pre1;
  wire update_need_tag_write_pre2;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(update_need_tag_write_pre2),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,update_need_tag_write_pre1}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b1}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\update_info_reg[Allocate] }));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module design_1_system_cache_0_0_carry_or__parameterized2
   (lookup_md_or_wm,
    lookup_miss_dirty_no_clean,
    Q,
    \lu_check_info_reg[Wr] ,
    lopt,
    lopt_1,
    lopt_2);
  output lookup_md_or_wm;
  input lookup_miss_dirty_no_clean;
  input [1:0]Q;
  input \lu_check_info_reg[Wr] ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const1> ;
  (* RTL_KEEP = "true" *) wire A_N;
  wire [1:0]Q;
  wire lookup_md_or_wm;
  wire lookup_miss_dirty_no_clean;
  wire \lu_check_info_reg[Wr] ;

  assign lookup_md_or_wm = lopt;
  assign lopt_1 = \<const1> ;
  assign lopt_2 = A_N;
  LUT3 #(
    .INIT(8'hEF)) 
    A_N_inferred_i_1
       (.I0(Q[1]),
        .I1(Q[0]),
        .I2(\lu_check_info_reg[Wr] ),
        .O(A_N));
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module design_1_system_cache_0_0_carry_or__parameterized2_207
   (lookup_md_or_wm_or_whne,
    lookup_md_or_wm,
    lopt,
    lopt_1,
    lopt_2);
  output lookup_md_or_wm_or_whne;
  input lookup_md_or_wm;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const1> ;
  (* RTL_KEEP = "true" *) wire A_N;
  wire lookup_md_or_wm;
  wire lookup_md_or_wm_or_whne;

  assign lookup_md_or_wm_or_whne = lopt;
  assign lopt_1 = \<const1> ;
  assign lopt_2 = A_N;
  VCC VCC
       (.P(\<const1> ));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b1),
        .O(A_N));
endmodule

(* ORIG_REF_NAME = "carry_or" *) 
module design_1_system_cache_0_0_carry_or__parameterized2_208
   (lookup_md_or_wm_or_whne2,
    lookup_md_or_wm_or_whne,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output lookup_md_or_wm_or_whne2;
  input lookup_md_or_wm_or_whne;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  (* RTL_KEEP = "true" *) wire A_N;
  wire lookup_md_or_wm_or_whne;
  wire lookup_md_or_wm_or_whne2;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire [3:0]\NLW_Using_FPGA_Keep.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA_Keep.MUXCY_I_CARRY4 
       (.CI(lookup_md_or_wm_or_whne),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,lookup_md_or_wm_or_whne2}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b1}),
        .O(\NLW_Using_FPGA_Keep.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,A_N}));
  LUT1 #(
    .INIT(2'h2)) 
    i_0
       (.I0(1'b1),
        .O(A_N));
endmodule

(* ORIG_REF_NAME = "carry_or_n" *) 
module design_1_system_cache_0_0_carry_or_n
   (w_pop_part,
    wr_port_data_valid_i_reg,
    w_ready,
    lopt,
    lopt_1);
  output w_pop_part;
  input wr_port_data_valid_i_reg;
  input w_ready;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire w_pop_part;
  wire w_ready;
  wire wr_port_data_valid_i_reg;

  assign lopt_1 = \<const1> ;
  assign w_pop_part = lopt;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or_n" *) 
module design_1_system_cache_0_0_carry_or_n_13
   (w_pop_part,
    wr_port_data_valid_i_reg,
    w_ready,
    lopt,
    lopt_1);
  output w_pop_part;
  input wr_port_data_valid_i_reg;
  input w_ready;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire w_pop_part;
  wire w_ready;
  wire wr_port_data_valid_i_reg;

  assign lopt_1 = \<const1> ;
  assign w_pop_part = lopt;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or_n" *) 
module design_1_system_cache_0_0_carry_or_n_143
   (lud_addr_piperun_pre1,
    lu_mem_protect_conflict_reg,
    lud_mem_piperun,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output lud_addr_piperun_pre1;
  input lu_mem_protect_conflict_reg;
  input lud_mem_piperun;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire lu_mem_protect_conflict_reg;
  wire lud_addr_piperun_pre1;
  wire lud_mem_piperun;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(lud_mem_piperun),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,lud_addr_piperun_pre1}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b1}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,lu_mem_protect_conflict_reg}));
endmodule

(* ORIG_REF_NAME = "carry_or_n" *) 
module design_1_system_cache_0_0_carry_or_n_147
   (lud_reg_piperun,
    lud_reg_valid_reg,
    lud_reg_piperun_pre1,
    lopt,
    lopt_1);
  output lud_reg_piperun;
  input lud_reg_valid_reg;
  input lud_reg_piperun_pre1;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire lud_reg_piperun;
  wire lud_reg_piperun_pre1;
  wire lud_reg_valid_reg;

  assign lopt_1 = \<const1> ;
  assign lud_reg_piperun = lopt;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or_n" *) 
module design_1_system_cache_0_0_carry_or_n_152
   (lu_check_piperun_pre1,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    update_piperun,
    lopt,
    lopt_1);
  output lu_check_piperun_pre1;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  input update_piperun;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire lu_check_piperun_pre1;
  wire update_piperun;

  assign lopt_1 = \<const1> ;
  assign lu_check_piperun_pre1 = lopt;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or_n" *) 
module design_1_system_cache_0_0_carry_or_n_180
   (lu_fetch_piperun_pre1,
    lu_mem_valid_reg,
    lu_fetch_piperun_pre2,
    lopt,
    lopt_1);
  output lu_fetch_piperun_pre1;
  input lu_mem_valid_reg;
  input lu_fetch_piperun_pre2;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire lu_fetch_piperun_pre1;
  wire lu_fetch_piperun_pre2;
  wire lu_mem_valid_reg;

  assign lopt_1 = \<const1> ;
  assign lu_fetch_piperun_pre1 = lopt;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or_n" *) 
module design_1_system_cache_0_0_carry_or_n_190
   (lu_mem_piperun_pre1,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    lu_mem_piperun_pre2,
    lopt,
    lopt_1);
  output lu_mem_piperun_pre1;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  input lu_mem_piperun_pre2;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire lu_mem_piperun_pre1;
  wire lu_mem_piperun_pre2;

  assign lopt_1 = \<const1> ;
  assign lu_mem_piperun_pre1 = lopt;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or_n" *) 
module design_1_system_cache_0_0_carry_or_n_201
   (lookup_piperun,
    access_valid,
    lookup_restart_mem_done_reg,
    lopt,
    lopt_1);
  output lookup_piperun;
  input access_valid;
  input lookup_restart_mem_done_reg;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire access_valid;
  wire lookup_piperun;
  wire lookup_restart_mem_done_reg;

  assign lookup_piperun = lopt;
  assign lopt_1 = \<const1> ;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or_n" *) 
module design_1_system_cache_0_0_carry_or_n_22
   (rip_refresh_reg,
    \Use_Reg_Ctrl.queue_exist_i_reg ,
    \Use_Reg_Ctrl.queue_exist_i_reg_0 ,
    rip_pop,
    \Use_FPGA.Empty_Inst ,
    lopt,
    lopt_1,
    lopt_2);
  output rip_refresh_reg;
  output \Use_Reg_Ctrl.queue_exist_i_reg ;
  input \Use_Reg_Ctrl.queue_exist_i_reg_0 ;
  input rip_pop;
  input \Use_FPGA.Empty_Inst ;
  output lopt;
  input lopt_1;
  input lopt_2;

  wire \Use_FPGA.Empty_Inst ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg_0 ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire lopt_3;
  wire rip_pop;
  wire rip_refresh_reg;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = lopt_2;
  LUT3 #(
    .INIT(8'h74)) 
    \Use_Reg_Ctrl.queue_exist_i_i_1__0 
       (.I0(\Use_FPGA.Empty_Inst ),
        .I1(rip_refresh_reg),
        .I2(\Use_Reg_Ctrl.queue_exist_i_reg_0 ),
        .O(\Use_Reg_Ctrl.queue_exist_i_reg ));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(rip_pop),
        .CO({\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED [3:2],\^lopt_1 ,rip_refresh_reg}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED [3:2],\^lopt_2 ,1'b1}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED [3:2],lopt_3,\Use_Reg_Ctrl.queue_exist_i_reg_0 }));
endmodule

(* ORIG_REF_NAME = "carry_or_n" *) 
module design_1_system_cache_0_0_carry_or_n_253
   (carry_1,
    \lud_reg_port_num_reg[0] ,
    \read_data_status[0,0][Hit_Full] ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output carry_1;
  input \lud_reg_port_num_reg[0] ;
  input \read_data_status[0,0][Hit_Full] ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \The_Compare[0].sel_reg ;
  wire carry_1;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire \lud_reg_port_num_reg[0] ;
  wire \read_data_status[0,0][Hit_Full] ;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,carry_1}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b1}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,\The_Compare[0].sel_reg }));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.MUXCY_I_i_1__59 
       (.I0(\lud_reg_port_num_reg[0] ),
        .I1(\read_data_status[0,0][Hit_Full] ),
        .O(\The_Compare[0].sel_reg ));
endmodule

(* ORIG_REF_NAME = "carry_or_n" *) 
module design_1_system_cache_0_0_carry_or_n_254
   (lud_reg_piperun_pre1,
    A_N,
    carry_1,
    lopt,
    lopt_1);
  output lud_reg_piperun_pre1;
  input A_N;
  input carry_1;
  input lopt;
  output lopt_1;

  wire \<const1> ;
  wire A_N;
  wire carry_1;
  wire lud_reg_piperun_pre1;

  assign lopt_1 = \<const1> ;
  assign lud_reg_piperun_pre1 = lopt;
  VCC VCC
       (.P(\<const1> ));
endmodule

(* ORIG_REF_NAME = "carry_or_n" *) 
module design_1_system_cache_0_0_carry_or_n_42
   (lookup_piperun_post1,
    access_valid,
    lookup_piperun,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5);
  output lookup_piperun_post1;
  input access_valid;
  input lookup_piperun;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;

  wire access_valid;
  wire lookup_piperun;
  wire lookup_piperun_post1;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire lopt_6;
  wire [3:3]\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;
  wire [3:3]\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = lopt_5;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(lookup_piperun),
        .CO({\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED [3],\^lopt_4 ,\^lopt_1 ,lookup_piperun_post1}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED [3],\^lopt_5 ,\^lopt_2 ,1'b1}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED [3],lopt_6,\^lopt_3 ,access_valid}));
endmodule

(* ORIG_REF_NAME = "carry_or_n" *) 
module design_1_system_cache_0_0_carry_or_n_5
   (rip_refresh_reg,
    \Use_Reg_Ctrl.queue_exist_i_reg ,
    \Use_Reg_Ctrl.queue_exist_i_reg_0 ,
    rip_pop,
    \Use_FPGA.Empty_Inst ,
    lopt,
    lopt_1,
    lopt_2);
  output rip_refresh_reg;
  output \Use_Reg_Ctrl.queue_exist_i_reg ;
  input \Use_Reg_Ctrl.queue_exist_i_reg_0 ;
  input rip_pop;
  input \Use_FPGA.Empty_Inst ;
  output lopt;
  input lopt_1;
  input lopt_2;

  wire \Use_FPGA.Empty_Inst ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg_0 ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire lopt_3;
  wire rip_pop;
  wire rip_refresh_reg;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;
  wire [3:2]\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = lopt_2;
  LUT3 #(
    .INIT(8'h74)) 
    \Use_Reg_Ctrl.queue_exist_i_i_1__2 
       (.I0(\Use_FPGA.Empty_Inst ),
        .I1(rip_refresh_reg),
        .I2(\Use_Reg_Ctrl.queue_exist_i_reg_0 ),
        .O(\Use_Reg_Ctrl.queue_exist_i_reg ));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(rip_pop),
        .CO({\NLW_Using_FPGA.MUXCY_I_CARRY4_CO_UNCONNECTED [3:2],\^lopt_1 ,rip_refresh_reg}),
        .CYINIT(1'b0),
        .DI({\NLW_Using_FPGA.MUXCY_I_CARRY4_DI_UNCONNECTED [3:2],\^lopt_2 ,1'b1}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({\NLW_Using_FPGA.MUXCY_I_CARRY4_S_UNCONNECTED [3:2],lopt_3,\Use_Reg_Ctrl.queue_exist_i_reg_0 }));
endmodule

(* ORIG_REF_NAME = "carry_piperun_step" *) 
module design_1_system_cache_0_0_carry_piperun_step
   (update_piperun_pre5,
    update_done_tag_write_reg,
    update_need_tag_write,
    update_readback_available_reg,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output update_piperun_pre5;
  input update_done_tag_write_reg;
  input update_need_tag_write;
  input update_readback_available_reg;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire S;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire update_done_tag_write_reg;
  wire update_need_tag_write;
  wire update_piperun_pre5;
  wire update_readback_available_reg;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(1'b0),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,update_piperun_pre5}),
        .CYINIT(1'b1),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,S}));
  LUT3 #(
    .INIT(8'hBF)) 
    \Using_FPGA.MUXCY_I_i_1__30 
       (.I0(update_done_tag_write_reg),
        .I1(update_need_tag_write),
        .I2(update_readback_available_reg),
        .O(S));
endmodule

(* ORIG_REF_NAME = "carry_piperun_step" *) 
module design_1_system_cache_0_0_carry_piperun_step_62
   (update_piperun_pre4,
    S,
    update_piperun_pre5,
    lopt,
    lopt_1);
  output update_piperun_pre4;
  input S;
  input update_piperun_pre5;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire S;
  wire update_piperun_pre4;
  wire update_piperun_pre5;

  assign lopt_1 = \<const0> ;
  assign update_piperun_pre4 = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_piperun_step" *) 
module design_1_system_cache_0_0_carry_piperun_step_63
   (update_piperun_pre3,
    S,
    update_piperun_pre4,
    lopt,
    lopt_1);
  output update_piperun_pre3;
  input S;
  input update_piperun_pre4;
  input lopt;
  output lopt_1;

  wire \<const0> ;
  wire S;
  wire update_piperun_pre3;
  wire update_piperun_pre4;

  assign lopt_1 = \<const0> ;
  assign update_piperun_pre3 = lopt;
  GND GND
       (.G(\<const0> ));
endmodule

(* ORIG_REF_NAME = "carry_piperun_step" *) 
module design_1_system_cache_0_0_carry_piperun_step_64
   (update_piperun_pre2,
    update_piperun_pre3,
    update_done_aw_reg,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    aw_fifo_full,
    need_to_stall_write_reg,
    lopt,
    lopt_1,
    lopt_2);
  output update_piperun_pre2;
  input update_piperun_pre3;
  input update_done_aw_reg;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  input aw_fifo_full;
  input need_to_stall_write_reg;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire \<const0> ;
  wire S;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire aw_fifo_full;
  wire need_to_stall_write_reg;
  wire update_done_aw_reg;
  wire update_piperun_pre2;
  wire update_piperun_pre3;

  assign lopt_1 = \<const0> ;
  assign lopt_2 = S;
  assign update_piperun_pre2 = lopt;
  GND GND
       (.G(\<const0> ));
  LUT4 #(
    .INIT(16'hBBBF)) 
    \Using_FPGA.MUXCY_I_i_1__33 
       (.I0(update_done_aw_reg),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I2(aw_fifo_full),
        .I3(need_to_stall_write_reg),
        .O(S));
endmodule

(* ORIG_REF_NAME = "carry_piperun_step" *) 
module design_1_system_cache_0_0_carry_piperun_step_65
   (update_piperun_pre1,
    S,
    update_piperun_pre2,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output update_piperun_pre1;
  input S;
  input update_piperun_pre2;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire S;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire lopt_9;
  wire update_piperun_pre1;
  wire update_piperun_pre2;
  wire [3:0]\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_1;
  assign \^lopt_3  = lopt_2;
  assign \^lopt_5  = lopt_4;
  assign \^lopt_6  = lopt_5;
  assign \^lopt_8  = lopt_7;
  assign lopt = \^lopt_1 ;
  assign lopt_3 = \^lopt_4 ;
  assign lopt_6 = \^lopt_7 ;
  assign lopt_9 = lopt_8;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.MUXCY_I_CARRY4 
       (.CI(update_piperun_pre2),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,update_piperun_pre1}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_9,\^lopt_6 ,\^lopt_3 ,S}));
endmodule

(* ORIG_REF_NAME = "carry_select_and" *) 
module design_1_system_cache_0_0_carry_select_and
   (update_read_miss_resize_ok,
    ud_rm_use_resize_part_ok,
    ri_port,
    r_miss_fifo_full,
    \read_data_status[0,0][Hit_Full] ,
    \lookup_read_data_info[0,0][Valid] ,
    update_read_resize_finish_reg,
    update_read_resize_selected_reg,
    r_miss_fifo_full_8,
    \read_data_status[0,1][Hit_Full] ,
    \lookup_read_data_info[0,1][Valid] ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output update_read_miss_resize_ok;
  input ud_rm_use_resize_part_ok;
  input ri_port;
  input r_miss_fifo_full;
  input \read_data_status[0,0][Hit_Full] ;
  input \lookup_read_data_info[0,0][Valid] ;
  input update_read_resize_finish_reg;
  input update_read_resize_selected_reg;
  input r_miss_fifo_full_8;
  input \read_data_status[0,1][Hit_Full] ;
  input \lookup_read_data_info[0,1][Valid] ;
  input lopt;
  output lopt_1;
  output lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  input lopt_10;
  input lopt_11;

  wire carry_1;
  wire \lookup_read_data_info[0,0][Valid] ;
  wire \lookup_read_data_info[0,1][Valid] ;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire r_miss_fifo_full;
  wire r_miss_fifo_full_8;
  wire \read_data_status[0,0][Hit_Full] ;
  wire \read_data_status[0,1][Hit_Full] ;
  wire ri_port;
  wire ud_rm_use_resize_part_ok;
  wire update_read_miss_resize_ok;
  wire update_read_resize_finish_reg;
  wire update_read_resize_selected_reg;

  design_1_system_cache_0_0_carry_and_87 \The_Compare[0].carry_and_I1 
       (.carry_1(carry_1),
        .\lookup_read_data_info[0,0][Valid] (\lookup_read_data_info[0,0][Valid] ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .r_miss_fifo_full(r_miss_fifo_full),
        .\read_data_status[0,0][Hit_Full] (\read_data_status[0,0][Hit_Full] ),
        .ri_port(ri_port),
        .ud_rm_use_resize_part_ok(ud_rm_use_resize_part_ok),
        .update_read_resize_finish_reg(update_read_resize_finish_reg),
        .update_read_resize_selected_reg(update_read_resize_selected_reg));
  design_1_system_cache_0_0_carry_and_88 \The_Compare[1].carry_and_I1 
       (.carry_1(carry_1),
        .\lookup_read_data_info[0,1][Valid] (\lookup_read_data_info[0,1][Valid] ),
        .lopt(lopt_3),
        .lopt_1(lopt_4),
        .lopt_2(lopt_5),
        .lopt_3(lopt_6),
        .lopt_4(lopt_7),
        .lopt_5(lopt_8),
        .lopt_6(lopt_9),
        .lopt_7(lopt_10),
        .lopt_8(lopt_11),
        .r_miss_fifo_full_8(r_miss_fifo_full_8),
        .\read_data_status[0,1][Hit_Full] (\read_data_status[0,1][Hit_Full] ),
        .ri_port(ri_port),
        .update_read_miss_resize_ok(update_read_miss_resize_ok),
        .update_read_resize_finish_reg(update_read_resize_finish_reg),
        .update_read_resize_selected_reg(update_read_resize_selected_reg));
endmodule

(* ORIG_REF_NAME = "carry_select_and" *) 
module design_1_system_cache_0_0_carry_select_and_177
   (WEA,
    \The_Compare[0].sel_reg_5 ,
    Carry_Out,
    A_6,
    \wr_port_data_info_reg[0][BE][3] ,
    \wr_port_data_info_reg[0][BE][3]_0 ,
    lu_check_wait_for_update,
    lu_check_allow_write_reg,
    \lu_check_info_reg[Port_Num][0] ,
    lopt,
    lopt_1);
  output [3:0]WEA;
  input \The_Compare[0].sel_reg_5 ;
  input Carry_Out;
  input A_6;
  input [3:0]\wr_port_data_info_reg[0][BE][3] ;
  input [3:0]\wr_port_data_info_reg[0][BE][3]_0 ;
  input lu_check_wait_for_update;
  input lu_check_allow_write_reg;
  input \lu_check_info_reg[Port_Num][0] ;
  input lopt;
  output lopt_1;

  wire A_6;
  wire Carry_Out;
  wire \The_Compare[0].sel_reg_5 ;
  wire [3:0]WEA;
  wire carry_1;
  wire lopt;
  wire lopt_1;
  wire lu_check_allow_write_reg;
  wire \lu_check_info_reg[Port_Num][0] ;
  wire lu_check_wait_for_update;
  wire [3:0]\wr_port_data_info_reg[0][BE][3] ;
  wire [3:0]\wr_port_data_info_reg[0][BE][3]_0 ;

  design_1_system_cache_0_0_carry_and_235 \The_Compare[0].carry_and_I1 
       (.Carry_Out(Carry_Out),
        .\The_Compare[0].sel_reg_5 (\The_Compare[0].sel_reg_5 ),
        .carry_1(carry_1),
        .lopt(lopt),
        .lopt_1(lopt_1));
  design_1_system_cache_0_0_carry_and_236 \The_Compare[1].carry_and_I1 
       (.A_6(A_6),
        .WEA(WEA),
        .carry_1(carry_1),
        .lu_check_allow_write_reg(lu_check_allow_write_reg),
        .\lu_check_info_reg[Port_Num][0] (\lu_check_info_reg[Port_Num][0] ),
        .lu_check_wait_for_update(lu_check_wait_for_update),
        .\wr_port_data_info_reg[0][BE][3] (\wr_port_data_info_reg[0][BE][3] ),
        .\wr_port_data_info_reg[0][BE][3]_0 (\wr_port_data_info_reg[0][BE][3]_0 ));
endmodule

(* ORIG_REF_NAME = "carry_select_and_n" *) 
module design_1_system_cache_0_0_carry_select_and_n
   (Carry_In,
    lookup_write_hit_carry,
    \lu_check_info_reg[Port_Num][0] ,
    update_write_miss_busy,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5);
  output Carry_In;
  input lookup_write_hit_carry;
  input \lu_check_info_reg[Port_Num][0] ;
  input [1:0]update_write_miss_busy;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;

  wire Carry_In;
  wire carry_1;
  wire lookup_write_hit_carry;
  wire \^lopt ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire \lu_check_info_reg[Port_Num][0] ;
  wire [1:0]update_write_miss_busy;

  assign \^lopt_4  = lopt_1;
  assign \^lopt_5  = lopt_2;
  assign lopt = \^lopt_3 ;
  assign lopt_3 = lopt_6;
  assign lopt_7 = lopt_4;
  assign lopt_8 = lopt_5;
  design_1_system_cache_0_0_carry_and_n_237 \The_Compare[0].carry_and_I1 
       (.carry_1(carry_1),
        .lookup_write_hit_carry(lookup_write_hit_carry),
        .lopt(\^lopt ),
        .lopt_1(\^lopt_1 ),
        .lopt_2(\^lopt_2 ),
        .lopt_3(\^lopt_3 ),
        .lopt_4(\^lopt_4 ),
        .lopt_5(\^lopt_5 ),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .\lu_check_info_reg[Port_Num][0] (\lu_check_info_reg[Port_Num][0] ),
        .update_write_miss_busy(update_write_miss_busy[0]));
  design_1_system_cache_0_0_carry_and_n_238 \The_Compare[1].carry_and_I1 
       (.Carry_In(Carry_In),
        .carry_1(carry_1),
        .lopt(\^lopt ),
        .lopt_1(\^lopt_1 ),
        .lopt_2(\^lopt_2 ),
        .\lu_check_info_reg[Port_Num][0] (\lu_check_info_reg[Port_Num][0] ),
        .update_write_miss_busy(update_write_miss_busy[1]));
endmodule

(* ORIG_REF_NAME = "carry_select_and_n" *) 
module design_1_system_cache_0_0_carry_select_and_n_196
   (filtered_protection_bit,
    protected_bit,
    lu_mem_protect_conflict_d1,
    \lu_check_protected_reg[1] ,
    lu_check_protected_way,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5);
  output filtered_protection_bit;
  input protected_bit;
  input lu_mem_protect_conflict_d1;
  input [1:0]\lu_check_protected_reg[1] ;
  input lu_check_protected_way;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;
  output lopt_4;
  output lopt_5;

  wire carry_1;
  wire filtered_protection_bit;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire [1:0]\lu_check_protected_reg[1] ;
  wire lu_check_protected_way;
  wire lu_mem_protect_conflict_d1;
  wire protected_bit;

  design_1_system_cache_0_0_carry_and_n_220 \The_Compare[0].carry_and_I1 
       (.carry_1(carry_1),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .\lu_check_protected_reg[0] (\lu_check_protected_reg[1] [0]),
        .lu_check_protected_way(lu_check_protected_way),
        .lu_mem_protect_conflict_d1(lu_mem_protect_conflict_d1),
        .protected_bit(protected_bit));
  design_1_system_cache_0_0_carry_and_n_221 \The_Compare[1].carry_and_I1 
       (.carry_1(carry_1),
        .filtered_protection_bit(filtered_protection_bit),
        .lopt(lopt_3),
        .lopt_1(lopt_4),
        .lopt_2(lopt_5),
        .\lu_check_protected_reg[1] (\lu_check_protected_reg[1] [1]),
        .lu_check_protected_way(lu_check_protected_way),
        .lu_mem_protect_conflict_d1(lu_mem_protect_conflict_d1));
endmodule

(* ORIG_REF_NAME = "carry_select_or" *) 
module design_1_system_cache_0_0_carry_select_or
   (lookup_data_hit_pre_stall,
    lookup_protect_conflict,
    update_write_miss_busy,
    \lu_check_info_reg[Port_Num][0] ,
    lu_check_wait_for_update,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5);
  output lookup_data_hit_pre_stall;
  input lookup_protect_conflict;
  input [1:0]update_write_miss_busy;
  input \lu_check_info_reg[Port_Num][0] ;
  input lu_check_wait_for_update;
  input lopt;
  output lopt_1;
  output lopt_2;
  input lopt_3;
  output lopt_4;
  output lopt_5;

  wire carry_1;
  wire lookup_data_hit_pre_stall;
  wire lookup_protect_conflict;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire \lu_check_info_reg[Port_Num][0] ;
  wire lu_check_wait_for_update;
  wire [1:0]update_write_miss_busy;

  design_1_system_cache_0_0_carry_or_248 \The_Compare[0].carry_or_I1 
       (.carry_1(carry_1),
        .lookup_protect_conflict(lookup_protect_conflict),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .\lu_check_info_reg[Port_Num][0] (\lu_check_info_reg[Port_Num][0] ),
        .lu_check_wait_for_update(lu_check_wait_for_update),
        .update_write_miss_busy(update_write_miss_busy[0]));
  design_1_system_cache_0_0_carry_or_249 \The_Compare[1].carry_or_I1 
       (.carry_1(carry_1),
        .lookup_data_hit_pre_stall(lookup_data_hit_pre_stall),
        .lopt(lopt_3),
        .lopt_1(lopt_4),
        .lopt_2(lopt_5),
        .\lu_check_info_reg[Port_Num][0] (\lu_check_info_reg[Port_Num][0] ),
        .lu_check_wait_for_update(lu_check_wait_for_update),
        .update_write_miss_busy(update_write_miss_busy[1]));
endmodule

(* ORIG_REF_NAME = "carry_select_or" *) 
module design_1_system_cache_0_0_carry_select_or_161
   (lu_io_selected_full,
    S_4,
    \lud_reg_port_num_reg[0] ,
    \read_data_status[0,0][Hit_Full] ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5);
  output lu_io_selected_full;
  input S_4;
  input \lud_reg_port_num_reg[0] ;
  input \read_data_status[0,0][Hit_Full] ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;

  wire S_4;
  wire carry_1;
  wire \^lopt ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire lopt_6;
  wire lopt_7;
  wire lu_io_selected_full;
  wire \lud_reg_port_num_reg[0] ;
  wire \read_data_status[0,0][Hit_Full] ;

  assign \^lopt_3  = lopt_1;
  assign \^lopt_4  = lopt_2;
  assign lopt = \^lopt_2 ;
  assign lopt_3 = \^lopt_5 ;
  assign lopt_6 = lopt_4;
  assign lopt_7 = lopt_5;
  design_1_system_cache_0_0_carry_or_245 \The_Compare[0].carry_or_I1 
       (.carry_1(carry_1),
        .lopt(\^lopt ),
        .lopt_1(\^lopt_1 ),
        .lopt_2(S_4),
        .lopt_3(\^lopt_2 ),
        .lopt_4(\^lopt_3 ),
        .lopt_5(\^lopt_4 ),
        .lopt_6(\^lopt_5 ),
        .lopt_7(lopt_6),
        .lopt_8(lopt_7),
        .\lud_reg_port_num_reg[0] (\lud_reg_port_num_reg[0] ),
        .\read_data_status[0,0][Hit_Full] (\read_data_status[0,0][Hit_Full] ));
  design_1_system_cache_0_0_carry_or_246 \The_Compare[1].carry_or_I1 
       (.S_4(S_4),
        .carry_1(carry_1),
        .lopt(\^lopt ),
        .lopt_1(\^lopt_1 ),
        .lu_io_selected_full(lu_io_selected_full));
endmodule

(* ORIG_REF_NAME = "carry_select_or" *) 
module design_1_system_cache_0_0_carry_select_or_163
   (lookup_io_stall_carry,
    lu_io_lud_stall_pipe,
    \lu_check_info_reg[Wr] ,
    \access_data_info[0,0][Valid] ,
    \lu_check_info_reg[Port_Num][0] ,
    \access_data_info[0,1][Valid] ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5);
  output lookup_io_stall_carry;
  input lu_io_lud_stall_pipe;
  input \lu_check_info_reg[Wr] ;
  input \access_data_info[0,0][Valid] ;
  input \lu_check_info_reg[Port_Num][0] ;
  input \access_data_info[0,1][Valid] ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;

  wire \access_data_info[0,0][Valid] ;
  wire \access_data_info[0,1][Valid] ;
  wire carry_1;
  wire lookup_io_stall_carry;
  wire \^lopt ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire \lu_check_info_reg[Port_Num][0] ;
  wire \lu_check_info_reg[Wr] ;
  wire lu_io_lud_stall_pipe;

  assign \^lopt_4  = lopt_1;
  assign \^lopt_5  = lopt_2;
  assign lopt = \^lopt_3 ;
  assign lopt_3 = lopt_6;
  assign lopt_7 = lopt_4;
  assign lopt_8 = lopt_5;
  design_1_system_cache_0_0_carry_or_243 \The_Compare[0].carry_or_I1 
       (.\access_data_info[0,0][Valid] (\access_data_info[0,0][Valid] ),
        .carry_1(carry_1),
        .lopt(\^lopt ),
        .lopt_1(\^lopt_1 ),
        .lopt_2(\^lopt_2 ),
        .lopt_3(\^lopt_3 ),
        .lopt_4(\^lopt_4 ),
        .lopt_5(\^lopt_5 ),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .\lu_check_info_reg[Port_Num][0] (\lu_check_info_reg[Port_Num][0] ),
        .\lu_check_info_reg[Wr] (\lu_check_info_reg[Wr] ),
        .lu_io_lud_stall_pipe(lu_io_lud_stall_pipe));
  design_1_system_cache_0_0_carry_or_244 \The_Compare[1].carry_or_I1 
       (.\access_data_info[0,1][Valid] (\access_data_info[0,1][Valid] ),
        .carry_1(carry_1),
        .lookup_io_stall_carry(lookup_io_stall_carry),
        .lopt(\^lopt ),
        .lopt_1(\^lopt_1 ),
        .lopt_2(\^lopt_2 ),
        .\lu_check_info_reg[Port_Num][0] (\lu_check_info_reg[Port_Num][0] ),
        .\lu_check_info_reg[Wr] (\lu_check_info_reg[Wr] ));
endmodule

(* ORIG_REF_NAME = "carry_select_or" *) 
module design_1_system_cache_0_0_carry_select_or_164
   (Carry_IN,
    lookup_io_stall_carry_no_wait,
    lu_check_wait_for_update,
    \lu_check_info_reg[Port_Num][0] ,
    update_write_miss_busy,
    \lu_check_info_reg[Wr] ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output Carry_IN;
  input lookup_io_stall_carry_no_wait;
  input lu_check_wait_for_update;
  input \lu_check_info_reg[Port_Num][0] ;
  input [1:0]update_write_miss_busy;
  input \lu_check_info_reg[Wr] ;
  input lopt;
  output lopt_1;
  output lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  input lopt_10;
  input lopt_11;

  wire Carry_IN;
  wire carry_1;
  wire lookup_io_stall_carry_no_wait;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire \lu_check_info_reg[Port_Num][0] ;
  wire \lu_check_info_reg[Wr] ;
  wire lu_check_wait_for_update;
  wire [1:0]update_write_miss_busy;

  design_1_system_cache_0_0_carry_or_241 \The_Compare[0].carry_or_I1 
       (.carry_1(carry_1),
        .lookup_io_stall_carry_no_wait(lookup_io_stall_carry_no_wait),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .\lu_check_info_reg[Port_Num][0] (\lu_check_info_reg[Port_Num][0] ),
        .\lu_check_info_reg[Wr] (\lu_check_info_reg[Wr] ),
        .lu_check_wait_for_update(lu_check_wait_for_update),
        .update_write_miss_busy(update_write_miss_busy[0]));
  design_1_system_cache_0_0_carry_or_242 \The_Compare[1].carry_or_I1 
       (.Carry_IN(Carry_IN),
        .carry_1(carry_1),
        .lopt(lopt_3),
        .lopt_1(lopt_4),
        .lopt_2(lopt_5),
        .lopt_3(lopt_6),
        .lopt_4(lopt_7),
        .lopt_5(lopt_8),
        .lopt_6(lopt_9),
        .lopt_7(lopt_10),
        .lopt_8(lopt_11),
        .\lu_check_info_reg[Port_Num][0] (\lu_check_info_reg[Port_Num][0] ),
        .\lu_check_info_reg[Wr] (\lu_check_info_reg[Wr] ),
        .lu_check_wait_for_update(lu_check_wait_for_update),
        .update_write_miss_busy(update_write_miss_busy[1]));
endmodule

(* ORIG_REF_NAME = "carry_select_or" *) 
module design_1_system_cache_0_0_carry_select_or_187
   (lru_dirty_bit,
    S_6,
    S,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5);
  output lru_dirty_bit;
  input S_6;
  input S;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;

  wire S;
  wire S_6;
  wire carry_1;
  wire \^lopt ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire lopt_6;
  wire lopt_7;
  wire lru_dirty_bit;

  assign \^lopt_3  = lopt_1;
  assign \^lopt_4  = lopt_2;
  assign lopt = \^lopt_2 ;
  assign lopt_3 = \^lopt_5 ;
  assign lopt_6 = lopt_4;
  assign lopt_7 = lopt_5;
  design_1_system_cache_0_0_carry_or_228 \The_Compare[0].carry_or_I1 
       (.S_6(S_6),
        .carry_1(carry_1),
        .lopt(\^lopt ),
        .lopt_1(\^lopt_1 ),
        .lopt_2(S),
        .lopt_3(\^lopt_2 ),
        .lopt_4(\^lopt_3 ),
        .lopt_5(\^lopt_4 ),
        .lopt_6(\^lopt_5 ),
        .lopt_7(lopt_6),
        .lopt_8(lopt_7));
  design_1_system_cache_0_0_carry_or_229 \The_Compare[1].carry_or_I1 
       (.S(S),
        .carry_1(carry_1),
        .lopt(\^lopt ),
        .lopt_1(\^lopt_1 ),
        .lru_dirty_bit(lru_dirty_bit));
endmodule

(* ORIG_REF_NAME = "carry_select_or" *) 
module design_1_system_cache_0_0_carry_select_or_198
   (lru_protected_bit,
    S_7,
    S_8,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5);
  output lru_protected_bit;
  input S_7;
  input S_8;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;

  wire S_7;
  wire S_8;
  wire carry_1;
  wire \^lopt ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire lopt_6;
  wire lopt_7;
  wire lru_protected_bit;

  assign \^lopt_3  = lopt_1;
  assign \^lopt_4  = lopt_2;
  assign lopt = \^lopt_2 ;
  assign lopt_3 = \^lopt_5 ;
  assign lopt_6 = lopt_4;
  assign lopt_7 = lopt_5;
  design_1_system_cache_0_0_carry_or_218 \The_Compare[0].carry_or_I1 
       (.S_7(S_7),
        .carry_1(carry_1),
        .lopt(\^lopt ),
        .lopt_1(\^lopt_1 ),
        .lopt_2(S_8),
        .lopt_3(\^lopt_2 ),
        .lopt_4(\^lopt_3 ),
        .lopt_5(\^lopt_4 ),
        .lopt_6(\^lopt_5 ),
        .lopt_7(lopt_6),
        .lopt_8(lopt_7));
  design_1_system_cache_0_0_carry_or_219 \The_Compare[1].carry_or_I1 
       (.S_8(S_8),
        .carry_1(carry_1),
        .lopt(\^lopt ),
        .lopt_1(\^lopt_1 ),
        .lru_protected_bit(lru_protected_bit));
endmodule

(* ORIG_REF_NAME = "carry_select_or_n" *) 
module design_1_system_cache_0_0_carry_select_or_n
   (lud_reg_piperun_pre1,
    A_N,
    \lud_reg_port_num_reg[0] ,
    \read_data_status[0,0][Hit_Full] ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5);
  output lud_reg_piperun_pre1;
  input A_N;
  input \lud_reg_port_num_reg[0] ;
  input \read_data_status[0,0][Hit_Full] ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;

  wire A_N;
  wire carry_1;
  wire \^lopt ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire lopt_6;
  wire lopt_7;
  wire lud_reg_piperun_pre1;
  wire \lud_reg_port_num_reg[0] ;
  wire \read_data_status[0,0][Hit_Full] ;

  assign \^lopt_3  = lopt_1;
  assign \^lopt_4  = lopt_2;
  assign lopt = \^lopt_2 ;
  assign lopt_3 = \^lopt_5 ;
  assign lopt_6 = lopt_4;
  assign lopt_7 = lopt_5;
  design_1_system_cache_0_0_carry_or_n_253 \The_Compare[0].carry_or_I1 
       (.carry_1(carry_1),
        .lopt(\^lopt ),
        .lopt_1(\^lopt_1 ),
        .lopt_2(A_N),
        .lopt_3(\^lopt_2 ),
        .lopt_4(\^lopt_3 ),
        .lopt_5(\^lopt_4 ),
        .lopt_6(\^lopt_5 ),
        .lopt_7(lopt_6),
        .lopt_8(lopt_7),
        .\lud_reg_port_num_reg[0] (\lud_reg_port_num_reg[0] ),
        .\read_data_status[0,0][Hit_Full] (\read_data_status[0,0][Hit_Full] ));
  design_1_system_cache_0_0_carry_or_n_254 \The_Compare[1].carry_or_I1 
       (.A_N(A_N),
        .carry_1(carry_1),
        .lopt(\^lopt ),
        .lopt_1(\^lopt_1 ),
        .lud_reg_piperun_pre1(lud_reg_piperun_pre1));
endmodule

(* ORIG_REF_NAME = "carry_vec_or" *) 
module design_1_system_cache_0_0_carry_vec_or
   (lu_check_tag_hit_all_carry,
    Q,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output lu_check_tag_hit_all_carry;
  input [1:0]Q;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire [1:0]Q;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lu_check_tag_hit_all_carry;

  design_1_system_cache_0_0_carry_or_233 \The_Compare[0].carry_and_I1 
       (.Q(Q),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lu_check_tag_hit_all_carry(lu_check_tag_hit_all_carry));
endmodule

(* ORIG_REF_NAME = "carry_vec_or" *) 
module design_1_system_cache_0_0_carry_vec_or__parameterized1
   (dirty_bit,
    S,
    dirty_miss_valid,
    lopt,
    lopt_1);
  output dirty_bit;
  input S;
  input dirty_miss_valid;
  input lopt;
  output lopt_1;

  wire S;
  wire dirty_bit;
  wire dirty_miss_valid;
  wire lopt;
  wire lopt_1;

  design_1_system_cache_0_0_carry_or_227 \The_Compare[0].carry_and_I1 
       (.S(S),
        .dirty_bit(dirty_bit),
        .dirty_miss_valid(dirty_miss_valid),
        .lopt(lopt),
        .lopt_1(lopt_1));
endmodule

(* ORIG_REF_NAME = "carry_vec_or" *) 
module design_1_system_cache_0_0_carry_vec_or__parameterized1_199
   (protected_bit,
    protected_miss_valid,
    Q,
    \lu_check_protected_reg[1] ,
    lopt,
    lopt_1,
    lopt_2);
  output protected_bit;
  input protected_miss_valid;
  input [1:0]Q;
  input [1:0]\lu_check_protected_reg[1] ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire [1:0]Q;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire [1:0]\lu_check_protected_reg[1] ;
  wire protected_bit;
  wire protected_miss_valid;

  design_1_system_cache_0_0_carry_or_217 \The_Compare[0].carry_and_I1 
       (.Q(Q),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .\lu_check_protected_reg[1] (\lu_check_protected_reg[1] ),
        .protected_bit(protected_bit),
        .protected_miss_valid(protected_miss_valid));
endmodule

(* ORIG_REF_NAME = "comparator" *) 
module design_1_system_cache_0_0_comparator
   (Carry_OUT,
    out,
    \update_info_reg[Addr][31] ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5);
  output Carry_OUT;
  input [17:0]out;
  input [17:0]\update_info_reg[Addr][31] ;
  output lopt;
  input lopt_1;
  input lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;

  wire Carry_OUT;
  wire S;
  wire \Using_FPGA.The_Compare[1].sel_reg ;
  wire \Using_FPGA.The_Compare[2].sel_reg ;
  wire \Using_FPGA.The_Compare[3].sel_reg ;
  wire \Using_FPGA.The_Compare[4].sel_reg ;
  wire \Using_FPGA.The_Compare[5].sel_reg ;
  wire carry_1;
  wire carry_2;
  wire carry_3;
  wire carry_4;
  wire carry_5;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire lopt_6;
  wire lopt_7;
  wire [17:0]out;
  wire [17:0]\update_info_reg[Addr][31] ;
  wire [3:0]\NLW_Using_FPGA.The_Compare[0].MUXCY_I_CARRY4_O_UNCONNECTED ;
  wire [3:0]\NLW_Using_FPGA.The_Compare[4].MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_3  = lopt_1;
  assign \^lopt_4  = lopt_2;
  assign lopt = \^lopt_2 ;
  assign lopt_3 = \^lopt_5 ;
  assign lopt_6 = lopt_4;
  assign lopt_7 = lopt_5;
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.The_Compare[0].MUXCY_I_CARRY4 
       (.CI(1'b0),
        .CO({carry_4,carry_3,carry_2,carry_1}),
        .CYINIT(1'b0),
        .DI({1'b1,1'b1,1'b1,1'b1}),
        .O(\NLW_Using_FPGA.The_Compare[0].MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({\Using_FPGA.The_Compare[3].sel_reg ,\Using_FPGA.The_Compare[2].sel_reg ,\Using_FPGA.The_Compare[1].sel_reg ,S}));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.The_Compare[4].MUXCY_I_CARRY4 
       (.CI(carry_4),
        .CO({\^lopt_5 ,\^lopt_2 ,Carry_OUT,carry_5}),
        .CYINIT(1'b0),
        .DI({lopt_6,\^lopt_3 ,1'b1,1'b1}),
        .O(\NLW_Using_FPGA.The_Compare[4].MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({lopt_7,\^lopt_4 ,\Using_FPGA.The_Compare[5].sel_reg ,\Using_FPGA.The_Compare[4].sel_reg }));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    sel0
       (.I0(out[2]),
        .I1(\update_info_reg[Addr][31] [2]),
        .I2(\update_info_reg[Addr][31] [0]),
        .I3(out[0]),
        .I4(\update_info_reg[Addr][31] [1]),
        .I5(out[1]),
        .O(S));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \sel0_inferred__0/i_ 
       (.I0(out[5]),
        .I1(\update_info_reg[Addr][31] [5]),
        .I2(\update_info_reg[Addr][31] [3]),
        .I3(out[3]),
        .I4(\update_info_reg[Addr][31] [4]),
        .I5(out[4]),
        .O(\Using_FPGA.The_Compare[1].sel_reg ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \sel0_inferred__1/i_ 
       (.I0(out[8]),
        .I1(\update_info_reg[Addr][31] [8]),
        .I2(\update_info_reg[Addr][31] [6]),
        .I3(out[6]),
        .I4(\update_info_reg[Addr][31] [7]),
        .I5(out[7]),
        .O(\Using_FPGA.The_Compare[2].sel_reg ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \sel0_inferred__2/i_ 
       (.I0(out[11]),
        .I1(\update_info_reg[Addr][31] [11]),
        .I2(\update_info_reg[Addr][31] [9]),
        .I3(out[9]),
        .I4(\update_info_reg[Addr][31] [10]),
        .I5(out[10]),
        .O(\Using_FPGA.The_Compare[3].sel_reg ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \sel0_inferred__3/i_ 
       (.I0(out[14]),
        .I1(\update_info_reg[Addr][31] [14]),
        .I2(\update_info_reg[Addr][31] [12]),
        .I3(out[12]),
        .I4(\update_info_reg[Addr][31] [13]),
        .I5(out[13]),
        .O(\Using_FPGA.The_Compare[4].sel_reg ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \sel0_inferred__4/i_ 
       (.I0(out[17]),
        .I1(\update_info_reg[Addr][31] [17]),
        .I2(\update_info_reg[Addr][31] [15]),
        .I3(out[15]),
        .I4(\update_info_reg[Addr][31] [16]),
        .I5(out[16]),
        .O(\Using_FPGA.The_Compare[5].sel_reg ));
endmodule

(* ORIG_REF_NAME = "comparator" *) 
module design_1_system_cache_0_0_comparator__parameterized1
   (E,
    Carry_OUT,
    queue_empty,
    Q,
    \Order_Optimization_4.search_count_reg[3] ,
    need_to_stall_write_reg,
    \write_seq_id_reg[6] ,
    out,
    \write_seq_id_reg[5] ,
    \write_seq_id_reg[4] ,
    \pending_write_reg[4] ,
    \pending_write_reg[3] ,
    Carry_IN,
    \update_info_reg[Addr][13] ,
    \update_info_reg[Addr][13]_0 ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8);
  output [0:0]E;
  output Carry_OUT;
  input queue_empty;
  input [0:0]Q;
  input \Order_Optimization_4.search_count_reg[3] ;
  input [0:0]need_to_stall_write_reg;
  input \write_seq_id_reg[6] ;
  input [0:0]out;
  input [0:0]\write_seq_id_reg[5] ;
  input \write_seq_id_reg[4] ;
  input [0:0]\pending_write_reg[4] ;
  input \pending_write_reg[3] ;
  input Carry_IN;
  input [7:0]\update_info_reg[Addr][13] ;
  input [7:0]\update_info_reg[Addr][13]_0 ;
  input lopt;
  output lopt_1;
  output lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;

  wire \<const1> ;
  wire Carry_IN;
  wire Carry_OUT;
  wire [0:0]E;
  wire \Order_Optimization_4.buffer_addr[4]_i_3_n_0 ;
  wire \Order_Optimization_4.buffer_addr[4]_i_5_n_0 ;
  wire \Order_Optimization_4.search_count_reg[3] ;
  wire [0:0]Q;
  wire S;
  wire \Using_FPGA.The_Compare[1].sel_reg ;
  wire \Using_FPGA.The_Compare[2].sel_reg ;
  wire carry_1;
  wire carry_2;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire [0:0]need_to_stall_write_reg;
  wire [0:0]out;
  wire \pending_write_reg[3] ;
  wire [0:0]\pending_write_reg[4] ;
  wire queue_empty;
  wire [7:0]\update_info_reg[Addr][13] ;
  wire [7:0]\update_info_reg[Addr][13]_0 ;
  wire \write_seq_id_reg[4] ;
  wire [0:0]\write_seq_id_reg[5] ;
  wire \write_seq_id_reg[6] ;
  wire [3:0]\NLW_Using_FPGA.The_Compare[1].MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_4;
  assign \^lopt_3  = lopt_5;
  assign \^lopt_5  = lopt_7;
  assign \^lopt_6  = lopt_8;
  assign carry_1 = lopt;
  assign lopt_1 = \<const1> ;
  assign lopt_2 = S;
  assign lopt_3 = \^lopt_1 ;
  assign lopt_6 = \^lopt_4 ;
  LUT4 #(
    .INIT(16'h0222)) 
    \Order_Optimization_4.buffer_addr[4]_i_1 
       (.I0(\Order_Optimization_4.buffer_addr[4]_i_3_n_0 ),
        .I1(queue_empty),
        .I2(Q),
        .I3(\Order_Optimization_4.search_count_reg[3] ),
        .O(E));
  LUT6 #(
    .INIT(64'hFEEFFEFEFFEFFEFF)) 
    \Order_Optimization_4.buffer_addr[4]_i_3 
       (.I0(\Order_Optimization_4.buffer_addr[4]_i_5_n_0 ),
        .I1(need_to_stall_write_reg),
        .I2(\write_seq_id_reg[6] ),
        .I3(out),
        .I4(\write_seq_id_reg[5] ),
        .I5(\write_seq_id_reg[4] ),
        .O(\Order_Optimization_4.buffer_addr[4]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'h00D0)) 
    \Order_Optimization_4.buffer_addr[4]_i_5 
       (.I0(Q),
        .I1(\pending_write_reg[4] ),
        .I2(Carry_OUT),
        .I3(\pending_write_reg[3] ),
        .O(\Order_Optimization_4.buffer_addr[4]_i_5_n_0 ));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.The_Compare[1].MUXCY_I_CARRY4 
       (.CI(carry_1),
        .CO({\^lopt_4 ,\^lopt_1 ,Carry_OUT,carry_2}),
        .CYINIT(1'b0),
        .DI({\^lopt_5 ,\^lopt_2 ,1'b1,1'b1}),
        .O(\NLW_Using_FPGA.The_Compare[1].MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({\^lopt_6 ,\^lopt_3 ,\Using_FPGA.The_Compare[2].sel_reg ,\Using_FPGA.The_Compare[1].sel_reg }));
  VCC VCC
       (.P(\<const1> ));
  LUT4 #(
    .INIT(16'h9009)) 
    sel0
       (.I0(\update_info_reg[Addr][13] [1]),
        .I1(\update_info_reg[Addr][13]_0 [1]),
        .I2(\update_info_reg[Addr][13] [0]),
        .I3(\update_info_reg[Addr][13]_0 [0]),
        .O(S));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \sel0_inferred__0/i_ 
       (.I0(\update_info_reg[Addr][13] [4]),
        .I1(\update_info_reg[Addr][13]_0 [4]),
        .I2(\update_info_reg[Addr][13]_0 [2]),
        .I3(\update_info_reg[Addr][13] [2]),
        .I4(\update_info_reg[Addr][13]_0 [3]),
        .I5(\update_info_reg[Addr][13] [3]),
        .O(\Using_FPGA.The_Compare[1].sel_reg ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \sel0_inferred__1/i_ 
       (.I0(\update_info_reg[Addr][13] [7]),
        .I1(\update_info_reg[Addr][13]_0 [7]),
        .I2(\update_info_reg[Addr][13]_0 [5]),
        .I3(\update_info_reg[Addr][13] [5]),
        .I4(\update_info_reg[Addr][13]_0 [6]),
        .I5(\update_info_reg[Addr][13] [6]),
        .O(\Using_FPGA.The_Compare[2].sel_reg ));
endmodule

(* ORIG_REF_NAME = "comparator" *) 
module design_1_system_cache_0_0_comparator__parameterized3
   (be_no_block_1to2,
    be_no_block_1to2_part,
    Q,
    \pending_write_reg[4] ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4,
    lopt_5,
    lopt_6,
    lopt_7,
    lopt_8,
    lopt_9,
    lopt_10,
    lopt_11);
  output be_no_block_1to2;
  input be_no_block_1to2_part;
  input [4:0]Q;
  input [4:0]\pending_write_reg[4] ;
  input lopt;
  output lopt_1;
  output lopt_2;
  output lopt_3;
  input lopt_4;
  input lopt_5;
  output lopt_6;
  input lopt_7;
  input lopt_8;
  output lopt_9;
  input lopt_10;
  input lopt_11;

  wire \<const0> ;
  wire [4:0]Q;
  wire S;
  wire \Using_FPGA.The_Compare[1].sel_reg ;
  wire be_no_block_1to2;
  wire be_no_block_1to2_part;
  wire carry_1;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire \^lopt_3 ;
  wire \^lopt_4 ;
  wire \^lopt_5 ;
  wire \^lopt_6 ;
  wire \^lopt_7 ;
  wire \^lopt_8 ;
  wire \^lopt_9 ;
  wire [4:0]\pending_write_reg[4] ;
  wire [3:0]\NLW_Using_FPGA.The_Compare[1].MUXCY_I_CARRY4_O_UNCONNECTED ;

  assign \^lopt_2  = lopt_4;
  assign \^lopt_3  = lopt_5;
  assign \^lopt_5  = lopt_7;
  assign \^lopt_6  = lopt_8;
  assign \^lopt_8  = lopt_10;
  assign \^lopt_9  = lopt_11;
  assign carry_1 = lopt;
  assign lopt_1 = \<const0> ;
  assign lopt_2 = S;
  assign lopt_3 = \^lopt_1 ;
  assign lopt_6 = \^lopt_4 ;
  assign lopt_9 = \^lopt_7 ;
  GND GND
       (.G(\<const0> ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.The_Compare[0].MUXCY_I_i_1 
       (.I0(Q[2]),
        .I1(\pending_write_reg[4] [2]),
        .I2(Q[0]),
        .I3(\pending_write_reg[4] [0]),
        .I4(\pending_write_reg[4] [1]),
        .I5(Q[1]),
        .O(S));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Using_FPGA.The_Compare[1].MUXCY_I_CARRY4 
       (.CI(carry_1),
        .CO({\^lopt_7 ,\^lopt_4 ,\^lopt_1 ,be_no_block_1to2}),
        .CYINIT(1'b0),
        .DI({\^lopt_8 ,\^lopt_5 ,\^lopt_2 ,1'b0}),
        .O(\NLW_Using_FPGA.The_Compare[1].MUXCY_I_CARRY4_O_UNCONNECTED [3:0]),
        .S({\^lopt_9 ,\^lopt_6 ,\^lopt_3 ,\Using_FPGA.The_Compare[1].sel_reg }));
  LUT4 #(
    .INIT(16'h9009)) 
    \Using_FPGA.The_Compare[1].MUXCY_I_i_1 
       (.I0(Q[4]),
        .I1(\pending_write_reg[4] [4]),
        .I2(Q[3]),
        .I3(\pending_write_reg[4] [3]),
        .O(\Using_FPGA.The_Compare[1].sel_reg ));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module design_1_system_cache_0_0_reg_ce
   (Q,
    SR,
    CE,
    D,
    CLK);
  output Q;
  input SR;
  input [0:0]CE;
  input D;
  input CLK;

  wire [0:0]CE;
  wire CLK;
  wire D;
  wire Q;
  wire SR;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(CLK),
        .CE(CE),
        .D(D),
        .Q(Q),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module design_1_system_cache_0_0_reg_ce_101
   (Q,
    SR,
    CE,
    D,
    CLK);
  output Q;
  input SR;
  input [0:0]CE;
  input D;
  input CLK;

  wire [0:0]CE;
  wire CLK;
  wire D;
  wire Q;
  wire SR;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(CLK),
        .CE(CE),
        .D(D),
        .Q(Q),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module design_1_system_cache_0_0_reg_ce_214
   (\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ,
    DATA_INB,
    Q,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    ACLK,
    update_readback_available,
    \update_info_reg[Allocate] ,
    \update_info_reg[Evict] ,
    update_need_tag_write,
    update_done_tag_write_reg);
  output \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ;
  output [0:0]DATA_INB;
  input Q;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input ACLK;
  input update_readback_available;
  input \update_info_reg[Allocate] ;
  input \update_info_reg[Evict] ;
  input update_need_tag_write;
  input update_done_tag_write_reg;

  wire ACLK;
  wire [0:0]DATA_INB;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire update_done_tag_write_reg;
  wire \update_info_reg[Allocate] ;
  wire \update_info_reg[Evict] ;
  wire update_need_tag_write;
  wire update_readback_available;

  LUT6 #(
    .INIT(64'hAAAAAAAAFBFFAAAA)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_26 
       (.I0(update_readback_available),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I2(\update_info_reg[Allocate] ),
        .I3(\update_info_reg[Evict] ),
        .I4(update_need_tag_write),
        .I5(update_done_tag_write_reg),
        .O(DATA_INB));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .Q(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .R(Q));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module design_1_system_cache_0_0_reg_ce_215
   (lud_mem_use_speculative,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    Q,
    lud_mem_completed_reg,
    ACLK,
    lud_mem_completed_reg_0,
    lud_mem_waiting_for_pipe_reg,
    lookup_protect_conflict,
    lud_addr_piperun,
    \Use_FPGA.Full_Inst );
  output lud_mem_use_speculative;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input Q;
  input lud_mem_completed_reg;
  input ACLK;
  input lud_mem_completed_reg_0;
  input lud_mem_waiting_for_pipe_reg;
  input lookup_protect_conflict;
  input lud_addr_piperun;
  input \Use_FPGA.Full_Inst ;

  wire ACLK;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \Use_FPGA.Full_Inst ;
  wire lookup_protect_conflict;
  wire lud_addr_piperun;
  wire lud_mem_completed_reg;
  wire lud_mem_completed_reg_0;
  wire lud_mem_use_speculative;
  wire lud_mem_waiting_for_pipe_reg;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(lud_mem_completed_reg),
        .Q(lud_mem_use_speculative),
        .R(Q));
  LUT6 #(
    .INIT(64'h00008888000000F0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_2__5 
       (.I0(lud_mem_completed_reg_0),
        .I1(lud_mem_waiting_for_pipe_reg),
        .I2(lud_mem_use_speculative),
        .I3(lookup_protect_conflict),
        .I4(lud_addr_piperun),
        .I5(\Use_FPGA.Full_Inst ),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module design_1_system_cache_0_0_reg_ce_216
   (\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ,
    DATA_INB,
    update_first_write_hit_reg,
    Q,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    ACLK,
    ri_merge_reg,
    update_readback_available,
    update_first_write_hit,
    update_write_miss,
    \update_info_reg[Allocate] ,
    update_reused_tag,
    update_done_tag_write_reg,
    \lu_check_info_reg[KillHit] ,
    \lu_check_tag_hit_reg[1] );
  output \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ;
  output [1:0]DATA_INB;
  output update_first_write_hit_reg;
  input Q;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input ACLK;
  input ri_merge_reg;
  input update_readback_available;
  input update_first_write_hit;
  input update_write_miss;
  input \update_info_reg[Allocate] ;
  input update_reused_tag;
  input update_done_tag_write_reg;
  input \lu_check_info_reg[KillHit] ;
  input [1:0]\lu_check_tag_hit_reg[1] ;

  wire ACLK;
  wire [1:0]DATA_INB;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_40_n_0 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \lu_check_info_reg[KillHit] ;
  wire [1:0]\lu_check_tag_hit_reg[1] ;
  wire ri_merge_reg;
  wire update_done_tag_write_reg;
  wire update_first_write_hit;
  wire update_first_write_hit_reg;
  wire \update_info_reg[Allocate] ;
  wire update_readback_available;
  wire update_reused_tag;
  wire update_write_miss;

  LUT4 #(
    .INIT(16'h0020)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_27 
       (.I0(update_reused_tag),
        .I1(update_readback_available),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I3(update_done_tag_write_reg),
        .O(DATA_INB[1]));
  LUT6 #(
    .INIT(64'hB8B8B888B888B888)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_28 
       (.I0(ri_merge_reg),
        .I1(update_readback_available),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_40_n_0 ),
        .I3(update_first_write_hit),
        .I4(update_write_miss),
        .I5(\update_info_reg[Allocate] ),
        .O(DATA_INB[0]));
  LUT2 #(
    .INIT(4'h2)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_40 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .I1(update_done_tag_write_reg),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_40_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .Q(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .R(Q));
  LUT3 #(
    .INIT(8'hAB)) 
    \wm_fifo_mem_reg[15][Evict][-1111111111]_srl16_i_2 
       (.I0(\lu_check_info_reg[KillHit] ),
        .I1(\lu_check_tag_hit_reg[1] [0]),
        .I2(\lu_check_tag_hit_reg[1] [1]),
        .O(update_first_write_hit_reg));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module design_1_system_cache_0_0_reg_ce_23
   (Q,
    SR,
    CE,
    D,
    CLK);
  output Q;
  input SR;
  input [0:0]CE;
  input D;
  input CLK;

  wire [0:0]CE;
  wire CLK;
  wire D;
  wire Q;
  wire SR;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(CLK),
        .CE(CE),
        .D(D),
        .Q(Q),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module design_1_system_cache_0_0_reg_ce_267
   (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    \M_AXI_AWLEN_reg[7] ,
    \M_AXI_AWSIZE_reg[1] ,
    \M_AXI_AWADDR_reg[31] ,
    \M_AXI_AWBURST_reg[1] ,
    Q,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ,
    ACLK,
    \update_info_reg[Len][7] ,
    \update_info_reg[Size][2] ,
    \update_info_reg[Size][2]_0 ,
    \update_info_reg[Size][2]_1 ,
    \update_info_reg[Len][2] ,
    \update_info_reg[Len][1] ,
    \update_info_reg[Len][0] ,
    \update_info_reg[Len][0]_0 ,
    \update_info_reg[Len][1]_0 ,
    \update_info_reg[Len][0]_1 ,
    \update_info_reg[Evict] ,
    \update_old_tag_reg[Addr][31] ,
    \update_info_reg[Addr][31] ,
    \update_info_reg[Kind] );
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  output [7:0]\M_AXI_AWLEN_reg[7] ;
  output [1:0]\M_AXI_AWSIZE_reg[1] ;
  output [23:0]\M_AXI_AWADDR_reg[31] ;
  output \M_AXI_AWBURST_reg[1] ;
  input Q;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  input ACLK;
  input [7:0]\update_info_reg[Len][7] ;
  input [2:0]\update_info_reg[Size][2] ;
  input \update_info_reg[Size][2]_0 ;
  input \update_info_reg[Size][2]_1 ;
  input \update_info_reg[Len][2] ;
  input \update_info_reg[Len][1] ;
  input \update_info_reg[Len][0] ;
  input \update_info_reg[Len][0]_0 ;
  input \update_info_reg[Len][1]_0 ;
  input \update_info_reg[Len][0]_1 ;
  input \update_info_reg[Evict] ;
  input [17:0]\update_old_tag_reg[Addr][31] ;
  input [23:0]\update_info_reg[Addr][31] ;
  input \update_info_reg[Kind] ;

  wire ACLK;
  wire [23:0]\M_AXI_AWADDR_reg[31] ;
  wire \M_AXI_AWBURST_reg[1] ;
  wire [7:0]\M_AXI_AWLEN_reg[7] ;
  wire [1:0]\M_AXI_AWSIZE_reg[1] ;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  wire [23:0]\update_info_reg[Addr][31] ;
  wire \update_info_reg[Evict] ;
  wire \update_info_reg[Kind] ;
  wire \update_info_reg[Len][0] ;
  wire \update_info_reg[Len][0]_0 ;
  wire \update_info_reg[Len][0]_1 ;
  wire \update_info_reg[Len][1] ;
  wire \update_info_reg[Len][1]_0 ;
  wire \update_info_reg[Len][2] ;
  wire [7:0]\update_info_reg[Len][7] ;
  wire [2:0]\update_info_reg[Size][2] ;
  wire \update_info_reg[Size][2]_0 ;
  wire \update_info_reg[Size][2]_1 ;
  wire [17:0]\update_old_tag_reg[Addr][31] ;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .Q(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair41" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \aw_fifo_mem_reg[15][Addr][0]_srl16_i_1 
       (.I0(\update_info_reg[Addr][31] [0]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .O(\M_AXI_AWADDR_reg[31] [0]));
  (* SOFT_HLUTNM = "soft_lutpair36" *) 
  LUT4 #(
    .INIT(16'hEF40)) 
    \aw_fifo_mem_reg[15][Addr][14]_srl16_i_1 
       (.I0(\update_info_reg[Evict] ),
        .I1(\update_old_tag_reg[Addr][31] [0]),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I3(\update_info_reg[Addr][31] [6]),
        .O(\M_AXI_AWADDR_reg[31] [6]));
  (* SOFT_HLUTNM = "soft_lutpair37" *) 
  LUT4 #(
    .INIT(16'hEF40)) 
    \aw_fifo_mem_reg[15][Addr][15]_srl16_i_1 
       (.I0(\update_info_reg[Evict] ),
        .I1(\update_old_tag_reg[Addr][31] [1]),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I3(\update_info_reg[Addr][31] [7]),
        .O(\M_AXI_AWADDR_reg[31] [7]));
  (* SOFT_HLUTNM = "soft_lutpair38" *) 
  LUT4 #(
    .INIT(16'hEF40)) 
    \aw_fifo_mem_reg[15][Addr][16]_srl16_i_1 
       (.I0(\update_info_reg[Evict] ),
        .I1(\update_old_tag_reg[Addr][31] [2]),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I3(\update_info_reg[Addr][31] [8]),
        .O(\M_AXI_AWADDR_reg[31] [8]));
  (* SOFT_HLUTNM = "soft_lutpair39" *) 
  LUT4 #(
    .INIT(16'hEF40)) 
    \aw_fifo_mem_reg[15][Addr][17]_srl16_i_1 
       (.I0(\update_info_reg[Evict] ),
        .I1(\update_old_tag_reg[Addr][31] [3]),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I3(\update_info_reg[Addr][31] [9]),
        .O(\M_AXI_AWADDR_reg[31] [9]));
  (* SOFT_HLUTNM = "soft_lutpair40" *) 
  LUT4 #(
    .INIT(16'hEF40)) 
    \aw_fifo_mem_reg[15][Addr][18]_srl16_i_1 
       (.I0(\update_info_reg[Evict] ),
        .I1(\update_old_tag_reg[Addr][31] [4]),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I3(\update_info_reg[Addr][31] [10]),
        .O(\M_AXI_AWADDR_reg[31] [10]));
  (* SOFT_HLUTNM = "soft_lutpair41" *) 
  LUT4 #(
    .INIT(16'hEF40)) 
    \aw_fifo_mem_reg[15][Addr][19]_srl16_i_1 
       (.I0(\update_info_reg[Evict] ),
        .I1(\update_old_tag_reg[Addr][31] [5]),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I3(\update_info_reg[Addr][31] [11]),
        .O(\M_AXI_AWADDR_reg[31] [11]));
  (* SOFT_HLUTNM = "soft_lutpair40" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \aw_fifo_mem_reg[15][Addr][1]_srl16_i_1 
       (.I0(\update_info_reg[Addr][31] [1]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .O(\M_AXI_AWADDR_reg[31] [1]));
  LUT4 #(
    .INIT(16'hEF40)) 
    \aw_fifo_mem_reg[15][Addr][20]_srl16_i_1 
       (.I0(\update_info_reg[Evict] ),
        .I1(\update_old_tag_reg[Addr][31] [6]),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I3(\update_info_reg[Addr][31] [12]),
        .O(\M_AXI_AWADDR_reg[31] [12]));
  LUT4 #(
    .INIT(16'hEF40)) 
    \aw_fifo_mem_reg[15][Addr][21]_srl16_i_1 
       (.I0(\update_info_reg[Evict] ),
        .I1(\update_old_tag_reg[Addr][31] [7]),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I3(\update_info_reg[Addr][31] [13]),
        .O(\M_AXI_AWADDR_reg[31] [13]));
  (* SOFT_HLUTNM = "soft_lutpair34" *) 
  LUT4 #(
    .INIT(16'hEF40)) 
    \aw_fifo_mem_reg[15][Addr][22]_srl16_i_1 
       (.I0(\update_info_reg[Evict] ),
        .I1(\update_old_tag_reg[Addr][31] [8]),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I3(\update_info_reg[Addr][31] [14]),
        .O(\M_AXI_AWADDR_reg[31] [14]));
  LUT4 #(
    .INIT(16'hEF40)) 
    \aw_fifo_mem_reg[15][Addr][23]_srl16_i_1 
       (.I0(\update_info_reg[Evict] ),
        .I1(\update_old_tag_reg[Addr][31] [9]),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I3(\update_info_reg[Addr][31] [15]),
        .O(\M_AXI_AWADDR_reg[31] [15]));
  LUT4 #(
    .INIT(16'hEF40)) 
    \aw_fifo_mem_reg[15][Addr][24]_srl16_i_1 
       (.I0(\update_info_reg[Evict] ),
        .I1(\update_old_tag_reg[Addr][31] [10]),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I3(\update_info_reg[Addr][31] [16]),
        .O(\M_AXI_AWADDR_reg[31] [16]));
  LUT4 #(
    .INIT(16'hEF40)) 
    \aw_fifo_mem_reg[15][Addr][25]_srl16_i_1 
       (.I0(\update_info_reg[Evict] ),
        .I1(\update_old_tag_reg[Addr][31] [11]),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I3(\update_info_reg[Addr][31] [17]),
        .O(\M_AXI_AWADDR_reg[31] [17]));
  (* SOFT_HLUTNM = "soft_lutpair35" *) 
  LUT4 #(
    .INIT(16'hEF40)) 
    \aw_fifo_mem_reg[15][Addr][26]_srl16_i_1 
       (.I0(\update_info_reg[Evict] ),
        .I1(\update_old_tag_reg[Addr][31] [12]),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I3(\update_info_reg[Addr][31] [18]),
        .O(\M_AXI_AWADDR_reg[31] [18]));
  LUT4 #(
    .INIT(16'hEF40)) 
    \aw_fifo_mem_reg[15][Addr][27]_srl16_i_1 
       (.I0(\update_info_reg[Evict] ),
        .I1(\update_old_tag_reg[Addr][31] [13]),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I3(\update_info_reg[Addr][31] [19]),
        .O(\M_AXI_AWADDR_reg[31] [19]));
  LUT4 #(
    .INIT(16'hEF40)) 
    \aw_fifo_mem_reg[15][Addr][28]_srl16_i_1 
       (.I0(\update_info_reg[Evict] ),
        .I1(\update_old_tag_reg[Addr][31] [14]),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I3(\update_info_reg[Addr][31] [20]),
        .O(\M_AXI_AWADDR_reg[31] [20]));
  LUT4 #(
    .INIT(16'hEF40)) 
    \aw_fifo_mem_reg[15][Addr][29]_srl16_i_1 
       (.I0(\update_info_reg[Evict] ),
        .I1(\update_old_tag_reg[Addr][31] [15]),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I3(\update_info_reg[Addr][31] [21]),
        .O(\M_AXI_AWADDR_reg[31] [21]));
  (* SOFT_HLUTNM = "soft_lutpair39" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \aw_fifo_mem_reg[15][Addr][2]_srl16_i_1 
       (.I0(\update_info_reg[Addr][31] [2]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .O(\M_AXI_AWADDR_reg[31] [2]));
  LUT4 #(
    .INIT(16'hEF40)) 
    \aw_fifo_mem_reg[15][Addr][30]_srl16_i_1 
       (.I0(\update_info_reg[Evict] ),
        .I1(\update_old_tag_reg[Addr][31] [16]),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I3(\update_info_reg[Addr][31] [22]),
        .O(\M_AXI_AWADDR_reg[31] [22]));
  LUT4 #(
    .INIT(16'hEF40)) 
    \aw_fifo_mem_reg[15][Addr][31]_srl16_i_1 
       (.I0(\update_info_reg[Evict] ),
        .I1(\update_old_tag_reg[Addr][31] [17]),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I3(\update_info_reg[Addr][31] [23]),
        .O(\M_AXI_AWADDR_reg[31] [23]));
  (* SOFT_HLUTNM = "soft_lutpair38" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \aw_fifo_mem_reg[15][Addr][3]_srl16_i_1 
       (.I0(\update_info_reg[Addr][31] [3]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .O(\M_AXI_AWADDR_reg[31] [3]));
  (* SOFT_HLUTNM = "soft_lutpair37" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \aw_fifo_mem_reg[15][Addr][4]_srl16_i_1 
       (.I0(\update_info_reg[Addr][31] [4]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .O(\M_AXI_AWADDR_reg[31] [4]));
  (* SOFT_HLUTNM = "soft_lutpair36" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \aw_fifo_mem_reg[15][Addr][5]_srl16_i_1 
       (.I0(\update_info_reg[Addr][31] [5]),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .O(\M_AXI_AWADDR_reg[31] [5]));
  (* SOFT_HLUTNM = "soft_lutpair35" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \aw_fifo_mem_reg[15][Kind][-1111111111]_srl16_i_1 
       (.I0(\update_info_reg[Kind] ),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .O(\M_AXI_AWBURST_reg[1] ));
  (* SOFT_HLUTNM = "soft_lutpair33" *) 
  LUT5 #(
    .INIT(32'hFFFFFEEE)) 
    \aw_fifo_mem_reg[15][Len][0]_srl16_i_1 
       (.I0(\update_info_reg[Len][7] [0]),
        .I1(\update_info_reg[Size][2] [2]),
        .I2(\update_info_reg[Size][2] [1]),
        .I3(\update_info_reg[Size][2] [0]),
        .I4(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .O(\M_AXI_AWLEN_reg[7] [0]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFE2AA)) 
    \aw_fifo_mem_reg[15][Len][1]_srl16_i_1 
       (.I0(\update_info_reg[Len][7] [1]),
        .I1(\update_info_reg[Size][2] [0]),
        .I2(\update_info_reg[Len][7] [0]),
        .I3(\update_info_reg[Size][2] [1]),
        .I4(\update_info_reg[Size][2] [2]),
        .I5(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .O(\M_AXI_AWLEN_reg[7] [1]));
  (* SOFT_HLUTNM = "soft_lutpair34" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \aw_fifo_mem_reg[15][Len][2]_srl16_i_1 
       (.I0(\update_info_reg[Len][0]_1 ),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .O(\M_AXI_AWLEN_reg[7] [2]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFE200E2)) 
    \aw_fifo_mem_reg[15][Len][3]_srl16_i_1 
       (.I0(\update_info_reg[Len][7] [3]),
        .I1(\update_info_reg[Size][2]_0 ),
        .I2(\update_info_reg[Len][7] [2]),
        .I3(\update_info_reg[Size][2]_1 ),
        .I4(\update_info_reg[Len][1]_0 ),
        .I5(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .O(\M_AXI_AWLEN_reg[7] [3]));
  LUT6 #(
    .INIT(64'h00000000EEE222E2)) 
    \aw_fifo_mem_reg[15][Len][4]_srl16_i_1 
       (.I0(\update_info_reg[Len][7] [4]),
        .I1(\update_info_reg[Size][2]_0 ),
        .I2(\update_info_reg[Len][7] [3]),
        .I3(\update_info_reg[Size][2]_1 ),
        .I4(\update_info_reg[Len][0]_0 ),
        .I5(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .O(\M_AXI_AWLEN_reg[7] [4]));
  LUT6 #(
    .INIT(64'h00000000EEE222E2)) 
    \aw_fifo_mem_reg[15][Len][5]_srl16_i_1 
       (.I0(\update_info_reg[Len][7] [5]),
        .I1(\update_info_reg[Size][2]_0 ),
        .I2(\update_info_reg[Len][7] [4]),
        .I3(\update_info_reg[Size][2]_1 ),
        .I4(\update_info_reg[Len][0] ),
        .I5(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .O(\M_AXI_AWLEN_reg[7] [5]));
  LUT6 #(
    .INIT(64'h00000000EEE222E2)) 
    \aw_fifo_mem_reg[15][Len][6]_srl16_i_1 
       (.I0(\update_info_reg[Len][7] [6]),
        .I1(\update_info_reg[Size][2]_0 ),
        .I2(\update_info_reg[Len][7] [5]),
        .I3(\update_info_reg[Size][2]_1 ),
        .I4(\update_info_reg[Len][1] ),
        .I5(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .O(\M_AXI_AWLEN_reg[7] [6]));
  LUT6 #(
    .INIT(64'h00000000EEE222E2)) 
    \aw_fifo_mem_reg[15][Len][7]_srl16_i_1 
       (.I0(\update_info_reg[Len][7] [7]),
        .I1(\update_info_reg[Size][2]_0 ),
        .I2(\update_info_reg[Len][7] [6]),
        .I3(\update_info_reg[Size][2]_1 ),
        .I4(\update_info_reg[Len][2] ),
        .I5(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .O(\M_AXI_AWLEN_reg[7] [7]));
  (* SOFT_HLUTNM = "soft_lutpair33" *) 
  LUT4 #(
    .INIT(16'h0010)) 
    \aw_fifo_mem_reg[15][Size][0]_srl16_i_1 
       (.I0(\update_info_reg[Size][2] [1]),
        .I1(\update_info_reg[Size][2] [2]),
        .I2(\update_info_reg[Size][2] [0]),
        .I3(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .O(\M_AXI_AWSIZE_reg[1] [0]));
  LUT3 #(
    .INIT(8'hFE)) 
    \aw_fifo_mem_reg[15][Size][1]_srl16_i_1 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I1(\update_info_reg[Size][2] [2]),
        .I2(\update_info_reg[Size][2] [1]),
        .O(\M_AXI_AWSIZE_reg[1] [1]));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module design_1_system_cache_0_0_reg_ce_268
   (lu_check_valid_delayed_reg,
    S,
    wr_port_data_valid_i_reg,
    S_0,
    wr_port_data_ready,
    lud_mem_waiting_for_pipe_reg,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    lookup_write_miss,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_3 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_4 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_5 ,
    \update_info_reg[Allocate] ,
    lookup_read_hit_d1_reg,
    A_N160_out,
    lookup_push_write_miss,
    S_1,
    lud_step_delayed_restart_reg,
    S_2,
    update_read_miss_reg,
    lud_mem_delayed_read_data0,
    lud_mem_last_reg,
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ,
    lud_addr_pipeline_full_reg,
    lud_addr_pipeline_full_reg_0,
    E,
    \lookup_read_data_new[0,0][Hit] ,
    \update_old_tag_reg[Addr][14] ,
    wm_evict_reg,
    \lookup_read_data_new[0,1][Valid] ,
    \lookup_read_data_new[0,0][Valid] ,
    lookup_write_hit,
    \update_info_reg[Evict] ,
    lookup_wm_will_use,
    lookup_miss,
    DI,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_6 ,
    ADDRARDADDR,
    \lookup_offset_len_cnt_reg[7] ,
    lookup_next_is_last_beat,
    lu_ds_last_beat_next_last_n,
    SRI,
    DIBDI,
    lru_check_used_way,
    \lookup_offset_cnt_reg[5] ,
    \lud_mem_port_one_hot_reg[0] ,
    \lud_mem_port_one_hot_reg[1] ,
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ,
    S_3,
    lud_addr_pipeline_full_reg_1,
    A141_out,
    S_4,
    S_5,
    A121_out,
    A149_out,
    A134_out,
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_1 ,
    \update_old_tag_reg[Addr][14]_0 ,
    wm_evict_reg_0,
    lud_mem_last_reg_0,
    \lookup_offset_cnt_reg[5]_0 ,
    \lookup_offset_cnt_reg[3] ,
    lookup_offset_first_reg,
    lu_check_wait_for_update_reg,
    lu_check_wr_already_pushed_reg,
    lud_mem_already_used_reg,
    lud_write_hit_done_reg,
    lu_check_read_info_done_reg,
    \lu_check_protected_way_reg[0] ,
    SRI_6,
    SRI_7,
    Q,
    ACLK,
    \lu_check_info_reg[Port_Num][0] ,
    \wm_port_reg[0] ,
    p_138_in,
    lu_mem_valid_reg,
    \Use_FPGA.Full_Inst ,
    lud_addr_piperun,
    lud_mem_waiting_for_pipe_reg_0,
    \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ,
    lu_check_piperun,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_7 ,
    update_piperun,
    \lu_check_locked_hit_reg[1] ,
    \lu_check_tag_hit_reg[1] ,
    \lu_check_info_reg[KillHit] ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_8 ,
    \lu_check_info_reg[Wr]_0 ,
    \lu_check_info_reg[KillHit]_0 ,
    update_need_bs,
    update_done_tag_write_reg,
    \lu_check_info_reg[Early] ,
    \lu_check_info_reg[Wr] ,
    lookup_miss_dirty,
    lu_mem_protect_conflict_reg,
    lookup_access_data_late,
    lud_mem_delayed_read_data,
    lud_mem_keep_single_during_stall,
    lud_mem_speculative_valid,
    lu_check_wr_already_pushed,
    update_write_miss_full,
    lookup_protect_conflict,
    lookup_push_write_miss_pre,
    lookup_push_wm_stall,
    lud_mem_already_used,
    lud_addr_pipeline_full_reg_2,
    lud_addr_pipeline_full_reg_3,
    lud_step_delayed_restart,
    \update_release_tag_reg[Addr][11] ,
    lookup_restart_mem,
    \lu_mem_info_reg[Wr] ,
    lu_mem_valid_reg_0,
    \lu_check_locked_hit_reg[1]_0 ,
    \read_data_status[0,1][Hit_Full] ,
    \lud_mem_port_one_hot_reg[1]_0 ,
    lud_step_offset_is_read,
    lud_reg_valid_reg,
    lud_step_offset,
    \access_data_info[0,0][Valid] ,
    \access_data_info[0,1][Valid] ,
    lu_check_wait_for_update,
    lookup_data_hit_stall,
    \lu_check_valid_bits_reg[1] ,
    lu_check_read_info_done,
    \lu_check_port_one_hot_reg[0] ,
    \lu_check_info_reg[Keep] ,
    \lookup_offset_cnt_reg[5]_1 ,
    \lu_mem_info_reg[Addr][5] ,
    D,
    lud_mem_completed_reg,
    p_162_in,
    lu_check_single_beat,
    lu_mem_single_beat_reg,
    lookup_next_is_last_beat_reg,
    \lu_mem_info_reg[Len][7] ,
    \lookup_offset_len_cnt_reg[7]_0 ,
    \lu_check_info_reg[Len][7] ,
    lud_mem_waiting_for_pipe_reg_1,
    lookup_offset_first_reg_0,
    \lu_check_info_reg[Allocate] ,
    lru_check_next_way,
    O,
    \lu_check_info_reg[Addr_Use][5] ,
    \lu_mem_info_reg[Addr_Use][5] ,
    \lookup_offset_cnt_reg[4] ,
    \lu_mem_info_reg[Kind] ,
    \lu_check_info_reg[Kind] ,
    \lu_mem_info_reg[Port_Num][0] ,
    \lu_mem_info_reg[Addr][6] ,
    \lu_mem_info_reg[Addr][7] ,
    \lu_mem_info_reg[Addr][8] ,
    \lu_mem_info_reg[Addr][9] ,
    \lu_mem_info_reg[Addr][10] ,
    \lu_mem_info_reg[Addr][11] ,
    \lu_mem_info_reg[Addr][12] ,
    \lu_mem_info_reg[Addr][13] ,
    lud_mem_use_speculative,
    lud_write_hit_done_reg_0,
    \lu_check_tag_hit_copy_wm_reg[1] ,
    access_valid,
    \lu_check_info_reg[Addr_Stp][5] ,
    \lu_mem_info_reg[Addr_Stp][5] ,
    wr_port_data_last_i_reg,
    lu_check_protected_way);
  output lu_check_valid_delayed_reg;
  output S;
  output wr_port_data_valid_i_reg;
  output S_0;
  output wr_port_data_ready;
  output lud_mem_waiting_for_pipe_reg;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  output lookup_write_miss;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_3 ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_4 ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_5 ;
  output \update_info_reg[Allocate] ;
  output lookup_read_hit_d1_reg;
  output A_N160_out;
  output lookup_push_write_miss;
  output S_1;
  output lud_step_delayed_restart_reg;
  output S_2;
  output update_read_miss_reg;
  output lud_mem_delayed_read_data0;
  output lud_mem_last_reg;
  output \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ;
  output lud_addr_pipeline_full_reg;
  output lud_addr_pipeline_full_reg_0;
  output [0:0]E;
  output \lookup_read_data_new[0,0][Hit] ;
  output \update_old_tag_reg[Addr][14] ;
  output wm_evict_reg;
  output \lookup_read_data_new[0,1][Valid] ;
  output \lookup_read_data_new[0,0][Valid] ;
  output lookup_write_hit;
  output \update_info_reg[Evict] ;
  output lookup_wm_will_use;
  output lookup_miss;
  output [3:0]DI;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_6 ;
  output [9:0]ADDRARDADDR;
  output [7:0]\lookup_offset_len_cnt_reg[7] ;
  output lookup_next_is_last_beat;
  output lu_ds_last_beat_next_last_n;
  output SRI;
  output [0:0]DIBDI;
  output lru_check_used_way;
  output [5:0]\lookup_offset_cnt_reg[5] ;
  output \lud_mem_port_one_hot_reg[0] ;
  output \lud_mem_port_one_hot_reg[1] ;
  output \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ;
  output S_3;
  output lud_addr_pipeline_full_reg_1;
  output A141_out;
  output S_4;
  output S_5;
  output A121_out;
  output A149_out;
  output A134_out;
  output \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_1 ;
  output \update_old_tag_reg[Addr][14]_0 ;
  output wm_evict_reg_0;
  output lud_mem_last_reg_0;
  output [1:0]\lookup_offset_cnt_reg[5]_0 ;
  output [3:0]\lookup_offset_cnt_reg[3] ;
  output lookup_offset_first_reg;
  output lu_check_wait_for_update_reg;
  output lu_check_wr_already_pushed_reg;
  output lud_mem_already_used_reg;
  output lud_write_hit_done_reg;
  output lu_check_read_info_done_reg;
  output \lu_check_protected_way_reg[0] ;
  output SRI_6;
  output SRI_7;
  input Q;
  input ACLK;
  input \lu_check_info_reg[Port_Num][0] ;
  input \wm_port_reg[0] ;
  input p_138_in;
  input lu_mem_valid_reg;
  input \Use_FPGA.Full_Inst ;
  input lud_addr_piperun;
  input lud_mem_waiting_for_pipe_reg_0;
  input \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ;
  input lu_check_piperun;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_7 ;
  input update_piperun;
  input [1:0]\lu_check_locked_hit_reg[1] ;
  input [1:0]\lu_check_tag_hit_reg[1] ;
  input \lu_check_info_reg[KillHit] ;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_8 ;
  input \lu_check_info_reg[Wr]_0 ;
  input \lu_check_info_reg[KillHit]_0 ;
  input update_need_bs;
  input update_done_tag_write_reg;
  input \lu_check_info_reg[Early] ;
  input \lu_check_info_reg[Wr] ;
  input lookup_miss_dirty;
  input lu_mem_protect_conflict_reg;
  input lookup_access_data_late;
  input lud_mem_delayed_read_data;
  input lud_mem_keep_single_during_stall;
  input lud_mem_speculative_valid;
  input lu_check_wr_already_pushed;
  input update_write_miss_full;
  input lookup_protect_conflict;
  input lookup_push_write_miss_pre;
  input lookup_push_wm_stall;
  input lud_mem_already_used;
  input lud_addr_pipeline_full_reg_2;
  input lud_addr_pipeline_full_reg_3;
  input lud_step_delayed_restart;
  input \update_release_tag_reg[Addr][11] ;
  input lookup_restart_mem;
  input \lu_mem_info_reg[Wr] ;
  input lu_mem_valid_reg_0;
  input \lu_check_locked_hit_reg[1]_0 ;
  input \read_data_status[0,1][Hit_Full] ;
  input \lud_mem_port_one_hot_reg[1]_0 ;
  input lud_step_offset_is_read;
  input lud_reg_valid_reg;
  input lud_step_offset;
  input \access_data_info[0,0][Valid] ;
  input \access_data_info[0,1][Valid] ;
  input lu_check_wait_for_update;
  input lookup_data_hit_stall;
  input [1:0]\lu_check_valid_bits_reg[1] ;
  input lu_check_read_info_done;
  input \lu_check_port_one_hot_reg[0] ;
  input \lu_check_info_reg[Keep] ;
  input [5:0]\lookup_offset_cnt_reg[5]_1 ;
  input [5:0]\lu_mem_info_reg[Addr][5] ;
  input [13:0]D;
  input lud_mem_completed_reg;
  input p_162_in;
  input lu_check_single_beat;
  input lu_mem_single_beat_reg;
  input lookup_next_is_last_beat_reg;
  input [7:0]\lu_mem_info_reg[Len][7] ;
  input [7:0]\lookup_offset_len_cnt_reg[7]_0 ;
  input [7:0]\lu_check_info_reg[Len][7] ;
  input lud_mem_waiting_for_pipe_reg_1;
  input lookup_offset_first_reg_0;
  input \lu_check_info_reg[Allocate] ;
  input lru_check_next_way;
  input [3:0]O;
  input [5:0]\lu_check_info_reg[Addr_Use][5] ;
  input [5:0]\lu_mem_info_reg[Addr_Use][5] ;
  input [1:0]\lookup_offset_cnt_reg[4] ;
  input \lu_mem_info_reg[Kind] ;
  input \lu_check_info_reg[Kind] ;
  input \lu_mem_info_reg[Port_Num][0] ;
  input \lu_mem_info_reg[Addr][6] ;
  input \lu_mem_info_reg[Addr][7] ;
  input \lu_mem_info_reg[Addr][8] ;
  input \lu_mem_info_reg[Addr][9] ;
  input \lu_mem_info_reg[Addr][10] ;
  input \lu_mem_info_reg[Addr][11] ;
  input \lu_mem_info_reg[Addr][12] ;
  input \lu_mem_info_reg[Addr][13] ;
  input lud_mem_use_speculative;
  input lud_write_hit_done_reg_0;
  input [1:0]\lu_check_tag_hit_copy_wm_reg[1] ;
  input access_valid;
  input [5:0]\lu_check_info_reg[Addr_Stp][5] ;
  input [5:0]\lu_mem_info_reg[Addr_Stp][5] ;
  input wr_port_data_last_i_reg;
  input lu_check_protected_way;

  wire A121_out;
  wire A134_out;
  wire A141_out;
  wire A149_out;
  wire ACLK;
  wire [9:0]ADDRARDADDR;
  wire A_N160_out;
  wire [13:0]D;
  wire [3:0]DI;
  wire [0:0]DIBDI;
  wire D_0;
  wire [0:0]E;
  wire \LU_Data_WE_Or_Inst1/The_Compare[0].carry_and_I1/S ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_42_n_0 ;
  wire [3:0]O;
  wire Q;
  wire S;
  wire SRI;
  wire SRI_6;
  wire SRI_7;
  wire S_0;
  wire S_1;
  wire S_2;
  wire S_3;
  wire S_4;
  wire S_5;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_3 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_4 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_5 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_6 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_7 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_8 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_2__0_n_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_2_n_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_3__1_n_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_4__0_n_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_4_n_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_1 ;
  wire \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_i_4_n_0 ;
  wire \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \Use_FPGA.Full_Inst ;
  wire \Using_FPGA.MUXCY_I_i_2__5_n_0 ;
  wire \Using_FPGA.MUXCY_I_i_2__6_n_0 ;
  wire \Using_FPGA.MUXCY_I_i_2__7_n_0 ;
  wire \Using_FPGA.MUXCY_I_i_2__8_n_0 ;
  wire \Using_FPGA.MUXCY_I_i_3__1_n_0 ;
  wire \Using_FPGA.MUXCY_I_i_3__2_n_0 ;
  wire \Using_FPGA.MUXCY_I_i_3__4_n_0 ;
  wire \access_data_info[0,0][Valid] ;
  wire \access_data_info[0,1][Valid] ;
  wire access_valid;
  wire lookup_access_data_late;
  wire lookup_data_hit_stall;
  wire lookup_miss;
  wire lookup_miss_dirty;
  wire lookup_next_is_last_beat;
  wire lookup_next_is_last_beat_i_3_n_0;
  wire lookup_next_is_last_beat_i_4_n_0;
  wire lookup_next_is_last_beat_i_5_n_0;
  wire lookup_next_is_last_beat_i_6_n_0;
  wire lookup_next_is_last_beat_i_7_n_0;
  wire lookup_next_is_last_beat_i_8_n_0;
  wire lookup_next_is_last_beat_reg;
  wire \lookup_offset_cnt[0]_i_2_n_0 ;
  wire \lookup_offset_cnt[1]_i_2_n_0 ;
  wire \lookup_offset_cnt[2]_i_2_n_0 ;
  wire \lookup_offset_cnt[3]_i_2_n_0 ;
  wire \lookup_offset_cnt[4]_i_2_n_0 ;
  wire \lookup_offset_cnt[5]_i_2_n_0 ;
  wire \lookup_offset_cnt[5]_i_3_n_0 ;
  wire [3:0]\lookup_offset_cnt_reg[3] ;
  wire [1:0]\lookup_offset_cnt_reg[4] ;
  wire [5:0]\lookup_offset_cnt_reg[5] ;
  wire [1:0]\lookup_offset_cnt_reg[5]_0 ;
  wire [5:0]\lookup_offset_cnt_reg[5]_1 ;
  wire lookup_offset_first_i_2_n_0;
  wire lookup_offset_first_i_3_n_0;
  wire lookup_offset_first_reg;
  wire lookup_offset_first_reg_0;
  wire \lookup_offset_len_cnt[1]_i_2_n_0 ;
  wire \lookup_offset_len_cnt[3]_i_2_n_0 ;
  wire \lookup_offset_len_cnt[3]_i_3_n_0 ;
  wire \lookup_offset_len_cnt[4]_i_2_n_0 ;
  wire \lookup_offset_len_cnt[4]_i_3_n_0 ;
  wire \lookup_offset_len_cnt[6]_i_2_n_0 ;
  wire \lookup_offset_len_cnt[7]_i_2_n_0 ;
  wire \lookup_offset_len_cnt[7]_i_3_n_0 ;
  wire \lookup_offset_len_cnt[7]_i_4_n_0 ;
  wire [7:0]\lookup_offset_len_cnt_reg[7] ;
  wire [7:0]\lookup_offset_len_cnt_reg[7]_0 ;
  wire lookup_protect_conflict;
  wire lookup_push_wm_stall;
  wire lookup_push_write_miss;
  wire lookup_push_write_miss_pre;
  wire \lookup_read_data_new[0,0][Hit] ;
  wire \lookup_read_data_new[0,0][Valid] ;
  wire \lookup_read_data_new[0,1][Valid] ;
  wire lookup_read_done_i;
  wire lookup_read_hit_d1_reg;
  wire lookup_restart_mem;
  wire lookup_wm_will_use;
  wire lookup_write_hit;
  wire lookup_write_miss;
  wire lru_check_next_way;
  wire lru_check_used_way;
  wire lu_check_done0;
  wire [5:0]\lu_check_info_reg[Addr_Stp][5] ;
  wire [5:0]\lu_check_info_reg[Addr_Use][5] ;
  wire \lu_check_info_reg[Allocate] ;
  wire \lu_check_info_reg[Early] ;
  wire \lu_check_info_reg[Keep] ;
  wire \lu_check_info_reg[KillHit] ;
  wire \lu_check_info_reg[KillHit]_0 ;
  wire \lu_check_info_reg[Kind] ;
  wire [7:0]\lu_check_info_reg[Len][7] ;
  wire \lu_check_info_reg[Port_Num][0] ;
  wire \lu_check_info_reg[Wr] ;
  wire \lu_check_info_reg[Wr]_0 ;
  wire [1:0]\lu_check_locked_hit_reg[1] ;
  wire \lu_check_locked_hit_reg[1]_0 ;
  wire lu_check_piperun;
  wire \lu_check_port_one_hot_reg[0] ;
  wire lu_check_protected_way;
  wire \lu_check_protected_way_reg[0] ;
  wire lu_check_read_info_done;
  wire lu_check_read_info_done_reg;
  wire lu_check_single_beat;
  wire [1:0]\lu_check_tag_hit_copy_wm_reg[1] ;
  wire [1:0]\lu_check_tag_hit_reg[1] ;
  wire [1:0]\lu_check_valid_bits_reg[1] ;
  wire lu_check_valid_delayed_reg;
  wire lu_check_wait_for_update;
  wire lu_check_wait_for_update_reg;
  wire lu_check_wr_already_pushed;
  wire lu_check_wr_already_pushed_reg;
  wire lu_ds_last_beat_next_last_n;
  wire \lu_mem_info_reg[Addr][10] ;
  wire \lu_mem_info_reg[Addr][11] ;
  wire \lu_mem_info_reg[Addr][12] ;
  wire \lu_mem_info_reg[Addr][13] ;
  wire [5:0]\lu_mem_info_reg[Addr][5] ;
  wire \lu_mem_info_reg[Addr][6] ;
  wire \lu_mem_info_reg[Addr][7] ;
  wire \lu_mem_info_reg[Addr][8] ;
  wire \lu_mem_info_reg[Addr][9] ;
  wire [5:0]\lu_mem_info_reg[Addr_Stp][5] ;
  wire [5:0]\lu_mem_info_reg[Addr_Use][5] ;
  wire \lu_mem_info_reg[Kind] ;
  wire [7:0]\lu_mem_info_reg[Len][7] ;
  wire \lu_mem_info_reg[Port_Num][0] ;
  wire \lu_mem_info_reg[Wr] ;
  wire lu_mem_protect_conflict_reg;
  wire lu_mem_single_beat_reg;
  wire lu_mem_valid_reg;
  wire lu_mem_valid_reg_0;
  wire lud_addr_pipeline_full_reg;
  wire lud_addr_pipeline_full_reg_0;
  wire lud_addr_pipeline_full_reg_1;
  wire lud_addr_pipeline_full_reg_2;
  wire lud_addr_pipeline_full_reg_3;
  wire lud_addr_piperun;
  wire lud_mem_already_used;
  wire lud_mem_already_used_i_2_n_0;
  wire lud_mem_already_used_reg;
  wire lud_mem_completed_reg;
  wire lud_mem_delayed_read_data;
  wire lud_mem_delayed_read_data0;
  wire lud_mem_keep_single_during_stall;
  wire lud_mem_last_reg;
  wire lud_mem_last_reg_0;
  wire \lud_mem_port_one_hot_reg[0] ;
  wire \lud_mem_port_one_hot_reg[1] ;
  wire \lud_mem_port_one_hot_reg[1]_0 ;
  wire lud_mem_speculative_valid;
  wire lud_mem_use_speculative;
  wire lud_mem_waiting_for_pipe_reg;
  wire lud_mem_waiting_for_pipe_reg_0;
  wire lud_mem_waiting_for_pipe_reg_1;
  wire lud_reg_valid_reg;
  wire lud_step_delayed_restart;
  wire lud_step_delayed_restart_reg;
  wire lud_step_offset;
  wire lud_step_offset_is_read;
  wire lud_write_hit_done_i_2_n_0;
  wire lud_write_hit_done_reg;
  wire lud_write_hit_done_reg_0;
  wire p_138_in;
  wire p_162_in;
  wire \read_data_status[0,1][Hit_Full] ;
  wire update_done_tag_write_reg;
  wire \update_info_reg[Allocate] ;
  wire \update_info_reg[Evict] ;
  wire update_need_bs;
  wire \update_old_tag_reg[Addr][14] ;
  wire \update_old_tag_reg[Addr][14]_0 ;
  wire update_piperun;
  wire update_read_miss_reg;
  wire \update_release_tag_reg[Addr][11] ;
  wire update_write_miss_full;
  wire wm_evict_reg;
  wire wm_evict_reg_0;
  wire \wm_port_reg[0] ;
  wire wr_port_data_last_i_reg;
  wire wr_port_data_ready;
  wire wr_port_data_valid_i_reg;

  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_10__0 
       (.I0(\lookup_offset_cnt_reg[5]_1 [4]),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_42_n_0 ),
        .I2(\lu_mem_info_reg[Addr][5] [4]),
        .I3(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I4(D[4]),
        .O(ADDRARDADDR[0]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_11__0 
       (.I0(\lookup_offset_cnt_reg[5]_1 [3]),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_42_n_0 ),
        .I2(\lu_mem_info_reg[Addr][5] [3]),
        .I3(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I4(D[3]),
        .O(DI[3]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_12__0 
       (.I0(\lookup_offset_cnt_reg[5]_1 [2]),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_42_n_0 ),
        .I2(\lu_mem_info_reg[Addr][5] [2]),
        .I3(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I4(D[2]),
        .O(DI[2]));
  LUT6 #(
    .INIT(64'h2077777720772077)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_1__0 
       (.I0(lu_check_valid_delayed_reg),
        .I1(\lu_check_tag_hit_reg[1] [1]),
        .I2(\lu_check_tag_hit_reg[1] [0]),
        .I3(\lu_check_valid_bits_reg[1] [0]),
        .I4(lru_check_next_way),
        .I5(\lu_check_valid_bits_reg[1] [1]),
        .O(DIBDI));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_1__1 
       (.I0(\lu_mem_info_reg[Addr][13] ),
        .I1(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I2(D[13]),
        .O(ADDRARDADDR[9]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_2 
       (.I0(\lu_mem_info_reg[Addr][12] ),
        .I1(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I2(D[12]),
        .O(ADDRARDADDR[8]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_3 
       (.I0(\lu_mem_info_reg[Addr][11] ),
        .I1(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I2(D[11]),
        .O(ADDRARDADDR[7]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_4 
       (.I0(\lu_mem_info_reg[Addr][10] ),
        .I1(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I2(D[10]),
        .O(ADDRARDADDR[6]));
  LUT6 #(
    .INIT(64'h4444444455550555)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_42 
       (.I0(lookup_offset_first_reg_0),
        .I1(\update_release_tag_reg[Addr][11] ),
        .I2(\lu_check_info_reg[KillHit]_0 ),
        .I3(lu_check_valid_delayed_reg),
        .I4(\lu_check_info_reg[Wr] ),
        .I5(lud_mem_waiting_for_pipe_reg_0),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_42_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_5 
       (.I0(\lu_mem_info_reg[Addr][9] ),
        .I1(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I2(D[9]),
        .O(ADDRARDADDR[5]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_6 
       (.I0(\lu_mem_info_reg[Addr][8] ),
        .I1(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I2(D[8]),
        .O(ADDRARDADDR[4]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_7 
       (.I0(\lu_mem_info_reg[Addr][7] ),
        .I1(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I2(D[7]),
        .O(ADDRARDADDR[3]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_8 
       (.I0(\lu_mem_info_reg[Addr][6] ),
        .I1(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I2(D[6]),
        .O(ADDRARDADDR[2]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_9 
       (.I0(\lookup_offset_cnt_reg[5]_1 [5]),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_42_n_0 ),
        .I2(\lu_mem_info_reg[Addr][5] [5]),
        .I3(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I4(D[5]),
        .O(ADDRARDADDR[1]));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(D_0),
        .Q(lu_check_valid_delayed_reg),
        .R(Q));
  LUT6 #(
    .INIT(64'hBA00BA00BAFFBA00)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_1 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_2_n_0 ),
        .I1(\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ),
        .I2(lookup_write_miss),
        .I3(lu_check_piperun),
        .I4(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_7 ),
        .I5(update_piperun),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ));
  LUT5 #(
    .INIT(32'h111F1111)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_1__0 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_2__0_n_0 ),
        .I2(lu_check_piperun),
        .I3(update_piperun),
        .I4(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_8 ),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ));
  LUT6 #(
    .INIT(64'hAEAEAEAEAEAEAEFF)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_1__2 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_4 ),
        .I1(update_need_bs),
        .I2(update_done_tag_write_reg),
        .I3(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .I4(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_4__0_n_0 ),
        .I5(\lu_check_info_reg[Early] ),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_3 ));
  LUT6 #(
    .INIT(64'hAAAAEAAAAAAAAAAA)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_1__5 
       (.I0(lud_mem_completed_reg),
        .I1(lud_mem_last_reg),
        .I2(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I3(p_162_in),
        .I4(lookup_protect_conflict),
        .I5(lud_addr_piperun),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_6 ));
  LUT6 #(
    .INIT(64'hF0F0F0F000770000)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_1__9 
       (.I0(lu_check_done0),
        .I1(\Using_FPGA.MUXCY_I_i_3__1_n_0 ),
        .I2(lu_mem_valid_reg_0),
        .I3(lu_check_piperun),
        .I4(lu_check_valid_delayed_reg),
        .I5(\Use_FPGA.Full_Inst ),
        .O(D_0));
  LUT6 #(
    .INIT(64'h000000000E0E0E0F)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_2 
       (.I0(\lu_check_locked_hit_reg[1] [0]),
        .I1(\lu_check_locked_hit_reg[1] [1]),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_4_n_0 ),
        .I3(\lu_check_tag_hit_reg[1] [0]),
        .I4(\lu_check_tag_hit_reg[1] [1]),
        .I5(\lu_check_info_reg[KillHit] ),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_2_n_0 ));
  LUT6 #(
    .INIT(64'h0200020202020202)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_2__0 
       (.I0(\lu_check_info_reg[Wr]_0 ),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_3__1_n_0 ),
        .I2(\lu_check_info_reg[KillHit] ),
        .I3(\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ),
        .I4(lu_check_valid_delayed_reg),
        .I5(\lu_check_info_reg[KillHit]_0 ),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_2__0_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFF00008000)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_2__1 
       (.I0(\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ),
        .I1(lu_check_valid_delayed_reg),
        .I2(\lu_check_info_reg[Wr] ),
        .I3(\lu_check_info_reg[KillHit]_0 ),
        .I4(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .I5(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_5 ),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_4 ));
  LUT6 #(
    .INIT(64'h0000FFFF00004404)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_2__2 
       (.I0(\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ),
        .I1(lookup_miss_dirty),
        .I2(\lu_check_info_reg[KillHit] ),
        .I3(\lu_check_info_reg[Wr] ),
        .I4(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ),
        .I5(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_3__1_n_0 ),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_5 ));
  (* SOFT_HLUTNM = "soft_lutpair22" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_2__3 
       (.I0(\Using_FPGA.MUXCY_I_i_3__1_n_0 ),
        .I1(lu_check_piperun),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ));
  LUT6 #(
    .INIT(64'h0000000040404000)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_3__1 
       (.I0(\lu_check_info_reg[Keep] ),
        .I1(lu_check_valid_delayed_reg),
        .I2(\lu_check_info_reg[Wr] ),
        .I3(\lu_check_tag_hit_reg[1] [1]),
        .I4(\lu_check_tag_hit_reg[1] [0]),
        .I5(\lu_check_info_reg[KillHit] ),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_3__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair23" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_4 
       (.I0(\lu_check_info_reg[Wr] ),
        .I1(lu_check_valid_delayed_reg),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h7)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_4__0 
       (.I0(lu_check_valid_delayed_reg),
        .I1(\lu_check_info_reg[Wr] ),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_4__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair26" *) 
  LUT3 #(
    .INIT(8'hE0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_5 
       (.I0(\lu_check_locked_hit_reg[1] [1]),
        .I1(\lu_check_locked_hit_reg[1] [0]),
        .I2(lookup_read_hit_d1_reg),
        .O(\update_info_reg[Allocate] ));
  LUT6 #(
    .INIT(64'h8A888A8A8A8A8A8A)) 
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_i_2 
       (.I0(lu_mem_valid_reg_0),
        .I1(\lu_mem_info_reg[Wr] ),
        .I2(lud_mem_waiting_for_pipe_reg_0),
        .I3(lu_mem_protect_conflict_reg),
        .I4(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I5(lud_addr_piperun),
        .O(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFEEFE)) 
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_i_3 
       (.I0(\lu_check_info_reg[KillHit] ),
        .I1(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_i_4_n_0 ),
        .I2(lud_mem_use_speculative),
        .I3(\lu_check_info_reg[Wr] ),
        .I4(lud_mem_already_used),
        .I5(lu_check_wait_for_update),
        .O(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ));
  (* SOFT_HLUTNM = "soft_lutpair32" *) 
  LUT3 #(
    .INIT(8'h1F)) 
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_i_4 
       (.I0(\lu_check_tag_hit_reg[1] [0]),
        .I1(\lu_check_tag_hit_reg[1] [1]),
        .I2(lu_check_valid_delayed_reg),
        .O(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_i_4_n_0 ));
  LUT6 #(
    .INIT(64'h000000F400000000)) 
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_1__2 
       (.I0(lookup_protect_conflict),
        .I1(lookup_read_hit_d1_reg),
        .I2(update_read_miss_reg),
        .I3(lu_check_read_info_done),
        .I4(lu_check_wait_for_update),
        .I5(\lu_check_info_reg[Port_Num][0] ),
        .O(\lookup_read_data_new[0,1][Valid] ));
  LUT6 #(
    .INIT(64'h000000000000AA20)) 
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_1__3 
       (.I0(\lu_check_port_one_hot_reg[0] ),
        .I1(lookup_protect_conflict),
        .I2(lookup_read_hit_d1_reg),
        .I3(update_read_miss_reg),
        .I4(lu_check_read_info_done),
        .I5(lu_check_wait_for_update),
        .O(\lookup_read_data_new[0,0][Valid] ));
  LUT6 #(
    .INIT(64'h0101010001000100)) 
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_2__1 
       (.I0(lu_check_wr_already_pushed),
        .I1(update_write_miss_full),
        .I2(lookup_protect_conflict),
        .I3(lookup_push_write_miss_pre),
        .I4(\Using_FPGA.MUXCY_I_i_2__5_n_0 ),
        .I5(\Using_FPGA.MUXCY_I_i_3__4_n_0 ),
        .O(lookup_push_write_miss));
  LUT6 #(
    .INIT(64'hF0FFF0FFF0FFFBFF)) 
    \Using_FPGA.AND2B1L_Inst1_i_1__5 
       (.I0(\lu_check_info_reg[Wr] ),
        .I1(\lu_check_info_reg[Allocate] ),
        .I2(\lu_check_info_reg[KillHit] ),
        .I3(lu_check_valid_delayed_reg),
        .I4(\lu_check_tag_hit_reg[1] [1]),
        .I5(\lu_check_tag_hit_reg[1] [0]),
        .O(SRI));
  LUT6 #(
    .INIT(64'hB8BBB8BB0000B8BB)) 
    \Using_FPGA.AND2B1L_Inst1_i_1__6 
       (.I0(\update_release_tag_reg[Addr][11] ),
        .I1(lud_mem_waiting_for_pipe_reg_0),
        .I2(\lu_mem_info_reg[Wr] ),
        .I3(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I4(\lu_check_tag_hit_reg[1] [0]),
        .I5(lu_check_wait_for_update),
        .O(SRI_6));
  LUT6 #(
    .INIT(64'hB8BBB8BB0000B8BB)) 
    \Using_FPGA.AND2B1L_Inst1_i_1__7 
       (.I0(\update_release_tag_reg[Addr][11] ),
        .I1(lud_mem_waiting_for_pipe_reg_0),
        .I2(\lu_mem_info_reg[Wr] ),
        .I3(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I4(\lu_check_tag_hit_reg[1] [1]),
        .I5(lu_check_wait_for_update),
        .O(SRI_7));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.MUXCY_I_i_1__1 
       (.I0(wr_port_data_valid_i_reg),
        .O(S));
  LUT3 #(
    .INIT(8'hD0)) 
    \Using_FPGA.MUXCY_I_i_1__125 
       (.I0(lud_write_hit_done_reg_0),
        .I1(\lu_check_info_reg[Keep] ),
        .I2(lu_check_valid_delayed_reg),
        .O(A134_out));
  LUT2 #(
    .INIT(4'h7)) 
    \Using_FPGA.MUXCY_I_i_1__129 
       (.I0(lu_check_done0),
        .I1(\Using_FPGA.MUXCY_I_i_3__1_n_0 ),
        .O(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_1 ));
  LUT6 #(
    .INIT(64'h0000000000008AAA)) 
    \Using_FPGA.MUXCY_I_i_1__130 
       (.I0(\Using_FPGA.MUXCY_I_i_2__5_n_0 ),
        .I1(lu_check_wr_already_pushed),
        .I2(update_write_miss_full),
        .I3(\Using_FPGA.MUXCY_I_i_3__4_n_0 ),
        .I4(lookup_protect_conflict),
        .I5(lookup_push_wm_stall),
        .O(\update_old_tag_reg[Addr][14]_0 ));
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.MUXCY_I_i_1__136 
       (.I0(lu_check_valid_delayed_reg),
        .I1(\lu_check_info_reg[Allocate] ),
        .O(wm_evict_reg_0));
  LUT6 #(
    .INIT(64'hFFFFFF0100000000)) 
    \Using_FPGA.MUXCY_I_i_1__138 
       (.I0(\Using_FPGA.MUXCY_I_i_2__6_n_0 ),
        .I1(lu_mem_protect_conflict_reg),
        .I2(lookup_access_data_late),
        .I3(lud_mem_delayed_read_data),
        .I4(lud_mem_keep_single_during_stall),
        .I5(lud_mem_speculative_valid),
        .O(lud_mem_last_reg_0));
  LUT4 #(
    .INIT(16'hAFAB)) 
    \Using_FPGA.MUXCY_I_i_1__50 
       (.I0(lud_addr_pipeline_full_reg_2),
        .I1(lu_mem_protect_conflict_reg),
        .I2(lud_step_delayed_restart),
        .I3(lud_step_delayed_restart_reg),
        .O(S_1));
  LUT5 #(
    .INIT(32'hEFEF00EF)) 
    \Using_FPGA.MUXCY_I_i_1__51 
       (.I0(\Using_FPGA.MUXCY_I_i_2__7_n_0 ),
        .I1(\Using_FPGA.MUXCY_I_i_3__2_n_0 ),
        .I2(lud_step_delayed_restart_reg),
        .I3(lud_mem_waiting_for_pipe_reg_0),
        .I4(\update_release_tag_reg[Addr][11] ),
        .O(S_2));
  LUT3 #(
    .INIT(8'h80)) 
    \Using_FPGA.MUXCY_I_i_1__55 
       (.I0(lu_check_valid_delayed_reg),
        .I1(\lu_check_valid_bits_reg[1] [1]),
        .I2(\lu_check_valid_bits_reg[1] [0]),
        .O(wm_evict_reg));
  LUT6 #(
    .INIT(64'hAAAAAAAEAAAAAAAA)) 
    \Using_FPGA.MUXCY_I_i_1__56 
       (.I0(\Using_FPGA.MUXCY_I_i_2__8_n_0 ),
        .I1(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I2(lu_mem_protect_conflict_reg),
        .I3(lud_mem_waiting_for_pipe_reg_0),
        .I4(\lu_mem_info_reg[Wr] ),
        .I5(lu_mem_valid_reg_0),
        .O(S_3));
  LUT3 #(
    .INIT(8'h1D)) 
    \Using_FPGA.MUXCY_I_i_1__57 
       (.I0(\lu_check_info_reg[Wr] ),
        .I1(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I2(\lu_mem_info_reg[Wr] ),
        .O(lud_addr_pipeline_full_reg_1));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.MUXCY_I_i_1__6 
       (.I0(wr_port_data_ready),
        .O(S_0));
  LUT3 #(
    .INIT(8'h02)) 
    \Using_FPGA.MUXCY_I_i_1__61 
       (.I0(lu_check_valid_delayed_reg),
        .I1(\lu_check_info_reg[Wr] ),
        .I2(\lu_check_info_reg[KillHit] ),
        .O(A141_out));
  LUT6 #(
    .INIT(64'hDDDDDDDDDDDDDDD0)) 
    \Using_FPGA.MUXCY_I_i_1__66 
       (.I0(lud_mem_waiting_for_pipe_reg_0),
        .I1(\update_release_tag_reg[Addr][11] ),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_4__0_n_0 ),
        .I3(lu_check_wait_for_update),
        .I4(lud_addr_pipeline_full_reg_2),
        .I5(lud_write_hit_done_reg_0),
        .O(S_4));
  LUT3 #(
    .INIT(8'h7F)) 
    \Using_FPGA.MUXCY_I_i_1__67 
       (.I0(\lu_check_info_reg[Wr] ),
        .I1(lu_check_valid_delayed_reg),
        .I2(lud_addr_pipeline_full_reg_2),
        .O(S_5));
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.MUXCY_I_i_1__77 
       (.I0(lu_check_valid_delayed_reg),
        .I1(access_valid),
        .O(A121_out));
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.MUXCY_I_i_1__80 
       (.I0(lu_check_valid_delayed_reg),
        .I1(\lu_check_info_reg[Allocate] ),
        .O(A149_out));
  (* SOFT_HLUTNM = "soft_lutpair25" *) 
  LUT4 #(
    .INIT(16'h4F44)) 
    \Using_FPGA.MUXCY_I_i_2__1 
       (.I0(\lu_check_info_reg[Port_Num][0] ),
        .I1(lud_write_hit_done_i_2_n_0),
        .I2(\wm_port_reg[0] ),
        .I3(p_138_in),
        .O(wr_port_data_valid_i_reg));
  (* SOFT_HLUTNM = "soft_lutpair25" *) 
  LUT4 #(
    .INIT(16'hF888)) 
    \Using_FPGA.MUXCY_I_i_2__2 
       (.I0(\lu_check_info_reg[Port_Num][0] ),
        .I1(lud_write_hit_done_i_2_n_0),
        .I2(\wm_port_reg[0] ),
        .I3(p_138_in),
        .O(wr_port_data_ready));
  LUT6 #(
    .INIT(64'h0000000000008AAA)) 
    \Using_FPGA.MUXCY_I_i_2__4 
       (.I0(\Using_FPGA.MUXCY_I_i_2__5_n_0 ),
        .I1(lu_check_wr_already_pushed),
        .I2(update_write_miss_full),
        .I3(\Using_FPGA.MUXCY_I_i_3__4_n_0 ),
        .I4(lookup_protect_conflict),
        .I5(lookup_push_wm_stall),
        .O(lu_check_done0));
  LUT5 #(
    .INIT(32'h0000EFFF)) 
    \Using_FPGA.MUXCY_I_i_2__5 
       (.I0(lud_mem_already_used),
        .I1(\Using_FPGA.MUXCY_I_i_2__6_n_0 ),
        .I2(lu_mem_protect_conflict_reg),
        .I3(lud_addr_pipeline_full_reg_2),
        .I4(lud_addr_pipeline_full_reg_3),
        .O(\Using_FPGA.MUXCY_I_i_2__5_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair26" *) 
  LUT3 #(
    .INIT(8'hEF)) 
    \Using_FPGA.MUXCY_I_i_2__6 
       (.I0(\lu_check_locked_hit_reg[1] [1]),
        .I1(\lu_check_locked_hit_reg[1] [0]),
        .I2(lookup_read_hit_d1_reg),
        .O(\Using_FPGA.MUXCY_I_i_2__6_n_0 ));
  LUT6 #(
    .INIT(64'h00000000000000E4)) 
    \Using_FPGA.MUXCY_I_i_2__7 
       (.I0(\lu_check_info_reg[Port_Num][0] ),
        .I1(\access_data_info[0,0][Valid] ),
        .I2(\access_data_info[0,1][Valid] ),
        .I3(\update_old_tag_reg[Addr][14] ),
        .I4(lu_check_wait_for_update),
        .I5(lookup_data_hit_stall),
        .O(\Using_FPGA.MUXCY_I_i_2__7_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000001)) 
    \Using_FPGA.MUXCY_I_i_2__8 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_4_n_0 ),
        .I1(lu_mem_protect_conflict_reg),
        .I2(lu_check_wait_for_update),
        .I3(lud_mem_use_speculative),
        .I4(lud_mem_already_used),
        .I5(lud_mem_waiting_for_pipe_reg_0),
        .O(\Using_FPGA.MUXCY_I_i_2__8_n_0 ));
  LUT6 #(
    .INIT(64'h0F8F0F8F0F8F0F9F)) 
    \Using_FPGA.MUXCY_I_i_3__1 
       (.I0(\LU_Data_WE_Or_Inst1/The_Compare[0].carry_and_I1/S ),
        .I1(\lu_check_info_reg[KillHit] ),
        .I2(lu_check_valid_delayed_reg),
        .I3(\lu_check_info_reg[Wr] ),
        .I4(\lu_check_locked_hit_reg[1] [0]),
        .I5(\lu_check_locked_hit_reg[1] [1]),
        .O(\Using_FPGA.MUXCY_I_i_3__1_n_0 ));
  LUT5 #(
    .INIT(32'h00020000)) 
    \Using_FPGA.MUXCY_I_i_3__2 
       (.I0(lu_mem_valid_reg_0),
        .I1(\lu_mem_info_reg[Wr] ),
        .I2(lud_mem_waiting_for_pipe_reg_0),
        .I3(lu_mem_protect_conflict_reg),
        .I4(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .O(\Using_FPGA.MUXCY_I_i_3__2_n_0 ));
  LUT6 #(
    .INIT(64'h0040004000400000)) 
    \Using_FPGA.MUXCY_I_i_3__4 
       (.I0(\lu_check_info_reg[Keep] ),
        .I1(lu_check_valid_delayed_reg),
        .I2(\lu_check_info_reg[Wr] ),
        .I3(lu_check_wait_for_update),
        .I4(\lu_check_tag_hit_copy_wm_reg[1] [0]),
        .I5(\lu_check_tag_hit_copy_wm_reg[1] [1]),
        .O(\Using_FPGA.MUXCY_I_i_3__4_n_0 ));
  LUT6 #(
    .INIT(64'hEEEE0EEEEEEEEEEE)) 
    \Using_FPGA.MUXCY_I_i_4 
       (.I0(\Using_FPGA.MUXCY_I_i_2__6_n_0 ),
        .I1(lud_mem_already_used),
        .I2(update_read_miss_reg),
        .I3(lookup_restart_mem),
        .I4(\lu_mem_info_reg[Wr] ),
        .I5(lu_mem_valid_reg_0),
        .O(lud_step_delayed_restart_reg));
  (* SOFT_HLUTNM = "soft_lutpair32" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \Using_FPGA.MUXCY_I_i_4__0 
       (.I0(\lu_check_tag_hit_reg[1] [1]),
        .I1(\lu_check_tag_hit_reg[1] [0]),
        .O(\LU_Data_WE_Or_Inst1/The_Compare[0].carry_and_I1/S ));
  (* SOFT_HLUTNM = "soft_lutpair21" *) 
  LUT5 #(
    .INIT(32'hF1FFFFFF)) 
    \Using_FPGA.MUXCY_I_i_6 
       (.I0(\lu_check_tag_hit_reg[1] [1]),
        .I1(\lu_check_tag_hit_reg[1] [0]),
        .I2(\lu_check_info_reg[KillHit] ),
        .I3(\lu_check_info_reg[Wr] ),
        .I4(lu_check_valid_delayed_reg),
        .O(\update_old_tag_reg[Addr][14] ));
  LUT6 #(
    .INIT(64'hFFFF555700000000)) 
    lookup_next_is_last_beat_i_1
       (.I0(lookup_read_hit_d1_reg),
        .I1(lookup_protect_conflict),
        .I2(\lu_check_locked_hit_reg[1] [0]),
        .I3(\lu_check_locked_hit_reg[1] [1]),
        .I4(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I5(lud_step_offset),
        .O(E));
  (* SOFT_HLUTNM = "soft_lutpair20" *) 
  LUT5 #(
    .INIT(32'h01000000)) 
    lookup_next_is_last_beat_i_2
       (.I0(lookup_next_is_last_beat_i_3_n_0),
        .I1(lookup_next_is_last_beat_i_4_n_0),
        .I2(lookup_next_is_last_beat_i_5_n_0),
        .I3(lookup_next_is_last_beat_i_6_n_0),
        .I4(lookup_next_is_last_beat_i_7_n_0),
        .O(lookup_next_is_last_beat));
  LUT6 #(
    .INIT(64'hFFFFFFFFB8B8BB88)) 
    lookup_next_is_last_beat_i_3
       (.I0(\lookup_offset_len_cnt_reg[7]_0 [3]),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_42_n_0 ),
        .I2(\lu_mem_info_reg[Len][7] [3]),
        .I3(\lu_check_info_reg[Len][7] [3]),
        .I4(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I5(\lookup_offset_len_cnt[3]_i_3_n_0 ),
        .O(lookup_next_is_last_beat_i_3_n_0));
  LUT6 #(
    .INIT(64'hB8B8BB88FFFFFFFF)) 
    lookup_next_is_last_beat_i_4
       (.I0(\lookup_offset_len_cnt_reg[7]_0 [1]),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_42_n_0 ),
        .I2(\lu_mem_info_reg[Len][7] [1]),
        .I3(\lu_check_info_reg[Len][7] [1]),
        .I4(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I5(\lookup_offset_len_cnt[1]_i_2_n_0 ),
        .O(lookup_next_is_last_beat_i_4_n_0));
  LUT6 #(
    .INIT(64'hFFFFFFFFB8B8BB88)) 
    lookup_next_is_last_beat_i_5
       (.I0(\lookup_offset_len_cnt_reg[7]_0 [5]),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_42_n_0 ),
        .I2(\lu_mem_info_reg[Len][7] [5]),
        .I3(\lu_check_info_reg[Len][7] [5]),
        .I4(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I5(\lookup_offset_len_cnt[4]_i_2_n_0 ),
        .O(lookup_next_is_last_beat_i_5_n_0));
  LUT5 #(
    .INIT(32'h30353F35)) 
    lookup_next_is_last_beat_i_6
       (.I0(\lu_check_info_reg[Len][7] [7]),
        .I1(\lookup_offset_len_cnt_reg[7]_0 [7]),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_42_n_0 ),
        .I3(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I4(\lu_mem_info_reg[Len][7] [7]),
        .O(lookup_next_is_last_beat_i_6_n_0));
  LUT6 #(
    .INIT(64'h03005355F3FF5355)) 
    lookup_next_is_last_beat_i_7
       (.I0(\lu_check_info_reg[Len][7] [6]),
        .I1(\lookup_offset_len_cnt_reg[7]_0 [6]),
        .I2(lookup_next_is_last_beat_i_8_n_0),
        .I3(lud_mem_waiting_for_pipe_reg_1),
        .I4(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I5(\lu_mem_info_reg[Len][7] [6]),
        .O(lookup_next_is_last_beat_i_7_n_0));
  LUT6 #(
    .INIT(64'h1010101000000010)) 
    lookup_next_is_last_beat_i_8
       (.I0(lud_mem_waiting_for_pipe_reg_0),
        .I1(\lu_check_info_reg[Wr] ),
        .I2(lu_check_valid_delayed_reg),
        .I3(\lu_check_tag_hit_reg[1] [1]),
        .I4(\lu_check_tag_hit_reg[1] [0]),
        .I5(\lu_check_info_reg[KillHit] ),
        .O(lookup_next_is_last_beat_i_8_n_0));
  LUT6 #(
    .INIT(64'hAAABBBABAAA888A8)) 
    \lookup_offset_cnt[0]_i_1 
       (.I0(O[0]),
        .I1(\lookup_offset_cnt[5]_i_2_n_0 ),
        .I2(\lu_check_info_reg[Addr_Use][5] [0]),
        .I3(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I4(\lu_mem_info_reg[Addr_Use][5] [0]),
        .I5(\lookup_offset_cnt[0]_i_2_n_0 ),
        .O(\lookup_offset_cnt_reg[5] [0]));
  (* SOFT_HLUTNM = "soft_lutpair27" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \lookup_offset_cnt[0]_i_2 
       (.I0(\lu_mem_info_reg[Addr][5] [0]),
        .I1(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I2(D[0]),
        .O(\lookup_offset_cnt[0]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAAABBBABAAA888A8)) 
    \lookup_offset_cnt[1]_i_1 
       (.I0(O[1]),
        .I1(\lookup_offset_cnt[5]_i_2_n_0 ),
        .I2(\lu_check_info_reg[Addr_Use][5] [1]),
        .I3(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I4(\lu_mem_info_reg[Addr_Use][5] [1]),
        .I5(\lookup_offset_cnt[1]_i_2_n_0 ),
        .O(\lookup_offset_cnt_reg[5] [1]));
  (* SOFT_HLUTNM = "soft_lutpair27" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \lookup_offset_cnt[1]_i_2 
       (.I0(\lu_mem_info_reg[Addr][5] [1]),
        .I1(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I2(D[1]),
        .O(\lookup_offset_cnt[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAAABBBABAAA888A8)) 
    \lookup_offset_cnt[2]_i_1 
       (.I0(O[2]),
        .I1(\lookup_offset_cnt[5]_i_2_n_0 ),
        .I2(\lu_check_info_reg[Addr_Use][5] [2]),
        .I3(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I4(\lu_mem_info_reg[Addr_Use][5] [2]),
        .I5(\lookup_offset_cnt[2]_i_2_n_0 ),
        .O(\lookup_offset_cnt_reg[5] [2]));
  (* SOFT_HLUTNM = "soft_lutpair28" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \lookup_offset_cnt[2]_i_2 
       (.I0(\lu_mem_info_reg[Addr][5] [2]),
        .I1(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I2(D[2]),
        .O(\lookup_offset_cnt[2]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAAABBBABAAA888A8)) 
    \lookup_offset_cnt[3]_i_1 
       (.I0(O[3]),
        .I1(\lookup_offset_cnt[5]_i_2_n_0 ),
        .I2(\lu_check_info_reg[Addr_Use][5] [3]),
        .I3(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I4(\lu_mem_info_reg[Addr_Use][5] [3]),
        .I5(\lookup_offset_cnt[3]_i_2_n_0 ),
        .O(\lookup_offset_cnt_reg[5] [3]));
  (* SOFT_HLUTNM = "soft_lutpair29" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \lookup_offset_cnt[3]_i_2 
       (.I0(\lu_mem_info_reg[Addr][5] [3]),
        .I1(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I2(D[3]),
        .O(\lookup_offset_cnt[3]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAAABBBABAAA888A8)) 
    \lookup_offset_cnt[4]_i_1 
       (.I0(\lookup_offset_cnt_reg[4] [0]),
        .I1(\lookup_offset_cnt[5]_i_2_n_0 ),
        .I2(\lu_check_info_reg[Addr_Use][5] [4]),
        .I3(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I4(\lu_mem_info_reg[Addr_Use][5] [4]),
        .I5(\lookup_offset_cnt[4]_i_2_n_0 ),
        .O(\lookup_offset_cnt_reg[5] [4]));
  (* SOFT_HLUTNM = "soft_lutpair29" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \lookup_offset_cnt[4]_i_2 
       (.I0(\lu_mem_info_reg[Addr][5] [4]),
        .I1(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I2(D[4]),
        .O(\lookup_offset_cnt[4]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAAABBBABAAA888A8)) 
    \lookup_offset_cnt[5]_i_1 
       (.I0(\lookup_offset_cnt_reg[4] [1]),
        .I1(\lookup_offset_cnt[5]_i_2_n_0 ),
        .I2(\lu_check_info_reg[Addr_Use][5] [5]),
        .I3(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I4(\lu_mem_info_reg[Addr_Use][5] [5]),
        .I5(\lookup_offset_cnt[5]_i_3_n_0 ),
        .O(\lookup_offset_cnt_reg[5] [5]));
  (* SOFT_HLUTNM = "soft_lutpair28" *) 
  LUT3 #(
    .INIT(8'h47)) 
    \lookup_offset_cnt[5]_i_2 
       (.I0(\lu_mem_info_reg[Kind] ),
        .I1(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I2(\lu_check_info_reg[Kind] ),
        .O(\lookup_offset_cnt[5]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair30" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \lookup_offset_cnt[5]_i_3 
       (.I0(\lu_mem_info_reg[Addr][5] [5]),
        .I1(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I2(D[5]),
        .O(\lookup_offset_cnt[5]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'h1DE2)) 
    lookup_offset_cnt_cmb0_carry__0_i_1
       (.I0(\lu_check_info_reg[Addr_Stp][5] [5]),
        .I1(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I2(\lu_mem_info_reg[Addr_Stp][5] [5]),
        .I3(ADDRARDADDR[1]),
        .O(\lookup_offset_cnt_reg[5]_0 [1]));
  LUT4 #(
    .INIT(16'h56A6)) 
    lookup_offset_cnt_cmb0_carry__0_i_2
       (.I0(ADDRARDADDR[0]),
        .I1(\lu_check_info_reg[Addr_Stp][5] [4]),
        .I2(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I3(\lu_mem_info_reg[Addr_Stp][5] [4]),
        .O(\lookup_offset_cnt_reg[5]_0 [0]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    lookup_offset_cnt_cmb0_carry_i_1
       (.I0(\lookup_offset_cnt_reg[5]_1 [1]),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_42_n_0 ),
        .I2(\lu_mem_info_reg[Addr][5] [1]),
        .I3(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I4(D[1]),
        .O(DI[1]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    lookup_offset_cnt_cmb0_carry_i_2
       (.I0(\lookup_offset_cnt_reg[5]_1 [0]),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_42_n_0 ),
        .I2(\lu_mem_info_reg[Addr][5] [0]),
        .I3(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I4(D[0]),
        .O(DI[0]));
  LUT4 #(
    .INIT(16'h56A6)) 
    lookup_offset_cnt_cmb0_carry_i_3
       (.I0(DI[3]),
        .I1(\lu_check_info_reg[Addr_Stp][5] [3]),
        .I2(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I3(\lu_mem_info_reg[Addr_Stp][5] [3]),
        .O(\lookup_offset_cnt_reg[3] [3]));
  LUT4 #(
    .INIT(16'h56A6)) 
    lookup_offset_cnt_cmb0_carry_i_4
       (.I0(DI[2]),
        .I1(\lu_check_info_reg[Addr_Stp][5] [2]),
        .I2(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I3(\lu_mem_info_reg[Addr_Stp][5] [2]),
        .O(\lookup_offset_cnt_reg[3] [2]));
  LUT4 #(
    .INIT(16'h56A6)) 
    lookup_offset_cnt_cmb0_carry_i_5
       (.I0(DI[1]),
        .I1(\lu_check_info_reg[Addr_Stp][5] [1]),
        .I2(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I3(\lu_mem_info_reg[Addr_Stp][5] [1]),
        .O(\lookup_offset_cnt_reg[3] [1]));
  LUT4 #(
    .INIT(16'h56A6)) 
    lookup_offset_cnt_cmb0_carry_i_6
       (.I0(DI[0]),
        .I1(\lu_check_info_reg[Addr_Stp][5] [0]),
        .I2(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I3(\lu_mem_info_reg[Addr_Stp][5] [0]),
        .O(\lookup_offset_cnt_reg[3] [0]));
  LUT5 #(
    .INIT(32'hFBFFFB00)) 
    lookup_offset_first_i_1
       (.I0(lud_mem_last_reg),
        .I1(E),
        .I2(Q),
        .I3(lookup_offset_first_i_2_n_0),
        .I4(lookup_offset_first_reg_0),
        .O(lookup_offset_first_reg));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFAE)) 
    lookup_offset_first_i_2
       (.I0(E),
        .I1(lookup_offset_first_i_3_n_0),
        .I2(lud_mem_waiting_for_pipe_reg_0),
        .I3(lookup_next_is_last_beat_i_8_n_0),
        .I4(Q),
        .I5(lu_mem_protect_conflict_reg),
        .O(lookup_offset_first_i_2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair24" *) 
  LUT4 #(
    .INIT(16'hAAA8)) 
    lookup_offset_first_i_3
       (.I0(lookup_read_hit_d1_reg),
        .I1(lookup_protect_conflict),
        .I2(\lu_check_locked_hit_reg[1] [0]),
        .I3(\lu_check_locked_hit_reg[1] [1]),
        .O(lookup_offset_first_i_3_n_0));
  LUT5 #(
    .INIT(32'h47474477)) 
    \lookup_offset_len_cnt[0]_i_1 
       (.I0(\lookup_offset_len_cnt_reg[7]_0 [0]),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_42_n_0 ),
        .I2(\lu_mem_info_reg[Len][7] [0]),
        .I3(\lu_check_info_reg[Len][7] [0]),
        .I4(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .O(\lookup_offset_len_cnt_reg[7] [0]));
  LUT6 #(
    .INIT(64'hB8B8BB8847474477)) 
    \lookup_offset_len_cnt[1]_i_1 
       (.I0(\lookup_offset_len_cnt_reg[7]_0 [1]),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_42_n_0 ),
        .I2(\lu_mem_info_reg[Len][7] [1]),
        .I3(\lu_check_info_reg[Len][7] [1]),
        .I4(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I5(\lookup_offset_len_cnt[1]_i_2_n_0 ),
        .O(\lookup_offset_len_cnt_reg[7] [1]));
  LUT6 #(
    .INIT(64'hE4E4FFE4E4E400E4)) 
    \lookup_offset_len_cnt[1]_i_2 
       (.I0(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I1(\lu_check_info_reg[Len][7] [0]),
        .I2(\lu_mem_info_reg[Len][7] [0]),
        .I3(lud_mem_waiting_for_pipe_reg_1),
        .I4(lookup_next_is_last_beat_i_8_n_0),
        .I5(\lookup_offset_len_cnt_reg[7]_0 [0]),
        .O(\lookup_offset_len_cnt[1]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFE400E4001BFF1B)) 
    \lookup_offset_len_cnt[2]_i_1 
       (.I0(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I1(\lu_check_info_reg[Len][7] [2]),
        .I2(\lu_mem_info_reg[Len][7] [2]),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_42_n_0 ),
        .I4(\lookup_offset_len_cnt_reg[7]_0 [2]),
        .I5(\lookup_offset_len_cnt[4]_i_3_n_0 ),
        .O(\lookup_offset_len_cnt_reg[7] [2]));
  (* SOFT_HLUTNM = "soft_lutpair31" *) 
  LUT3 #(
    .INIT(8'hA9)) 
    \lookup_offset_len_cnt[3]_i_1 
       (.I0(\lookup_offset_len_cnt[3]_i_2_n_0 ),
        .I1(\lookup_offset_len_cnt[3]_i_3_n_0 ),
        .I2(\lookup_offset_len_cnt[4]_i_3_n_0 ),
        .O(\lookup_offset_len_cnt_reg[7] [3]));
  LUT6 #(
    .INIT(64'hE4E4FFE4E4E400E4)) 
    \lookup_offset_len_cnt[3]_i_2 
       (.I0(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I1(\lu_check_info_reg[Len][7] [3]),
        .I2(\lu_mem_info_reg[Len][7] [3]),
        .I3(lud_mem_waiting_for_pipe_reg_1),
        .I4(lookup_next_is_last_beat_i_8_n_0),
        .I5(\lookup_offset_len_cnt_reg[7]_0 [3]),
        .O(\lookup_offset_len_cnt[3]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hE4E4FFE4E4E400E4)) 
    \lookup_offset_len_cnt[3]_i_3 
       (.I0(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I1(\lu_check_info_reg[Len][7] [2]),
        .I2(\lu_mem_info_reg[Len][7] [2]),
        .I3(lud_mem_waiting_for_pipe_reg_1),
        .I4(lookup_next_is_last_beat_i_8_n_0),
        .I5(\lookup_offset_len_cnt_reg[7]_0 [2]),
        .O(\lookup_offset_len_cnt[3]_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair31" *) 
  LUT3 #(
    .INIT(8'hA9)) 
    \lookup_offset_len_cnt[4]_i_1 
       (.I0(\lookup_offset_len_cnt[4]_i_2_n_0 ),
        .I1(lookup_next_is_last_beat_i_3_n_0),
        .I2(\lookup_offset_len_cnt[4]_i_3_n_0 ),
        .O(\lookup_offset_len_cnt_reg[7] [4]));
  LUT6 #(
    .INIT(64'hE4E4FFE4E4E400E4)) 
    \lookup_offset_len_cnt[4]_i_2 
       (.I0(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I1(\lu_check_info_reg[Len][7] [4]),
        .I2(\lu_mem_info_reg[Len][7] [4]),
        .I3(lud_mem_waiting_for_pipe_reg_1),
        .I4(lookup_next_is_last_beat_i_8_n_0),
        .I5(\lookup_offset_len_cnt_reg[7]_0 [4]),
        .O(\lookup_offset_len_cnt[4]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFB8B8BB88)) 
    \lookup_offset_len_cnt[4]_i_3 
       (.I0(\lookup_offset_len_cnt_reg[7]_0 [1]),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_42_n_0 ),
        .I2(\lu_mem_info_reg[Len][7] [1]),
        .I3(\lu_check_info_reg[Len][7] [1]),
        .I4(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I5(\lookup_offset_len_cnt[1]_i_2_n_0 ),
        .O(\lookup_offset_len_cnt[4]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hB8B8BB8847474477)) 
    \lookup_offset_len_cnt[5]_i_1 
       (.I0(\lookup_offset_len_cnt_reg[7]_0 [5]),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_42_n_0 ),
        .I2(\lu_mem_info_reg[Len][7] [5]),
        .I3(\lu_check_info_reg[Len][7] [5]),
        .I4(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I5(\lookup_offset_len_cnt[7]_i_2_n_0 ),
        .O(\lookup_offset_len_cnt_reg[7] [5]));
  LUT6 #(
    .INIT(64'hAA9A559AAA955595)) 
    \lookup_offset_len_cnt[6]_i_1 
       (.I0(\lookup_offset_len_cnt[6]_i_2_n_0 ),
        .I1(\lu_mem_info_reg[Len][7] [6]),
        .I2(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_42_n_0 ),
        .I4(\lookup_offset_len_cnt_reg[7]_0 [6]),
        .I5(\lu_check_info_reg[Len][7] [6]),
        .O(\lookup_offset_len_cnt_reg[7] [6]));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFFFE)) 
    \lookup_offset_len_cnt[6]_i_2 
       (.I0(\lookup_offset_len_cnt[4]_i_2_n_0 ),
        .I1(\lookup_offset_len_cnt[3]_i_3_n_0 ),
        .I2(\lookup_offset_len_cnt[3]_i_2_n_0 ),
        .I3(\lookup_offset_len_cnt[1]_i_2_n_0 ),
        .I4(\lookup_offset_len_cnt[7]_i_4_n_0 ),
        .I5(\lookup_offset_len_cnt[7]_i_3_n_0 ),
        .O(\lookup_offset_len_cnt[6]_i_2_n_0 ));
  LUT4 #(
    .INIT(16'h02FD)) 
    \lookup_offset_len_cnt[7]_i_1 
       (.I0(lookup_next_is_last_beat_i_7_n_0),
        .I1(\lookup_offset_len_cnt[7]_i_2_n_0 ),
        .I2(\lookup_offset_len_cnt[7]_i_3_n_0 ),
        .I3(lookup_next_is_last_beat_i_6_n_0),
        .O(\lookup_offset_len_cnt_reg[7] [7]));
  LUT5 #(
    .INIT(32'hFFFFFFFE)) 
    \lookup_offset_len_cnt[7]_i_2 
       (.I0(\lookup_offset_len_cnt[7]_i_4_n_0 ),
        .I1(\lookup_offset_len_cnt[1]_i_2_n_0 ),
        .I2(\lookup_offset_len_cnt[3]_i_2_n_0 ),
        .I3(\lookup_offset_len_cnt[3]_i_3_n_0 ),
        .I4(\lookup_offset_len_cnt[4]_i_2_n_0 ),
        .O(\lookup_offset_len_cnt[7]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hE4E4FFE4E4E400E4)) 
    \lookup_offset_len_cnt[7]_i_3 
       (.I0(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I1(\lu_check_info_reg[Len][7] [5]),
        .I2(\lu_mem_info_reg[Len][7] [5]),
        .I3(lud_mem_waiting_for_pipe_reg_1),
        .I4(lookup_next_is_last_beat_i_8_n_0),
        .I5(\lookup_offset_len_cnt_reg[7]_0 [5]),
        .O(\lookup_offset_len_cnt[7]_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hE4E4FFE4E4E400E4)) 
    \lookup_offset_len_cnt[7]_i_4 
       (.I0(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I1(\lu_check_info_reg[Len][7] [1]),
        .I2(\lu_mem_info_reg[Len][7] [1]),
        .I3(lud_mem_waiting_for_pipe_reg_1),
        .I4(lookup_next_is_last_beat_i_8_n_0),
        .I5(\lookup_offset_len_cnt_reg[7]_0 [1]),
        .O(\lookup_offset_len_cnt[7]_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair18" *) 
  LUT5 #(
    .INIT(32'h00000E00)) 
    lookup_read_hit_d1_i_1
       (.I0(\lu_check_tag_hit_reg[1] [1]),
        .I1(\lu_check_tag_hit_reg[1] [0]),
        .I2(\lu_check_info_reg[KillHit] ),
        .I3(lu_check_valid_delayed_reg),
        .I4(\lu_check_info_reg[Wr] ),
        .O(lookup_read_hit_d1_reg));
  LUT3 #(
    .INIT(8'hB8)) 
    \lu_check_protected_way[0]_i_1 
       (.I0(lru_check_used_way),
        .I1(lookup_protect_conflict),
        .I2(lu_check_protected_way),
        .O(\lu_check_protected_way_reg[0] ));
  LUT4 #(
    .INIT(16'h000E)) 
    lu_check_read_info_done_i_1
       (.I0(lu_check_read_info_done),
        .I1(lookup_read_done_i),
        .I2(Q),
        .I3(\Use_FPGA.Full_Inst ),
        .O(lu_check_read_info_done_reg));
  LUT5 #(
    .INIT(32'h10101110)) 
    lu_check_read_info_done_i_2
       (.I0(lu_check_wait_for_update),
        .I1(lu_check_read_info_done),
        .I2(update_read_miss_reg),
        .I3(lookup_read_hit_d1_reg),
        .I4(lookup_protect_conflict),
        .O(lookup_read_done_i));
  (* SOFT_HLUTNM = "soft_lutpair22" *) 
  LUT5 #(
    .INIT(32'h000000AE)) 
    lu_check_wait_for_update_i_1
       (.I0(lu_check_wait_for_update),
        .I1(lu_check_done0),
        .I2(\Using_FPGA.MUXCY_I_i_3__1_n_0 ),
        .I3(lu_check_piperun),
        .I4(Q),
        .O(lu_check_wait_for_update_reg));
  LUT4 #(
    .INIT(16'h000E)) 
    lu_check_wr_already_pushed_i_1
       (.I0(lu_check_wr_already_pushed),
        .I1(lookup_push_write_miss),
        .I2(lu_check_piperun),
        .I3(Q),
        .O(lu_check_wr_already_pushed_reg));
  (* SOFT_HLUTNM = "soft_lutpair20" *) 
  LUT5 #(
    .INIT(32'hFFFFFFF7)) 
    lu_ds_last_beat_next_last_n_i_1
       (.I0(lookup_next_is_last_beat_i_7_n_0),
        .I1(lookup_next_is_last_beat_i_6_n_0),
        .I2(lookup_next_is_last_beat_i_5_n_0),
        .I3(lookup_next_is_last_beat_i_4_n_0),
        .I4(lookup_next_is_last_beat_i_3_n_0),
        .O(lu_ds_last_beat_next_last_n));
  LUT6 #(
    .INIT(64'hBBBBBBBF00000000)) 
    lud_addr_pipeline_full_i_7
       (.I0(\Using_FPGA.MUXCY_I_i_3__2_n_0 ),
        .I1(lookup_read_hit_d1_reg),
        .I2(lookup_protect_conflict),
        .I3(\lu_check_locked_hit_reg[1] [0]),
        .I4(\lu_check_locked_hit_reg[1] [1]),
        .I5(lud_step_offset_is_read),
        .O(lud_addr_pipeline_full_reg_0));
  LUT6 #(
    .INIT(64'h444444444F44FFFF)) 
    lud_addr_pipeline_full_i_8
       (.I0(\read_data_status[0,1][Hit_Full] ),
        .I1(\lud_mem_port_one_hot_reg[1]_0 ),
        .I2(\Using_FPGA.MUXCY_I_i_3__2_n_0 ),
        .I3(lookup_offset_first_i_3_n_0),
        .I4(lud_step_offset_is_read),
        .I5(lud_reg_valid_reg),
        .O(lud_addr_pipeline_full_reg));
  LUT6 #(
    .INIT(64'hFFFFFF0100000000)) 
    lud_addr_pipeline_full_i_9
       (.I0(\Using_FPGA.MUXCY_I_i_2__6_n_0 ),
        .I1(lu_mem_protect_conflict_reg),
        .I2(lookup_access_data_late),
        .I3(lud_mem_delayed_read_data),
        .I4(lud_mem_keep_single_during_stall),
        .I5(lud_mem_speculative_valid),
        .O(A_N160_out));
  LUT5 #(
    .INIT(32'h000000EA)) 
    lud_mem_already_used_i_1
       (.I0(lud_mem_already_used),
        .I1(lud_mem_already_used_i_2_n_0),
        .I2(lud_mem_last_reg),
        .I3(Q),
        .I4(\Use_FPGA.Full_Inst ),
        .O(lud_mem_already_used_reg));
  (* SOFT_HLUTNM = "soft_lutpair23" *) 
  LUT5 #(
    .INIT(32'h00000040)) 
    lud_mem_already_used_i_2
       (.I0(lookup_offset_first_i_3_n_0),
        .I1(lud_step_offset),
        .I2(lu_check_valid_delayed_reg),
        .I3(\lu_check_info_reg[Wr] ),
        .I4(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .O(lud_mem_already_used_i_2_n_0));
  LUT6 #(
    .INIT(64'h0800080008080800)) 
    lud_mem_delayed_read_data_i_1
       (.I0(lookup_read_hit_d1_reg),
        .I1(\lu_check_locked_hit_reg[1]_0 ),
        .I2(lud_mem_already_used),
        .I3(lookup_access_data_late),
        .I4(lud_mem_last_reg),
        .I5(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .O(lud_mem_delayed_read_data0));
  LUT5 #(
    .INIT(32'hFFE400E4)) 
    lud_mem_last_i_1
       (.I0(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I1(lu_check_single_beat),
        .I2(lu_mem_single_beat_reg),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_42_n_0 ),
        .I4(lookup_next_is_last_beat_reg),
        .O(lud_mem_last_reg));
  (* SOFT_HLUTNM = "soft_lutpair30" *) 
  LUT3 #(
    .INIT(8'h1D)) 
    \lud_mem_port_one_hot[0]_i_1 
       (.I0(\lu_check_info_reg[Port_Num][0] ),
        .I1(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I2(\lu_mem_info_reg[Port_Num][0] ),
        .O(\lud_mem_port_one_hot_reg[0] ));
  LUT3 #(
    .INIT(8'hB8)) 
    \lud_mem_port_one_hot[1]_i_1 
       (.I0(\lu_mem_info_reg[Port_Num][0] ),
        .I1(\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst ),
        .I2(\lu_check_info_reg[Port_Num][0] ),
        .O(\lud_mem_port_one_hot_reg[1] ));
  LUT6 #(
    .INIT(64'h0055005500100000)) 
    lud_mem_waiting_for_pipe_i_1
       (.I0(Q),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_42_n_0 ),
        .I2(lu_mem_valid_reg),
        .I3(\Use_FPGA.Full_Inst ),
        .I4(lud_addr_piperun),
        .I5(lud_mem_waiting_for_pipe_reg_0),
        .O(lud_mem_waiting_for_pipe_reg));
  LUT5 #(
    .INIT(32'h000000AE)) 
    lud_write_hit_done_i_1
       (.I0(lud_write_hit_done_reg_0),
        .I1(lud_write_hit_done_i_2_n_0),
        .I2(wr_port_data_last_i_reg),
        .I3(Q),
        .I4(\Use_FPGA.Full_Inst ),
        .O(lud_write_hit_done_reg));
  LUT6 #(
    .INIT(64'h0000000000000040)) 
    lud_write_hit_done_i_2
       (.I0(\lu_check_info_reg[KillHit]_0 ),
        .I1(\lu_check_info_reg[Wr] ),
        .I2(lu_check_valid_delayed_reg),
        .I3(lu_check_wait_for_update),
        .I4(lookup_data_hit_stall),
        .I5(lud_addr_pipeline_full_reg_2),
        .O(lud_write_hit_done_i_2_n_0));
  (* SOFT_HLUTNM = "soft_lutpair24" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    \ri_fifo_mem_reg[15][Hit][-1111111111]_srl16_i_1 
       (.I0(lookup_read_hit_d1_reg),
        .I1(lookup_protect_conflict),
        .I2(\lu_check_locked_hit_reg[1] [0]),
        .I3(\lu_check_locked_hit_reg[1] [1]),
        .O(\lookup_read_data_new[0,0][Hit] ));
  LUT6 #(
    .INIT(64'hBAAABAAABAAAAAAA)) 
    \update_info[Evict]_i_1 
       (.I0(\lu_check_info_reg[KillHit] ),
        .I1(\lu_check_info_reg[Keep] ),
        .I2(lu_check_valid_delayed_reg),
        .I3(\lu_check_info_reg[Wr] ),
        .I4(\lu_check_tag_hit_reg[1] [1]),
        .I5(\lu_check_tag_hit_reg[1] [0]),
        .O(\update_info_reg[Evict] ));
  (* SOFT_HLUTNM = "soft_lutpair21" *) 
  LUT4 #(
    .INIT(16'hAB00)) 
    update_miss_i_1
       (.I0(\lu_check_info_reg[KillHit] ),
        .I1(\lu_check_tag_hit_reg[1] [0]),
        .I2(\lu_check_tag_hit_reg[1] [1]),
        .I3(lu_check_valid_delayed_reg),
        .O(lookup_miss));
  (* SOFT_HLUTNM = "soft_lutpair19" *) 
  LUT5 #(
    .INIT(32'h00000100)) 
    update_read_miss_i_1
       (.I0(\lu_check_info_reg[KillHit] ),
        .I1(\lu_check_tag_hit_reg[1] [1]),
        .I2(\lu_check_tag_hit_reg[1] [0]),
        .I3(lu_check_valid_delayed_reg),
        .I4(\lu_check_info_reg[Wr] ),
        .O(update_read_miss_reg));
  LUT6 #(
    .INIT(64'hFFFF00D0D0D0D0D0)) 
    \update_way[0]_i_1 
       (.I0(\lu_check_valid_bits_reg[1] [1]),
        .I1(lru_check_next_way),
        .I2(\lu_check_valid_bits_reg[1] [0]),
        .I3(\lu_check_tag_hit_reg[1] [0]),
        .I4(\lu_check_tag_hit_reg[1] [1]),
        .I5(lu_check_valid_delayed_reg),
        .O(lru_check_used_way));
  (* SOFT_HLUTNM = "soft_lutpair18" *) 
  LUT5 #(
    .INIT(32'h08080800)) 
    update_write_hit_i_1
       (.I0(lu_check_valid_delayed_reg),
        .I1(\lu_check_info_reg[Wr] ),
        .I2(\lu_check_info_reg[KillHit] ),
        .I3(\lu_check_tag_hit_reg[1] [0]),
        .I4(\lu_check_tag_hit_reg[1] [1]),
        .O(lookup_write_hit));
  (* SOFT_HLUTNM = "soft_lutpair19" *) 
  LUT5 #(
    .INIT(32'hF1000000)) 
    update_write_miss_i_1
       (.I0(\lu_check_tag_hit_reg[1] [1]),
        .I1(\lu_check_tag_hit_reg[1] [0]),
        .I2(\lu_check_info_reg[KillHit] ),
        .I3(\lu_check_info_reg[Wr] ),
        .I4(lu_check_valid_delayed_reg),
        .O(lookup_write_miss));
  LUT6 #(
    .INIT(64'h5757FFFF0357FFFF)) 
    \wm_fifo_mem_reg[15][Will_Use][-1111111111]_srl16_i_1 
       (.I0(\lu_check_info_reg[KillHit] ),
        .I1(\lu_check_tag_hit_reg[1] [0]),
        .I2(\lu_check_tag_hit_reg[1] [1]),
        .I3(\lu_check_info_reg[Wr] ),
        .I4(lu_check_valid_delayed_reg),
        .I5(\lu_check_info_reg[Keep] ),
        .O(lookup_wm_will_use));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module design_1_system_cache_0_0_reg_ce_269
   (update_need_bs,
    Q,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    ACLK);
  output update_need_bs;
  input Q;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input ACLK;

  wire ACLK;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire update_need_bs;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .Q(update_need_bs),
        .R(Q));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module design_1_system_cache_0_0_reg_ce_270
   (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    \bs_fifo_mem_reg[0][Src][1] ,
    Q,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ,
    ACLK,
    \bs_fifo_mem_reg[0][Src][1]_0 ,
    update_write_hit,
    \update_info[Keep] ,
    queue_push120_out,
    update_write_miss,
    \update_info_reg[Allocate] );
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  output \bs_fifo_mem_reg[0][Src][1] ;
  input Q;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  input ACLK;
  input [0:0]\bs_fifo_mem_reg[0][Src][1]_0 ;
  input update_write_hit;
  input \update_info[Keep] ;
  input queue_push120_out;
  input update_write_miss;
  input \update_info_reg[Allocate] ;

  wire ACLK;
  wire [1:1]\Gen_Block[0].UD/new_bs_src ;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  wire \bs_fifo_mem_reg[0][Src][1] ;
  wire [0:0]\bs_fifo_mem_reg[0][Src][1]_0 ;
  wire queue_push120_out;
  wire \update_info[Keep] ;
  wire \update_info_reg[Allocate] ;
  wire update_write_hit;
  wire update_write_miss;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .Q(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .R(Q));
  LUT5 #(
    .INIT(32'h0CCCAAAA)) 
    \bs_fifo_mem[0][Src][1]_i_1 
       (.I0(\bs_fifo_mem_reg[0][Src][1]_0 ),
        .I1(\Gen_Block[0].UD/new_bs_src ),
        .I2(update_write_hit),
        .I3(\update_info[Keep] ),
        .I4(queue_push120_out),
        .O(\bs_fifo_mem_reg[0][Src][1] ));
  LUT4 #(
    .INIT(16'hFFDF)) 
    \bs_fifo_mem[0][Src][1]_i_2 
       (.I0(update_write_miss),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .I2(\update_info_reg[Allocate] ),
        .I3(update_write_hit),
        .O(\Gen_Block[0].UD/new_bs_src ));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module design_1_system_cache_0_0_reg_ce_271
   (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    Q,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ,
    ACLK);
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input Q;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  input ACLK;

  wire ACLK;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .Q(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .R(Q));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module design_1_system_cache_0_0_reg_ce_272
   (Q,
    SR,
    CE,
    D,
    CLK);
  output Q;
  input SR;
  input [0:0]CE;
  input D;
  input CLK;

  wire [0:0]CE;
  wire CLK;
  wire D;
  wire Q;
  wire SR;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(CLK),
        .CE(CE),
        .D(D),
        .Q(Q),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module design_1_system_cache_0_0_reg_ce_273
   (Q,
    SR,
    CE,
    D,
    CLK);
  output Q;
  input SR;
  input [0:0]CE;
  input D;
  input CLK;

  wire [0:0]CE;
  wire CLK;
  wire D;
  wire Q;
  wire SR;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(CLK),
        .CE(CE),
        .D(D),
        .Q(Q),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module design_1_system_cache_0_0_reg_ce_283
   (Q,
    SR,
    CE,
    D,
    CLK);
  output Q;
  input SR;
  input [0:0]CE;
  input D;
  input CLK;

  wire [0:0]CE;
  wire CLK;
  wire D;
  wire Q;
  wire SR;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(CLK),
        .CE(CE),
        .D(D),
        .Q(Q),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module design_1_system_cache_0_0_reg_ce_284
   (Q,
    SR,
    CE,
    D,
    CLK);
  output Q;
  input SR;
  input [0:0]CE;
  input D;
  input CLK;

  wire [0:0]CE;
  wire CLK;
  wire D;
  wire Q;
  wire SR;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(CLK),
        .CE(CE),
        .D(D),
        .Q(Q),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module design_1_system_cache_0_0_reg_ce_40
   (Q,
    SR,
    CE,
    D,
    CLK);
  output Q;
  input SR;
  input [0:0]CE;
  input D;
  input CLK;

  wire [0:0]CE;
  wire CLK;
  wire D;
  wire Q;
  wire SR;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(CLK),
        .CE(CE),
        .D(D),
        .Q(Q),
        .R(SR));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module design_1_system_cache_0_0_reg_ce_43
   (in0,
    ARESET,
    ACLK);
  output in0;
  input ARESET;
  input ACLK;

  wire ACLK;
  wire ARESET;
  wire in0;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(ARESET),
        .Q(in0),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module design_1_system_cache_0_0_reg_ce__parameterized1
   (lookup_access_data_late,
    S,
    A32_out,
    \Use_FPGA.Full_Inst ,
    lu_mem_valid_reg,
    ACLK,
    lud_mem_speculative_valid,
    \lu_check_info_reg[Wr] ,
    lud_mem_last,
    lud_mem_already_used,
    lu_mem_protect_conflict_reg,
    lu_mem_protect_conflict_d1,
    \lu_check_info_delayed_reg[Wr] ,
    lu_check_valid_delayed,
    lookup_read_hit_d1,
    lookup_offset_first);
  output lookup_access_data_late;
  output S;
  output A32_out;
  input \Use_FPGA.Full_Inst ;
  input lu_mem_valid_reg;
  input ACLK;
  input lud_mem_speculative_valid;
  input \lu_check_info_reg[Wr] ;
  input lud_mem_last;
  input lud_mem_already_used;
  input lu_mem_protect_conflict_reg;
  input lu_mem_protect_conflict_d1;
  input \lu_check_info_delayed_reg[Wr] ;
  input lu_check_valid_delayed;
  input lookup_read_hit_d1;
  input lookup_offset_first;

  wire A32_out;
  wire ACLK;
  wire S;
  wire SR;
  wire \Use_FPGA.Full_Inst ;
  wire lookup_access_data_late;
  wire lookup_offset_first;
  wire lookup_read_hit_d1;
  wire \lu_check_info_delayed_reg[Wr] ;
  wire \lu_check_info_reg[Wr] ;
  wire lu_check_valid_delayed;
  wire lu_mem_protect_conflict_d1;
  wire lu_mem_protect_conflict_reg;
  wire lu_mem_valid_reg;
  wire lud_mem_already_used;
  wire lud_mem_last;
  wire lud_mem_speculative_valid;

  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst 
       (.C(ACLK),
        .CE(\Use_FPGA.Full_Inst ),
        .D(lu_mem_valid_reg),
        .Q(lookup_access_data_late),
        .S(SR));
  LUT2 #(
    .INIT(4'h2)) 
    \The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_i_1 
       (.I0(lu_mem_protect_conflict_reg),
        .I1(lu_mem_protect_conflict_d1),
        .O(SR));
  LUT5 #(
    .INIT(32'hFFFF0020)) 
    \Using_FPGA.MUXCY_I_i_1__126 
       (.I0(lookup_access_data_late),
        .I1(\lu_check_info_delayed_reg[Wr] ),
        .I2(lu_check_valid_delayed),
        .I3(lookup_read_hit_d1),
        .I4(lookup_offset_first),
        .O(A32_out));
  LUT5 #(
    .INIT(32'h0000FBFF)) 
    \Using_FPGA.MUXCY_I_i_1__93 
       (.I0(lookup_access_data_late),
        .I1(lud_mem_speculative_valid),
        .I2(\lu_check_info_reg[Wr] ),
        .I3(lud_mem_last),
        .I4(lud_mem_already_used),
        .O(S));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module design_1_system_cache_0_0_reg_ce__parameterized3
   (update_reused_tag_reg,
    \update_old_tag_reg[Addr][14] ,
    S,
    D,
    update_reused_tag_reg_0,
    update_first_write_hit_reg,
    lookup_first_write_hit,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    S_0,
    S_1,
    Q,
    \lu_check_valid_bits_reg[1] ,
    CO,
    lookup_read_miss,
    lookup_write_miss,
    \lu_check_tag_reg[1][Addr][31] ,
    \lu_check_tag_reg[0][Addr][31] ,
    \lu_check_info_reg[Addr][31] ,
    lru_check_next_way,
    \lu_check_tag_hit_reg[1] ,
    \lu_check_tag_hit_reg[1]_0 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ,
    \lu_check_info_reg[Wr] ,
    \lu_check_info_reg[KillHit]_0 ,
    DATA_OUTA,
    \lu_mem_info_reg[Force_Hit] ,
    lu_mem_protect_conflict_reg,
    \lu_check_info_reg[KillHit] ,
    \lu_check_tag_hit_copy_md_reg[1] ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ,
    E,
    ACLK);
  output update_reused_tag_reg;
  output \update_old_tag_reg[Addr][14] ;
  output [3:0]S;
  output [17:0]D;
  output [1:0]update_reused_tag_reg_0;
  output [0:0]update_first_write_hit_reg;
  output lookup_first_write_hit;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  output S_0;
  output S_1;
  input [0:0]Q;
  input [0:0]\lu_check_valid_bits_reg[1] ;
  input [0:0]CO;
  input lookup_read_miss;
  input lookup_write_miss;
  input [17:0]\lu_check_tag_reg[1][Addr][31] ;
  input [17:0]\lu_check_tag_reg[0][Addr][31] ;
  input [17:0]\lu_check_info_reg[Addr][31] ;
  input lru_check_next_way;
  input \lu_check_tag_hit_reg[1] ;
  input [0:0]\lu_check_tag_hit_reg[1]_0 ;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  input \lu_check_info_reg[Wr] ;
  input \lu_check_info_reg[KillHit]_0 ;
  input [1:0]DATA_OUTA;
  input \lu_mem_info_reg[Force_Hit] ;
  input lu_mem_protect_conflict_reg;
  input \lu_check_info_reg[KillHit] ;
  input [1:0]\lu_check_tag_hit_copy_md_reg[1] ;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ;
  input [0:0]E;
  input ACLK;

  wire ACLK;
  wire [0:0]CO;
  wire [17:0]D;
  wire [1:0]D13_out;
  wire [1:0]DATA_OUTA;
  wire [0:0]E;
  wire [0:0]Q;
  wire [3:0]S;
  wire S_0;
  wire S_1;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ;
  wire lookup_first_write_hit;
  wire lookup_read_miss;
  wire lookup_write_miss;
  wire lru_check_next_way;
  wire [1:1]lu_check_dirty_bits;
  wire [17:0]\lu_check_info_reg[Addr][31] ;
  wire \lu_check_info_reg[KillHit] ;
  wire \lu_check_info_reg[KillHit]_0 ;
  wire \lu_check_info_reg[Wr] ;
  wire [1:0]\lu_check_tag_hit_copy_md_reg[1] ;
  wire \lu_check_tag_hit_reg[1] ;
  wire [0:0]\lu_check_tag_hit_reg[1]_0 ;
  wire [17:0]\lu_check_tag_reg[0][Addr][31] ;
  wire [17:0]\lu_check_tag_reg[1][Addr][31] ;
  wire [0:0]\lu_check_valid_bits_reg[1] ;
  wire \lu_mem_info_reg[Force_Hit] ;
  wire lu_mem_protect_conflict_reg;
  wire [0:0]update_first_write_hit_reg;
  wire \update_old_tag_reg[Addr][14] ;
  wire update_reused_tag2_carry__0_i_3_n_0;
  wire update_reused_tag2_carry__0_i_4_n_0;
  wire update_reused_tag2_carry__0_i_5_n_0;
  wire update_reused_tag2_carry__0_i_6_n_0;
  wire update_reused_tag2_carry_i_10_n_0;
  wire update_reused_tag2_carry_i_11_n_0;
  wire update_reused_tag2_carry_i_12_n_0;
  wire update_reused_tag2_carry_i_5_n_0;
  wire update_reused_tag2_carry_i_6_n_0;
  wire update_reused_tag2_carry_i_7_n_0;
  wire update_reused_tag2_carry_i_8_n_0;
  wire update_reused_tag2_carry_i_9_n_0;
  wire update_reused_tag_reg;
  wire [1:0]update_reused_tag_reg_0;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(E),
        .D(D13_out[0]),
        .Q(update_first_write_hit_reg),
        .R(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ));
  (* SOFT_HLUTNM = "soft_lutpair48" *) 
  LUT4 #(
    .INIT(16'h02A2)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_1__6 
       (.I0(DATA_OUTA[0]),
        .I1(\lu_mem_info_reg[Force_Hit] ),
        .I2(lu_mem_protect_conflict_reg),
        .I3(\lu_check_info_reg[KillHit] ),
        .O(D13_out[0]));
  LUT6 #(
    .INIT(64'hFFFFFFBFBFBFFFBF)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_3__0 
       (.I0(\lu_check_info_reg[KillHit]_0 ),
        .I1(\lu_check_info_reg[Wr] ),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .I3(update_first_write_hit_reg),
        .I4(\lu_check_tag_hit_reg[1]_0 ),
        .I5(lu_check_dirty_bits),
        .O(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(E),
        .D(D13_out[1]),
        .Q(lu_check_dirty_bits),
        .R(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 ));
  (* SOFT_HLUTNM = "soft_lutpair48" *) 
  LUT4 #(
    .INIT(16'h02A2)) 
    \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_i_1 
       (.I0(DATA_OUTA[1]),
        .I1(\lu_mem_info_reg[Force_Hit] ),
        .I2(lu_mem_protect_conflict_reg),
        .I3(\lu_check_info_reg[KillHit] ),
        .O(D13_out[1]));
  LUT2 #(
    .INIT(4'h7)) 
    \Using_FPGA.MUXCY_I_i_1__96 
       (.I0(lu_check_dirty_bits),
        .I1(lru_check_next_way),
        .O(S_0));
  LUT4 #(
    .INIT(16'h0777)) 
    \Using_FPGA.MUXCY_I_i_1__97 
       (.I0(\lu_check_tag_hit_copy_md_reg[1] [0]),
        .I1(update_first_write_hit_reg),
        .I2(lu_check_dirty_bits),
        .I3(\lu_check_tag_hit_copy_md_reg[1] [1]),
        .O(S_1));
  LUT6 #(
    .INIT(64'h0000000047000000)) 
    update_first_write_hit_i_1
       (.I0(lu_check_dirty_bits),
        .I1(\lu_check_tag_hit_reg[1]_0 ),
        .I2(update_first_write_hit_reg),
        .I3(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .I4(\lu_check_info_reg[Wr] ),
        .I5(\lu_check_info_reg[KillHit]_0 ),
        .O(lookup_first_write_hit));
  (* SOFT_HLUTNM = "soft_lutpair54" *) 
  LUT3 #(
    .INIT(8'hE2)) 
    \update_old_tag[Addr][14]_i_1 
       (.I0(\lu_check_tag_reg[1][Addr][31] [0]),
        .I1(\update_old_tag_reg[Addr][14] ),
        .I2(\lu_check_tag_reg[0][Addr][31] [0]),
        .O(D[0]));
  (* SOFT_HLUTNM = "soft_lutpair55" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \update_old_tag[Addr][15]_i_1 
       (.I0(\lu_check_tag_reg[0][Addr][31] [1]),
        .I1(\update_old_tag_reg[Addr][14] ),
        .I2(\lu_check_tag_reg[1][Addr][31] [1]),
        .O(D[1]));
  (* SOFT_HLUTNM = "soft_lutpair50" *) 
  LUT3 #(
    .INIT(8'hE2)) 
    \update_old_tag[Addr][16]_i_1 
       (.I0(\lu_check_tag_reg[1][Addr][31] [2]),
        .I1(\update_old_tag_reg[Addr][14] ),
        .I2(\lu_check_tag_reg[0][Addr][31] [2]),
        .O(D[2]));
  (* SOFT_HLUTNM = "soft_lutpair55" *) 
  LUT3 #(
    .INIT(8'hE2)) 
    \update_old_tag[Addr][17]_i_1 
       (.I0(\lu_check_tag_reg[1][Addr][31] [3]),
        .I1(\update_old_tag_reg[Addr][14] ),
        .I2(\lu_check_tag_reg[0][Addr][31] [3]),
        .O(D[3]));
  (* SOFT_HLUTNM = "soft_lutpair56" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \update_old_tag[Addr][18]_i_1 
       (.I0(\lu_check_tag_reg[0][Addr][31] [4]),
        .I1(\update_old_tag_reg[Addr][14] ),
        .I2(\lu_check_tag_reg[1][Addr][31] [4]),
        .O(D[4]));
  (* SOFT_HLUTNM = "soft_lutpair56" *) 
  LUT3 #(
    .INIT(8'hE2)) 
    \update_old_tag[Addr][19]_i_1 
       (.I0(\lu_check_tag_reg[1][Addr][31] [5]),
        .I1(\update_old_tag_reg[Addr][14] ),
        .I2(\lu_check_tag_reg[0][Addr][31] [5]),
        .O(D[5]));
  (* SOFT_HLUTNM = "soft_lutpair57" *) 
  LUT3 #(
    .INIT(8'hE2)) 
    \update_old_tag[Addr][20]_i_1 
       (.I0(\lu_check_tag_reg[1][Addr][31] [6]),
        .I1(\update_old_tag_reg[Addr][14] ),
        .I2(\lu_check_tag_reg[0][Addr][31] [6]),
        .O(D[6]));
  (* SOFT_HLUTNM = "soft_lutpair57" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \update_old_tag[Addr][21]_i_1 
       (.I0(\lu_check_tag_reg[0][Addr][31] [7]),
        .I1(\update_old_tag_reg[Addr][14] ),
        .I2(\lu_check_tag_reg[1][Addr][31] [7]),
        .O(D[7]));
  (* SOFT_HLUTNM = "soft_lutpair52" *) 
  LUT3 #(
    .INIT(8'hE2)) 
    \update_old_tag[Addr][22]_i_1 
       (.I0(\lu_check_tag_reg[1][Addr][31] [8]),
        .I1(\update_old_tag_reg[Addr][14] ),
        .I2(\lu_check_tag_reg[0][Addr][31] [8]),
        .O(D[8]));
  (* SOFT_HLUTNM = "soft_lutpair58" *) 
  LUT3 #(
    .INIT(8'hE2)) 
    \update_old_tag[Addr][23]_i_1 
       (.I0(\lu_check_tag_reg[1][Addr][31] [9]),
        .I1(\update_old_tag_reg[Addr][14] ),
        .I2(\lu_check_tag_reg[0][Addr][31] [9]),
        .O(D[9]));
  (* SOFT_HLUTNM = "soft_lutpair58" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \update_old_tag[Addr][24]_i_1 
       (.I0(\lu_check_tag_reg[0][Addr][31] [10]),
        .I1(\update_old_tag_reg[Addr][14] ),
        .I2(\lu_check_tag_reg[1][Addr][31] [10]),
        .O(D[10]));
  (* SOFT_HLUTNM = "soft_lutpair49" *) 
  LUT3 #(
    .INIT(8'hE2)) 
    \update_old_tag[Addr][25]_i_1 
       (.I0(\lu_check_tag_reg[1][Addr][31] [11]),
        .I1(\update_old_tag_reg[Addr][14] ),
        .I2(\lu_check_tag_reg[0][Addr][31] [11]),
        .O(D[11]));
  (* SOFT_HLUTNM = "soft_lutpair59" *) 
  LUT3 #(
    .INIT(8'hE2)) 
    \update_old_tag[Addr][26]_i_1 
       (.I0(\lu_check_tag_reg[1][Addr][31] [12]),
        .I1(\update_old_tag_reg[Addr][14] ),
        .I2(\lu_check_tag_reg[0][Addr][31] [12]),
        .O(D[12]));
  (* SOFT_HLUTNM = "soft_lutpair59" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \update_old_tag[Addr][27]_i_1 
       (.I0(\lu_check_tag_reg[0][Addr][31] [13]),
        .I1(\update_old_tag_reg[Addr][14] ),
        .I2(\lu_check_tag_reg[1][Addr][31] [13]),
        .O(D[13]));
  (* SOFT_HLUTNM = "soft_lutpair51" *) 
  LUT3 #(
    .INIT(8'hE2)) 
    \update_old_tag[Addr][28]_i_1 
       (.I0(\lu_check_tag_reg[1][Addr][31] [14]),
        .I1(\update_old_tag_reg[Addr][14] ),
        .I2(\lu_check_tag_reg[0][Addr][31] [14]),
        .O(D[14]));
  (* SOFT_HLUTNM = "soft_lutpair60" *) 
  LUT3 #(
    .INIT(8'hE2)) 
    \update_old_tag[Addr][29]_i_1 
       (.I0(\lu_check_tag_reg[1][Addr][31] [15]),
        .I1(\update_old_tag_reg[Addr][14] ),
        .I2(\lu_check_tag_reg[0][Addr][31] [15]),
        .O(D[15]));
  (* SOFT_HLUTNM = "soft_lutpair60" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \update_old_tag[Addr][30]_i_1 
       (.I0(\lu_check_tag_reg[0][Addr][31] [16]),
        .I1(\update_old_tag_reg[Addr][14] ),
        .I2(\lu_check_tag_reg[1][Addr][31] [16]),
        .O(D[16]));
  (* SOFT_HLUTNM = "soft_lutpair53" *) 
  LUT3 #(
    .INIT(8'hE2)) 
    \update_old_tag[Addr][31]_i_1 
       (.I0(\lu_check_tag_reg[1][Addr][31] [17]),
        .I1(\update_old_tag_reg[Addr][14] ),
        .I2(\lu_check_tag_reg[0][Addr][31] [17]),
        .O(D[17]));
  LUT5 #(
    .INIT(32'h55574457)) 
    \update_old_tag[Addr][31]_i_2 
       (.I0(lru_check_next_way),
        .I1(\lu_check_tag_hit_reg[1] ),
        .I2(update_first_write_hit_reg),
        .I3(\lu_check_tag_hit_reg[1]_0 ),
        .I4(lu_check_dirty_bits),
        .O(\update_old_tag_reg[Addr][14] ));
  LUT5 #(
    .INIT(32'hA80802A2)) 
    update_reused_tag2_carry__0_i_1
       (.I0(update_reused_tag2_carry__0_i_3_n_0),
        .I1(\lu_check_tag_reg[1][Addr][31] [16]),
        .I2(\update_old_tag_reg[Addr][14] ),
        .I3(\lu_check_tag_reg[0][Addr][31] [16]),
        .I4(\lu_check_info_reg[Addr][31] [16]),
        .O(update_reused_tag_reg_0[1]));
  LUT5 #(
    .INIT(32'hA80802A2)) 
    update_reused_tag2_carry__0_i_2
       (.I0(update_reused_tag2_carry__0_i_4_n_0),
        .I1(\lu_check_tag_reg[1][Addr][31] [13]),
        .I2(\update_old_tag_reg[Addr][14] ),
        .I3(\lu_check_tag_reg[0][Addr][31] [13]),
        .I4(\lu_check_info_reg[Addr][31] [13]),
        .O(update_reused_tag_reg_0[0]));
  LUT6 #(
    .INIT(64'h0000A959A9590000)) 
    update_reused_tag2_carry__0_i_3
       (.I0(\lu_check_info_reg[Addr][31] [15]),
        .I1(\lu_check_tag_reg[1][Addr][31] [15]),
        .I2(\update_old_tag_reg[Addr][14] ),
        .I3(\lu_check_tag_reg[0][Addr][31] [15]),
        .I4(\lu_check_info_reg[Addr][31] [17]),
        .I5(update_reused_tag2_carry__0_i_5_n_0),
        .O(update_reused_tag2_carry__0_i_3_n_0));
  LUT6 #(
    .INIT(64'h0000A959A9590000)) 
    update_reused_tag2_carry__0_i_4
       (.I0(\lu_check_info_reg[Addr][31] [12]),
        .I1(\lu_check_tag_reg[1][Addr][31] [12]),
        .I2(\update_old_tag_reg[Addr][14] ),
        .I3(\lu_check_tag_reg[0][Addr][31] [12]),
        .I4(\lu_check_info_reg[Addr][31] [14]),
        .I5(update_reused_tag2_carry__0_i_6_n_0),
        .O(update_reused_tag2_carry__0_i_4_n_0));
  (* SOFT_HLUTNM = "soft_lutpair53" *) 
  LUT3 #(
    .INIT(8'h47)) 
    update_reused_tag2_carry__0_i_5
       (.I0(\lu_check_tag_reg[0][Addr][31] [17]),
        .I1(\update_old_tag_reg[Addr][14] ),
        .I2(\lu_check_tag_reg[1][Addr][31] [17]),
        .O(update_reused_tag2_carry__0_i_5_n_0));
  (* SOFT_HLUTNM = "soft_lutpair51" *) 
  LUT3 #(
    .INIT(8'h47)) 
    update_reused_tag2_carry__0_i_6
       (.I0(\lu_check_tag_reg[0][Addr][31] [14]),
        .I1(\update_old_tag_reg[Addr][14] ),
        .I2(\lu_check_tag_reg[1][Addr][31] [14]),
        .O(update_reused_tag2_carry__0_i_6_n_0));
  LUT5 #(
    .INIT(32'hA80802A2)) 
    update_reused_tag2_carry_i_1
       (.I0(update_reused_tag2_carry_i_5_n_0),
        .I1(\lu_check_tag_reg[1][Addr][31] [10]),
        .I2(\update_old_tag_reg[Addr][14] ),
        .I3(\lu_check_tag_reg[0][Addr][31] [10]),
        .I4(\lu_check_info_reg[Addr][31] [10]),
        .O(S[3]));
  (* SOFT_HLUTNM = "soft_lutpair52" *) 
  LUT3 #(
    .INIT(8'h47)) 
    update_reused_tag2_carry_i_10
       (.I0(\lu_check_tag_reg[0][Addr][31] [8]),
        .I1(\update_old_tag_reg[Addr][14] ),
        .I2(\lu_check_tag_reg[1][Addr][31] [8]),
        .O(update_reused_tag2_carry_i_10_n_0));
  (* SOFT_HLUTNM = "soft_lutpair54" *) 
  LUT3 #(
    .INIT(8'h47)) 
    update_reused_tag2_carry_i_11
       (.I0(\lu_check_tag_reg[0][Addr][31] [5]),
        .I1(\update_old_tag_reg[Addr][14] ),
        .I2(\lu_check_tag_reg[1][Addr][31] [5]),
        .O(update_reused_tag2_carry_i_11_n_0));
  (* SOFT_HLUTNM = "soft_lutpair50" *) 
  LUT3 #(
    .INIT(8'h47)) 
    update_reused_tag2_carry_i_12
       (.I0(\lu_check_tag_reg[0][Addr][31] [2]),
        .I1(\update_old_tag_reg[Addr][14] ),
        .I2(\lu_check_tag_reg[1][Addr][31] [2]),
        .O(update_reused_tag2_carry_i_12_n_0));
  LUT5 #(
    .INIT(32'hA80802A2)) 
    update_reused_tag2_carry_i_2
       (.I0(update_reused_tag2_carry_i_6_n_0),
        .I1(\lu_check_tag_reg[1][Addr][31] [7]),
        .I2(\update_old_tag_reg[Addr][14] ),
        .I3(\lu_check_tag_reg[0][Addr][31] [7]),
        .I4(\lu_check_info_reg[Addr][31] [7]),
        .O(S[2]));
  LUT5 #(
    .INIT(32'hA80802A2)) 
    update_reused_tag2_carry_i_3
       (.I0(update_reused_tag2_carry_i_7_n_0),
        .I1(\lu_check_tag_reg[1][Addr][31] [4]),
        .I2(\update_old_tag_reg[Addr][14] ),
        .I3(\lu_check_tag_reg[0][Addr][31] [4]),
        .I4(\lu_check_info_reg[Addr][31] [4]),
        .O(S[1]));
  LUT5 #(
    .INIT(32'hA80802A2)) 
    update_reused_tag2_carry_i_4
       (.I0(update_reused_tag2_carry_i_8_n_0),
        .I1(\lu_check_tag_reg[1][Addr][31] [1]),
        .I2(\update_old_tag_reg[Addr][14] ),
        .I3(\lu_check_tag_reg[0][Addr][31] [1]),
        .I4(\lu_check_info_reg[Addr][31] [1]),
        .O(S[0]));
  LUT6 #(
    .INIT(64'h0000A959A9590000)) 
    update_reused_tag2_carry_i_5
       (.I0(\lu_check_info_reg[Addr][31] [9]),
        .I1(\lu_check_tag_reg[1][Addr][31] [9]),
        .I2(\update_old_tag_reg[Addr][14] ),
        .I3(\lu_check_tag_reg[0][Addr][31] [9]),
        .I4(\lu_check_info_reg[Addr][31] [11]),
        .I5(update_reused_tag2_carry_i_9_n_0),
        .O(update_reused_tag2_carry_i_5_n_0));
  LUT6 #(
    .INIT(64'h0000A959A9590000)) 
    update_reused_tag2_carry_i_6
       (.I0(\lu_check_info_reg[Addr][31] [6]),
        .I1(\lu_check_tag_reg[1][Addr][31] [6]),
        .I2(\update_old_tag_reg[Addr][14] ),
        .I3(\lu_check_tag_reg[0][Addr][31] [6]),
        .I4(\lu_check_info_reg[Addr][31] [8]),
        .I5(update_reused_tag2_carry_i_10_n_0),
        .O(update_reused_tag2_carry_i_6_n_0));
  LUT6 #(
    .INIT(64'h0000A959A9590000)) 
    update_reused_tag2_carry_i_7
       (.I0(\lu_check_info_reg[Addr][31] [3]),
        .I1(\lu_check_tag_reg[1][Addr][31] [3]),
        .I2(\update_old_tag_reg[Addr][14] ),
        .I3(\lu_check_tag_reg[0][Addr][31] [3]),
        .I4(\lu_check_info_reg[Addr][31] [5]),
        .I5(update_reused_tag2_carry_i_11_n_0),
        .O(update_reused_tag2_carry_i_7_n_0));
  LUT6 #(
    .INIT(64'h0000A959A9590000)) 
    update_reused_tag2_carry_i_8
       (.I0(\lu_check_info_reg[Addr][31] [0]),
        .I1(\lu_check_tag_reg[1][Addr][31] [0]),
        .I2(\update_old_tag_reg[Addr][14] ),
        .I3(\lu_check_tag_reg[0][Addr][31] [0]),
        .I4(\lu_check_info_reg[Addr][31] [2]),
        .I5(update_reused_tag2_carry_i_12_n_0),
        .O(update_reused_tag2_carry_i_8_n_0));
  (* SOFT_HLUTNM = "soft_lutpair49" *) 
  LUT3 #(
    .INIT(8'h47)) 
    update_reused_tag2_carry_i_9
       (.I0(\lu_check_tag_reg[0][Addr][31] [11]),
        .I1(\update_old_tag_reg[Addr][14] ),
        .I2(\lu_check_tag_reg[1][Addr][31] [11]),
        .O(update_reused_tag2_carry_i_9_n_0));
  LUT6 #(
    .INIT(64'h15FF15FF15FFFFFF)) 
    update_reused_tag_i_3
       (.I0(\update_old_tag_reg[Addr][14] ),
        .I1(Q),
        .I2(\lu_check_valid_bits_reg[1] ),
        .I3(CO),
        .I4(lookup_read_miss),
        .I5(lookup_write_miss),
        .O(update_reused_tag_reg));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module design_1_system_cache_0_0_reg_ce__parameterized3_209
   (Q,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    E,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ,
    ACLK);
  output [1:0]Q;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input [0:0]E;
  input [1:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ;
  input ACLK;

  wire ACLK;
  wire [0:0]E;
  wire [1:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ;
  wire [1:0]Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(E),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [0]),
        .Q(Q[0]),
        .R(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(E),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [1]),
        .Q(Q[1]),
        .R(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ));
endmodule

(* ORIG_REF_NAME = "reg_ce" *) 
module design_1_system_cache_0_0_reg_ce__parameterized3_210
   (\update_info_reg[Allocate] ,
    \update_info_reg[Allocate]_0 ,
    lookup_read_miss,
    \lru_check_next_way_i_reg[0] ,
    \lu_check_info_reg[Allocate] ,
    \lu_check_locked_hit_reg[1] ,
    Q,
    E,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ,
    ACLK);
  output \update_info_reg[Allocate] ;
  output \update_info_reg[Allocate]_0 ;
  input lookup_read_miss;
  input \lru_check_next_way_i_reg[0] ;
  input \lu_check_info_reg[Allocate] ;
  input \lu_check_locked_hit_reg[1] ;
  input Q;
  input [0:0]E;
  input [1:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ;
  input ACLK;

  wire ACLK;
  wire [0:0]E;
  wire [1:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ;
  wire Q;
  wire lookup_read_miss;
  wire \lru_check_next_way_i_reg[0] ;
  wire \lu_check_info_reg[Allocate] ;
  wire \lu_check_locked_hit_reg[1] ;
  wire [1:0]lu_check_reused_bits;
  wire \update_info_reg[Allocate] ;
  wire \update_info_reg[Allocate]_0 ;

  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(E),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [0]),
        .Q(lu_check_reused_bits[0]),
        .R(Q));
  LUT6 #(
    .INIT(64'hFFFFFFFFC808FFFF)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_3 
       (.I0(lu_check_reused_bits[1]),
        .I1(lookup_read_miss),
        .I2(\lru_check_next_way_i_reg[0] ),
        .I3(lu_check_reused_bits[0]),
        .I4(\lu_check_info_reg[Allocate] ),
        .I5(\lu_check_locked_hit_reg[1] ),
        .O(\update_info_reg[Allocate]_0 ));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst 
       (.C(ACLK),
        .CE(E),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [1]),
        .Q(lu_check_reused_bits[1]),
        .R(Q));
  LUT1 #(
    .INIT(2'h1)) 
    \update_info[Allocate]_i_1 
       (.I0(\update_info_reg[Allocate]_0 ),
        .O(\update_info_reg[Allocate] ));
endmodule

(* ORIG_REF_NAME = "sc_access" *) 
module design_1_system_cache_0_0_sc_access
   (access_piperun,
    ARESET,
    ACLK,
    access_valid,
    lookup_piperun,
    lopt,
    lopt_1,
    lopt_2);
  output access_piperun;
  input ARESET;
  input ACLK;
  input access_valid;
  input lookup_piperun;
  output lopt;
  input lopt_1;
  input lopt_2;

  wire ACLK;
  wire ARESET;
  (* DIRECT_RESET *) wire ARESET_I;
  wire access_piperun;
  wire access_valid;
  wire lookup_piperun;
  wire lookup_piperun_post1;
  wire \^lopt ;
  wire \^lopt_1 ;
  wire \^lopt_2 ;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;

  assign lopt = lopt_3;
  assign lopt_4 = lopt_1;
  assign lopt_5 = lopt_2;
  design_1_system_cache_0_0_carry_and_n_41 FE_Acs_PR_And_Inst1
       (.access_piperun(access_piperun),
        .lookup_piperun_post1(lookup_piperun_post1),
        .lopt(\^lopt ),
        .lopt_1(\^lopt_1 ),
        .lopt_2(\^lopt_2 ));
  design_1_system_cache_0_0_carry_or_n_42 FE_Acs_PR_Or_Inst1
       (.access_valid(access_valid),
        .lookup_piperun(lookup_piperun),
        .lookup_piperun_post1(lookup_piperun_post1),
        .lopt(\^lopt ),
        .lopt_1(\^lopt_1 ),
        .lopt_2(\^lopt_2 ),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5));
  design_1_system_cache_0_0_bit_reg_ce__17 Reset_Inst
       (.ACLK(ACLK),
        .ARESET(ARESET),
        .in0(ARESET_I));
endmodule

(* ORIG_REF_NAME = "sc_arbiter" *) 
module design_1_system_cache_0_0_sc_arbiter
   (Q,
    rd_port_ready_cmb_0,
    rd_port_ready_cmb_1,
    \Use_FPGA.Almost_Full_Inst ,
    \Use_FPGA.Almost_Full_Inst_0 ,
    rd_port_ready,
    wr_port_ready,
    access_valid,
    \access_info[0][Wr] ,
    \access_info[0][Port_Num] ,
    \access_info[0][Kind] ,
    \arbiter_bp_push_prt[1][Valid] ,
    \arbiter_bp_push_prt[1][Early] ,
    \arbiter_bp_push_prt[1][Barrier] ,
    \arbiter_bp_push_prt[0][Valid] ,
    \arbiter_bp_push_prt[0][Early] ,
    \arbiter_bp_push_prt[0][Barrier] ,
    ctrl_ready_i_reg_0,
    \lu_mem_info_reg[Force_Hit] ,
    \access_info[0][Early] ,
    \access_info[0][Keep] ,
    queue_push9_out,
    queue_push9_out_0,
    E,
    \The_Compare[0].sel_reg_6 ,
    \lu_mem_info_reg[Addr][31] ,
    A_7,
    \The_Compare[2].sel_reg ,
    \lu_mem_info_reg[Addr_Stp][5] ,
    \lu_mem_info_reg[Size][2] ,
    lu_mem_write_alloc0,
    \lu_mem_info_reg[Allocate] ,
    S0_AXI_AWREADY,
    S1_AXI_AWREADY,
    \lu_mem_info_reg[Len][7] ,
    \lu_mem_info_reg[Addr_Use][5] ,
    ACLK,
    ARESET,
    access_piperun,
    ARESET_reg,
    A_10,
    S1_AXI_AWBAR,
    S0_AXI_AWBAR,
    \Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst ,
    \Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst_0 ,
    \ctrl_access[Internal_Cmd] ,
    queue_full,
    S0_AXI_AWVALID,
    S0_AXI_ARVALID,
    read_req_ready,
    \rd_port_access[0][Valid] ,
    queue_full_1,
    S1_AXI_AWVALID,
    S1_AXI_ARVALID,
    read_req_ready_2,
    \Use_FPGA.Full_Inst ,
    \rd_port_access[1][Valid] ,
    S1_AXI_AWCACHE,
    S0_AXI_AWCACHE,
    S1_AXI_AWLEN,
    S0_AXI_AWLEN,
    S0_AXI_ARLEN,
    S1_AXI_ARLEN,
    S1_AXI_AWADDR,
    S0_AXI_AWADDR,
    S1_AXI_ARADDR,
    S0_AXI_ARADDR,
    \ctrl_access[Addr] ,
    S1_AXI_AWSIZE,
    S0_AXI_AWSIZE,
    S1_AXI_ARSIZE,
    S0_AXI_ARSIZE,
    \ctrl_access[Size] ,
    S1_AXI_ARBURST,
    S0_AXI_ARBURST,
    S1_AXI_AWBURST,
    S0_AXI_AWBURST,
    S0_AXI_ARSNOOP,
    S1_AXI_ARSNOOP,
    ctrl_init_done_i,
    \lu_mem_info_reg[Addr][11] ,
    \lu_check_tag_addr_reg[13] ,
    S1_AXI_ARCACHE,
    S0_AXI_ARCACHE,
    \lookup_read_data_new[0,1][Valid] ,
    \lookup_read_data_new[0,0][Valid] ,
    lopt,
    lopt_1,
    lopt_2);
  output Q;
  output rd_port_ready_cmb_0;
  output rd_port_ready_cmb_1;
  output \Use_FPGA.Almost_Full_Inst ;
  output \Use_FPGA.Almost_Full_Inst_0 ;
  output rd_port_ready;
  output wr_port_ready;
  output access_valid;
  output \access_info[0][Wr] ;
  output [0:0]\access_info[0][Port_Num] ;
  output \access_info[0][Kind] ;
  output \arbiter_bp_push_prt[1][Valid] ;
  output \arbiter_bp_push_prt[1][Early] ;
  output \arbiter_bp_push_prt[1][Barrier] ;
  output \arbiter_bp_push_prt[0][Valid] ;
  output \arbiter_bp_push_prt[0][Early] ;
  output \arbiter_bp_push_prt[0][Barrier] ;
  output ctrl_ready_i_reg_0;
  output \lu_mem_info_reg[Force_Hit] ;
  output \access_info[0][Early] ;
  output \access_info[0][Keep] ;
  output queue_push9_out;
  output queue_push9_out_0;
  output [0:0]E;
  output \The_Compare[0].sel_reg_6 ;
  output [31:0]\lu_mem_info_reg[Addr][31] ;
  output A_7;
  output \The_Compare[2].sel_reg ;
  output [5:0]\lu_mem_info_reg[Addr_Stp][5] ;
  output [2:0]\lu_mem_info_reg[Size][2] ;
  output lu_mem_write_alloc0;
  output \lu_mem_info_reg[Allocate] ;
  output S0_AXI_AWREADY;
  output S1_AXI_AWREADY;
  output [7:0]\lu_mem_info_reg[Len][7] ;
  output [5:0]\lu_mem_info_reg[Addr_Use][5] ;
  input ACLK;
  input ARESET;
  input access_piperun;
  input ARESET_reg;
  input A_10;
  input [0:0]S1_AXI_AWBAR;
  input [0:0]S0_AXI_AWBAR;
  input \Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst ;
  input \Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst_0 ;
  input \ctrl_access[Internal_Cmd] ;
  input queue_full;
  input S0_AXI_AWVALID;
  input S0_AXI_ARVALID;
  input read_req_ready;
  input \rd_port_access[0][Valid] ;
  input queue_full_1;
  input S1_AXI_AWVALID;
  input S1_AXI_ARVALID;
  input read_req_ready_2;
  input \Use_FPGA.Full_Inst ;
  input \rd_port_access[1][Valid] ;
  input [2:0]S1_AXI_AWCACHE;
  input [2:0]S0_AXI_AWCACHE;
  input [7:0]S1_AXI_AWLEN;
  input [7:0]S0_AXI_AWLEN;
  input [7:0]S0_AXI_ARLEN;
  input [7:0]S1_AXI_ARLEN;
  input [31:0]S1_AXI_AWADDR;
  input [31:0]S0_AXI_AWADDR;
  input [31:0]S1_AXI_ARADDR;
  input [31:0]S0_AXI_ARADDR;
  input [8:0]\ctrl_access[Addr] ;
  input [2:0]S1_AXI_AWSIZE;
  input [2:0]S0_AXI_AWSIZE;
  input [2:0]S1_AXI_ARSIZE;
  input [2:0]S0_AXI_ARSIZE;
  input [0:0]\ctrl_access[Size] ;
  input [1:0]S1_AXI_ARBURST;
  input [1:0]S0_AXI_ARBURST;
  input [1:0]S1_AXI_AWBURST;
  input [1:0]S0_AXI_AWBURST;
  input [3:0]S0_AXI_ARSNOOP;
  input [3:0]S1_AXI_ARSNOOP;
  input ctrl_init_done_i;
  input [5:0]\lu_mem_info_reg[Addr][11] ;
  input [1:0]\lu_check_tag_addr_reg[13] ;
  input [0:0]S1_AXI_ARCACHE;
  input [0:0]S0_AXI_ARCACHE;
  input \lookup_read_data_new[0,1][Valid] ;
  input \lookup_read_data_new[0,0][Valid] ;
  input lopt;
  output lopt_1;
  output lopt_2;

  wire ACLK;
  wire ARESET;
  wire ARESET_reg;
  wire A_10;
  wire A_7;
  wire [0:0]E;
  wire \Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_1 ;
  wire \Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_4 ;
  wire \Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_5 ;
  wire \Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_6 ;
  wire \Gen_Port_Ready[0].Use_Slow_Port.Wr_Inst_n_1 ;
  wire \Gen_Port_Ready[0].Use_Slow_Port.Wr_Inst_n_4 ;
  wire \Gen_Port_Ready[0].Use_Slow_Port.Wr_Inst_n_5 ;
  wire \Gen_Port_Ready[0].Use_Slow_Port.Wr_Inst_n_6 ;
  wire \Gen_Port_Ready[0].wr_port_early_reg ;
  wire \Gen_Port_Ready[1].Init_Inst_n_10 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_11 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_12 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_13 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_14 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_15 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_16 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_17 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_18 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_19 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_2 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_20 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_21 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_22 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_23 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_24 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_25 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_26 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_27 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_28 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_29 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_30 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_31 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_32 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_33 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_34 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_35 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_36 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_37 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_38 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_39 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_4 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_40 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_41 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_42 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_43 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_44 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_45 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_46 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_47 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_48 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_49 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_5 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_50 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_6 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_7 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_8 ;
  wire \Gen_Port_Ready[1].Init_Inst_n_9 ;
  wire \Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_10 ;
  wire \Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_11 ;
  wire \Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_12 ;
  wire \Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_13 ;
  wire \Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_14 ;
  wire \Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_15 ;
  wire \Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_16 ;
  wire \Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_17 ;
  wire \Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_18 ;
  wire \Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_19 ;
  wire \Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_2 ;
  wire \Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_20 ;
  wire \Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_21 ;
  wire \Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_22 ;
  wire \Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_23 ;
  wire \Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_24 ;
  wire \Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_25 ;
  wire \Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_26 ;
  wire \Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_27 ;
  wire \Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_28 ;
  wire \Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_29 ;
  wire \Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_3 ;
  wire \Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_30 ;
  wire \Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_31 ;
  wire \Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_32 ;
  wire \Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_33 ;
  wire \Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_34 ;
  wire \Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_35 ;
  wire \Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_4 ;
  wire \Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_5 ;
  wire \Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_6 ;
  wire \Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_7 ;
  wire \Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_8 ;
  wire \Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_9 ;
  wire \Multi_Port.Gen_Token[0].First_Inst.FF_Inst_i_1_n_0 ;
  wire \Multi_Port.Gen_Token[1].Other_Inst.FF_Inst_i_1_n_0 ;
  wire [31:0]S0_AXI_ARADDR;
  wire [1:0]S0_AXI_ARBURST;
  wire [0:0]S0_AXI_ARCACHE;
  wire [7:0]S0_AXI_ARLEN;
  wire [2:0]S0_AXI_ARSIZE;
  wire [3:0]S0_AXI_ARSNOOP;
  wire S0_AXI_ARVALID;
  wire [31:0]S0_AXI_AWADDR;
  wire [0:0]S0_AXI_AWBAR;
  wire [1:0]S0_AXI_AWBURST;
  wire [2:0]S0_AXI_AWCACHE;
  wire [7:0]S0_AXI_AWLEN;
  wire S0_AXI_AWREADY;
  wire [2:0]S0_AXI_AWSIZE;
  wire S0_AXI_AWVALID;
  wire [31:0]S1_AXI_ARADDR;
  wire [1:0]S1_AXI_ARBURST;
  wire [0:0]S1_AXI_ARCACHE;
  wire [7:0]S1_AXI_ARLEN;
  wire [2:0]S1_AXI_ARSIZE;
  wire [3:0]S1_AXI_ARSNOOP;
  wire S1_AXI_ARVALID;
  wire [31:0]S1_AXI_AWADDR;
  wire [0:0]S1_AXI_AWBAR;
  wire [1:0]S1_AXI_AWBURST;
  wire [2:0]S1_AXI_AWCACHE;
  wire [7:0]S1_AXI_AWLEN;
  wire S1_AXI_AWREADY;
  wire [2:0]S1_AXI_AWSIZE;
  wire S1_AXI_AWVALID;
  wire \The_Compare[0].sel_reg_6 ;
  wire \The_Compare[2].sel_reg ;
  wire \Use_FPGA.Almost_Full_Inst ;
  wire \Use_FPGA.Almost_Full_Inst_0 ;
  wire \Use_FPGA.Full_Inst ;
  wire \Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst ;
  wire \Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst_0 ;
  wire \access_info[0][Early] ;
  wire \access_info[0][Keep] ;
  wire \access_info[0][Kind] ;
  wire [0:0]\access_info[0][Port_Num] ;
  wire \access_info[0][Wr] ;
  wire access_piperun;
  wire access_valid;
  wire any_port_forbid_0;
  wire any_port_forbid_1;
  wire \arb_access[Allocate] ;
  wire \arb_access_i[Allocate]1__0 ;
  wire \arb_prohibit_quick_reg_n_0_[0] ;
  wire [0:0]arb_prohibit_read;
  wire arb_prohibit_read1;
  wire \arb_prohibit_read_reg_n_0_[0] ;
  wire arb_token_0;
  wire arb_token_1;
  wire [1:0]arb_want_multi_part;
  wire \arbiter_bp_push_i[0][Valid] ;
  wire \arbiter_bp_push_i[1][Valid] ;
  wire \arbiter_bp_push_prt[0][Barrier] ;
  wire \arbiter_bp_push_prt[0][Early] ;
  wire \arbiter_bp_push_prt[0][Valid] ;
  wire \arbiter_bp_push_prt[1][Barrier] ;
  wire \arbiter_bp_push_prt[1][Early] ;
  wire \arbiter_bp_push_prt[1][Valid] ;
  wire arbiter_piperun_and_valid;
  wire [8:0]\ctrl_access[Addr] ;
  wire \ctrl_access[Internal_Cmd] ;
  wire [0:0]\ctrl_access[Size] ;
  wire ctrl_init_done_i;
  wire ctrl_ready_i_reg_0;
  wire dvm_2nd_part;
  wire dvm_2nd_part0;
  wire idle_carry_1;
  wire idle_carry_2;
  wire idle_carry_3;
  wire \lookup_read_data_new[0,0][Valid] ;
  wire \lookup_read_data_new[0,1][Valid] ;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_12;
  wire lopt_13;
  wire lopt_14;
  wire lopt_15;
  wire lopt_16;
  wire lopt_17;
  wire lopt_18;
  wire lopt_19;
  wire \^lopt_2 ;
  wire lopt_20;
  wire lopt_21;
  wire lopt_22;
  wire lopt_23;
  wire lopt_24;
  wire lopt_25;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire [1:0]\lu_check_tag_addr_reg[13] ;
  wire \lu_mem_info[Addr_Use][3]_i_2_n_0 ;
  wire \lu_mem_info[Addr_Use][4]_i_2_n_0 ;
  wire \lu_mem_info[Addr_Use][5]_i_2_n_0 ;
  wire [5:0]\lu_mem_info_reg[Addr][11] ;
  wire [31:0]\lu_mem_info_reg[Addr][31] ;
  wire [5:0]\lu_mem_info_reg[Addr_Stp][5] ;
  wire [5:0]\lu_mem_info_reg[Addr_Use][5] ;
  wire \lu_mem_info_reg[Allocate] ;
  wire \lu_mem_info_reg[Force_Hit] ;
  wire [7:0]\lu_mem_info_reg[Len][7] ;
  wire [2:0]\lu_mem_info_reg[Size][2] ;
  wire lu_mem_write_alloc0;
  wire p_0_in8_in;
  wire p_2_out;
  wire port_allow_ready_0;
  wire port_allow_ready_1;
  wire port_allow_ready_pre_0;
  wire port_allow_ready_pre_1;
  wire port_ready_0;
  wire port_ready_1;
  wire port_ready_no_init_0;
  wire port_ready_no_init_1;
  (* DIRECT_RESET *) wire prohibit_rst;
  wire queue_full;
  wire queue_full_1;
  wire queue_push9_out;
  wire queue_push9_out_0;
  wire \rd_port_access[0][Valid] ;
  wire \rd_port_access[1][Valid] ;
  wire rd_port_multi_part_0;
  wire rd_port_multi_part_1;
  wire rd_port_ready;
  wire rd_port_ready_block_1;
  wire rd_port_ready_cmb_0;
  wire rd_port_ready_cmb_1;
  wire read_req_ready;
  wire read_req_ready_2;
  wire reduce_or4_out;
  wire reduce_or7_out;
  wire reduce_or__0;
  wire [0:0]wr_port_keep;
  wire wr_port_ready;
  wire wr_port_ready_cmb_0;
  wire wr_port_ready_cmb_1;

  assign Q = prohibit_rst;
  assign lopt_2 = reduce_or7_out;
  design_1_system_cache_0_0_carry_and_24 FE_Arb_PR_Valid_Inst1
       (.access_piperun(access_piperun),
        .arbiter_piperun_and_valid(arbiter_piperun_and_valid),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .reduce_or7_out(reduce_or7_out));
  design_1_system_cache_0_0_carry_and_n_25 \Gen_Port_Ready[0].Detect_Idle[1].Taken_Block.TB_Inst 
       (.S1_AXI_AWVALID(S1_AXI_AWVALID),
        .any_port_forbid_1(any_port_forbid_1),
        .arb_token_1(arb_token_1),
        .idle_carry_3(idle_carry_3),
        .lopt(\^lopt_2 ),
        .lopt_1(lopt_3),
        .lopt_2(lopt_4),
        .lopt_3(lopt_5),
        .lopt_4(lopt_6),
        .lopt_5(lopt_7),
        .lopt_6(lopt_8),
        .lopt_7(lopt_9),
        .queue_full_1(queue_full_1),
        .\rd_port_access[1][Valid] (\rd_port_access[1][Valid] ),
        .rd_port_multi_part_1(rd_port_multi_part_1));
  design_1_system_cache_0_0_carry_and_26 \Gen_Port_Ready[0].Init_Inst 
       (.ARESET_reg(ARESET_reg),
        .lopt(lopt_10),
        .lopt_1(lopt_11),
        .lopt_2(lopt_12),
        .port_ready_0(port_ready_0),
        .port_ready_1(port_ready_1),
        .port_ready_no_init_0(port_ready_no_init_0),
        .reduce_or7_out(reduce_or7_out));
  design_1_system_cache_0_0_carry_or_27 \Gen_Port_Ready[0].Prio_Inst 
       (.lopt(lopt_5),
        .lopt_1(lopt_6),
        .port_allow_ready_0(port_allow_ready_0),
        .port_allow_ready_pre_0(port_allow_ready_pre_0));
  design_1_system_cache_0_0_carry_or_28 \Gen_Port_Ready[0].Token_Inst 
       (.arb_token_0(arb_token_0),
        .idle_carry_3(idle_carry_3),
        .lopt(\^lopt_2 ),
        .lopt_1(lopt_3),
        .lopt_2(lopt_4),
        .port_allow_ready_pre_0(port_allow_ready_pre_0));
  design_1_system_cache_0_0_carry_and_29 \Gen_Port_Ready[0].Use_Inst 
       (.\Gen_Port_Ready[0].Use_Slow_Port.Wr_FF_Inst (\Use_FPGA.Almost_Full_Inst_0 ),
        .S0_AXI_ARVALID(S0_AXI_ARVALID),
        .S0_AXI_AWVALID(S0_AXI_AWVALID),
        .any_port_forbid_0(any_port_forbid_0),
        .\arb_prohibit_read_reg[0] (\arb_prohibit_read_reg_n_0_[0] ),
        .lopt(lopt_7),
        .lopt_1(lopt_8),
        .lopt_2(lopt_9),
        .port_allow_ready_0(port_allow_ready_0),
        .port_ready_no_init_0(port_ready_no_init_0),
        .queue_full(queue_full),
        .\rd_port_access[0][Valid] (\rd_port_access[0][Valid] ),
        .rd_port_multi_part_0(rd_port_multi_part_0),
        .read_req_ready(read_req_ready));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Gen_Port_Ready[0].Use_Slow_Port.Rd_FF_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(arb_prohibit_read),
        .Q(\Use_FPGA.Almost_Full_Inst ),
        .R(prohibit_rst));
  design_1_system_cache_0_0_carry_latch_and_30 \Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst 
       (.ARESET_reg(\Gen_Port_Ready[1].Init_Inst_n_2 ),
        .\Multi_Port.Gen_Token[1].Forbid_FF_Inst (rd_port_ready_cmb_1),
        .Q(prohibit_rst),
        .S0_AXI_ARVALID(S0_AXI_ARVALID),
        .\access_info[0][Early] (\access_info[0][Early] ),
        .\access_info[0][Keep] (\access_info[0][Keep] ),
        .access_piperun(access_piperun),
        .any_port_forbid_0(any_port_forbid_0),
        .\arb_access_i[Allocate]1__0 (\arb_access_i[Allocate]1__0 ),
        .\arb_access_i_reg[Early] (\Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_5 ),
        .\arb_access_i_reg[Evict] (\Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_1 ),
        .\arb_access_i_reg[Evict]_0 (\lu_mem_info_reg[Force_Hit] ),
        .\arb_access_i_reg[Keep] (\Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_4 ),
        .\arb_prohibit_quick_reg[0] (\arb_prohibit_quick_reg_n_0_[0] ),
        .arb_prohibit_read(arb_prohibit_read),
        .\arb_prohibit_read_reg[0] (rd_port_ready_cmb_0),
        .\arb_prohibit_read_reg[0]_0 (\Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_6 ),
        .\arb_prohibit_read_reg[0]_1 (\arb_prohibit_read_reg_n_0_[0] ),
        .\ctrl_access[Internal_Cmd] (\ctrl_access[Internal_Cmd] ),
        .\lookup_read_data_new[0,0][Valid] (\lookup_read_data_new[0,0][Valid] ),
        .port_ready_0(port_ready_0),
        .read_req_ready(read_req_ready),
        .reduce_or4_out(reduce_or4_out),
        .reduce_or__0(reduce_or__0));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Gen_Port_Ready[0].Use_Slow_Port.Wr_FF_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\arbiter_bp_push_i[0][Valid] ),
        .Q(\Use_FPGA.Almost_Full_Inst_0 ),
        .R(prohibit_rst));
  design_1_system_cache_0_0_carry_and_31 \Gen_Port_Ready[0].Use_Slow_Port.Wr_Inst 
       (.\Gen_Port_Ready[0].Use_Slow_Port.Wr_FF_Inst (\Use_FPGA.Almost_Full_Inst_0 ),
        .\Multi_Port.Gen_Token[0].Forbid_FF_Inst (rd_port_ready_cmb_0),
        .\Multi_Port.Gen_Token[1].Forbid_FF_Inst (rd_port_ready_cmb_1),
        .Q(prohibit_rst),
        .S0_AXI_AWVALID(S0_AXI_AWVALID),
        .access_piperun(access_piperun),
        .any_port_forbid_0(any_port_forbid_0),
        .\arb_access_i_reg[Port_Num][0] (\Gen_Port_Ready[0].Use_Slow_Port.Wr_Inst_n_4 ),
        .\arb_access_i_reg[Valid] (\Gen_Port_Ready[0].Use_Slow_Port.Wr_Inst_n_5 ),
        .\arb_access_i_reg[Wr] (\Gen_Port_Ready[0].Use_Slow_Port.Wr_Inst_n_6 ),
        .\arbiter_bp_push_i[0][Valid] (\arbiter_bp_push_i[0][Valid] ),
        .\ctrl_access[Internal_Cmd] (\ctrl_access[Internal_Cmd] ),
        .ctrl_ready_i_reg(\Gen_Port_Ready[0].Use_Slow_Port.Wr_Inst_n_1 ),
        .ctrl_ready_i_reg_0(ctrl_ready_i_reg_0),
        .lopt(lopt_10),
        .lopt_1(lopt_11),
        .lopt_2(lopt_12),
        .port_ready_0(port_ready_0),
        .port_ready_1(port_ready_1),
        .queue_full(queue_full),
        .\rd_port_access[0][Valid] (\rd_port_access[0][Valid] ),
        .rd_port_multi_part_0(rd_port_multi_part_0),
        .reduce_or4_out(reduce_or4_out),
        .reduce_or__0(reduce_or__0),
        .wr_port_ready_cmb_0(wr_port_ready_cmb_0),
        .wr_port_ready_cmb_1(wr_port_ready_cmb_1));
  design_1_system_cache_0_0_carry_and_n_32 \Gen_Port_Ready[1].Detect_Idle[0].Lower_Prio.LP_Rd_Inst 
       (.S0_AXI_ARVALID(S0_AXI_ARVALID),
        .any_port_forbid_0(any_port_forbid_0),
        .\arb_prohibit_read_reg[0] (\arb_prohibit_read_reg_n_0_[0] ),
        .idle_carry_1(idle_carry_1),
        .lopt(lopt_13),
        .lopt_1(lopt_14),
        .lopt_2(lopt_15),
        .lopt_3(lopt_16),
        .lopt_4(lopt_17),
        .lopt_5(lopt_18),
        .lopt_6(lopt_19),
        .lopt_7(lopt_20),
        .read_req_ready(read_req_ready));
  design_1_system_cache_0_0_carry_and_n_33 \Gen_Port_Ready[1].Detect_Idle[0].Lower_Prio.LP_Wr_Inst 
       (.\Gen_Port_Ready[0].Use_Slow_Port.Wr_FF_Inst (\Use_FPGA.Almost_Full_Inst_0 ),
        .S0_AXI_AWVALID(S0_AXI_AWVALID),
        .any_port_forbid_0(any_port_forbid_0),
        .idle_carry_1(idle_carry_1),
        .idle_carry_2(idle_carry_2),
        .lopt(lopt_13),
        .lopt_1(lopt_14),
        .lopt_2(lopt_15),
        .queue_full(queue_full),
        .\rd_port_access[0][Valid] (\rd_port_access[0][Valid] ),
        .rd_port_multi_part_0(rd_port_multi_part_0));
  design_1_system_cache_0_0_carry_and_34 \Gen_Port_Ready[1].Init_Inst 
       (.A_10(A_10),
        .D({\Gen_Port_Ready[1].Init_Inst_n_4 ,\Gen_Port_Ready[1].Init_Inst_n_5 ,\Gen_Port_Ready[1].Init_Inst_n_6 ,\Gen_Port_Ready[1].Init_Inst_n_7 ,\Gen_Port_Ready[1].Init_Inst_n_8 ,\Gen_Port_Ready[1].Init_Inst_n_9 ,\Gen_Port_Ready[1].Init_Inst_n_10 ,\Gen_Port_Ready[1].Init_Inst_n_11 }),
        .\Gen_Port_Ready[0].wr_port_early_reg (\Gen_Port_Ready[0].wr_port_early_reg ),
        .\Multi_Port.Gen_Token[0].Forbid_FF_Inst (rd_port_ready_cmb_0),
        .\Multi_Port.Gen_Token[1].Forbid_FF_Inst (\Gen_Port_Ready[1].Init_Inst_n_50 ),
        .\Multi_Port.Gen_Token[1].Forbid_FF_Inst_0 (rd_port_ready_cmb_1),
        .\Multi_Port.Gen_Token[1].Forbid_FF_Inst_1 (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_2 ),
        .\Multi_Port.Gen_Token[1].Forbid_FF_Inst_10 (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_11 ),
        .\Multi_Port.Gen_Token[1].Forbid_FF_Inst_11 (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_12 ),
        .\Multi_Port.Gen_Token[1].Forbid_FF_Inst_12 (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_13 ),
        .\Multi_Port.Gen_Token[1].Forbid_FF_Inst_13 (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_14 ),
        .\Multi_Port.Gen_Token[1].Forbid_FF_Inst_14 (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_15 ),
        .\Multi_Port.Gen_Token[1].Forbid_FF_Inst_15 (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_16 ),
        .\Multi_Port.Gen_Token[1].Forbid_FF_Inst_16 (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_17 ),
        .\Multi_Port.Gen_Token[1].Forbid_FF_Inst_17 (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_18 ),
        .\Multi_Port.Gen_Token[1].Forbid_FF_Inst_18 (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_19 ),
        .\Multi_Port.Gen_Token[1].Forbid_FF_Inst_19 (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_20 ),
        .\Multi_Port.Gen_Token[1].Forbid_FF_Inst_2 (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_3 ),
        .\Multi_Port.Gen_Token[1].Forbid_FF_Inst_20 (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_21 ),
        .\Multi_Port.Gen_Token[1].Forbid_FF_Inst_21 (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_22 ),
        .\Multi_Port.Gen_Token[1].Forbid_FF_Inst_22 (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_23 ),
        .\Multi_Port.Gen_Token[1].Forbid_FF_Inst_23 (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_24 ),
        .\Multi_Port.Gen_Token[1].Forbid_FF_Inst_24 (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_25 ),
        .\Multi_Port.Gen_Token[1].Forbid_FF_Inst_25 (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_26 ),
        .\Multi_Port.Gen_Token[1].Forbid_FF_Inst_26 (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_27 ),
        .\Multi_Port.Gen_Token[1].Forbid_FF_Inst_27 (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_28 ),
        .\Multi_Port.Gen_Token[1].Forbid_FF_Inst_28 (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_29 ),
        .\Multi_Port.Gen_Token[1].Forbid_FF_Inst_29 (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_30 ),
        .\Multi_Port.Gen_Token[1].Forbid_FF_Inst_3 (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_4 ),
        .\Multi_Port.Gen_Token[1].Forbid_FF_Inst_30 (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_31 ),
        .\Multi_Port.Gen_Token[1].Forbid_FF_Inst_31 (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_32 ),
        .\Multi_Port.Gen_Token[1].Forbid_FF_Inst_32 (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_33 ),
        .\Multi_Port.Gen_Token[1].Forbid_FF_Inst_33 (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_34 ),
        .\Multi_Port.Gen_Token[1].Forbid_FF_Inst_4 (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_5 ),
        .\Multi_Port.Gen_Token[1].Forbid_FF_Inst_5 (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_6 ),
        .\Multi_Port.Gen_Token[1].Forbid_FF_Inst_6 (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_7 ),
        .\Multi_Port.Gen_Token[1].Forbid_FF_Inst_7 (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_8 ),
        .\Multi_Port.Gen_Token[1].Forbid_FF_Inst_8 (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_9 ),
        .\Multi_Port.Gen_Token[1].Forbid_FF_Inst_9 (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_10 ),
        .\Multi_Port.Gen_Token[1].Multi_FF_Inst (\Gen_Port_Ready[1].Init_Inst_n_49 ),
        .S0_AXI_ARADDR(S0_AXI_ARADDR[14:6]),
        .S0_AXI_ARBURST(S0_AXI_ARBURST),
        .S0_AXI_ARCACHE(S0_AXI_ARCACHE),
        .S0_AXI_ARSIZE(S0_AXI_ARSIZE[1]),
        .S0_AXI_AWADDR(S0_AXI_AWADDR),
        .S0_AXI_AWBURST(S0_AXI_AWBURST),
        .S0_AXI_AWLEN(S0_AXI_AWLEN),
        .S0_AXI_AWSIZE(S0_AXI_AWSIZE),
        .S1_AXI_ARADDR(S1_AXI_ARADDR[14:6]),
        .S1_AXI_ARBURST(S1_AXI_ARBURST),
        .S1_AXI_ARCACHE(S1_AXI_ARCACHE),
        .S1_AXI_ARSIZE(S1_AXI_ARSIZE[1]),
        .S1_AXI_AWADDR(S1_AXI_AWADDR),
        .S1_AXI_AWBAR(S1_AXI_AWBAR),
        .S1_AXI_AWBURST(S1_AXI_AWBURST),
        .S1_AXI_AWCACHE(S1_AXI_AWCACHE),
        .S1_AXI_AWLEN(S1_AXI_AWLEN),
        .S1_AXI_AWSIZE(S1_AXI_AWSIZE),
        .\arb_access_i[Allocate]1__0 (\arb_access_i[Allocate]1__0 ),
        .\arb_access_i_reg[Addr][31] ({\Gen_Port_Ready[1].Init_Inst_n_12 ,\Gen_Port_Ready[1].Init_Inst_n_13 ,\Gen_Port_Ready[1].Init_Inst_n_14 ,\Gen_Port_Ready[1].Init_Inst_n_15 ,\Gen_Port_Ready[1].Init_Inst_n_16 ,\Gen_Port_Ready[1].Init_Inst_n_17 ,\Gen_Port_Ready[1].Init_Inst_n_18 ,\Gen_Port_Ready[1].Init_Inst_n_19 ,\Gen_Port_Ready[1].Init_Inst_n_20 ,\Gen_Port_Ready[1].Init_Inst_n_21 ,\Gen_Port_Ready[1].Init_Inst_n_22 ,\Gen_Port_Ready[1].Init_Inst_n_23 ,\Gen_Port_Ready[1].Init_Inst_n_24 ,\Gen_Port_Ready[1].Init_Inst_n_25 ,\Gen_Port_Ready[1].Init_Inst_n_26 ,\Gen_Port_Ready[1].Init_Inst_n_27 ,\Gen_Port_Ready[1].Init_Inst_n_28 ,\Gen_Port_Ready[1].Init_Inst_n_29 ,\Gen_Port_Ready[1].Init_Inst_n_30 ,\Gen_Port_Ready[1].Init_Inst_n_31 ,\Gen_Port_Ready[1].Init_Inst_n_32 ,\Gen_Port_Ready[1].Init_Inst_n_33 ,\Gen_Port_Ready[1].Init_Inst_n_34 ,\Gen_Port_Ready[1].Init_Inst_n_35 ,\Gen_Port_Ready[1].Init_Inst_n_36 ,\Gen_Port_Ready[1].Init_Inst_n_37 ,\Gen_Port_Ready[1].Init_Inst_n_38 ,\Gen_Port_Ready[1].Init_Inst_n_39 ,\Gen_Port_Ready[1].Init_Inst_n_40 ,\Gen_Port_Ready[1].Init_Inst_n_41 ,\Gen_Port_Ready[1].Init_Inst_n_42 ,\Gen_Port_Ready[1].Init_Inst_n_43 }),
        .\arb_access_i_reg[Allocate] (\Gen_Port_Ready[1].Init_Inst_n_48 ),
        .\arb_access_i_reg[Early] (\Gen_Port_Ready[1].Init_Inst_n_2 ),
        .\arb_access_i_reg[Kind] (\Gen_Port_Ready[1].Init_Inst_n_47 ),
        .\arb_access_i_reg[Size][2] ({\Gen_Port_Ready[1].Init_Inst_n_44 ,\Gen_Port_Ready[1].Init_Inst_n_45 ,\Gen_Port_Ready[1].Init_Inst_n_46 }),
        .arb_want_multi_part(arb_want_multi_part),
        .\ctrl_access[Addr] (\ctrl_access[Addr] ),
        .\ctrl_access[Internal_Cmd] (\ctrl_access[Internal_Cmd] ),
        .\ctrl_access[Size] (\ctrl_access[Size] ),
        .dvm_2nd_part0(dvm_2nd_part0),
        .lopt(lopt_21),
        .lopt_1(lopt_22),
        .port_ready_1(port_ready_1),
        .port_ready_no_init_1(port_ready_no_init_1),
        .reduce_or4_out(reduce_or4_out),
        .wr_port_keep(wr_port_keep),
        .wr_port_ready_cmb_0(wr_port_ready_cmb_0),
        .wr_port_ready_cmb_1(wr_port_ready_cmb_1));
  design_1_system_cache_0_0_carry_or_35 \Gen_Port_Ready[1].Prio_Inst 
       (.lopt(lopt_19),
        .lopt_1(lopt_20),
        .port_allow_ready_1(port_allow_ready_1),
        .port_allow_ready_pre_1(port_allow_ready_pre_1));
  design_1_system_cache_0_0_carry_or_36 \Gen_Port_Ready[1].Token_Inst 
       (.arb_token_1(arb_token_1),
        .idle_carry_2(idle_carry_2),
        .lopt(lopt_16),
        .lopt_1(lopt_17),
        .lopt_2(lopt_18),
        .port_allow_ready_pre_1(port_allow_ready_pre_1));
  design_1_system_cache_0_0_carry_and_37 \Gen_Port_Ready[1].Use_Inst 
       (.\Gen_Port_Ready[1].Use_Slow_Port.Wr_FF_Inst (wr_port_ready),
        .\Use_FPGA.Full_Inst (\Use_FPGA.Full_Inst ),
        .any_port_forbid_1(any_port_forbid_1),
        .lopt(lopt_21),
        .lopt_1(lopt_22),
        .lopt_2(A_10),
        .lopt_3(lopt_23),
        .lopt_4(lopt_24),
        .lopt_5(lopt_25),
        .port_allow_ready_1(port_allow_ready_1),
        .port_ready_no_init_1(port_ready_no_init_1),
        .\rd_port_access[1][Valid] (\rd_port_access[1][Valid] ),
        .rd_port_multi_part_1(rd_port_multi_part_1),
        .rd_port_ready_block_1(rd_port_ready_block_1));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Gen_Port_Ready[1].Use_Slow_Port.Rd_FF_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(arb_prohibit_read1),
        .Q(rd_port_ready),
        .R(prohibit_rst));
  design_1_system_cache_0_0_carry_latch_and_38 \Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst 
       (.\Multi_Port.Gen_Token[0].Forbid_FF_Inst (rd_port_ready_cmb_0),
        .S0_AXI_ARADDR({S0_AXI_ARADDR[31:15],S0_AXI_ARADDR[5:0]}),
        .S0_AXI_ARLEN(S0_AXI_ARLEN),
        .S0_AXI_ARSIZE({S0_AXI_ARSIZE[2],S0_AXI_ARSIZE[0]}),
        .S1_AXI_ARADDR({S1_AXI_ARADDR[31:15],S1_AXI_ARADDR[5:0]}),
        .S1_AXI_ARLEN(S1_AXI_ARLEN),
        .S1_AXI_ARSIZE({S1_AXI_ARSIZE[2],S1_AXI_ARSIZE[0]}),
        .S1_AXI_ARVALID(S1_AXI_ARVALID),
        .access_piperun(access_piperun),
        .any_port_forbid_1(any_port_forbid_1),
        .\arb_access_i_reg[Addr][0] (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_32 ),
        .\arb_access_i_reg[Addr][15] (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_25 ),
        .\arb_access_i_reg[Addr][16] (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_26 ),
        .\arb_access_i_reg[Addr][17] (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_22 ),
        .\arb_access_i_reg[Addr][18] (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_23 ),
        .\arb_access_i_reg[Addr][19] (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_24 ),
        .\arb_access_i_reg[Addr][1] (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_31 ),
        .\arb_access_i_reg[Addr][20] (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_19 ),
        .\arb_access_i_reg[Addr][21] (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_20 ),
        .\arb_access_i_reg[Addr][22] (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_21 ),
        .\arb_access_i_reg[Addr][23] (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_16 ),
        .\arb_access_i_reg[Addr][24] (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_17 ),
        .\arb_access_i_reg[Addr][25] (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_18 ),
        .\arb_access_i_reg[Addr][26] (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_13 ),
        .\arb_access_i_reg[Addr][27] (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_14 ),
        .\arb_access_i_reg[Addr][28] (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_15 ),
        .\arb_access_i_reg[Addr][29] (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_10 ),
        .\arb_access_i_reg[Addr][2] (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_30 ),
        .\arb_access_i_reg[Addr][30] (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_11 ),
        .\arb_access_i_reg[Addr][31] (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_12 ),
        .\arb_access_i_reg[Addr][3] (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_29 ),
        .\arb_access_i_reg[Addr][4] (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_28 ),
        .\arb_access_i_reg[Addr][5] (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_27 ),
        .\arb_access_i_reg[Len][0] (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_2 ),
        .\arb_access_i_reg[Len][1] (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_3 ),
        .\arb_access_i_reg[Len][2] (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_4 ),
        .\arb_access_i_reg[Len][3] (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_5 ),
        .\arb_access_i_reg[Len][4] (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_6 ),
        .\arb_access_i_reg[Len][5] (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_7 ),
        .\arb_access_i_reg[Len][6] (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_9 ),
        .\arb_access_i_reg[Len][7] (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_8 ),
        .\arb_access_i_reg[Size][0] (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_34 ),
        .\arb_access_i_reg[Size][2] (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_33 ),
        .arb_prohibit_read1(arb_prohibit_read1),
        .\arb_prohibit_read_reg[1] (rd_port_ready_cmb_1),
        .\arb_prohibit_read_reg[1]_0 (\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_35 ),
        .\lookup_read_data_new[0,1][Valid] (\lookup_read_data_new[0,1][Valid] ),
        .p_0_in8_in(p_0_in8_in),
        .port_ready_1(port_ready_1),
        .rd_port_ready_block_1(rd_port_ready_block_1),
        .read_req_ready_2(read_req_ready_2));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Gen_Port_Ready[1].Use_Slow_Port.Wr_FF_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\arbiter_bp_push_i[1][Valid] ),
        .Q(wr_port_ready),
        .R(prohibit_rst));
  design_1_system_cache_0_0_carry_and_39 \Gen_Port_Ready[1].Use_Slow_Port.Wr_Inst 
       (.\Gen_Port_Ready[1].Use_Slow_Port.Wr_FF_Inst (wr_port_ready),
        .S1_AXI_AWVALID(S1_AXI_AWVALID),
        .access_piperun(access_piperun),
        .any_port_forbid_1(any_port_forbid_1),
        .\arbiter_bp_push_i[1][Valid] (\arbiter_bp_push_i[1][Valid] ),
        .lopt(lopt_23),
        .lopt_1(lopt_24),
        .lopt_2(lopt_25),
        .port_ready_1(port_ready_1),
        .queue_full_1(queue_full_1),
        .\rd_port_access[1][Valid] (\rd_port_access[1][Valid] ),
        .rd_port_multi_part_1(rd_port_multi_part_1),
        .wr_port_ready_cmb_1(wr_port_ready_cmb_1));
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_S_INVERTED(1'b0)) 
    \Multi_Port.Gen_Token[0].First_Inst.FF_Inst 
       (.C(ACLK),
        .CE(arbiter_piperun_and_valid),
        .D(\Multi_Port.Gen_Token[0].First_Inst.FF_Inst_i_1_n_0 ),
        .Q(arb_token_0),
        .S(prohibit_rst));
  LUT3 #(
    .INIT(8'hB8)) 
    \Multi_Port.Gen_Token[0].First_Inst.FF_Inst_i_1 
       (.I0(arb_token_0),
        .I1(dvm_2nd_part),
        .I2(arb_token_1),
        .O(\Multi_Port.Gen_Token[0].First_Inst.FF_Inst_i_1_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Multi_Port.Gen_Token[0].Forbid_FF_Inst 
       (.C(ACLK),
        .CE(arbiter_piperun_and_valid),
        .D(\Gen_Port_Ready[1].Init_Inst_n_49 ),
        .Q(any_port_forbid_0),
        .R(prohibit_rst));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Multi_Port.Gen_Token[0].Multi_FF_Inst 
       (.C(ACLK),
        .CE(arbiter_piperun_and_valid),
        .D(\Gen_Port_Ready[1].Init_Inst_n_50 ),
        .Q(rd_port_multi_part_0),
        .R(prohibit_rst));
  LUT6 #(
    .INIT(64'h0080000000000000)) 
    \Multi_Port.Gen_Token[0].Multi_FF_Inst_i_3 
       (.I0(S0_AXI_ARSNOOP[3]),
        .I1(S0_AXI_ARSNOOP[1]),
        .I2(S0_AXI_ARSNOOP[0]),
        .I3(dvm_2nd_part),
        .I4(S0_AXI_ARADDR[0]),
        .I5(S0_AXI_ARSNOOP[2]),
        .O(arb_want_multi_part[0]));
  LUT6 #(
    .INIT(64'h4000000000000000)) 
    \Multi_Port.Gen_Token[0].Multi_FF_Inst_i_4 
       (.I0(dvm_2nd_part),
        .I1(S1_AXI_ARADDR[0]),
        .I2(S1_AXI_ARSNOOP[2]),
        .I3(S1_AXI_ARSNOOP[3]),
        .I4(S1_AXI_ARSNOOP[0]),
        .I5(S1_AXI_ARSNOOP[1]),
        .O(arb_want_multi_part[1]));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Multi_Port.Gen_Token[1].Forbid_FF_Inst 
       (.C(ACLK),
        .CE(arbiter_piperun_and_valid),
        .D(\Gen_Port_Ready[1].Init_Inst_n_50 ),
        .Q(any_port_forbid_1),
        .R(prohibit_rst));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Multi_Port.Gen_Token[1].Multi_FF_Inst 
       (.C(ACLK),
        .CE(arbiter_piperun_and_valid),
        .D(\Gen_Port_Ready[1].Init_Inst_n_49 ),
        .Q(rd_port_multi_part_1),
        .R(prohibit_rst));
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0),
    .IS_C_INVERTED(1'b0),
    .IS_D_INVERTED(1'b0),
    .IS_R_INVERTED(1'b0)) 
    \Multi_Port.Gen_Token[1].Other_Inst.FF_Inst 
       (.C(ACLK),
        .CE(arbiter_piperun_and_valid),
        .D(\Multi_Port.Gen_Token[1].Other_Inst.FF_Inst_i_1_n_0 ),
        .Q(arb_token_1),
        .R(prohibit_rst));
  LUT3 #(
    .INIT(8'hB8)) 
    \Multi_Port.Gen_Token[1].Other_Inst.FF_Inst_i_1 
       (.I0(arb_token_1),
        .I1(dvm_2nd_part),
        .I2(arb_token_0),
        .O(\Multi_Port.Gen_Token[1].Other_Inst.FF_Inst_i_1_n_0 ));
  (* C_CE_LOW = "1'b0" *) 
  (* C_IS_SET = "1'b0" *) 
  (* C_NUM_CE = "1" *) 
  (* C_TARGET = "3" *) 
  (* DONT_TOUCH *) 
  design_1_system_cache_0_0_bit_reg_ce__12 Reset_Inst
       (.CE(1'b1),
        .CLK(ACLK),
        .D(ARESET),
        .Q(prohibit_rst),
        .SR(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair118" *) 
  LUT2 #(
    .INIT(4'h2)) 
    S0_AXI_AWREADY_INST_0
       (.I0(\Use_FPGA.Almost_Full_Inst_0 ),
        .I1(queue_full),
        .O(S0_AXI_AWREADY));
  (* SOFT_HLUTNM = "soft_lutpair113" *) 
  LUT2 #(
    .INIT(4'h2)) 
    S1_AXI_AWREADY_INST_0
       (.I0(wr_port_ready),
        .I1(queue_full_1),
        .O(S1_AXI_AWREADY));
  (* SOFT_HLUTNM = "soft_lutpair118" *) 
  LUT3 #(
    .INIT(8'h20)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst_i_1 
       (.I0(\Use_FPGA.Almost_Full_Inst_0 ),
        .I1(queue_full),
        .I2(S0_AXI_AWVALID),
        .O(queue_push9_out));
  (* SOFT_HLUTNM = "soft_lutpair113" *) 
  LUT3 #(
    .INIT(8'h20)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst_i_1__1 
       (.I0(wr_port_ready),
        .I1(queue_full_1),
        .I2(S1_AXI_AWVALID),
        .O(queue_push9_out_0));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.MUXCY_I_i_1__106 
       (.I0(\lu_mem_info_reg[Addr][31] [7]),
        .I1(\lu_mem_info_reg[Addr][11] [1]),
        .I2(\lu_mem_info_reg[Addr][31] [8]),
        .I3(\lu_mem_info_reg[Addr][11] [2]),
        .I4(\lu_mem_info_reg[Addr][31] [6]),
        .I5(\lu_mem_info_reg[Addr][11] [0]),
        .O(\The_Compare[0].sel_reg_6 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.MUXCY_I_i_1__107 
       (.I0(\lu_mem_info_reg[Addr][31] [10]),
        .I1(\lu_mem_info_reg[Addr][11] [4]),
        .I2(\lu_mem_info_reg[Addr][31] [11]),
        .I3(\lu_mem_info_reg[Addr][11] [5]),
        .I4(\lu_mem_info_reg[Addr][31] [9]),
        .I5(\lu_mem_info_reg[Addr][11] [3]),
        .O(A_7));
  LUT4 #(
    .INIT(16'h9009)) 
    \Using_FPGA.MUXCY_I_i_1__111 
       (.I0(\lu_mem_info_reg[Addr][31] [13]),
        .I1(\lu_check_tag_addr_reg[13] [1]),
        .I2(\lu_mem_info_reg[Addr][31] [12]),
        .I3(\lu_check_tag_addr_reg[13] [0]),
        .O(\The_Compare[2].sel_reg ));
  (* SOFT_HLUTNM = "soft_lutpair115" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \arb_access_i[Keep]_i_3 
       (.I0(S0_AXI_AWCACHE[1]),
        .I1(S0_AXI_AWCACHE[2]),
        .I2(S0_AXI_AWCACHE[0]),
        .O(wr_port_keep));
  FDRE \arb_access_i_reg[Addr][0] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_43 ),
        .Q(\lu_mem_info_reg[Addr][31] [0]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Addr][10] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_33 ),
        .Q(\lu_mem_info_reg[Addr][31] [10]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Addr][11] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_32 ),
        .Q(\lu_mem_info_reg[Addr][31] [11]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Addr][12] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_31 ),
        .Q(\lu_mem_info_reg[Addr][31] [12]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Addr][13] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_30 ),
        .Q(\lu_mem_info_reg[Addr][31] [13]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Addr][14] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_29 ),
        .Q(\lu_mem_info_reg[Addr][31] [14]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Addr][15] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_28 ),
        .Q(\lu_mem_info_reg[Addr][31] [15]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Addr][16] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_27 ),
        .Q(\lu_mem_info_reg[Addr][31] [16]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Addr][17] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_26 ),
        .Q(\lu_mem_info_reg[Addr][31] [17]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Addr][18] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_25 ),
        .Q(\lu_mem_info_reg[Addr][31] [18]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Addr][19] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_24 ),
        .Q(\lu_mem_info_reg[Addr][31] [19]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Addr][1] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_42 ),
        .Q(\lu_mem_info_reg[Addr][31] [1]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Addr][20] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_23 ),
        .Q(\lu_mem_info_reg[Addr][31] [20]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Addr][21] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_22 ),
        .Q(\lu_mem_info_reg[Addr][31] [21]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Addr][22] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_21 ),
        .Q(\lu_mem_info_reg[Addr][31] [22]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Addr][23] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_20 ),
        .Q(\lu_mem_info_reg[Addr][31] [23]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Addr][24] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_19 ),
        .Q(\lu_mem_info_reg[Addr][31] [24]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Addr][25] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_18 ),
        .Q(\lu_mem_info_reg[Addr][31] [25]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Addr][26] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_17 ),
        .Q(\lu_mem_info_reg[Addr][31] [26]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Addr][27] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_16 ),
        .Q(\lu_mem_info_reg[Addr][31] [27]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Addr][28] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_15 ),
        .Q(\lu_mem_info_reg[Addr][31] [28]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Addr][29] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_14 ),
        .Q(\lu_mem_info_reg[Addr][31] [29]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Addr][2] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_41 ),
        .Q(\lu_mem_info_reg[Addr][31] [2]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Addr][30] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_13 ),
        .Q(\lu_mem_info_reg[Addr][31] [30]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Addr][31] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_12 ),
        .Q(\lu_mem_info_reg[Addr][31] [31]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Addr][3] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_40 ),
        .Q(\lu_mem_info_reg[Addr][31] [3]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Addr][4] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_39 ),
        .Q(\lu_mem_info_reg[Addr][31] [4]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Addr][5] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_38 ),
        .Q(\lu_mem_info_reg[Addr][31] [5]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Addr][6] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_37 ),
        .Q(\lu_mem_info_reg[Addr][31] [6]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Addr][7] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_36 ),
        .Q(\lu_mem_info_reg[Addr][31] [7]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Addr][8] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_35 ),
        .Q(\lu_mem_info_reg[Addr][31] [8]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Addr][9] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_34 ),
        .Q(\lu_mem_info_reg[Addr][31] [9]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Allocate] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_48 ),
        .Q(\arb_access[Allocate] ),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Early] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_5 ),
        .Q(\access_info[0][Early] ),
        .R(1'b0));
  FDRE \arb_access_i_reg[Evict] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_1 ),
        .Q(\lu_mem_info_reg[Force_Hit] ),
        .R(1'b0));
  FDRE \arb_access_i_reg[Keep] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_4 ),
        .Q(\access_info[0][Keep] ),
        .R(1'b0));
  FDRE \arb_access_i_reg[Kind] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_47 ),
        .Q(\access_info[0][Kind] ),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Len][0] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_11 ),
        .Q(\lu_mem_info_reg[Len][7] [0]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Len][1] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_10 ),
        .Q(\lu_mem_info_reg[Len][7] [1]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Len][2] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_9 ),
        .Q(\lu_mem_info_reg[Len][7] [2]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Len][3] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_8 ),
        .Q(\lu_mem_info_reg[Len][7] [3]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Len][4] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_7 ),
        .Q(\lu_mem_info_reg[Len][7] [4]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Len][5] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_6 ),
        .Q(\lu_mem_info_reg[Len][7] [5]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Len][6] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_5 ),
        .Q(\lu_mem_info_reg[Len][7] [6]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Len][7] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_4 ),
        .Q(\lu_mem_info_reg[Len][7] [7]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Port_Num][0] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[0].Use_Slow_Port.Wr_Inst_n_4 ),
        .Q(\access_info[0][Port_Num] ),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Size][0] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_46 ),
        .Q(\lu_mem_info_reg[Size][2] [0]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Size][1] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_45 ),
        .Q(\lu_mem_info_reg[Size][2] [1]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Size][2] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[1].Init_Inst_n_44 ),
        .Q(\lu_mem_info_reg[Size][2] [2]),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Valid] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[0].Use_Slow_Port.Wr_Inst_n_5 ),
        .Q(access_valid),
        .R(prohibit_rst));
  FDRE \arb_access_i_reg[Wr] 
       (.C(ACLK),
        .CE(access_piperun),
        .D(\Gen_Port_Ready[0].Use_Slow_Port.Wr_Inst_n_6 ),
        .Q(\access_info[0][Wr] ),
        .R(prohibit_rst));
  FDRE \arb_prohibit_quick_reg[0] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst_0 ),
        .Q(\arb_prohibit_quick_reg_n_0_[0] ),
        .R(prohibit_rst));
  FDRE \arb_prohibit_quick_reg[1] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst ),
        .Q(p_0_in8_in),
        .R(prohibit_rst));
  FDRE \arb_prohibit_read_reg[0] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Gen_Port_Ready[0].Use_Slow_Port.Rd_Inst_n_6 ),
        .Q(\arb_prohibit_read_reg_n_0_[0] ),
        .R(prohibit_rst));
  FDRE \arb_prohibit_read_reg[1] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Gen_Port_Ready[1].Use_Slow_Port.Rd_Inst_n_35 ),
        .Q(rd_port_ready_block_1),
        .R(prohibit_rst));
  (* SOFT_HLUTNM = "soft_lutpair115" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    \arbiter_bp_push_i[0][Early]_i_1 
       (.I0(S0_AXI_AWBAR),
        .I1(S0_AXI_AWCACHE[2]),
        .I2(S0_AXI_AWCACHE[0]),
        .O(\Gen_Port_Ready[0].wr_port_early_reg ));
  LUT3 #(
    .INIT(8'hFE)) 
    \arbiter_bp_push_i[1][Early]_i_1 
       (.I0(S1_AXI_AWBAR),
        .I1(S1_AXI_AWCACHE[2]),
        .I2(S1_AXI_AWCACHE[0]),
        .O(p_2_out));
  FDRE \arbiter_bp_push_i_reg[0][Barrier] 
       (.C(ACLK),
        .CE(1'b1),
        .D(S0_AXI_AWBAR),
        .Q(\arbiter_bp_push_prt[0][Barrier] ),
        .R(prohibit_rst));
  FDRE \arbiter_bp_push_i_reg[0][Early] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Gen_Port_Ready[0].wr_port_early_reg ),
        .Q(\arbiter_bp_push_prt[0][Early] ),
        .R(prohibit_rst));
  FDRE \arbiter_bp_push_i_reg[0][Valid] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\arbiter_bp_push_i[0][Valid] ),
        .Q(\arbiter_bp_push_prt[0][Valid] ),
        .R(prohibit_rst));
  FDRE \arbiter_bp_push_i_reg[1][Barrier] 
       (.C(ACLK),
        .CE(1'b1),
        .D(S1_AXI_AWBAR),
        .Q(\arbiter_bp_push_prt[1][Barrier] ),
        .R(prohibit_rst));
  FDRE \arbiter_bp_push_i_reg[1][Early] 
       (.C(ACLK),
        .CE(1'b1),
        .D(p_2_out),
        .Q(\arbiter_bp_push_prt[1][Early] ),
        .R(prohibit_rst));
  FDRE \arbiter_bp_push_i_reg[1][Valid] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\arbiter_bp_push_i[1][Valid] ),
        .Q(\arbiter_bp_push_prt[1][Valid] ),
        .R(prohibit_rst));
  LUT2 #(
    .INIT(4'h2)) 
    ctrl_init_last_i_1
       (.I0(ctrl_ready_i_reg_0),
        .I1(ctrl_init_done_i),
        .O(E));
  FDRE ctrl_ready_i_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(\Gen_Port_Ready[0].Use_Slow_Port.Wr_Inst_n_1 ),
        .Q(ctrl_ready_i_reg_0),
        .R(1'b0));
  FDRE dvm_2nd_part_reg
       (.C(ACLK),
        .CE(arbiter_piperun_and_valid),
        .D(dvm_2nd_part0),
        .Q(dvm_2nd_part),
        .R(prohibit_rst));
  (* SOFT_HLUTNM = "soft_lutpair112" *) 
  LUT3 #(
    .INIT(8'h01)) 
    \lu_mem_info[Addr_Stp][0]_i_1 
       (.I0(\lu_mem_info_reg[Size][2] [2]),
        .I1(\lu_mem_info_reg[Size][2] [0]),
        .I2(\lu_mem_info_reg[Size][2] [1]),
        .O(\lu_mem_info_reg[Addr_Stp][5] [0]));
  (* SOFT_HLUTNM = "soft_lutpair114" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \lu_mem_info[Addr_Stp][1]_i_1 
       (.I0(\lu_mem_info_reg[Size][2] [0]),
        .I1(\lu_mem_info_reg[Size][2] [2]),
        .I2(\lu_mem_info_reg[Size][2] [1]),
        .O(\lu_mem_info_reg[Addr_Stp][5] [1]));
  (* SOFT_HLUTNM = "soft_lutpair116" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \lu_mem_info[Addr_Stp][2]_i_1 
       (.I0(\lu_mem_info_reg[Size][2] [1]),
        .I1(\lu_mem_info_reg[Size][2] [2]),
        .I2(\lu_mem_info_reg[Size][2] [0]),
        .O(\lu_mem_info_reg[Addr_Stp][5] [2]));
  (* SOFT_HLUTNM = "soft_lutpair116" *) 
  LUT3 #(
    .INIT(8'h40)) 
    \lu_mem_info[Addr_Stp][3]_i_1 
       (.I0(\lu_mem_info_reg[Size][2] [2]),
        .I1(\lu_mem_info_reg[Size][2] [0]),
        .I2(\lu_mem_info_reg[Size][2] [1]),
        .O(\lu_mem_info_reg[Addr_Stp][5] [3]));
  (* SOFT_HLUTNM = "soft_lutpair117" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \lu_mem_info[Addr_Stp][4]_i_1 
       (.I0(\lu_mem_info_reg[Size][2] [2]),
        .I1(\lu_mem_info_reg[Size][2] [0]),
        .I2(\lu_mem_info_reg[Size][2] [1]),
        .O(\lu_mem_info_reg[Addr_Stp][5] [4]));
  (* SOFT_HLUTNM = "soft_lutpair117" *) 
  LUT3 #(
    .INIT(8'h40)) 
    \lu_mem_info[Addr_Stp][5]_i_1 
       (.I0(\lu_mem_info_reg[Size][2] [1]),
        .I1(\lu_mem_info_reg[Size][2] [0]),
        .I2(\lu_mem_info_reg[Size][2] [2]),
        .O(\lu_mem_info_reg[Addr_Stp][5] [5]));
  (* SOFT_HLUTNM = "soft_lutpair111" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \lu_mem_info[Addr_Use][0]_i_1 
       (.I0(\lu_mem_info_reg[Size][2] [2]),
        .I1(\lu_mem_info_reg[Size][2] [0]),
        .I2(\lu_mem_info_reg[Len][7] [0]),
        .I3(\lu_mem_info_reg[Size][2] [1]),
        .O(\lu_mem_info_reg[Addr_Use][5] [0]));
  (* SOFT_HLUTNM = "soft_lutpair112" *) 
  LUT5 #(
    .INIT(32'hFFFFEFEA)) 
    \lu_mem_info[Addr_Use][1]_i_1 
       (.I0(\lu_mem_info_reg[Size][2] [2]),
        .I1(\lu_mem_info_reg[Len][7] [0]),
        .I2(\lu_mem_info_reg[Size][2] [0]),
        .I3(\lu_mem_info_reg[Len][7] [1]),
        .I4(\lu_mem_info_reg[Size][2] [1]),
        .O(\lu_mem_info_reg[Addr_Use][5] [1]));
  LUT6 #(
    .INIT(64'hFFFFFEAEFAFAFEAE)) 
    \lu_mem_info[Addr_Use][2]_i_1 
       (.I0(\lu_mem_info_reg[Size][2] [2]),
        .I1(\lu_mem_info_reg[Len][7] [2]),
        .I2(\lu_mem_info_reg[Size][2] [0]),
        .I3(\lu_mem_info_reg[Len][7] [1]),
        .I4(\lu_mem_info_reg[Size][2] [1]),
        .I5(\lu_mem_info_reg[Len][7] [0]),
        .O(\lu_mem_info_reg[Addr_Use][5] [2]));
  LUT6 #(
    .INIT(64'hFEFEFEAEAEAEFEAE)) 
    \lu_mem_info[Addr_Use][3]_i_1 
       (.I0(\lu_mem_info_reg[Size][2] [2]),
        .I1(\lu_mem_info[Addr_Use][3]_i_2_n_0 ),
        .I2(\lu_mem_info_reg[Size][2] [1]),
        .I3(\lu_mem_info_reg[Len][7] [1]),
        .I4(\lu_mem_info_reg[Size][2] [0]),
        .I5(\lu_mem_info_reg[Len][7] [0]),
        .O(\lu_mem_info_reg[Addr_Use][5] [3]));
  (* SOFT_HLUTNM = "soft_lutpair114" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \lu_mem_info[Addr_Use][3]_i_2 
       (.I0(\lu_mem_info_reg[Len][7] [2]),
        .I1(\lu_mem_info_reg[Size][2] [0]),
        .I2(\lu_mem_info_reg[Len][7] [3]),
        .O(\lu_mem_info[Addr_Use][3]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair111" *) 
  LUT5 #(
    .INIT(32'hFEFFFE00)) 
    \lu_mem_info[Addr_Use][4]_i_1 
       (.I0(\lu_mem_info_reg[Size][2] [1]),
        .I1(\lu_mem_info_reg[Len][7] [0]),
        .I2(\lu_mem_info_reg[Size][2] [0]),
        .I3(\lu_mem_info_reg[Size][2] [2]),
        .I4(\lu_mem_info[Addr_Use][4]_i_2_n_0 ),
        .O(\lu_mem_info_reg[Addr_Use][5] [4]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \lu_mem_info[Addr_Use][4]_i_2 
       (.I0(\lu_mem_info_reg[Len][7] [1]),
        .I1(\lu_mem_info_reg[Len][7] [2]),
        .I2(\lu_mem_info_reg[Size][2] [1]),
        .I3(\lu_mem_info_reg[Len][7] [3]),
        .I4(\lu_mem_info_reg[Size][2] [0]),
        .I5(\lu_mem_info_reg[Len][7] [4]),
        .O(\lu_mem_info[Addr_Use][4]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFEAEFFFFFEAE0000)) 
    \lu_mem_info[Addr_Use][5]_i_1 
       (.I0(\lu_mem_info_reg[Size][2] [1]),
        .I1(\lu_mem_info_reg[Len][7] [1]),
        .I2(\lu_mem_info_reg[Size][2] [0]),
        .I3(\lu_mem_info_reg[Len][7] [0]),
        .I4(\lu_mem_info_reg[Size][2] [2]),
        .I5(\lu_mem_info[Addr_Use][5]_i_2_n_0 ),
        .O(\lu_mem_info_reg[Addr_Use][5] [5]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \lu_mem_info[Addr_Use][5]_i_2 
       (.I0(\lu_mem_info_reg[Len][7] [2]),
        .I1(\lu_mem_info_reg[Len][7] [3]),
        .I2(\lu_mem_info_reg[Size][2] [1]),
        .I3(\lu_mem_info_reg[Len][7] [4]),
        .I4(\lu_mem_info_reg[Size][2] [0]),
        .I5(\lu_mem_info_reg[Len][7] [5]),
        .O(\lu_mem_info[Addr_Use][5]_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair119" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \lu_mem_info[Allocate]_i_1 
       (.I0(\arb_access[Allocate] ),
        .I1(\lu_mem_info_reg[Force_Hit] ),
        .O(\lu_mem_info_reg[Allocate] ));
  (* SOFT_HLUTNM = "soft_lutpair119" *) 
  LUT3 #(
    .INIT(8'h20)) 
    lu_mem_write_alloc_i_1
       (.I0(\access_info[0][Wr] ),
        .I1(\lu_mem_info_reg[Force_Hit] ),
        .I2(\arb_access[Allocate] ),
        .O(lu_mem_write_alloc0));
endmodule

(* ORIG_REF_NAME = "sc_back_end" *) 
module design_1_system_cache_0_0_sc_back_end
   (aw_fifo_full,
    write_data_almost_full,
    write_data_full,
    A,
    M_AXI_WVALID_I_reg,
    queue_full,
    M0_AXI_AWPROT,
    M0_AXI_WLAST,
    M0_AXI_ARPROT,
    M0_AXI_AWVALID,
    M0_AXI_WVALID,
    M0_AXI_ARVALID,
    \write_seq_id_reg[6] ,
    pending_write_is_1,
    update_done_aw_reg,
    \Use_FPGA.Almost_Full_Inst ,
    M0_AXI_AWADDR,
    M0_AXI_AWLEN,
    M0_AXI_AWSIZE,
    M0_AXI_AWBURST,
    M0_AXI_WDATA,
    M0_AXI_WSTRB,
    M0_AXI_ARADDR,
    M0_AXI_ARLEN,
    M0_AXI_ARSIZE,
    M0_AXI_ARBURST,
    ACLK,
    ARESET,
    queue_push,
    queue_push29_out,
    \Use_FPGA.Full_Inst ,
    S,
    \read_req_info[0][Kind] ,
    \update_info_reg[Kind] ,
    \write_data_info[0][Last] ,
    \write_req_info[0][Line_Only] ,
    update_need_aw,
    update_done_aw,
    \read_req_info[0][Valid] ,
    ri_fifo_full,
    update_done_ar,
    update_need_ar,
    \Use_FPGA.Full_Inst_0 ,
    M0_AXI_AWREADY,
    M0_AXI_ARREADY,
    \Use_FPGA.Full_Inst_1 ,
    \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst ,
    M0_AXI_WREADY,
    \write_data_info[0][Valid] ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    in,
    \update_info_reg[Len][7] ,
    \update_info_reg[Size][2] ,
    \update_info_reg[Evict] ,
    \update_info_reg[Len][7]_0 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    update_evict_busy_reg,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 ,
    E);
  output aw_fifo_full;
  output write_data_almost_full;
  output write_data_full;
  output [0:0]A;
  output M_AXI_WVALID_I_reg;
  output queue_full;
  output [0:0]M0_AXI_AWPROT;
  output M0_AXI_WLAST;
  output [0:0]M0_AXI_ARPROT;
  output M0_AXI_AWVALID;
  output M0_AXI_WVALID;
  output M0_AXI_ARVALID;
  output \write_seq_id_reg[6] ;
  output pending_write_is_1;
  output update_done_aw_reg;
  output \Use_FPGA.Almost_Full_Inst ;
  output [31:0]M0_AXI_AWADDR;
  output [7:0]M0_AXI_AWLEN;
  output [1:0]M0_AXI_AWSIZE;
  output [1:0]M0_AXI_AWBURST;
  output [31:0]M0_AXI_WDATA;
  output [3:0]M0_AXI_WSTRB;
  output [31:0]M0_AXI_ARADDR;
  output [7:0]M0_AXI_ARLEN;
  output [2:0]M0_AXI_ARSIZE;
  output [1:0]M0_AXI_ARBURST;
  input ACLK;
  input ARESET;
  input queue_push;
  input queue_push29_out;
  input \Use_FPGA.Full_Inst ;
  input S;
  input \read_req_info[0][Kind] ;
  input \update_info_reg[Kind] ;
  input \write_data_info[0][Last] ;
  input \write_req_info[0][Line_Only] ;
  input update_need_aw;
  input update_done_aw;
  input \read_req_info[0][Valid] ;
  input ri_fifo_full;
  input update_done_ar;
  input update_need_ar;
  input \Use_FPGA.Full_Inst_0 ;
  input M0_AXI_AWREADY;
  input M0_AXI_ARREADY;
  input \Use_FPGA.Full_Inst_1 ;
  input \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst ;
  input M0_AXI_WREADY;
  input \write_data_info[0][Valid] ;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  input [31:0]in;
  input [7:0]\update_info_reg[Len][7] ;
  input [2:0]\update_info_reg[Size][2] ;
  input [23:0]\update_info_reg[Evict] ;
  input [7:0]\update_info_reg[Len][7]_0 ;
  input [1:0]\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input [3:0]update_evict_busy_reg;
  input [31:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 ;
  input [0:0]E;

  wire [0:0]A;
  wire ACLK;
  wire ARESET;
  wire [0:0]E;
  wire \Gen_Master_Ports[0].TransOrd/aw_fifo_empty ;
  wire [31:0]M0_AXI_ARADDR;
  wire [1:0]M0_AXI_ARBURST;
  wire [7:0]M0_AXI_ARLEN;
  wire [0:0]M0_AXI_ARPROT;
  wire M0_AXI_ARREADY;
  wire [2:0]M0_AXI_ARSIZE;
  wire M0_AXI_ARVALID;
  wire [31:0]M0_AXI_AWADDR;
  wire [1:0]M0_AXI_AWBURST;
  wire [7:0]M0_AXI_AWLEN;
  wire [0:0]M0_AXI_AWPROT;
  wire M0_AXI_AWREADY;
  wire [1:0]M0_AXI_AWSIZE;
  wire M0_AXI_AWVALID;
  wire [31:0]M0_AXI_WDATA;
  wire M0_AXI_WLAST;
  wire M0_AXI_WREADY;
  wire [3:0]M0_AXI_WSTRB;
  wire M0_AXI_WVALID;
  wire M_AXI_ARVALID_I;
  wire M_AXI_AWVALID_I;
  wire M_AXI_WVALID_I_reg;
  wire [31:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 ;
  wire S;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire [1:0]\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \Use_AXI_Port_0.M_AXI_INST_n_7 ;
  wire \Use_FPGA.Almost_Full_Inst ;
  wire \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst ;
  wire \Use_FPGA.Full_Inst ;
  wire \Use_FPGA.Full_Inst_0 ;
  wire \Use_FPGA.Full_Inst_1 ;
  wire aw_fifo_full;
  wire [31:0]in;
  wire pending_write_is_1;
  wire queue_full;
  wire queue_push;
  wire queue_push29_out;
  wire \read_req_info[0][Kind] ;
  wire \read_req_info[0][Valid] ;
  wire [31:0]\read_req_ordered_info[0][Addr] ;
  wire \read_req_ordered_info[0][Kind] ;
  wire [7:0]\read_req_ordered_info[0][Len] ;
  wire [1:1]\read_req_ordered_info[0][Prot] ;
  wire [2:0]\read_req_ordered_info[0][Size] ;
  wire ri_fifo_full;
  wire update_done_ar;
  wire update_done_aw;
  wire update_done_aw_reg;
  wire [3:0]update_evict_busy_reg;
  wire [23:0]\update_info_reg[Evict] ;
  wire \update_info_reg[Kind] ;
  wire [7:0]\update_info_reg[Len][7] ;
  wire [7:0]\update_info_reg[Len][7]_0 ;
  wire [2:0]\update_info_reg[Size][2] ;
  wire update_need_ar;
  wire update_need_aw;
  wire write_data_almost_full;
  wire write_data_full;
  wire \write_data_info[0][Last] ;
  wire \write_data_info[0][Valid] ;
  wire [3:0]\write_data_ordered_info[0][BE] ;
  wire [31:0]\write_data_ordered_info[0][Data] ;
  wire \write_data_ordered_info[0][Last] ;
  wire \write_req_info[0][Line_Only] ;
  wire [31:0]\write_req_ordered_info[0][Addr] ;
  wire \write_req_ordered_info[0][Kind] ;
  wire [7:0]\write_req_ordered_info[0][Len] ;
  wire [1:1]\write_req_ordered_info[0][Prot] ;
  wire [1:0]\write_req_ordered_info[0][Size] ;
  wire \write_seq_id_reg[6] ;

  design_1_system_cache_0_0_sc_crossbar CB
       (.ACLK(ACLK),
        .ARESET(ARESET),
        .E(E),
        .M0_AXI_ARREADY(M0_AXI_ARREADY),
        .M0_AXI_AWREADY(M0_AXI_AWREADY),
        .M0_AXI_WREADY(M0_AXI_WREADY),
        .\M_AXI_ARLEN_reg[7] (\read_req_ordered_info[0][Len] ),
        .\M_AXI_ARSIZE_reg[2] (\read_req_ordered_info[0][Size] ),
        .M_AXI_ARVALID_I(M_AXI_ARVALID_I),
        .M_AXI_ARVALID_I_reg(\Use_AXI_Port_0.M_AXI_INST_n_7 ),
        .M_AXI_ARVALID_I_reg_0(M0_AXI_ARVALID),
        .\M_AXI_AWADDR_reg[31] (\write_req_ordered_info[0][Addr] ),
        .\M_AXI_AWLEN_reg[7] (\write_req_ordered_info[0][Len] ),
        .\M_AXI_AWSIZE_reg[1] (\write_req_ordered_info[0][Size] ),
        .M_AXI_AWVALID_I(M_AXI_AWVALID_I),
        .M_AXI_AWVALID_I_reg(M0_AXI_AWVALID),
        .\M_AXI_WDATA_reg[31] (\write_data_ordered_info[0][Data] ),
        .\M_AXI_WSTRB_reg[3] (\write_data_ordered_info[0][BE] ),
        .M_AXI_WVALID_I_reg(M_AXI_WVALID_I_reg),
        .M_AXI_WVALID_I_reg_0(M0_AXI_WVALID),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 (\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 ),
        .S(S),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .\Use_FPGA.Almost_Full_Inst (\Use_FPGA.Almost_Full_Inst ),
        .\Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst (\Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst ),
        .\Use_FPGA.Full_Inst (queue_full),
        .\Use_FPGA.Full_Inst_0 (\Use_FPGA.Full_Inst ),
        .\Use_FPGA.Full_Inst_1 (\Use_FPGA.Full_Inst_0 ),
        .\Use_FPGA.Full_Inst_2 (\Use_FPGA.Full_Inst_1 ),
        .addr(A),
        .aw_fifo_empty(\Gen_Master_Ports[0].TransOrd/aw_fifo_empty ),
        .in(in),
        .out(\read_req_ordered_info[0][Addr] ),
        .pending_write_is_1(pending_write_is_1),
        .queue_push(queue_push),
        .queue_push29_out(queue_push29_out),
        .\read_req_info[0][Kind] (\read_req_info[0][Kind] ),
        .\read_req_info[0][Valid] (\read_req_info[0][Valid] ),
        .\read_req_ordered_info[0][Kind] (\read_req_ordered_info[0][Kind] ),
        .\read_req_ordered_info[0][Prot] (\read_req_ordered_info[0][Prot] ),
        .ri_fifo_full(ri_fifo_full),
        .update_done_ar(update_done_ar),
        .update_done_aw(update_done_aw),
        .update_done_aw_reg(update_done_aw_reg),
        .update_evict_busy_reg(update_evict_busy_reg),
        .\update_info_reg[Evict] (\update_info_reg[Evict] ),
        .\update_info_reg[Kind] (\update_info_reg[Kind] ),
        .\update_info_reg[Len][7] (\update_info_reg[Len][7] ),
        .\update_info_reg[Len][7]_0 (\update_info_reg[Len][7]_0 ),
        .\update_info_reg[Size][2] (\update_info_reg[Size][2] ),
        .update_need_ar(update_need_ar),
        .update_need_aw(update_need_aw),
        .write_data_almost_full(write_data_almost_full),
        .write_data_full(write_data_full),
        .\write_data_info[0][Last] (\write_data_info[0][Last] ),
        .\write_data_info[0][Valid] (\write_data_info[0][Valid] ),
        .\write_data_ordered_info[0][Last] (\write_data_ordered_info[0][Last] ),
        .\write_req_info[0][Line_Only] (\write_req_info[0][Line_Only] ),
        .\write_req_ordered_info[0][Kind] (\write_req_ordered_info[0][Kind] ),
        .\write_req_ordered_info[0][Prot] (\write_req_ordered_info[0][Prot] ),
        .\write_seq_id_reg[6] (aw_fifo_full),
        .\write_seq_id_reg[6]_0 (\write_seq_id_reg[6] ));
  design_1_system_cache_0_0_sc_m_axi_interface \Use_AXI_Port_0.M_AXI_INST 
       (.ACLK(ACLK),
        .ARESET(ARESET),
        .D(\write_req_ordered_info[0][Addr] ),
        .M0_AXI_ARADDR(M0_AXI_ARADDR),
        .M0_AXI_ARBURST(M0_AXI_ARBURST),
        .M0_AXI_ARLEN(M0_AXI_ARLEN),
        .M0_AXI_ARPROT(M0_AXI_ARPROT),
        .M0_AXI_ARREADY(M0_AXI_ARREADY),
        .M0_AXI_ARSIZE(M0_AXI_ARSIZE),
        .M0_AXI_ARVALID(M0_AXI_ARVALID),
        .M0_AXI_AWADDR(M0_AXI_AWADDR),
        .M0_AXI_AWBURST(M0_AXI_AWBURST),
        .M0_AXI_AWLEN(M0_AXI_AWLEN),
        .M0_AXI_AWPROT(M0_AXI_AWPROT),
        .M0_AXI_AWREADY(M0_AXI_AWREADY),
        .M0_AXI_AWSIZE(M0_AXI_AWSIZE),
        .M0_AXI_AWVALID(M0_AXI_AWVALID),
        .M0_AXI_WDATA(M0_AXI_WDATA),
        .M0_AXI_WLAST(M0_AXI_WLAST),
        .M0_AXI_WREADY(M0_AXI_WREADY),
        .M0_AXI_WSTRB(M0_AXI_WSTRB),
        .M0_AXI_WVALID(M0_AXI_WVALID),
        .M_AXI_ARVALID_I(M_AXI_ARVALID_I),
        .M_AXI_AWVALID_I(M_AXI_AWVALID_I),
        .\Order_Optimization_4.search_count_reg[1] (\Use_AXI_Port_0.M_AXI_INST_n_7 ),
        .\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst (\write_req_ordered_info[0][Len] ),
        .\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_0 (\write_req_ordered_info[0][Size] ),
        .\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_1 (\read_req_ordered_info[0][Len] ),
        .\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_2 (\read_req_ordered_info[0][Size] ),
        .\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst (\write_data_ordered_info[0][Data] ),
        .\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_0 (\write_data_ordered_info[0][BE] ),
        .\Use_FPGA.Empty_Inst (M_AXI_WVALID_I_reg),
        .aw_fifo_empty(\Gen_Master_Ports[0].TransOrd/aw_fifo_empty ),
        .\read_req_ordered_info[0][Kind] (\read_req_ordered_info[0][Kind] ),
        .\read_req_ordered_info[0][Prot] (\read_req_ordered_info[0][Prot] ),
        .\update_info_reg[Addr][31] (\read_req_ordered_info[0][Addr] ),
        .\write_data_ordered_info[0][Last] (\write_data_ordered_info[0][Last] ),
        .\write_req_ordered_info[0][Kind] (\write_req_ordered_info[0][Kind] ),
        .\write_req_ordered_info[0][Prot] (\write_req_ordered_info[0][Prot] ));
endmodule

(* ORIG_REF_NAME = "sc_cache_core" *) 
module design_1_system_cache_0_0_sc_cache_core
   (lookup_piperun,
    lu_check_valid,
    update_need_ar,
    update_need_aw,
    lud_reg_valid_reg,
    M0_AXI_RREADY,
    ri_fifo_full,
    \read_req_info[0][Valid] ,
    need_to_stall_write_reg,
    \update_info_reg[Port_Num][0] ,
    wm_port,
    \S_AXI_BID_reg[0] ,
    wm_allow,
    update_done_aw,
    update_done_ar,
    \update_info_reg[Addr][13] ,
    \lu_check_info_reg[Port_Num][0] ,
    lud_addr_pipeline_full,
    \lud_reg_port_num_reg[0] ,
    \write_req_info[0][Line_Only] ,
    \lu_check_tag_addr_reg[11] ,
    lud_reg_port_num,
    new_read_data_last,
    S,
    wr_port_data_valid_i_reg,
    \Use_FPGA_2.S_AXI_RVALID_reg ,
    S_0,
    wr_port_data_ready,
    new_read_data_word,
    \S0_AXI_RDATA[30] ,
    \lookup_read_data_info[0,0][Valid] ,
    \write_data_info[0][Valid] ,
    \write_data_info[0][Last] ,
    in,
    \update_read_data_info[0,1][Valid] ,
    \update_read_data_info[0,0][Valid] ,
    update_ext_bresp_any,
    \read_req_info[0][Kind] ,
    M0_AXI_BREADY,
    \M_AXI_WSTRB_reg[3] ,
    \M_AXI_ARSIZE_reg[2] ,
    \M_AXI_WDATA_reg[31] ,
    \M_AXI_ARLEN_reg[7] ,
    \M_AXI_AWLEN_reg[7] ,
    \M_AXI_AWSIZE_reg[1] ,
    \M_AXI_AWADDR_reg[31] ,
    queue_push29_out,
    E,
    pending_write_is_1_reg,
    p_57_in,
    lud_addr_pipeline_full_reg,
    lookup_restart_mem,
    lud_addr_pipeline_full_reg_0,
    \lookup_read_data_new[0,0][Hit] ,
    \lookup_read_data_new[0,1][Valid] ,
    \lookup_read_data_new[0,0][Valid] ,
    p_162_in,
    S_1,
    queue_push,
    \Use_FPGA.Almost_Full_Inst ,
    \Use_FPGA.Almost_Full_Inst_0 ,
    \S_AXI_BRESP_reg[0] ,
    \S_AXI_BRESP_reg[1] ,
    \lookup_read_data_info[0,1][Valid] ,
    M_AXI_ARVALID_I_reg,
    \M_AXI_AWBURST_reg[1] ,
    ACLK,
    ARESET,
    access_valid,
    S_2,
    \The_Compare[0].sel_reg ,
    A_3,
    \The_Compare[2].sel_reg ,
    S_4,
    \The_Compare[0].sel_reg_5 ,
    A_6,
    A_N,
    M0_AXI_RVALID,
    write_data_full,
    need_to_stall_write_reg_0,
    \access_data_info[0,0][Last] ,
    \access_data_info[0,1][Last] ,
    queue_full,
    Q,
    \access_info[0][Port_Num] ,
    \access_info[0][Wr] ,
    \access_info[0][Keep] ,
    lud_addr_pipeline_full0,
    \access_info[0][Early] ,
    \access_info[0][Kind] ,
    \arb_access_i_reg[Allocate] ,
    \access_info[0][Force_Hit] ,
    lu_mem_write_alloc0,
    r_hit_push,
    r_hit_push_7,
    M0_AXI_RDATA,
    M0_AXI_BVALID,
    r_miss_fifo_full,
    \read_data_status[0,0][Hit_Full] ,
    wr_port_data_valid_i_reg_0,
    update_wr_miss_rs_last,
    write_data_almost_full,
    M0_AXI_RLAST,
    \Use_FPGA.Empty_Inst ,
    \Use_FPGA.Empty_Inst_0 ,
    aw_fifo_full,
    need_to_stall_write_reg_1,
    \wr_port_data_info_reg[0][BE][3] ,
    \wr_port_data_info_reg[0][BE][3]_0 ,
    D,
    \read_data_status[0,1][Hit_Pop] ,
    \read_data_status[0,0][Hit_Pop] ,
    \read_data_status[0,1][Hit_Full] ,
    \access_data_info[0,0][Valid] ,
    \access_data_info[0,1][Valid] ,
    pending_write_is_1,
    \Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst ,
    A,
    \Use_FPGA.Empty_Inst_1 ,
    r_miss_fifo_full_8,
    wr_port_data_last_i_reg,
    \lud_reg_valid_one_hot_reg[1] ,
    \lud_reg_valid_one_hot_reg[0] ,
    M0_AXI_BRESP,
    p_3_in,
    p_2_in,
    p_1_in3_in,
    \wr_port_data_info_reg[0][BE][0] ,
    DATA_INA,
    \arb_access_i_reg[Len][7] ,
    \arb_access_i_reg[Size][1] ,
    \arb_access_i_reg[Size][1]_0 ,
    \arb_access_i_reg[Size][2] );
  output lookup_piperun;
  output lu_check_valid;
  output update_need_ar;
  output update_need_aw;
  output lud_reg_valid_reg;
  output M0_AXI_RREADY;
  output ri_fifo_full;
  output \read_req_info[0][Valid] ;
  output need_to_stall_write_reg;
  output \update_info_reg[Port_Num][0] ;
  output wm_port;
  output \S_AXI_BID_reg[0] ;
  output wm_allow;
  output update_done_aw;
  output update_done_ar;
  output [1:0]\update_info_reg[Addr][13] ;
  output \lu_check_info_reg[Port_Num][0] ;
  output lud_addr_pipeline_full;
  output [0:0]\lud_reg_port_num_reg[0] ;
  output \write_req_info[0][Line_Only] ;
  output [5:0]\lu_check_tag_addr_reg[11] ;
  output lud_reg_port_num;
  output new_read_data_last;
  output S;
  output wr_port_data_valid_i_reg;
  output \Use_FPGA_2.S_AXI_RVALID_reg ;
  output S_0;
  output wr_port_data_ready;
  output [31:0]new_read_data_word;
  output [31:0]\S0_AXI_RDATA[30] ;
  output \lookup_read_data_info[0,0][Valid] ;
  output \write_data_info[0][Valid] ;
  output \write_data_info[0][Last] ;
  output [31:0]in;
  output \update_read_data_info[0,1][Valid] ;
  output \update_read_data_info[0,0][Valid] ;
  output update_ext_bresp_any;
  output \read_req_info[0][Kind] ;
  output M0_AXI_BREADY;
  output [3:0]\M_AXI_WSTRB_reg[3] ;
  output [2:0]\M_AXI_ARSIZE_reg[2] ;
  output [31:0]\M_AXI_WDATA_reg[31] ;
  output [7:0]\M_AXI_ARLEN_reg[7] ;
  output [7:0]\M_AXI_AWLEN_reg[7] ;
  output [1:0]\M_AXI_AWSIZE_reg[1] ;
  output [23:0]\M_AXI_AWADDR_reg[31] ;
  output queue_push29_out;
  output [0:0]E;
  output pending_write_is_1_reg;
  output p_57_in;
  output lud_addr_pipeline_full_reg;
  output lookup_restart_mem;
  output lud_addr_pipeline_full_reg_0;
  output \lookup_read_data_new[0,0][Hit] ;
  output \lookup_read_data_new[0,1][Valid] ;
  output \lookup_read_data_new[0,0][Valid] ;
  output p_162_in;
  output S_1;
  output queue_push;
  output \Use_FPGA.Almost_Full_Inst ;
  output \Use_FPGA.Almost_Full_Inst_0 ;
  output \S_AXI_BRESP_reg[0] ;
  output \S_AXI_BRESP_reg[1] ;
  output \lookup_read_data_info[0,1][Valid] ;
  output M_AXI_ARVALID_I_reg;
  output \M_AXI_AWBURST_reg[1] ;
  input ACLK;
  input ARESET;
  input access_valid;
  input S_2;
  input \The_Compare[0].sel_reg ;
  input A_3;
  input \The_Compare[2].sel_reg ;
  input S_4;
  input \The_Compare[0].sel_reg_5 ;
  input A_6;
  input A_N;
  input M0_AXI_RVALID;
  input write_data_full;
  input need_to_stall_write_reg_0;
  input \access_data_info[0,0][Last] ;
  input \access_data_info[0,1][Last] ;
  input queue_full;
  input [31:0]Q;
  input [0:0]\access_info[0][Port_Num] ;
  input \access_info[0][Wr] ;
  input \access_info[0][Keep] ;
  input lud_addr_pipeline_full0;
  input \access_info[0][Early] ;
  input \access_info[0][Kind] ;
  input \arb_access_i_reg[Allocate] ;
  input \access_info[0][Force_Hit] ;
  input lu_mem_write_alloc0;
  input r_hit_push;
  input r_hit_push_7;
  input [31:0]M0_AXI_RDATA;
  input M0_AXI_BVALID;
  input r_miss_fifo_full;
  input \read_data_status[0,0][Hit_Full] ;
  input wr_port_data_valid_i_reg_0;
  input update_wr_miss_rs_last;
  input write_data_almost_full;
  input M0_AXI_RLAST;
  input \Use_FPGA.Empty_Inst ;
  input \Use_FPGA.Empty_Inst_0 ;
  input aw_fifo_full;
  input need_to_stall_write_reg_1;
  input [3:0]\wr_port_data_info_reg[0][BE][3] ;
  input [3:0]\wr_port_data_info_reg[0][BE][3]_0 ;
  input [31:0]D;
  input \read_data_status[0,1][Hit_Pop] ;
  input \read_data_status[0,0][Hit_Pop] ;
  input \read_data_status[0,1][Hit_Full] ;
  input \access_data_info[0,0][Valid] ;
  input \access_data_info[0,1][Valid] ;
  input pending_write_is_1;
  input \Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst ;
  input [0:0]A;
  input \Use_FPGA.Empty_Inst_1 ;
  input r_miss_fifo_full_8;
  input wr_port_data_last_i_reg;
  input \lud_reg_valid_one_hot_reg[1] ;
  input \lud_reg_valid_one_hot_reg[0] ;
  input [1:0]M0_AXI_BRESP;
  input p_3_in;
  input p_2_in;
  input p_1_in3_in;
  input \wr_port_data_info_reg[0][BE][0] ;
  input [31:0]DATA_INA;
  input [7:0]\arb_access_i_reg[Len][7] ;
  input [5:0]\arb_access_i_reg[Size][1] ;
  input [5:0]\arb_access_i_reg[Size][1]_0 ;
  input [2:0]\arb_access_i_reg[Size][2] ;

  wire [0:0]A;
  wire A29_out;
  wire A31_out;
  wire A33_out;
  wire A35_out;
  wire ACLK;
  wire ARESET;
  wire ARESET_I;
  wire A_3;
  wire A_6;
  wire A_N;
  wire [17:0]A_Vec;
  wire [7:6]B_Vec;
  wire [31:0]D;
  wire [1:0]D8_out;
  wire [31:0]DATA_INA;
  wire [0:0]E;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_0 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_1 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_10 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_11 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_12 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_13 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_14 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_15 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_16 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_17 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_18 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_19 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_2 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_20 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_21 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_22 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_23 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_24 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_25 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_26 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_27 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_28 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_29 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_3 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_30 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_31 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_32 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_33 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_34 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_35 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_36 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_37 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_38 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_39 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_4 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_40 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_41 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_42 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_43 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_44 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_45 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_46 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_47 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_48 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_49 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_5 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_50 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_51 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_52 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_53 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_54 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_55 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_56 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_57 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_58 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_59 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_6 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_60 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_61 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_62 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_63 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_7 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_8 ;
  wire \Gen_Block[0].Gen_Set_Data[0].DATA_n_9 ;
  wire \Gen_Block[0].LU_n_133 ;
  wire \Gen_Block[0].LU_n_14 ;
  wire \Gen_Block[0].LU_n_15 ;
  wire \Gen_Block[0].LU_n_18 ;
  wire \Gen_Block[0].LU_n_229 ;
  wire \Gen_Block[0].LU_n_263 ;
  wire \Gen_Block[0].LU_n_264 ;
  wire \Gen_Block[0].LU_n_265 ;
  wire \Gen_Block[0].LU_n_279 ;
  wire \Gen_Block[0].LU_n_60 ;
  wire \Gen_Block[0].TAG_n_96 ;
  wire \Gen_Block[0].TAG_n_97 ;
  wire \Gen_Block[0].UD_n_153 ;
  wire \Gen_Block[0].UD_n_157 ;
  wire \Gen_Block[0].UD_n_158 ;
  wire \Gen_Block[0].UD_n_165 ;
  wire \Gen_Block[0].UD_n_19 ;
  wire \Gen_Block[0].UD_n_198 ;
  wire \Gen_Block[0].UD_n_199 ;
  wire \Gen_Block[0].UD_n_20 ;
  wire \Gen_Block[0].UD_n_30 ;
  wire \Gen_Block[0].UD_n_32 ;
  wire \Gen_Block[0].UD_n_35 ;
  wire \Gen_Block[0].UD_n_40 ;
  wire \Gen_Block[0].UD_n_53 ;
  wire \Gen_Set_Tag[0].UD_Tag_Compare_Inst1/A ;
  wire \Gen_Set_Tag[0].UD_Tag_Compare_Inst1/The_Compare[0].sel_reg ;
  wire \Gen_Set_Tag[0].UD_Tag_Compare_Inst1/The_Compare[2].sel_reg ;
  wire \Gen_Set_Tag[0].UD_Tag_Compare_Inst1/The_Compare[3].sel_reg ;
  wire \Gen_Set_Tag[0].UD_Tag_Compare_Inst1/The_Compare[4].sel_reg ;
  wire \Gen_Set_Tag[0].UD_Tag_Compare_Inst1/The_Compare[5].sel_reg ;
  wire \Gen_Set_Tag[1].UD_Tag_Compare_Inst1/A ;
  wire \Gen_Set_Tag[1].UD_Tag_Compare_Inst1/The_Compare[0].sel_reg ;
  wire \Gen_Set_Tag[1].UD_Tag_Compare_Inst1/The_Compare[2].sel_reg ;
  wire \Gen_Set_Tag[1].UD_Tag_Compare_Inst1/The_Compare[3].sel_reg ;
  wire \Gen_Set_Tag[1].UD_Tag_Compare_Inst1/The_Compare[4].sel_reg ;
  wire \Gen_Set_Tag[1].UD_Tag_Compare_Inst1/The_Compare[5].sel_reg ;
  wire \LU_MD_Or_Inst1/The_Compare[0].carry_or_I1/S ;
  wire \LU_PC_Or_Inst1/The_Compare[0].carry_or_I1/S ;
  wire \LU_PC_Or_Inst1/The_Compare[1].carry_or_I1/S ;
  wire M0_AXI_BREADY;
  wire [1:0]M0_AXI_BRESP;
  wire M0_AXI_BVALID;
  wire [31:0]M0_AXI_RDATA;
  wire M0_AXI_RLAST;
  wire M0_AXI_RREADY;
  wire M0_AXI_RVALID;
  wire [7:0]\M_AXI_ARLEN_reg[7] ;
  wire [2:0]\M_AXI_ARSIZE_reg[2] ;
  wire M_AXI_ARVALID_I_reg;
  wire [23:0]\M_AXI_AWADDR_reg[31] ;
  wire \M_AXI_AWBURST_reg[1] ;
  wire [7:0]\M_AXI_AWLEN_reg[7] ;
  wire [1:0]\M_AXI_AWSIZE_reg[1] ;
  wire [31:0]\M_AXI_WDATA_reg[31] ;
  wire [3:0]\M_AXI_WSTRB_reg[3] ;
  wire [31:0]Q;
  wire S;
  wire [31:0]\S0_AXI_RDATA[30] ;
  wire S_0;
  wire S_1;
  wire S_2;
  wire S_4;
  wire \S_AXI_BID_reg[0] ;
  wire \S_AXI_BRESP_reg[0] ;
  wire \S_AXI_BRESP_reg[1] ;
  wire \The_Compare[0].sel_reg ;
  wire \The_Compare[0].sel_reg_5 ;
  wire \The_Compare[2].sel_reg ;
  wire \UD_TagConf_Compare_Inst1/A ;
  wire \UD_TagConf_Compare_Inst1/The_Compare[0].sel_reg ;
  wire \UD_TagConf_Compare_Inst1/The_Compare[2].sel_reg ;
  wire \UD_TagWrite_Or_Inst2/S ;
  wire \UD_TagWrite_Or_Inst3/S ;
  wire \Use_FPGA.Almost_Full_Inst ;
  wire \Use_FPGA.Almost_Full_Inst_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst ;
  wire \Use_FPGA.Empty_Inst ;
  wire \Use_FPGA.Empty_Inst_0 ;
  wire \Use_FPGA.Empty_Inst_1 ;
  wire \Use_FPGA_2.S_AXI_RVALID_reg ;
  wire \access_data_info[0,0][Last] ;
  wire \access_data_info[0,0][Valid] ;
  wire \access_data_info[0,1][Last] ;
  wire \access_data_info[0,1][Valid] ;
  wire \access_info[0][Early] ;
  wire \access_info[0][Force_Hit] ;
  wire \access_info[0][Keep] ;
  wire \access_info[0][Kind] ;
  wire [0:0]\access_info[0][Port_Num] ;
  wire \access_info[0][Wr] ;
  wire access_valid;
  wire \arb_access_i_reg[Allocate] ;
  wire [7:0]\arb_access_i_reg[Len][7] ;
  wire [5:0]\arb_access_i_reg[Size][1] ;
  wire [5:0]\arb_access_i_reg[Size][1]_0 ;
  wire [2:0]\arb_access_i_reg[Size][2] ;
  wire aw_fifo_full;
  wire backend_rd_data_pop;
  wire bs_fifo_full;
  wire [1:0]\bs_fifo_mem_reg[0][Src] ;
  wire e_fifo_full;
  wire [31:0]fit_vec;
  wire [31:0]in;
  wire [13:6]lookup_data_addr;
  wire [31:0]lookup_data_current_word_i;
  wire [3:0]lookup_data_we;
  wire lookup_fetch_piperun;
  wire lookup_mem_piperun;
  wire lookup_offset_first;
  wire lookup_piperun;
  wire lookup_push_write_miss;
  wire \lookup_read_data_info[0,0][Valid] ;
  wire \lookup_read_data_info[0,1][Valid] ;
  wire \lookup_read_data_new[0,0][Hit] ;
  wire \lookup_read_data_new[0,0][Valid] ;
  wire \lookup_read_data_new[0,1][Valid] ;
  wire lookup_restart_mem;
  wire [5:0]lookup_stall_addr;
  wire [13:6]lookup_tag_addr;
  wire [43:0]lookup_tag_current_word_i;
  wire lookup_tag_en;
  wire lookup_wm_allocate;
  wire lookup_wm_allow_write;
  wire lookup_wm_evict;
  wire [5:0]lookup_wm_stp_bits;
  wire [5:0]lookup_wm_use_bits;
  wire lookup_wm_will_use;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire [5:0]lru_check_line_addr;
  wire lru_check_next_way;
  wire lru_check_use_lru;
  wire [0:0]lu_check_dirty_bits;
  wire \lu_check_info_reg[Port_Num][0] ;
  wire [1:0]lu_check_protected;
  wire [5:0]\lu_check_tag_addr_reg[11] ;
  wire lu_check_valid;
  wire [1:0]lu_mem_releasing_lock;
  wire [1:0]lu_mem_removed_way_hold;
  wire lu_mem_write_alloc0;
  wire lud_addr_pipeline_full;
  wire lud_addr_pipeline_full0;
  wire lud_addr_pipeline_full_reg;
  wire lud_addr_pipeline_full_reg_0;
  wire lud_mem_conflict;
  wire lud_reg_port_num;
  wire [0:0]\lud_reg_port_num_reg[0] ;
  wire \lud_reg_valid_one_hot_reg[0] ;
  wire \lud_reg_valid_one_hot_reg[1] ;
  wire lud_reg_valid_reg;
  wire need_to_stall_write_reg;
  wire need_to_stall_write_reg_0;
  wire need_to_stall_write_reg_1;
  wire new_read_data_last;
  wire [31:0]new_read_data_word;
  wire new_tree;
  wire [3:0]p_0_in;
  wire p_138_in;
  wire p_162_in;
  wire p_1_in3_in;
  wire p_2_in;
  wire p_3_in;
  wire p_57_in;
  wire pending_write_is_1;
  wire pending_write_is_1_reg;
  wire queue_full;
  wire queue_push;
  wire queue_push120_out;
  wire queue_push29_out;
  wire r_hit_push;
  wire r_hit_push_7;
  wire r_miss_fifo_full;
  wire r_miss_fifo_full_8;
  wire \read_data_status[0,0][Hit_Full] ;
  wire \read_data_status[0,0][Hit_Pop] ;
  wire \read_data_status[0,1][Hit_Full] ;
  wire \read_data_status[0,1][Hit_Pop] ;
  wire \read_req_info[0][Kind] ;
  wire \read_req_info[0][Valid] ;
  wire ri_allocate;
  wire ri_fifo_full;
  wire \ri_hot_port[0]_i_1_n_0 ;
  wire ri_way;
  wire ud_new_tag_valid2;
  wire update_cur_tag_rd_way;
  wire \update_cur_tag_rd_way[0]_i_1_n_0 ;
  wire [13:2]update_data_addr;
  wire [31:0]update_data_new_word;
  wire update_data_we;
  wire update_done_ar;
  wire update_done_ar_i_1_n_0;
  wire update_done_aw;
  wire update_done_bs;
  wire update_done_bs_i_1_n_0;
  wire update_done_evict;
  wire update_done_evict_i_1_n_0;
  wire update_ext_bresp_any;
  wire [1:0]\update_info[Addr] ;
  wire [5:0]\update_info[Addr_Stp] ;
  wire [5:0]\update_info[Addr_Use] ;
  wire \update_info[Allocate] ;
  wire \update_info[Early] ;
  wire \update_info[Internal_Cmd] ;
  wire \update_info[Kind] ;
  wire [7:0]\update_info[Len] ;
  wire \update_info[Wr] ;
  wire [1:0]\update_info_reg[Addr][13] ;
  wire \update_info_reg[Port_Num][0] ;
  wire update_lock_release;
  wire update_miss;
  wire update_need_ar;
  wire update_need_aw;
  wire update_need_bs;
  wire update_need_tag_write;
  wire update_piperun;
  wire \update_read_data_info[0,0][Last] ;
  wire \update_read_data_info[0,0][Valid] ;
  wire \update_read_data_info[0,1][Valid] ;
  wire update_read_miss;
  wire update_read_miss_ongoing_i_1_n_0;
  wire update_read_miss_start;
  wire update_readback_available;
  wire update_readback_available_i_1_n_0;
  wire update_readback_possible;
  wire [10:9]\update_release_tag[Addr] ;
  wire \update_release_tag[Valid] ;
  wire update_rm_alloc_ongoing;
  wire update_rm_alloc_ongoing_i_1_n_0;
  wire [13:6]update_tag_addr;
  wire update_tag_conflict;
  wire [39:0]update_tag_current_word_i;
  wire update_tag_en;
  wire [31:14]\update_tag_new_word[1][Addr] ;
  wire \update_tag_new_word[1][Dirty] ;
  wire \update_tag_new_word[1][Locked] ;
  wire \update_tag_new_word[1][Reused] ;
  wire \update_tag_new_word[1][Valid] ;
  wire [1:0]update_tag_we;
  wire update_valid;
  wire update_way;
  wire update_wma_data_valid;
  wire update_wma_last;
  wire update_wma_last_i_1_n_0;
  wire update_word_cnt_en;
  wire update_word_cnt_last;
  wire update_wr_miss_rs_last;
  wire [1:0]update_write_miss_busy;
  wire update_write_miss_full;
  wire wm_allow;
  wire wm_port;
  wire \wr_port_data_info_reg[0][BE][0] ;
  wire [3:0]\wr_port_data_info_reg[0][BE][3] ;
  wire [3:0]\wr_port_data_info_reg[0][BE][3]_0 ;
  wire wr_port_data_last_i_reg;
  wire wr_port_data_ready;
  wire wr_port_data_valid_i_reg;
  wire wr_port_data_valid_i_reg_0;
  wire write_data_almost_full;
  wire write_data_full;
  wire \write_data_info[0][Last] ;
  wire \write_data_info[0][Valid] ;
  wire \write_req_info[0][Internal] ;
  wire \write_req_info[0][Line_Only] ;
  wire [0:0]\write_req_info[0][Port_Num] ;

  design_1_system_cache_0_0_sc_ram_module__parameterized3 \Gen_Block[0].Gen_Set_Data[0].DATA 
       (.ACLK(ACLK),
        .ADDRARDADDR({lookup_data_addr,p_0_in}),
        .ADDRBWRADDR(update_data_addr),
        .DATA_INA(DATA_INA),
        .DATA_INB(update_data_new_word),
        .DATA_OUTA({\Gen_Block[0].Gen_Set_Data[0].DATA_n_0 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_1 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_2 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_3 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_4 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_5 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_6 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_7 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_8 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_9 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_10 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_11 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_12 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_13 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_14 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_15 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_16 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_17 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_18 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_19 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_20 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_21 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_22 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_23 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_24 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_25 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_26 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_27 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_28 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_29 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_30 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_31 }),
        .DATA_OUTB({\Gen_Block[0].Gen_Set_Data[0].DATA_n_32 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_33 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_34 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_35 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_36 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_37 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_38 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_39 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_40 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_41 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_42 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_43 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_44 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_45 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_46 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_47 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_48 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_49 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_50 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_51 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_52 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_53 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_54 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_55 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_56 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_57 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_58 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_59 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_60 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_61 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_62 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_63 }),
        .O(\Gen_Block[0].UD_n_198 ),
        .WEA(lookup_data_we),
        .lud_mem_waiting_for_pipe_reg(\Gen_Block[0].LU_n_14 ),
        .update_data_we(update_data_we));
  design_1_system_cache_0_0_sc_ram_module__parameterized3_44 \Gen_Block[0].Gen_Set_Data[1].DATA 
       (.ACLK(ACLK),
        .ADDRARDADDR({lookup_data_addr,p_0_in}),
        .ADDRBWRADDR(update_data_addr),
        .DATA_INA(DATA_INA),
        .DATA_INB(update_data_new_word),
        .DATA_OUTA(lookup_data_current_word_i),
        .DATA_OUTB(fit_vec),
        .O(\Gen_Block[0].UD_n_199 ),
        .WEA(lookup_data_we),
        .lud_mem_waiting_for_pipe_reg(\Gen_Block[0].LU_n_15 ),
        .update_data_we(update_data_we));
  design_1_system_cache_0_0_sc_lru_module \Gen_Block[0].LRU 
       (.ACLK(ACLK),
        .ARESET(ARESET),
        .D({\update_info_reg[Addr][13] ,lru_check_line_addr}),
        .DIBDI(new_tree),
        .Q(Q[13:6]),
        .S(\LU_MD_Or_Inst1/The_Compare[0].carry_or_I1/S ),
        .S_0(\LU_PC_Or_Inst1/The_Compare[0].carry_or_I1/S ),
        .S_1(\LU_PC_Or_Inst1/The_Compare[1].carry_or_I1/S ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (lu_check_dirty_bits),
        .WEBWE(lru_check_use_lru),
        .lookup_fetch_piperun(lookup_fetch_piperun),
        .lookup_mem_piperun(lookup_mem_piperun),
        .lru_check_next_way(lru_check_next_way),
        .\lu_check_protected_reg[1] (lu_check_protected));
  design_1_system_cache_0_0_sc_lookup \Gen_Block[0].LU 
       (.A(\UD_TagConf_Compare_Inst1/A ),
        .ACLK(ACLK),
        .ADDRA(lookup_tag_addr),
        .ADDRARDADDR({lookup_data_addr,p_0_in}),
        .ARESET(ARESET),
        .A_3(A_3),
        .A_6(A_6),
        .A_N(A_N),
        .B_Vec(B_Vec),
        .D({\update_info_reg[Addr][13] ,lru_check_line_addr}),
        .DATA_INB({\update_tag_new_word[1][Valid] ,\update_tag_new_word[1][Reused] ,\update_tag_new_word[1][Dirty] }),
        .DATA_OUTA({lookup_tag_current_word_i[42:22],lookup_tag_current_word_i[20:0]}),
        .DIBDI(new_tree),
        .ENA(lookup_tag_en),
        .M0_AXI_RDATA(M0_AXI_RDATA),
        .\M_AXI_ARLEN_reg[7] (\M_AXI_ARLEN_reg[7] ),
        .\M_AXI_ARSIZE_reg[2] (\M_AXI_ARSIZE_reg[2] ),
        .\M_AXI_AWADDR_reg[31] (\M_AXI_AWADDR_reg[31] ),
        .\M_AXI_AWBURST_reg[1] (\M_AXI_AWBURST_reg[1] ),
        .\M_AXI_AWLEN_reg[7] (\M_AXI_AWLEN_reg[7] ),
        .\M_AXI_AWSIZE_reg[1] (\M_AXI_AWSIZE_reg[1] ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 (\Gen_Block[0].TAG_n_96 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 (\write_req_info[0][Line_Only] ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 ({in[31:2],\update_info[Addr] }),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_1 (\Gen_Block[0].TAG_n_97 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_2 (D8_out),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_3 ({A31_out,A29_out}),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 (\Gen_Block[0].LU_n_14 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_0 (\Gen_Block[0].LU_n_15 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_1 (lookup_data_current_word_i),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 ({\Gen_Block[0].Gen_Set_Data[0].DATA_n_0 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_1 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_2 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_3 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_4 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_5 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_6 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_7 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_8 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_9 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_10 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_11 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_12 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_13 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_14 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_15 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_16 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_17 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_18 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_19 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_20 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_21 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_22 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_23 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_24 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_25 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_26 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_27 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_28 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_29 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_30 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_31 }),
        .Q(Q),
        .S(S),
        .\S0_AXI_RDATA[30] (\S0_AXI_RDATA[30] ),
        .S_0(S_0),
        .S_1(\UD_TagWrite_Or_Inst2/S ),
        .S_2(S_2),
        .S_3(\UD_TagWrite_Or_Inst3/S ),
        .S_4(S_4),
        .S_6(\LU_MD_Or_Inst1/The_Compare[0].carry_or_I1/S ),
        .S_7(\LU_PC_Or_Inst1/The_Compare[0].carry_or_I1/S ),
        .S_8(\LU_PC_Or_Inst1/The_Compare[1].carry_or_I1/S ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (update_need_ar),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (update_need_aw),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 (\Gen_Block[0].LU_n_264 ),
        .\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst (\Gen_Block[0].LU_n_263 ),
        .\The_Compare[0].sel_reg (\The_Compare[0].sel_reg ),
        .\The_Compare[0].sel_reg_4 (\UD_TagConf_Compare_Inst1/The_Compare[0].sel_reg ),
        .\The_Compare[0].sel_reg_5 (\The_Compare[0].sel_reg_5 ),
        .\The_Compare[2].sel_reg (\The_Compare[2].sel_reg ),
        .\The_Compare[2].sel_reg_5 (\UD_TagConf_Compare_Inst1/The_Compare[2].sel_reg ),
        .\Use_FPGA_2.S_AXI_RVALID_reg (\Use_FPGA_2.S_AXI_RVALID_reg ),
        .WEA(lookup_data_we),
        .WEBWE(lru_check_use_lru),
        .\access_data_info[0,0][Valid] (\access_data_info[0,0][Valid] ),
        .\access_data_info[0,1][Valid] (\access_data_info[0,1][Valid] ),
        .\access_info[0][Early] (\access_info[0][Early] ),
        .\access_info[0][Force_Hit] (\access_info[0][Force_Hit] ),
        .\access_info[0][Keep] (\access_info[0][Keep] ),
        .\access_info[0][Kind] (\access_info[0][Kind] ),
        .\access_info[0][Port_Num] (\access_info[0][Port_Num] ),
        .\access_info[0][Wr] (\access_info[0][Wr] ),
        .access_valid(access_valid),
        .\arb_access_i_reg[Allocate] (\arb_access_i_reg[Allocate] ),
        .\arb_access_i_reg[Len][7] (\arb_access_i_reg[Len][7] ),
        .\arb_access_i_reg[Size][1] (\arb_access_i_reg[Size][1] ),
        .\arb_access_i_reg[Size][1]_0 (\arb_access_i_reg[Size][1]_0 ),
        .\arb_access_i_reg[Size][2] (\arb_access_i_reg[Size][2] ),
        .\bs_fifo_mem_reg[0][Src][0] (\Gen_Block[0].LU_n_229 ),
        .\bs_fifo_mem_reg[0][Src][1] (\Gen_Block[0].LU_n_133 ),
        .\bs_fifo_mem_reg[0][Src][1]_0 (\bs_fifo_mem_reg[0][Src] ),
        .in(in[1:0]),
        .lookup_fetch_piperun(lookup_fetch_piperun),
        .lookup_mem_piperun(lookup_mem_piperun),
        .lookup_offset_first(lookup_offset_first),
        .lookup_piperun(lookup_piperun),
        .lookup_push_write_miss(lookup_push_write_miss),
        .\lookup_read_data_info[0,0][Valid] (\lookup_read_data_info[0,0][Valid] ),
        .\lookup_read_data_info[0,1][Valid] (\lookup_read_data_info[0,1][Valid] ),
        .\lookup_read_data_new[0,0][Hit] (\lookup_read_data_new[0,0][Hit] ),
        .\lookup_read_data_new[0,0][Valid] (\lookup_read_data_new[0,0][Valid] ),
        .\lookup_read_data_new[0,1][Valid] (\lookup_read_data_new[0,1][Valid] ),
        .lookup_restart_mem(lookup_restart_mem),
        .lookup_wm_allocate(lookup_wm_allocate),
        .lookup_wm_allow_write(lookup_wm_allow_write),
        .lookup_wm_evict(lookup_wm_evict),
        .lookup_wm_will_use(lookup_wm_will_use),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lru_check_next_way(lru_check_next_way),
        .\lu_check_info_reg[Port_Num][0]_0 (\lu_check_info_reg[Port_Num][0] ),
        .\lu_check_tag_addr_reg[10]_0 (\lu_check_tag_addr_reg[11] [4]),
        .\lu_check_tag_addr_reg[11]_0 (\lu_check_tag_addr_reg[11] [5]),
        .\lu_check_tag_addr_reg[6]_0 (\lu_check_tag_addr_reg[11] [0]),
        .\lu_check_tag_addr_reg[7]_0 (\lu_check_tag_addr_reg[11] [1]),
        .\lu_check_tag_addr_reg[8]_0 (\lu_check_tag_addr_reg[11] [2]),
        .\lu_check_tag_addr_reg[9]_0 (\lu_check_tag_addr_reg[11] [3]),
        .\lu_check_valid_bits_reg[1]_0 (\Gen_Block[0].LU_n_265 ),
        .lu_check_valid_delayed_reg_0(lu_check_valid),
        .\lu_mem_info_reg[Port_Num][0]_0 (\Gen_Block[0].LU_n_279 ),
        .lu_mem_protect_conflict_reg_0(lu_check_protected),
        .lu_mem_releasing_lock(lu_mem_releasing_lock),
        .lu_mem_removed_way_hold(lu_mem_removed_way_hold),
        .lu_mem_write_alloc0(lu_mem_write_alloc0),
        .lud_addr_pipeline_full0(lud_addr_pipeline_full0),
        .lud_addr_pipeline_full_reg_0(lud_addr_pipeline_full_reg),
        .lud_addr_pipeline_full_reg_1(lud_addr_pipeline_full_reg_0),
        .lud_mem_conflict(lud_mem_conflict),
        .lud_mem_waiting_for_pipe_reg_0(\Gen_Block[0].LU_n_60 ),
        .lud_mem_waiting_for_pipe_reg_1(\Gen_Block[0].UD_n_165 ),
        .\lud_reg_port_num_reg[0]_0 (\lud_reg_port_num_reg[0] ),
        .\lud_reg_port_num_reg[0]_1 (lud_reg_port_num),
        .lud_reg_valid_reg_0(lud_reg_valid_reg),
        .lud_reg_valid_reg_1(p_57_in),
        .lud_step_delayed_restart_reg_0(lud_addr_pipeline_full),
        .new_read_data_last(new_read_data_last),
        .new_read_data_word(new_read_data_word),
        .p_138_in(p_138_in),
        .p_162_in(p_162_in),
        .queue_push120_out(queue_push120_out),
        .r_hit_push(r_hit_push),
        .r_hit_push_7(r_hit_push_7),
        .\read_data_status[0,0][Hit_Full] (\read_data_status[0,0][Hit_Full] ),
        .\read_data_status[0,0][Hit_Pop] (\read_data_status[0,0][Hit_Pop] ),
        .\read_data_status[0,1][Hit_Full] (\read_data_status[0,1][Hit_Full] ),
        .\read_data_status[0,1][Hit_Pop] (\read_data_status[0,1][Hit_Pop] ),
        .\read_req_info[0][Kind] (\read_req_info[0][Kind] ),
        .\ri_len_reg[7] (\update_info[Len] ),
        .ri_merge_reg(\Gen_Block[0].UD_n_20 ),
        .\ri_stp_reg[5] (\update_info[Addr_Stp] ),
        .\ri_use_reg[5] (\update_info[Addr_Use] ),
        .ud_new_tag_valid2(ud_new_tag_valid2),
        .update_done_tag_write_reg(\Gen_Block[0].UD_n_53 ),
        .update_first_write_hit_reg_0(lu_check_dirty_bits),
        .\update_info[Allocate] (\update_info[Allocate] ),
        .\update_info[Early] (\update_info[Early] ),
        .\update_info[Internal_Cmd] (\update_info[Internal_Cmd] ),
        .\update_info[Kind] (\update_info[Kind] ),
        .\update_info[Wr] (\update_info[Wr] ),
        .\update_info_reg[Addr][5]_0 (lookup_stall_addr),
        .\update_info_reg[Addr_Stp][5]_0 (lookup_wm_stp_bits),
        .\update_info_reg[Addr_Use][5]_0 (lookup_wm_use_bits),
        .\update_info_reg[Kind]_0 (\Gen_Block[0].LU_n_18 ),
        .\update_info_reg[Port_Num][0]_0 (\update_info_reg[Port_Num][0] ),
        .update_lock_release(update_lock_release),
        .update_miss(update_miss),
        .update_need_bs(update_need_bs),
        .update_need_tag_write(update_need_tag_write),
        .update_piperun(update_piperun),
        .\update_read_data_info[0,0][Last] (\update_read_data_info[0,0][Last] ),
        .update_read_miss(update_read_miss),
        .update_readback_available(update_readback_available),
        .\update_release_tag[Valid] (\update_release_tag[Valid] ),
        .\update_release_tag_reg[Addr][10] (\update_release_tag[Addr] ),
        .\update_release_tag_reg[Addr][11] (\Gen_Block[0].UD_n_153 ),
        .\update_release_tag_reg[Valid] (\Gen_Block[0].UD_n_157 ),
        .\update_release_tag_reg[Valid]_0 (\Gen_Block[0].UD_n_158 ),
        .\update_release_tag_reg[Valid]_1 ({A35_out,A33_out}),
        .update_tag_conflict(update_tag_conflict),
        .update_valid(update_valid),
        .update_way(update_way),
        .update_write_miss_busy(update_write_miss_busy),
        .update_write_miss_full(update_write_miss_full),
        .\wm_port_reg[0] (wm_port),
        .\wr_port_data_info_reg[0][BE][3] (\wr_port_data_info_reg[0][BE][3]_0 ),
        .\wr_port_data_info_reg[0][BE][3]_0 (\wr_port_data_info_reg[0][BE][3] ),
        .wr_port_data_last_i_reg(wr_port_data_last_i_reg),
        .wr_port_data_ready(wr_port_data_ready),
        .wr_port_data_valid_i_reg(wr_port_data_valid_i_reg),
        .\write_req_info[0][Internal] (\write_req_info[0][Internal] ),
        .\write_req_info[0][Port_Num] (\write_req_info[0][Port_Num] ));
  design_1_system_cache_0_0_sc_ram_module__parameterized1 \Gen_Block[0].TAG 
       (.A(\Gen_Set_Tag[0].UD_Tag_Compare_Inst1/A ),
        .ACLK(ACLK),
        .ADDRA(lookup_tag_addr),
        .ADDRB(update_tag_addr),
        .A_1(\Gen_Set_Tag[1].UD_Tag_Compare_Inst1/A ),
        .DATA_INB({\update_tag_new_word[1][Valid] ,\update_tag_new_word[1][Reused] ,\update_tag_new_word[1][Dirty] ,\update_tag_new_word[1][Locked] ,\update_tag_new_word[1][Addr] }),
        .DATA_OUTA(lookup_tag_current_word_i),
        .DATA_OUTB({update_tag_current_word_i[39:22],update_tag_current_word_i[17:0]}),
        .ENA(lookup_tag_en),
        .ENB(update_tag_en),
        .Q(A_Vec),
        .\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst (D8_out),
        .\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 ({A31_out,A29_out}),
        .\The_Compare[0].sel_reg (\Gen_Set_Tag[0].UD_Tag_Compare_Inst1/The_Compare[0].sel_reg ),
        .\The_Compare[0].sel_reg_0 (\Gen_Set_Tag[1].UD_Tag_Compare_Inst1/The_Compare[0].sel_reg ),
        .\The_Compare[2].sel_reg (\Gen_Set_Tag[0].UD_Tag_Compare_Inst1/The_Compare[2].sel_reg ),
        .\The_Compare[2].sel_reg_2 (\Gen_Set_Tag[1].UD_Tag_Compare_Inst1/The_Compare[2].sel_reg ),
        .\The_Compare[3].sel_reg (\Gen_Set_Tag[0].UD_Tag_Compare_Inst1/The_Compare[3].sel_reg ),
        .\The_Compare[3].sel_reg_3 (\Gen_Set_Tag[1].UD_Tag_Compare_Inst1/The_Compare[3].sel_reg ),
        .\The_Compare[4].sel_reg (\Gen_Set_Tag[0].UD_Tag_Compare_Inst1/The_Compare[4].sel_reg ),
        .\The_Compare[4].sel_reg_4 (\Gen_Set_Tag[1].UD_Tag_Compare_Inst1/The_Compare[4].sel_reg ),
        .\The_Compare[5].sel_reg (\Gen_Set_Tag[0].UD_Tag_Compare_Inst1/The_Compare[5].sel_reg ),
        .\The_Compare[5].sel_reg_5 (\Gen_Set_Tag[1].UD_Tag_Compare_Inst1/The_Compare[5].sel_reg ),
        .WEB(update_tag_we),
        .\lu_check_locked_hit_reg[0] (\Gen_Block[0].TAG_n_96 ),
        .\lu_check_locked_hit_reg[1] (\Gen_Block[0].TAG_n_97 ),
        .\lu_mem_release_lock_hold_reg[0] (\Gen_Block[0].LU_n_264 ),
        .\lu_mem_release_lock_hold_reg[1] (\Gen_Block[0].LU_n_263 ));
  design_1_system_cache_0_0_sc_update \Gen_Block[0].UD 
       (.A(A),
        .ACLK(ACLK),
        .ADDRB(update_tag_addr),
        .ADDRBWRADDR(update_data_addr),
        .ARESET(ARESET),
        .A_0(\UD_TagConf_Compare_Inst1/A ),
        .A_4(\Gen_Set_Tag[0].UD_Tag_Compare_Inst1/A ),
        .A_7(\Gen_Set_Tag[1].UD_Tag_Compare_Inst1/A ),
        .B_Vec(B_Vec),
        .D(\bs_fifo_mem_reg[0][Src] ),
        .DATA_INB({\update_tag_new_word[1][Locked] ,\update_tag_new_word[1][Addr] }),
        .DATA_OUTA({lookup_tag_current_word_i[43],lookup_tag_current_word_i[21]}),
        .DATA_OUTB({update_tag_current_word_i[39:22],update_tag_current_word_i[17:0]}),
        .E(E),
        .ENB(update_tag_en),
        .\Long_External_Burst.update_rb_pos_phase_reg_0 (\Gen_Block[0].UD_n_30 ),
        .\Long_External_Burst.update_rb_pos_phase_reg_1 (\Gen_Block[0].UD_n_32 ),
        .M0_AXI_BREADY(M0_AXI_BREADY),
        .M0_AXI_BRESP(M0_AXI_BRESP),
        .M0_AXI_BVALID(M0_AXI_BVALID),
        .M0_AXI_RDATA(M0_AXI_RDATA),
        .M0_AXI_RLAST(M0_AXI_RLAST),
        .M0_AXI_RREADY(M0_AXI_RREADY),
        .M0_AXI_RVALID(M0_AXI_RVALID),
        .M_AXI_ARVALID_I_reg(M_AXI_ARVALID_I_reg),
        .\M_AXI_WDATA_reg[31] (\M_AXI_WDATA_reg[31] ),
        .\M_AXI_WSTRB_reg[3] (\M_AXI_WSTRB_reg[3] ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 (A_Vec),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 (\Gen_Block[0].UD_n_20 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_0 (update_data_new_word),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_1 (\Gen_Block[0].UD_n_199 ),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 (fit_vec),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_3 ({\Gen_Block[0].Gen_Set_Data[0].DATA_n_32 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_33 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_34 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_35 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_36 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_37 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_38 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_39 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_40 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_41 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_42 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_43 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_44 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_45 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_46 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_47 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_48 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_49 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_50 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_51 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_52 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_53 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_54 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_55 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_56 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_57 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_58 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_59 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_60 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_61 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_62 ,\Gen_Block[0].Gen_Set_Data[0].DATA_n_63 }),
        .O(\Gen_Block[0].UD_n_198 ),
        .Q(ARESET_I),
        .S(\UD_TagWrite_Or_Inst2/S ),
        .S_1(S_1),
        .S_2(\UD_TagWrite_Or_Inst3/S ),
        .\S_AXI_BID_reg[0] (\S_AXI_BID_reg[0] ),
        .\S_AXI_BRESP_reg[0] (\S_AXI_BRESP_reg[0] ),
        .\S_AXI_BRESP_reg[1] (\S_AXI_BRESP_reg[1] ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (update_need_aw),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (update_need_ar),
        .\The_Compare[0].sel_reg (\UD_TagConf_Compare_Inst1/The_Compare[0].sel_reg ),
        .\The_Compare[0].sel_reg_3 (\Gen_Set_Tag[0].UD_Tag_Compare_Inst1/The_Compare[0].sel_reg ),
        .\The_Compare[0].sel_reg_6 (\Gen_Set_Tag[1].UD_Tag_Compare_Inst1/The_Compare[0].sel_reg ),
        .\The_Compare[2].sel_reg (\UD_TagConf_Compare_Inst1/The_Compare[2].sel_reg ),
        .\The_Compare[2].sel_reg_5 (\Gen_Set_Tag[0].UD_Tag_Compare_Inst1/The_Compare[2].sel_reg ),
        .\The_Compare[2].sel_reg_8 (\Gen_Set_Tag[1].UD_Tag_Compare_Inst1/The_Compare[2].sel_reg ),
        .\The_Compare[3].sel_reg (\Gen_Set_Tag[0].UD_Tag_Compare_Inst1/The_Compare[3].sel_reg ),
        .\The_Compare[3].sel_reg_9 (\Gen_Set_Tag[1].UD_Tag_Compare_Inst1/The_Compare[3].sel_reg ),
        .\The_Compare[4].sel_reg (\Gen_Set_Tag[0].UD_Tag_Compare_Inst1/The_Compare[4].sel_reg ),
        .\The_Compare[4].sel_reg_10 (\Gen_Set_Tag[1].UD_Tag_Compare_Inst1/The_Compare[4].sel_reg ),
        .\The_Compare[5].sel_reg (\Gen_Set_Tag[0].UD_Tag_Compare_Inst1/The_Compare[5].sel_reg ),
        .\The_Compare[5].sel_reg_11 (\Gen_Set_Tag[1].UD_Tag_Compare_Inst1/The_Compare[5].sel_reg ),
        .\Use_FPGA.Almost_Empty_Inst (\read_req_info[0][Valid] ),
        .\Use_FPGA.Almost_Full_Inst (\Use_FPGA.Almost_Full_Inst ),
        .\Use_FPGA.Almost_Full_Inst_0 (\Use_FPGA.Almost_Full_Inst_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst (\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst ),
        .\Use_FPGA.Empty_Inst (\Use_FPGA.Empty_Inst ),
        .\Use_FPGA.Empty_Inst_0 (\Use_FPGA.Empty_Inst_0 ),
        .\Use_FPGA.Empty_Inst_1 (\Use_FPGA.Empty_Inst_1 ),
        .\Use_FPGA.Full_Inst (ri_fifo_full),
        .\Use_FPGA.Full_Inst_0 (update_done_ar_i_1_n_0),
        .\Use_FPGA.Full_Inst_1 (update_done_evict_i_1_n_0),
        .\Use_FPGA.Full_Inst_2 (update_done_bs_i_1_n_0),
        .WEB(update_tag_we),
        .\access_data_info[0,0][Last] (\access_data_info[0,0][Last] ),
        .\access_data_info[0,1][Last] (\access_data_info[0,1][Last] ),
        .access_valid(access_valid),
        .aw_fifo_full(aw_fifo_full),
        .backend_rd_data_pop(backend_rd_data_pop),
        .bs_fifo_full(bs_fifo_full),
        .\bs_fifo_mem_reg[0][Src][0]_0 (\Gen_Block[0].LU_n_229 ),
        .\bs_fifo_mem_reg[0][Src][1]_0 (\Gen_Block[0].LU_n_133 ),
        .e_fifo_full(e_fifo_full),
        .in(update_wma_last),
        .lookup_offset_first(lookup_offset_first),
        .\lookup_offset_len_cnt_reg[3] (\Gen_Block[0].UD_n_165 ),
        .lookup_push_write_miss(lookup_push_write_miss),
        .\lookup_read_data_info[0,0][Valid] (\lookup_read_data_info[0,0][Valid] ),
        .\lookup_read_data_info[0,1][Valid] (\lookup_read_data_info[0,1][Valid] ),
        .lookup_wm_allocate(lookup_wm_allocate),
        .lookup_wm_allow_write(lookup_wm_allow_write),
        .lookup_wm_evict(lookup_wm_evict),
        .lookup_wm_will_use(lookup_wm_will_use),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .\lu_check_info_reg[Addr][5] (lookup_stall_addr),
        .\lu_check_info_reg[Addr_Stp][5] (lookup_wm_stp_bits),
        .\lu_check_info_reg[Addr_Use][5] (lookup_wm_use_bits),
        .\lu_check_info_reg[Kind] (\Gen_Block[0].LU_n_18 ),
        .\lu_check_info_reg[Port_Num][0] (\update_info_reg[Port_Num][0] ),
        .\lu_check_tag_hit_reg[0] (\Gen_Block[0].UD_n_157 ),
        .\lu_check_tag_hit_reg[1] (\Gen_Block[0].UD_n_158 ),
        .\lu_check_valid_bits_reg[1] ({A35_out,A33_out}),
        .\lu_check_valid_bits_reg[1]_0 (\Gen_Block[0].UD_n_153 ),
        .\lu_check_valid_bits_reg[1]_1 (\update_release_tag[Addr] ),
        .\lu_mem_info_reg[Addr][10] (\Gen_Block[0].LU_n_265 ),
        .\lu_mem_info_reg[Addr][11] ({\lu_check_tag_addr_reg[11] [5],\lu_check_tag_addr_reg[11] [2:0]}),
        .lu_mem_releasing_lock(lu_mem_releasing_lock),
        .lu_mem_removed_way_hold(lu_mem_removed_way_hold),
        .lud_mem_conflict(lud_mem_conflict),
        .lud_mem_waiting_for_pipe_reg(\Gen_Block[0].LU_n_60 ),
        .\lud_reg_valid_one_hot_reg[0] (\lud_reg_valid_one_hot_reg[0] ),
        .\lud_reg_valid_one_hot_reg[1] (\lud_reg_valid_one_hot_reg[1] ),
        .need_to_stall_write_reg(need_to_stall_write_reg_0),
        .need_to_stall_write_reg_0(need_to_stall_write_reg_1),
        .p_138_in(p_138_in),
        .p_1_in3_in(p_1_in3_in),
        .p_2_in(p_2_in),
        .p_3_in(p_3_in),
        .pending_write_is_1(pending_write_is_1),
        .pending_write_is_1_reg(pending_write_is_1_reg),
        .\pending_write_reg[4] (update_done_aw),
        .queue_full(queue_full),
        .queue_push(queue_push),
        .queue_push120_out(queue_push120_out),
        .queue_push29_out(queue_push29_out),
        .r_miss_fifo_full(r_miss_fifo_full),
        .r_miss_fifo_full_8(r_miss_fifo_full_8),
        .\read_data_status[0,0][Hit_Full] (\read_data_status[0,0][Hit_Full] ),
        .\read_data_status[0,1][Hit_Full] (\read_data_status[0,1][Hit_Full] ),
        .ri_allocate(ri_allocate),
        .\ri_port_reg[0]_0 (\Gen_Block[0].UD_n_19 ),
        .ri_way(ri_way),
        .\ri_way_reg[0]_0 (\update_cur_tag_rd_way[0]_i_1_n_0 ),
        .sel(need_to_stall_write_reg),
        .ud_new_tag_valid2(ud_new_tag_valid2),
        .update_cur_tag_rd_way(update_cur_tag_rd_way),
        .update_data_we(update_data_we),
        .update_done_ar_reg_0(update_done_ar),
        .update_done_bs(update_done_bs),
        .update_done_evict(update_done_evict),
        .update_done_tag_write_reg_0(\Gen_Block[0].UD_n_53 ),
        .update_done_tag_write_reg_1(update_readback_available_i_1_n_0),
        .update_ext_bresp_any(update_ext_bresp_any),
        .\update_info[Allocate] (\update_info[Allocate] ),
        .\update_info[Early] (\update_info[Early] ),
        .\update_info[Internal_Cmd] (\update_info[Internal_Cmd] ),
        .\update_info[Kind] (\update_info[Kind] ),
        .\update_info[Wr] (\update_info[Wr] ),
        .\update_info_reg[Addr][31] ({in[31:2],\update_info[Addr] }),
        .\update_info_reg[Addr_Stp][5] (\update_info[Addr_Stp] ),
        .\update_info_reg[Addr_Use][5] (\update_info[Addr_Use] ),
        .\update_info_reg[Allocate] (\Gen_Block[0].LU_n_279 ),
        .\update_info_reg[Len][7] (\update_info[Len] ),
        .\update_info_reg[Port_Num][0] (\ri_hot_port[0]_i_1_n_0 ),
        .update_lock_release(update_lock_release),
        .update_miss(update_miss),
        .update_need_bs(update_need_bs),
        .update_need_tag_write(update_need_tag_write),
        .update_piperun(update_piperun),
        .\update_read_data_info[0,0][Last] (\update_read_data_info[0,0][Last] ),
        .\update_read_data_info[0,0][Valid] (\update_read_data_info[0,0][Valid] ),
        .\update_read_data_info[0,1][Valid] (\update_read_data_info[0,1][Valid] ),
        .update_read_miss(update_read_miss),
        .update_read_miss_ongoing_reg_0(update_read_miss_ongoing_i_1_n_0),
        .update_read_miss_start(update_read_miss_start),
        .update_readback_available(update_readback_available),
        .update_readback_possible(update_readback_possible),
        .\update_release_tag[Valid] (\update_release_tag[Valid] ),
        .update_rm_alloc_ongoing(update_rm_alloc_ongoing),
        .update_rm_alloc_ongoing_reg_0(\Gen_Block[0].UD_n_35 ),
        .update_rm_alloc_ongoing_reg_1(update_rm_alloc_ongoing_i_1_n_0),
        .update_tag_conflict(update_tag_conflict),
        .update_valid(update_valid),
        .update_way(update_way),
        .\update_wma_data_reg[24]_0 (wm_allow),
        .update_wma_data_valid(update_wma_data_valid),
        .update_word_cnt_en(update_word_cnt_en),
        .update_word_cnt_last(update_word_cnt_last),
        .update_wr_miss_rs_last(update_wr_miss_rs_last),
        .\update_wr_offset_cnt_reg[0]_0 (\Gen_Block[0].UD_n_40 ),
        .update_write_miss_busy(update_write_miss_busy),
        .update_write_miss_full(update_write_miss_full),
        .update_write_miss_ongoing_reg_0(wm_port),
        .\wr_port_data_info_reg[0][BE][0] (\wr_port_data_info_reg[0][BE][0] ),
        .\wr_port_data_info_reg[0][BE][3] (\wr_port_data_info_reg[0][BE][3] ),
        .\wr_port_data_info_reg[0][BE][3]_0 (\wr_port_data_info_reg[0][BE][3]_0 ),
        .\wr_port_data_info_reg[0][Data][31] (D),
        .wr_port_data_last_i_reg(update_wma_last_i_1_n_0),
        .wr_port_data_valid_i_reg(wr_port_data_valid_i_reg_0),
        .write_data_almost_full(write_data_almost_full),
        .write_data_full(write_data_full),
        .\write_data_info[0][Last] (\write_data_info[0][Last] ),
        .\write_data_info[0][Valid] (\write_data_info[0][Valid] ),
        .\write_req_info[0][Internal] (\write_req_info[0][Internal] ),
        .\write_req_info[0][Port_Num] (\write_req_info[0][Port_Num] ));
  LUT1 #(
    .INIT(2'h1)) 
    \ri_hot_port[0]_i_1 
       (.I0(\Gen_Block[0].UD_n_19 ),
        .O(\ri_hot_port[0]_i_1_n_0 ));
  LUT3 #(
    .INIT(8'hB8)) 
    \update_cur_tag_rd_way[0]_i_1 
       (.I0(ri_way),
        .I1(update_readback_possible),
        .I2(update_cur_tag_rd_way),
        .O(\update_cur_tag_rd_way[0]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFF10)) 
    update_done_ar_i_1
       (.I0(ri_fifo_full),
        .I1(queue_full),
        .I2(update_need_ar),
        .I3(update_done_ar),
        .O(update_done_ar_i_1_n_0));
  LUT3 #(
    .INIT(8'hF4)) 
    update_done_bs_i_1
       (.I0(bs_fifo_full),
        .I1(update_need_bs),
        .I2(update_done_bs),
        .O(update_done_bs_i_1_n_0));
  LUT3 #(
    .INIT(8'hF4)) 
    update_done_evict_i_1
       (.I0(e_fifo_full),
        .I1(\write_req_info[0][Internal] ),
        .I2(update_done_evict),
        .O(update_done_evict_i_1_n_0));
  LUT6 #(
    .INIT(64'h000000002ECCEECC)) 
    update_read_miss_ongoing_i_1
       (.I0(update_read_miss_start),
        .I1(\Gen_Block[0].UD_n_30 ),
        .I2(update_word_cnt_last),
        .I3(update_word_cnt_en),
        .I4(update_data_we),
        .I5(ARESET_I),
        .O(update_read_miss_ongoing_i_1_n_0));
  LUT6 #(
    .INIT(64'hEFFF0000EFFFCCCC)) 
    update_readback_available_i_1
       (.I0(\Gen_Block[0].UD_n_53 ),
        .I1(update_readback_available),
        .I2(update_need_tag_write),
        .I3(update_valid),
        .I4(\Gen_Block[0].UD_n_32 ),
        .I5(backend_rd_data_pop),
        .O(update_readback_available_i_1_n_0));
  LUT5 #(
    .INIT(32'h0000EA2A)) 
    update_rm_alloc_ongoing_i_1
       (.I0(\Gen_Block[0].UD_n_35 ),
        .I1(update_read_miss_start),
        .I2(update_word_cnt_en),
        .I3(ri_allocate),
        .I4(update_rm_alloc_ongoing),
        .O(update_rm_alloc_ongoing_i_1_n_0));
  LUT6 #(
    .INIT(64'hE200FFFFE2000000)) 
    update_wma_last_i_1
       (.I0(\access_data_info[0,0][Last] ),
        .I1(wm_port),
        .I2(\access_data_info[0,1][Last] ),
        .I3(\Gen_Block[0].UD_n_40 ),
        .I4(update_wma_data_valid),
        .I5(update_wma_last),
        .O(update_wma_last_i_1_n_0));
endmodule

(* ORIG_REF_NAME = "sc_crossbar" *) 
module design_1_system_cache_0_0_sc_crossbar
   (\write_seq_id_reg[6] ,
    aw_fifo_empty,
    write_data_almost_full,
    write_data_full,
    addr,
    M_AXI_WVALID_I_reg,
    \Use_FPGA.Full_Inst ,
    \read_req_ordered_info[0][Kind] ,
    \read_req_ordered_info[0][Prot] ,
    \write_req_ordered_info[0][Kind] ,
    \write_req_ordered_info[0][Prot] ,
    \write_data_ordered_info[0][Last] ,
    \write_seq_id_reg[6]_0 ,
    pending_write_is_1,
    update_done_aw_reg,
    M_AXI_ARVALID_I,
    \Use_FPGA.Almost_Full_Inst ,
    out,
    \M_AXI_ARLEN_reg[7] ,
    \M_AXI_ARSIZE_reg[2] ,
    \M_AXI_AWADDR_reg[31] ,
    \M_AXI_AWLEN_reg[7] ,
    \M_AXI_AWSIZE_reg[1] ,
    \M_AXI_WSTRB_reg[3] ,
    \M_AXI_WDATA_reg[31] ,
    ACLK,
    ARESET,
    M_AXI_AWVALID_I,
    queue_push,
    M_AXI_ARVALID_I_reg,
    queue_push29_out,
    \Use_FPGA.Full_Inst_0 ,
    S,
    \read_req_info[0][Kind] ,
    \update_info_reg[Kind] ,
    \write_data_info[0][Last] ,
    \write_req_info[0][Line_Only] ,
    update_need_aw,
    update_done_aw,
    \read_req_info[0][Valid] ,
    ri_fifo_full,
    update_done_ar,
    update_need_ar,
    \Use_FPGA.Full_Inst_1 ,
    M0_AXI_AWREADY,
    M_AXI_AWVALID_I_reg,
    M_AXI_ARVALID_I_reg_0,
    M0_AXI_ARREADY,
    \Use_FPGA.Full_Inst_2 ,
    \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst ,
    M_AXI_WVALID_I_reg_0,
    M0_AXI_WREADY,
    \write_data_info[0][Valid] ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    in,
    \update_info_reg[Len][7] ,
    \update_info_reg[Size][2] ,
    \update_info_reg[Evict] ,
    \update_info_reg[Len][7]_0 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    update_evict_busy_reg,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 ,
    E);
  output \write_seq_id_reg[6] ;
  output aw_fifo_empty;
  output write_data_almost_full;
  output write_data_full;
  output [0:0]addr;
  output M_AXI_WVALID_I_reg;
  output \Use_FPGA.Full_Inst ;
  output \read_req_ordered_info[0][Kind] ;
  output [0:0]\read_req_ordered_info[0][Prot] ;
  output \write_req_ordered_info[0][Kind] ;
  output [0:0]\write_req_ordered_info[0][Prot] ;
  output \write_data_ordered_info[0][Last] ;
  output \write_seq_id_reg[6]_0 ;
  output pending_write_is_1;
  output update_done_aw_reg;
  output M_AXI_ARVALID_I;
  output \Use_FPGA.Almost_Full_Inst ;
  output [31:0]out;
  output [7:0]\M_AXI_ARLEN_reg[7] ;
  output [2:0]\M_AXI_ARSIZE_reg[2] ;
  output [31:0]\M_AXI_AWADDR_reg[31] ;
  output [7:0]\M_AXI_AWLEN_reg[7] ;
  output [1:0]\M_AXI_AWSIZE_reg[1] ;
  output [3:0]\M_AXI_WSTRB_reg[3] ;
  output [31:0]\M_AXI_WDATA_reg[31] ;
  input ACLK;
  input ARESET;
  input M_AXI_AWVALID_I;
  input queue_push;
  input M_AXI_ARVALID_I_reg;
  input queue_push29_out;
  input \Use_FPGA.Full_Inst_0 ;
  input S;
  input \read_req_info[0][Kind] ;
  input \update_info_reg[Kind] ;
  input \write_data_info[0][Last] ;
  input \write_req_info[0][Line_Only] ;
  input update_need_aw;
  input update_done_aw;
  input \read_req_info[0][Valid] ;
  input ri_fifo_full;
  input update_done_ar;
  input update_need_ar;
  input \Use_FPGA.Full_Inst_1 ;
  input M0_AXI_AWREADY;
  input M_AXI_AWVALID_I_reg;
  input M_AXI_ARVALID_I_reg_0;
  input M0_AXI_ARREADY;
  input \Use_FPGA.Full_Inst_2 ;
  input \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst ;
  input M_AXI_WVALID_I_reg_0;
  input M0_AXI_WREADY;
  input \write_data_info[0][Valid] ;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  input [31:0]in;
  input [7:0]\update_info_reg[Len][7] ;
  input [2:0]\update_info_reg[Size][2] ;
  input [23:0]\update_info_reg[Evict] ;
  input [7:0]\update_info_reg[Len][7]_0 ;
  input [1:0]\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input [3:0]update_evict_busy_reg;
  input [31:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 ;
  input [0:0]E;

  wire ACLK;
  wire ARESET;
  wire [0:0]E;
  wire M0_AXI_ARREADY;
  wire M0_AXI_AWREADY;
  wire M0_AXI_WREADY;
  wire [7:0]\M_AXI_ARLEN_reg[7] ;
  wire [2:0]\M_AXI_ARSIZE_reg[2] ;
  wire M_AXI_ARVALID_I;
  wire M_AXI_ARVALID_I_reg;
  wire M_AXI_ARVALID_I_reg_0;
  wire [31:0]\M_AXI_AWADDR_reg[31] ;
  wire [7:0]\M_AXI_AWLEN_reg[7] ;
  wire [1:0]\M_AXI_AWSIZE_reg[1] ;
  wire M_AXI_AWVALID_I;
  wire M_AXI_AWVALID_I_reg;
  wire [31:0]\M_AXI_WDATA_reg[31] ;
  wire [3:0]\M_AXI_WSTRB_reg[3] ;
  wire M_AXI_WVALID_I_reg;
  wire M_AXI_WVALID_I_reg_0;
  wire [31:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 ;
  wire S;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire [1:0]\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \Use_FPGA.Almost_Full_Inst ;
  wire \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst ;
  wire \Use_FPGA.Full_Inst ;
  wire \Use_FPGA.Full_Inst_0 ;
  wire \Use_FPGA.Full_Inst_1 ;
  wire \Use_FPGA.Full_Inst_2 ;
  wire [0:0]addr;
  wire aw_fifo_empty;
  wire [31:0]in;
  wire [31:0]out;
  wire pending_write_is_1;
  wire queue_push;
  wire queue_push29_out;
  wire \read_req_info[0][Kind] ;
  wire \read_req_info[0][Valid] ;
  wire \read_req_ordered_info[0][Kind] ;
  wire [0:0]\read_req_ordered_info[0][Prot] ;
  wire ri_fifo_full;
  wire update_done_ar;
  wire update_done_aw;
  wire update_done_aw_reg;
  wire [3:0]update_evict_busy_reg;
  wire [23:0]\update_info_reg[Evict] ;
  wire \update_info_reg[Kind] ;
  wire [7:0]\update_info_reg[Len][7] ;
  wire [7:0]\update_info_reg[Len][7]_0 ;
  wire [2:0]\update_info_reg[Size][2] ;
  wire update_need_ar;
  wire update_need_aw;
  wire write_data_almost_full;
  wire write_data_full;
  wire \write_data_info[0][Last] ;
  wire \write_data_info[0][Valid] ;
  wire \write_data_ordered_info[0][Last] ;
  wire \write_req_info[0][Line_Only] ;
  wire \write_req_ordered_info[0][Kind] ;
  wire [0:0]\write_req_ordered_info[0][Prot] ;
  wire \write_seq_id_reg[6] ;
  wire \write_seq_id_reg[6]_0 ;

  design_1_system_cache_0_0_sc_transaction_ordering \Gen_Master_Ports[0].TransOrd 
       (.A(addr),
        .ACLK(ACLK),
        .ARESET(ARESET),
        .E(E),
        .M0_AXI_ARREADY(M0_AXI_ARREADY),
        .M0_AXI_AWREADY(M0_AXI_AWREADY),
        .M0_AXI_WREADY(M0_AXI_WREADY),
        .\M_AXI_ARLEN_reg[7] (\M_AXI_ARLEN_reg[7] ),
        .\M_AXI_ARSIZE_reg[2] (\M_AXI_ARSIZE_reg[2] ),
        .M_AXI_ARVALID_I(M_AXI_ARVALID_I),
        .M_AXI_ARVALID_I_reg(M_AXI_ARVALID_I_reg),
        .M_AXI_ARVALID_I_reg_0(M_AXI_ARVALID_I_reg_0),
        .\M_AXI_AWADDR_reg[31] (\M_AXI_AWADDR_reg[31] ),
        .\M_AXI_AWLEN_reg[7] (\M_AXI_AWLEN_reg[7] ),
        .\M_AXI_AWSIZE_reg[1] (\M_AXI_AWSIZE_reg[1] ),
        .M_AXI_AWVALID_I(M_AXI_AWVALID_I),
        .M_AXI_AWVALID_I_reg(M_AXI_AWVALID_I_reg),
        .\M_AXI_WDATA_reg[31] (\M_AXI_WDATA_reg[31] ),
        .\M_AXI_WSTRB_reg[3] (\M_AXI_WSTRB_reg[3] ),
        .M_AXI_WVALID_I_reg(M_AXI_WVALID_I_reg),
        .M_AXI_WVALID_I_reg_0(M_AXI_WVALID_I_reg_0),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 (\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 ),
        .S(S),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .\Use_FPGA.Almost_Full_Inst (\Use_FPGA.Almost_Full_Inst ),
        .\Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst (\Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst ),
        .\Use_FPGA.Full_Inst (aw_fifo_empty),
        .\Use_FPGA.Full_Inst_0 (\Use_FPGA.Full_Inst ),
        .\Use_FPGA.Full_Inst_1 (\Use_FPGA.Full_Inst_0 ),
        .\Use_FPGA.Full_Inst_2 (\Use_FPGA.Full_Inst_1 ),
        .\Use_FPGA.Full_Inst_3 (\Use_FPGA.Full_Inst_2 ),
        .in(in),
        .out(out),
        .pending_write_is_1(pending_write_is_1),
        .queue_push(queue_push),
        .queue_push29_out(queue_push29_out),
        .\read_req_info[0][Kind] (\read_req_info[0][Kind] ),
        .\read_req_info[0][Valid] (\read_req_info[0][Valid] ),
        .\read_req_ordered_info[0][Kind] (\read_req_ordered_info[0][Kind] ),
        .\read_req_ordered_info[0][Prot] (\read_req_ordered_info[0][Prot] ),
        .ri_fifo_full(ri_fifo_full),
        .update_done_ar(update_done_ar),
        .update_done_aw(update_done_aw),
        .update_done_aw_reg(update_done_aw_reg),
        .update_evict_busy_reg(update_evict_busy_reg),
        .\update_info_reg[Evict] (\update_info_reg[Evict] ),
        .\update_info_reg[Kind] (\update_info_reg[Kind] ),
        .\update_info_reg[Len][7] (\update_info_reg[Len][7] ),
        .\update_info_reg[Len][7]_0 (\update_info_reg[Len][7]_0 ),
        .\update_info_reg[Size][2] (\update_info_reg[Size][2] ),
        .update_need_ar(update_need_ar),
        .update_need_aw(update_need_aw),
        .write_data_almost_full(write_data_almost_full),
        .write_data_full(write_data_full),
        .\write_data_info[0][Last] (\write_data_info[0][Last] ),
        .\write_data_info[0][Valid] (\write_data_info[0][Valid] ),
        .\write_data_ordered_info[0][Last] (\write_data_ordered_info[0][Last] ),
        .\write_req_info[0][Line_Only] (\write_req_info[0][Line_Only] ),
        .\write_req_ordered_info[0][Kind] (\write_req_ordered_info[0][Kind] ),
        .\write_req_ordered_info[0][Prot] (\write_req_ordered_info[0][Prot] ),
        .\write_seq_id_reg[6]_0 (\write_seq_id_reg[6] ),
        .\write_seq_id_reg[6]_1 (\write_seq_id_reg[6]_0 ));
endmodule

(* ORIG_REF_NAME = "sc_front_end" *) 
module design_1_system_cache_0_0_sc_front_end
   (\access_data_info[0,0][Valid] ,
    \read_data_status[0,0][Hit_Pop] ,
    r_hit_push,
    \read_data_status[0,0][Hit_Full] ,
    I5,
    r_miss_fifo_full,
    r_push_safe,
    S0_AXI_RID,
    rip_last,
    S0_AXI_BID,
    \access_data_info[0,0][Last] ,
    \access_data_info[0,1][Valid] ,
    \read_data_status[0,1][Hit_Pop] ,
    r_hit_push_0,
    \read_data_status[0,1][Hit_Full] ,
    I5_1,
    r_miss_fifo_full_2,
    \Use_FPGA_2.S_AXI_RVALID_reg ,
    S1_AXI_RID,
    rip_last_3,
    S1_AXI_BID,
    \access_data_info[0,1][Last] ,
    Q,
    access_valid,
    \access_info[0][Wr] ,
    \access_info[0][Port_Num] ,
    \access_info[0][Kind] ,
    S0_AXI_RVALID,
    S0_AXI_BVALID,
    S1_AXI_RVALID,
    S1_AXI_BVALID,
    ctrl_ready,
    \access_info[0][Force_Hit] ,
    \access_info[0][Early] ,
    \access_info[0][Keep] ,
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3] ,
    r_miss_full_fifo_addr,
    S0_AXI_ARREADY,
    S0_AXI_WREADY,
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_0 ,
    \r_miss_read_fifo_addr_reg[1] ,
    S1_AXI_ARREADY,
    S1_AXI_WREADY,
    r_read_fifo_addr,
    r_write_fifo_addr,
    r_read_fifo_addr_4,
    \Use_FPGA_2.S_AXI_RVALID_reg_0 ,
    \Use_Reg_Ctrl.queue_exist_i_reg ,
    update_wr_miss_rs_last,
    \update_wma_strb_reg[0] ,
    \update_wma_data_reg[24] ,
    \update_wma_data_reg[24]_0 ,
    p_1_in3_in,
    p_2_in,
    p_3_in,
    D,
    lud_addr_pipeline_full0,
    lud_write_hit_done_reg,
    \The_Compare[0].sel_reg ,
    S,
    E,
    S_5,
    A,
    \The_Compare[0].sel_reg_6 ,
    \lu_mem_info_reg[Addr][31] ,
    A_7,
    \The_Compare[2].sel_reg ,
    A_N,
    DATA_INA,
    \lu_mem_info_reg[Addr_Stp][5] ,
    \lu_mem_info_reg[Size][2] ,
    lu_mem_write_alloc0,
    \lu_mem_info_reg[Allocate] ,
    \update_rd_offset_cnt_reg[0] ,
    S0_AXI_AWREADY,
    \update_rd_offset_cnt_reg[0]_0 ,
    S1_AXI_AWREADY,
    new_read_data_resp,
    \S1_AXI_RRESP[1] ,
    \Use_Reg_Ctrl.queue_exist_i_reg_0 ,
    \Use_Reg_Ctrl.queue_exist_i_reg_1 ,
    S0_AXI_BRESP,
    S1_AXI_BRESP,
    \lu_mem_info_reg[Len][7] ,
    \lu_mem_info_reg[Addr_Use][5] ,
    ACLK,
    ARESET,
    S0_AXI_WVALID,
    S_8,
    \lookup_read_data_new[0,0][Valid] ,
    S0_AXI_RREADY,
    \lookup_read_data_info[0,0][Valid] ,
    \update_read_data_info[0,0][Valid] ,
    S0_AXI_ARID,
    \lookup_read_data_new[0,0][Hit] ,
    S0_AXI_AWID,
    S0_AXI_WLAST,
    S1_AXI_WVALID,
    S_9,
    \lookup_read_data_new[0,1][Valid] ,
    S1_AXI_RREADY,
    \lookup_read_data_info[0,1][Valid] ,
    \update_read_data_info[0,1][Valid] ,
    S1_AXI_ARID,
    S1_AXI_AWID,
    S1_AXI_WLAST,
    ARESET_reg,
    A_10,
    S1_AXI_AWBAR,
    S0_AXI_AWBAR,
    lookup_piperun,
    \lu_check_info_reg[Port_Num][0] ,
    wr_port_data_ready,
    \ctrl_access[Internal_Cmd] ,
    S0_AXI_AWVALID,
    S0_AXI_ARVALID,
    S1_AXI_AWVALID,
    S1_AXI_ARVALID,
    S1_AXI_AWCACHE,
    S0_AXI_AWCACHE,
    S1_AXI_AWLEN,
    S0_AXI_AWLEN,
    S0_AXI_ARLEN,
    S1_AXI_ARLEN,
    S1_AXI_AWADDR,
    S0_AXI_AWADDR,
    S1_AXI_ARADDR,
    S0_AXI_ARADDR,
    \ctrl_access[Addr] ,
    S1_AXI_AWSIZE,
    S0_AXI_AWSIZE,
    S1_AXI_ARSIZE,
    S0_AXI_ARSIZE,
    \ctrl_access[Size] ,
    r_hit_last,
    r_miss_last,
    \bs_port_num_reg[0] ,
    update_ext_bresp_any,
    \r_hit_read_fifo_addr_reg[0] ,
    \r_miss_read_fifo_addr_reg[0] ,
    S1_AXI_ARBURST,
    S0_AXI_ARBURST,
    S1_AXI_AWBURST,
    S0_AXI_AWBURST,
    S0_AXI_ARSNOOP,
    S1_AXI_ARSNOOP,
    S0_AXI_BREADY,
    S1_AXI_BREADY,
    wm_port,
    wm_allow,
    lud_addr_pipeline_full,
    lud_reg_valid_reg,
    p_57_in,
    \lud_mem_port_one_hot_reg[1] ,
    \Use_FPGA_Flag_Hit.Full_Inst ,
    lu_check_valid,
    \lu_check_info_reg[Port_Num][0]_0 ,
    lud_reg_port_num,
    \lu_mem_info_reg[Port_Num][0] ,
    p_162_in,
    lookup_restart_mem,
    ctrl_init_done_i,
    \lu_mem_info_reg[Addr][11] ,
    \lu_check_tag_addr_reg[13] ,
    lud_reg_valid_reg_0,
    S1_AXI_ARCACHE,
    S0_AXI_ARCACHE,
    M0_AXI_RRESP,
    S0_AXI_WSTRB,
    S0_AXI_WDATA,
    \bs_src_reg[0] ,
    \bs_src_reg[0]_0 ,
    S1_AXI_WSTRB,
    S1_AXI_WDATA);
  output \access_data_info[0,0][Valid] ;
  output \read_data_status[0,0][Hit_Pop] ;
  output r_hit_push;
  output \read_data_status[0,0][Hit_Full] ;
  output I5;
  output r_miss_fifo_full;
  output r_push_safe;
  output [0:0]S0_AXI_RID;
  output rip_last;
  output [0:0]S0_AXI_BID;
  output \access_data_info[0,0][Last] ;
  output \access_data_info[0,1][Valid] ;
  output \read_data_status[0,1][Hit_Pop] ;
  output r_hit_push_0;
  output \read_data_status[0,1][Hit_Full] ;
  output I5_1;
  output r_miss_fifo_full_2;
  output \Use_FPGA_2.S_AXI_RVALID_reg ;
  output [0:0]S1_AXI_RID;
  output rip_last_3;
  output [0:0]S1_AXI_BID;
  output \access_data_info[0,1][Last] ;
  output Q;
  output access_valid;
  output \access_info[0][Wr] ;
  output [0:0]\access_info[0][Port_Num] ;
  output \access_info[0][Kind] ;
  output S0_AXI_RVALID;
  output S0_AXI_BVALID;
  output S1_AXI_RVALID;
  output S1_AXI_BVALID;
  output ctrl_ready;
  output \access_info[0][Force_Hit] ;
  output \access_info[0][Early] ;
  output \access_info[0][Keep] ;
  output [3:0]\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3] ;
  output [1:0]r_miss_full_fifo_addr;
  output S0_AXI_ARREADY;
  output S0_AXI_WREADY;
  output [3:0]\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_0 ;
  output [1:0]\r_miss_read_fifo_addr_reg[1] ;
  output S1_AXI_ARREADY;
  output S1_AXI_WREADY;
  output [3:0]r_read_fifo_addr;
  output [3:0]r_write_fifo_addr;
  output [3:0]r_read_fifo_addr_4;
  output [3:0]\Use_FPGA_2.S_AXI_RVALID_reg_0 ;
  output \Use_Reg_Ctrl.queue_exist_i_reg ;
  output update_wr_miss_rs_last;
  output \update_wma_strb_reg[0] ;
  output [3:0]\update_wma_data_reg[24] ;
  output [3:0]\update_wma_data_reg[24]_0 ;
  output p_1_in3_in;
  output p_2_in;
  output p_3_in;
  output [31:0]D;
  output lud_addr_pipeline_full0;
  output lud_write_hit_done_reg;
  output \The_Compare[0].sel_reg ;
  output S;
  output [0:0]E;
  output S_5;
  output A;
  output \The_Compare[0].sel_reg_6 ;
  output [31:0]\lu_mem_info_reg[Addr][31] ;
  output A_7;
  output \The_Compare[2].sel_reg ;
  output A_N;
  output [31:0]DATA_INA;
  output [5:0]\lu_mem_info_reg[Addr_Stp][5] ;
  output [2:0]\lu_mem_info_reg[Size][2] ;
  output lu_mem_write_alloc0;
  output \lu_mem_info_reg[Allocate] ;
  output \update_rd_offset_cnt_reg[0] ;
  output S0_AXI_AWREADY;
  output \update_rd_offset_cnt_reg[0]_0 ;
  output S1_AXI_AWREADY;
  output [1:0]new_read_data_resp;
  output [1:0]\S1_AXI_RRESP[1] ;
  output \Use_Reg_Ctrl.queue_exist_i_reg_0 ;
  output \Use_Reg_Ctrl.queue_exist_i_reg_1 ;
  output [1:0]S0_AXI_BRESP;
  output [1:0]S1_AXI_BRESP;
  output [7:0]\lu_mem_info_reg[Len][7] ;
  output [5:0]\lu_mem_info_reg[Addr_Use][5] ;
  input ACLK;
  input ARESET;
  input S0_AXI_WVALID;
  input S_8;
  input \lookup_read_data_new[0,0][Valid] ;
  input S0_AXI_RREADY;
  input \lookup_read_data_info[0,0][Valid] ;
  input \update_read_data_info[0,0][Valid] ;
  input [0:0]S0_AXI_ARID;
  input \lookup_read_data_new[0,0][Hit] ;
  input [0:0]S0_AXI_AWID;
  input S0_AXI_WLAST;
  input S1_AXI_WVALID;
  input S_9;
  input \lookup_read_data_new[0,1][Valid] ;
  input S1_AXI_RREADY;
  input \lookup_read_data_info[0,1][Valid] ;
  input \update_read_data_info[0,1][Valid] ;
  input [0:0]S1_AXI_ARID;
  input [0:0]S1_AXI_AWID;
  input S1_AXI_WLAST;
  input ARESET_reg;
  input A_10;
  input [0:0]S1_AXI_AWBAR;
  input [0:0]S0_AXI_AWBAR;
  input lookup_piperun;
  input \lu_check_info_reg[Port_Num][0] ;
  input wr_port_data_ready;
  input \ctrl_access[Internal_Cmd] ;
  input S0_AXI_AWVALID;
  input S0_AXI_ARVALID;
  input S1_AXI_AWVALID;
  input S1_AXI_ARVALID;
  input [2:0]S1_AXI_AWCACHE;
  input [2:0]S0_AXI_AWCACHE;
  input [7:0]S1_AXI_AWLEN;
  input [7:0]S0_AXI_AWLEN;
  input [7:0]S0_AXI_ARLEN;
  input [7:0]S1_AXI_ARLEN;
  input [31:0]S1_AXI_AWADDR;
  input [31:0]S0_AXI_AWADDR;
  input [31:0]S1_AXI_ARADDR;
  input [31:0]S0_AXI_ARADDR;
  input [8:0]\ctrl_access[Addr] ;
  input [2:0]S1_AXI_AWSIZE;
  input [2:0]S0_AXI_AWSIZE;
  input [2:0]S1_AXI_ARSIZE;
  input [2:0]S0_AXI_ARSIZE;
  input [0:0]\ctrl_access[Size] ;
  input r_hit_last;
  input r_miss_last;
  input \bs_port_num_reg[0] ;
  input update_ext_bresp_any;
  input \r_hit_read_fifo_addr_reg[0] ;
  input \r_miss_read_fifo_addr_reg[0] ;
  input [1:0]S1_AXI_ARBURST;
  input [1:0]S0_AXI_ARBURST;
  input [1:0]S1_AXI_AWBURST;
  input [1:0]S0_AXI_AWBURST;
  input [3:0]S0_AXI_ARSNOOP;
  input [3:0]S1_AXI_ARSNOOP;
  input S0_AXI_BREADY;
  input S1_AXI_BREADY;
  input wm_port;
  input wm_allow;
  input lud_addr_pipeline_full;
  input lud_reg_valid_reg;
  input p_57_in;
  input [0:0]\lud_mem_port_one_hot_reg[1] ;
  input \Use_FPGA_Flag_Hit.Full_Inst ;
  input lu_check_valid;
  input \lu_check_info_reg[Port_Num][0]_0 ;
  input lud_reg_port_num;
  input \lu_mem_info_reg[Port_Num][0] ;
  input p_162_in;
  input lookup_restart_mem;
  input ctrl_init_done_i;
  input [5:0]\lu_mem_info_reg[Addr][11] ;
  input [1:0]\lu_check_tag_addr_reg[13] ;
  input lud_reg_valid_reg_0;
  input [0:0]S1_AXI_ARCACHE;
  input [0:0]S0_AXI_ARCACHE;
  input [1:0]M0_AXI_RRESP;
  input [3:0]S0_AXI_WSTRB;
  input [31:0]S0_AXI_WDATA;
  input \bs_src_reg[0] ;
  input \bs_src_reg[0]_0 ;
  input [3:0]S1_AXI_WSTRB;
  input [31:0]S1_AXI_WDATA;

  wire A;
  wire ACLK;
  wire ARESET;
  wire ARESET_reg;
  wire A_10;
  wire A_7;
  wire A_N;
  wire [31:0]D;
  wire [31:0]DATA_INA;
  wire [0:0]E;
  wire \Gen_Block[0].ARB_n_3 ;
  wire \Gen_Block[0].ARB_n_4 ;
  wire I5;
  wire I5_1;
  wire [1:0]M0_AXI_RRESP;
  wire Q;
  wire S;
  wire [31:0]S0_AXI_ARADDR;
  wire [1:0]S0_AXI_ARBURST;
  wire [0:0]S0_AXI_ARCACHE;
  wire [0:0]S0_AXI_ARID;
  wire [7:0]S0_AXI_ARLEN;
  wire S0_AXI_ARREADY;
  wire [2:0]S0_AXI_ARSIZE;
  wire [3:0]S0_AXI_ARSNOOP;
  wire S0_AXI_ARVALID;
  wire [31:0]S0_AXI_AWADDR;
  wire [0:0]S0_AXI_AWBAR;
  wire [1:0]S0_AXI_AWBURST;
  wire [2:0]S0_AXI_AWCACHE;
  wire [0:0]S0_AXI_AWID;
  wire [7:0]S0_AXI_AWLEN;
  wire S0_AXI_AWREADY;
  wire [2:0]S0_AXI_AWSIZE;
  wire S0_AXI_AWVALID;
  wire [0:0]S0_AXI_BID;
  wire S0_AXI_BREADY;
  wire [1:0]S0_AXI_BRESP;
  wire S0_AXI_BVALID;
  wire [0:0]S0_AXI_RID;
  wire S0_AXI_RREADY;
  wire S0_AXI_RVALID;
  wire [31:0]S0_AXI_WDATA;
  wire S0_AXI_WLAST;
  wire S0_AXI_WREADY;
  wire [3:0]S0_AXI_WSTRB;
  wire S0_AXI_WVALID;
  wire [31:0]S1_AXI_ARADDR;
  wire [1:0]S1_AXI_ARBURST;
  wire [0:0]S1_AXI_ARCACHE;
  wire [0:0]S1_AXI_ARID;
  wire [7:0]S1_AXI_ARLEN;
  wire S1_AXI_ARREADY;
  wire [2:0]S1_AXI_ARSIZE;
  wire [3:0]S1_AXI_ARSNOOP;
  wire S1_AXI_ARVALID;
  wire [31:0]S1_AXI_AWADDR;
  wire [0:0]S1_AXI_AWBAR;
  wire [1:0]S1_AXI_AWBURST;
  wire [2:0]S1_AXI_AWCACHE;
  wire [0:0]S1_AXI_AWID;
  wire [7:0]S1_AXI_AWLEN;
  wire S1_AXI_AWREADY;
  wire [2:0]S1_AXI_AWSIZE;
  wire S1_AXI_AWVALID;
  wire [0:0]S1_AXI_BID;
  wire S1_AXI_BREADY;
  wire [1:0]S1_AXI_BRESP;
  wire S1_AXI_BVALID;
  wire [0:0]S1_AXI_RID;
  wire S1_AXI_RREADY;
  wire [1:0]\S1_AXI_RRESP[1] ;
  wire S1_AXI_RVALID;
  wire [31:0]S1_AXI_WDATA;
  wire S1_AXI_WLAST;
  wire S1_AXI_WREADY;
  wire [3:0]S1_AXI_WSTRB;
  wire S1_AXI_WVALID;
  wire S_5;
  wire S_8;
  wire S_9;
  wire \The_Compare[0].sel_reg ;
  wire \The_Compare[0].sel_reg_6 ;
  wire \The_Compare[2].sel_reg ;
  wire \Use_FPGA_2.S_AXI_RVALID_reg ;
  wire [3:0]\Use_FPGA_2.S_AXI_RVALID_reg_0 ;
  wire \Use_FPGA_Flag_Hit.Full_Inst ;
  wire \Use_Port_0.AXI_0_n_48 ;
  wire \Use_Port_1.AXI_1_n_106 ;
  wire \Use_Port_1.AXI_1_n_110 ;
  wire \Use_Port_1.AXI_1_n_68 ;
  wire [3:0]\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3] ;
  wire [3:0]\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_0 ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg_0 ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg_1 ;
  wire [31:0]\access_data_info[0,0][Data] ;
  wire \access_data_info[0,0][Last] ;
  wire \access_data_info[0,0][Valid] ;
  wire \access_data_info[0,1][Last] ;
  wire \access_data_info[0,1][Valid] ;
  wire \access_info[0][Early] ;
  wire \access_info[0][Force_Hit] ;
  wire \access_info[0][Keep] ;
  wire \access_info[0][Kind] ;
  wire [0:0]\access_info[0][Port_Num] ;
  wire \access_info[0][Wr] ;
  wire access_piperun;
  wire access_valid;
  wire \arbiter_bp_push_prt[0][Barrier] ;
  wire \arbiter_bp_push_prt[0][Early] ;
  wire \arbiter_bp_push_prt[0][Valid] ;
  wire \arbiter_bp_push_prt[1][Barrier] ;
  wire \arbiter_bp_push_prt[1][Early] ;
  wire \arbiter_bp_push_prt[1][Valid] ;
  wire \bs_port_num_reg[0] ;
  wire \bs_src_reg[0] ;
  wire \bs_src_reg[0]_0 ;
  wire [8:0]\ctrl_access[Addr] ;
  wire \ctrl_access[Internal_Cmd] ;
  wire [0:0]\ctrl_access[Size] ;
  wire ctrl_init_done_i;
  wire ctrl_ready;
  wire lookup_piperun;
  wire \lookup_read_data_info[0,0][Valid] ;
  wire \lookup_read_data_info[0,1][Valid] ;
  wire \lookup_read_data_new[0,0][Hit] ;
  wire \lookup_read_data_new[0,0][Valid] ;
  wire \lookup_read_data_new[0,1][Valid] ;
  wire lookup_restart_mem;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire \lu_check_info_reg[Port_Num][0] ;
  wire \lu_check_info_reg[Port_Num][0]_0 ;
  wire [1:0]\lu_check_tag_addr_reg[13] ;
  wire lu_check_valid;
  wire [5:0]\lu_mem_info_reg[Addr][11] ;
  wire [31:0]\lu_mem_info_reg[Addr][31] ;
  wire [5:0]\lu_mem_info_reg[Addr_Stp][5] ;
  wire [5:0]\lu_mem_info_reg[Addr_Use][5] ;
  wire \lu_mem_info_reg[Allocate] ;
  wire [7:0]\lu_mem_info_reg[Len][7] ;
  wire \lu_mem_info_reg[Port_Num][0] ;
  wire [2:0]\lu_mem_info_reg[Size][2] ;
  wire lu_mem_write_alloc0;
  wire lud_addr_pipeline_full;
  wire lud_addr_pipeline_full0;
  wire [0:0]\lud_mem_port_one_hot_reg[1] ;
  wire lud_reg_port_num;
  wire lud_reg_valid_reg;
  wire lud_reg_valid_reg_0;
  wire lud_write_hit_done_reg;
  wire [1:0]new_read_data_resp;
  wire p_162_in;
  wire p_1_in3_in;
  wire p_2_in;
  wire p_3_in;
  wire p_57_in;
  wire queue_full;
  wire queue_full_1;
  wire queue_push9_out;
  wire queue_push9_out_0;
  wire r_hit_last;
  wire r_hit_push;
  wire r_hit_push_0;
  wire \r_hit_read_fifo_addr_reg[0] ;
  wire r_miss_fifo_full;
  wire r_miss_fifo_full_2;
  wire [1:0]r_miss_full_fifo_addr;
  wire r_miss_last;
  wire \r_miss_read_fifo_addr_reg[0] ;
  wire [1:0]\r_miss_read_fifo_addr_reg[1] ;
  wire r_push_safe;
  wire [3:0]r_read_fifo_addr;
  wire [3:0]r_read_fifo_addr_4;
  wire [3:0]r_write_fifo_addr;
  wire \rd_port_access[0][Valid] ;
  wire \rd_port_access[1][Valid] ;
  wire rd_port_ready;
  wire rd_port_ready_cmb_0;
  wire rd_port_ready_cmb_1;
  wire \read_data_status[0,0][Hit_Full] ;
  wire \read_data_status[0,0][Hit_Pop] ;
  wire \read_data_status[0,1][Hit_Almost_Full] ;
  wire \read_data_status[0,1][Hit_Full] ;
  wire \read_data_status[0,1][Hit_Pop] ;
  wire \read_info_status[0,0][Almost_Full] ;
  wire \read_info_status[0,0][Full] ;
  wire read_req_ready;
  wire read_req_ready_2;
  wire rip_last;
  wire rip_last_3;
  wire update_ext_bresp_any;
  wire \update_rd_offset_cnt_reg[0] ;
  wire \update_rd_offset_cnt_reg[0]_0 ;
  wire \update_read_data_info[0,0][Valid] ;
  wire \update_read_data_info[0,1][Valid] ;
  wire [3:0]\update_wma_data_reg[24] ;
  wire [3:0]\update_wma_data_reg[24]_0 ;
  wire \update_wma_strb_reg[0] ;
  wire update_wr_miss_rs_last;
  wire wm_allow;
  wire wm_port;
  wire wr_port_data_ready;
  wire wr_port_ready;

  design_1_system_cache_0_0_sc_access \Gen_Block[0].ACS 
       (.ACLK(ACLK),
        .ARESET(ARESET),
        .access_piperun(access_piperun),
        .access_valid(access_valid),
        .lookup_piperun(lookup_piperun),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2));
  design_1_system_cache_0_0_sc_arbiter \Gen_Block[0].ARB 
       (.ACLK(ACLK),
        .ARESET(ARESET),
        .ARESET_reg(ARESET_reg),
        .A_10(A_10),
        .A_7(A_7),
        .E(E),
        .Q(Q),
        .S0_AXI_ARADDR(S0_AXI_ARADDR),
        .S0_AXI_ARBURST(S0_AXI_ARBURST),
        .S0_AXI_ARCACHE(S0_AXI_ARCACHE),
        .S0_AXI_ARLEN(S0_AXI_ARLEN),
        .S0_AXI_ARSIZE(S0_AXI_ARSIZE),
        .S0_AXI_ARSNOOP(S0_AXI_ARSNOOP),
        .S0_AXI_ARVALID(S0_AXI_ARVALID),
        .S0_AXI_AWADDR(S0_AXI_AWADDR),
        .S0_AXI_AWBAR(S0_AXI_AWBAR),
        .S0_AXI_AWBURST(S0_AXI_AWBURST),
        .S0_AXI_AWCACHE(S0_AXI_AWCACHE),
        .S0_AXI_AWLEN(S0_AXI_AWLEN),
        .S0_AXI_AWREADY(S0_AXI_AWREADY),
        .S0_AXI_AWSIZE(S0_AXI_AWSIZE),
        .S0_AXI_AWVALID(S0_AXI_AWVALID),
        .S1_AXI_ARADDR(S1_AXI_ARADDR),
        .S1_AXI_ARBURST(S1_AXI_ARBURST),
        .S1_AXI_ARCACHE(S1_AXI_ARCACHE),
        .S1_AXI_ARLEN(S1_AXI_ARLEN),
        .S1_AXI_ARSIZE(S1_AXI_ARSIZE),
        .S1_AXI_ARSNOOP(S1_AXI_ARSNOOP),
        .S1_AXI_ARVALID(S1_AXI_ARVALID),
        .S1_AXI_AWADDR(S1_AXI_AWADDR),
        .S1_AXI_AWBAR(S1_AXI_AWBAR),
        .S1_AXI_AWBURST(S1_AXI_AWBURST),
        .S1_AXI_AWCACHE(S1_AXI_AWCACHE),
        .S1_AXI_AWLEN(S1_AXI_AWLEN),
        .S1_AXI_AWREADY(S1_AXI_AWREADY),
        .S1_AXI_AWSIZE(S1_AXI_AWSIZE),
        .S1_AXI_AWVALID(S1_AXI_AWVALID),
        .\The_Compare[0].sel_reg_6 (\The_Compare[0].sel_reg_6 ),
        .\The_Compare[2].sel_reg (\The_Compare[2].sel_reg ),
        .\Use_FPGA.Almost_Full_Inst (\Gen_Block[0].ARB_n_3 ),
        .\Use_FPGA.Almost_Full_Inst_0 (\Gen_Block[0].ARB_n_4 ),
        .\Use_FPGA.Full_Inst (\Use_Port_1.AXI_1_n_106 ),
        .\Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst (\Use_Port_1.AXI_1_n_110 ),
        .\Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst_0 (\Use_Port_0.AXI_0_n_48 ),
        .\access_info[0][Early] (\access_info[0][Early] ),
        .\access_info[0][Keep] (\access_info[0][Keep] ),
        .\access_info[0][Kind] (\access_info[0][Kind] ),
        .\access_info[0][Port_Num] (\access_info[0][Port_Num] ),
        .\access_info[0][Wr] (\access_info[0][Wr] ),
        .access_piperun(access_piperun),
        .access_valid(access_valid),
        .\arbiter_bp_push_prt[0][Barrier] (\arbiter_bp_push_prt[0][Barrier] ),
        .\arbiter_bp_push_prt[0][Early] (\arbiter_bp_push_prt[0][Early] ),
        .\arbiter_bp_push_prt[0][Valid] (\arbiter_bp_push_prt[0][Valid] ),
        .\arbiter_bp_push_prt[1][Barrier] (\arbiter_bp_push_prt[1][Barrier] ),
        .\arbiter_bp_push_prt[1][Early] (\arbiter_bp_push_prt[1][Early] ),
        .\arbiter_bp_push_prt[1][Valid] (\arbiter_bp_push_prt[1][Valid] ),
        .\ctrl_access[Addr] (\ctrl_access[Addr] ),
        .\ctrl_access[Internal_Cmd] (\ctrl_access[Internal_Cmd] ),
        .\ctrl_access[Size] (\ctrl_access[Size] ),
        .ctrl_init_done_i(ctrl_init_done_i),
        .ctrl_ready_i_reg_0(ctrl_ready),
        .\lookup_read_data_new[0,0][Valid] (\lookup_read_data_new[0,0][Valid] ),
        .\lookup_read_data_new[0,1][Valid] (\lookup_read_data_new[0,1][Valid] ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .\lu_check_tag_addr_reg[13] (\lu_check_tag_addr_reg[13] ),
        .\lu_mem_info_reg[Addr][11] (\lu_mem_info_reg[Addr][11] ),
        .\lu_mem_info_reg[Addr][31] (\lu_mem_info_reg[Addr][31] ),
        .\lu_mem_info_reg[Addr_Stp][5] (\lu_mem_info_reg[Addr_Stp][5] ),
        .\lu_mem_info_reg[Addr_Use][5] (\lu_mem_info_reg[Addr_Use][5] ),
        .\lu_mem_info_reg[Allocate] (\lu_mem_info_reg[Allocate] ),
        .\lu_mem_info_reg[Force_Hit] (\access_info[0][Force_Hit] ),
        .\lu_mem_info_reg[Len][7] (\lu_mem_info_reg[Len][7] ),
        .\lu_mem_info_reg[Size][2] (\lu_mem_info_reg[Size][2] ),
        .lu_mem_write_alloc0(lu_mem_write_alloc0),
        .queue_full(queue_full),
        .queue_full_1(queue_full_1),
        .queue_push9_out(queue_push9_out_0),
        .queue_push9_out_0(queue_push9_out),
        .\rd_port_access[0][Valid] (\rd_port_access[0][Valid] ),
        .\rd_port_access[1][Valid] (\rd_port_access[1][Valid] ),
        .rd_port_ready(rd_port_ready),
        .rd_port_ready_cmb_0(rd_port_ready_cmb_0),
        .rd_port_ready_cmb_1(rd_port_ready_cmb_1),
        .read_req_ready(read_req_ready),
        .read_req_ready_2(read_req_ready_2),
        .wr_port_ready(wr_port_ready));
  design_1_system_cache_0_0_sc_s_axi_opt_interface \Use_Port_0.AXI_0 
       (.ACLK(ACLK),
        .ARESET(ARESET),
        .E(\read_data_status[0,0][Hit_Pop] ),
        .\Gen_Port_Ready[0].Use_Slow_Port.Rd_FF_Inst (\Gen_Block[0].ARB_n_3 ),
        .\Gen_Port_Ready[0].Use_Slow_Port.Wr_FF_Inst (\Gen_Block[0].ARB_n_4 ),
        .M0_AXI_RRESP(M0_AXI_RRESP),
        .Q(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3] ),
        .S0_AXI_ARID(S0_AXI_ARID),
        .S0_AXI_ARREADY(S0_AXI_ARREADY),
        .S0_AXI_ARVALID(S0_AXI_ARVALID),
        .S0_AXI_AWID(S0_AXI_AWID),
        .S0_AXI_AWVALID(S0_AXI_AWVALID),
        .S0_AXI_BID(S0_AXI_BID),
        .S0_AXI_BREADY(S0_AXI_BREADY),
        .S0_AXI_BRESP(S0_AXI_BRESP),
        .S0_AXI_BVALID(S0_AXI_BVALID),
        .S0_AXI_RID(S0_AXI_RID),
        .S0_AXI_RREADY(S0_AXI_RREADY),
        .S0_AXI_RVALID(S0_AXI_RVALID),
        .S0_AXI_WDATA(S0_AXI_WDATA),
        .S0_AXI_WLAST(S0_AXI_WLAST),
        .S0_AXI_WREADY(S0_AXI_WREADY),
        .S0_AXI_WSTRB(S0_AXI_WSTRB),
        .S0_AXI_WVALID(S0_AXI_WVALID),
        .S_8(S_8),
        .\The_Compare[0].sel_reg (\The_Compare[0].sel_reg ),
        .\Use_FPGA_Flag_Hit.Full_Inst (\Use_Port_1.AXI_1_n_68 ),
        .\Use_FPGA_Flag_Hit.Full_Inst_0 (\Use_FPGA_Flag_Hit.Full_Inst ),
        .\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0] (r_read_fifo_addr[0]),
        .\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[2] (r_read_fifo_addr[1]),
        .\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3] (I5),
        .\Use_Rd_Ctrl_Pipeline.ri_hit_reg (\read_data_status[0,1][Hit_Pop] ),
        .\Use_Reg_Ctrl.queue_exist_i_reg (\Use_Reg_Ctrl.queue_exist_i_reg_0 ),
        .\access_data_info[0,0][Last] (\access_data_info[0,0][Last] ),
        .access_piperun(access_piperun),
        .\arb_prohibit_quick_reg[0] (\Use_Port_0.AXI_0_n_48 ),
        .\arbiter_bp_push_prt[0][Barrier] (\arbiter_bp_push_prt[0][Barrier] ),
        .\arbiter_bp_push_prt[0][Early] (\arbiter_bp_push_prt[0][Early] ),
        .\arbiter_bp_push_prt[0][Valid] (\arbiter_bp_push_prt[0][Valid] ),
        .\bs_port_num_reg[0] (\bs_port_num_reg[0] ),
        .\bs_src_reg[0] (\bs_src_reg[0] ),
        .\bs_src_reg[0]_0 (\bs_src_reg[0]_0 ),
        .\lookup_read_data_info[0,0][Valid] (\lookup_read_data_info[0,0][Valid] ),
        .\lookup_read_data_new[0,0][Hit] (\lookup_read_data_new[0,0][Hit] ),
        .\lookup_read_data_new[0,0][Valid] (\lookup_read_data_new[0,0][Valid] ),
        .\lu_check_info_reg[Port_Num][0] (\lu_check_info_reg[Port_Num][0] ),
        .\lu_check_info_reg[Port_Num][0]_0 (\lu_check_info_reg[Port_Num][0]_0 ),
        .lud_addr_pipeline_full(lud_addr_pipeline_full),
        .lud_addr_pipeline_full0(lud_addr_pipeline_full0),
        .\lud_mem_port_one_hot_reg[1] (\lud_mem_port_one_hot_reg[1] ),
        .lud_reg_port_num(lud_reg_port_num),
        .lud_reg_valid_reg(lud_reg_valid_reg),
        .lud_reg_valid_reg_0(lud_reg_valid_reg_0),
        .new_read_data_resp(new_read_data_resp),
        .p_1_in3_in(p_1_in3_in),
        .p_2_in(p_2_in),
        .p_3_in(p_3_in),
        .p_57_in(p_57_in),
        .queue_full(queue_full),
        .queue_push9_out(queue_push9_out_0),
        .r_hit_last(r_hit_last),
        .\r_hit_write_fifo_addr_reg[3] (r_hit_push),
        .\r_hit_write_fifo_addr_reg[3]_0 (\read_data_status[0,0][Hit_Full] ),
        .\r_miss_fifo_len_reg[3] (r_miss_fifo_full),
        .r_miss_full_fifo_addr(r_miss_full_fifo_addr),
        .r_miss_last(r_miss_last),
        .r_push_safe(r_push_safe),
        .r_read_fifo_addr(r_read_fifo_addr[3:2]),
        .r_write_fifo_addr(r_write_fifo_addr),
        .\rd_port_access[0][Valid] (\rd_port_access[0][Valid] ),
        .rd_port_ready_cmb_0(rd_port_ready_cmb_0),
        .\read_data_status[0,1][Hit_Almost_Full] (\read_data_status[0,1][Hit_Almost_Full] ),
        .\read_info_status[0,0][Almost_Full] (\read_info_status[0,0][Almost_Full] ),
        .\read_info_status[0,0][Full] (\read_info_status[0,0][Full] ),
        .read_req_ready(read_req_ready),
        .rip_last(rip_last),
        .update_ext_bresp_any(update_ext_bresp_any),
        .\update_rd_offset_cnt_reg[0] (\update_rd_offset_cnt_reg[0] ),
        .\update_read_data_info[0,0][Valid] (\update_read_data_info[0,0][Valid] ),
        .\update_wma_data_reg[24] (\update_wma_data_reg[24] ),
        .\update_wma_data_reg[31] (\access_data_info[0,0][Data] ),
        .\update_wma_strb_reg[0] (\update_wma_strb_reg[0] ),
        .wm_allow(wm_allow),
        .wm_port(wm_port),
        .\wr_port_data_info_reg[0][BE][3]_0 (\update_wma_data_reg[24]_0 ),
        .wr_port_data_valid_i_reg_0(\access_data_info[0,0][Valid] ));
  design_1_system_cache_0_0_sc_s_axi_opt_interface__parameterized1 \Use_Port_1.AXI_1 
       (.A(A),
        .ACLK(ACLK),
        .ARESET(ARESET),
        .A_N(A_N),
        .D(D),
        .DATA_INA(DATA_INA),
        .E(\read_data_status[0,1][Hit_Pop] ),
        .M0_AXI_RRESP(M0_AXI_RRESP),
        .Q(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_0 ),
        .S(S),
        .S1_AXI_ARID(S1_AXI_ARID),
        .S1_AXI_ARREADY(S1_AXI_ARREADY),
        .S1_AXI_ARVALID(S1_AXI_ARVALID),
        .S1_AXI_AWID(S1_AXI_AWID),
        .S1_AXI_AWVALID(S1_AXI_AWVALID),
        .S1_AXI_BID(S1_AXI_BID),
        .S1_AXI_BREADY(S1_AXI_BREADY),
        .S1_AXI_BRESP(S1_AXI_BRESP),
        .S1_AXI_BVALID(S1_AXI_BVALID),
        .S1_AXI_RID(S1_AXI_RID),
        .S1_AXI_RREADY(S1_AXI_RREADY),
        .\S1_AXI_RRESP[1] (\S1_AXI_RRESP[1] ),
        .S1_AXI_RVALID(S1_AXI_RVALID),
        .S1_AXI_WDATA(S1_AXI_WDATA),
        .S1_AXI_WLAST(S1_AXI_WLAST),
        .S1_AXI_WREADY(S1_AXI_WREADY),
        .S1_AXI_WSTRB(S1_AXI_WSTRB),
        .S1_AXI_WVALID(S1_AXI_WVALID),
        .S_5(S_5),
        .S_9(S_9),
        .\Use_FPGA_2.S_AXI_RVALID_reg (\Use_FPGA_2.S_AXI_RVALID_reg ),
        .\Use_FPGA_2.S_AXI_RVALID_reg_0 (\Use_FPGA_2.S_AXI_RVALID_reg_0 ),
        .\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0] (r_read_fifo_addr_4[0]),
        .\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[2] (r_read_fifo_addr_4[1]),
        .\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3] (I5_1),
        .\Use_Reg_Ctrl.queue_exist_i_reg (\Use_Reg_Ctrl.queue_exist_i_reg ),
        .\Use_Reg_Ctrl.queue_exist_i_reg_0 (\Use_Reg_Ctrl.queue_exist_i_reg_1 ),
        .\access_data_info[0,0][Last] (\access_data_info[0,0][Last] ),
        .\access_data_info[0,0][Valid] (\access_data_info[0,0][Valid] ),
        .\access_data_info[0,1][Last] (\access_data_info[0,1][Last] ),
        .access_piperun(access_piperun),
        .\arb_prohibit_quick_reg[1] (\Use_Port_1.AXI_1_n_110 ),
        .\arbiter_bp_push_prt[1][Barrier] (\arbiter_bp_push_prt[1][Barrier] ),
        .\arbiter_bp_push_prt[1][Early] (\arbiter_bp_push_prt[1][Early] ),
        .\arbiter_bp_push_prt[1][Valid] (\arbiter_bp_push_prt[1][Valid] ),
        .\bs_port_num_reg[0] (\bs_port_num_reg[0] ),
        .\bs_src_reg[0] (\bs_src_reg[0] ),
        .\bs_src_reg[0]_0 (\bs_src_reg[0]_0 ),
        .dvm_2nd_part_reg(\Use_Port_1.AXI_1_n_106 ),
        .\lookup_read_data_info[0,1][Valid] (\lookup_read_data_info[0,1][Valid] ),
        .\lookup_read_data_new[0,0][Hit] (\lookup_read_data_new[0,0][Hit] ),
        .\lookup_read_data_new[0,1][Valid] (\lookup_read_data_new[0,1][Valid] ),
        .lookup_restart_mem(lookup_restart_mem),
        .\lu_check_info_reg[Port_Num][0] (\lu_check_info_reg[Port_Num][0]_0 ),
        .lu_check_valid(lu_check_valid),
        .\lu_mem_info_reg[Port_Num][0] (\lu_mem_info_reg[Port_Num][0] ),
        .lud_addr_pipeline_full_reg(\Use_Port_1.AXI_1_n_68 ),
        .lud_reg_port_num(lud_reg_port_num),
        .lud_write_hit_done_reg(lud_write_hit_done_reg),
        .p_162_in(p_162_in),
        .queue_full(queue_full_1),
        .queue_push9_out(queue_push9_out),
        .\r_hit_read_fifo_addr_reg[0] (\r_hit_read_fifo_addr_reg[0] ),
        .\r_hit_write_fifo_addr_reg[3] (r_hit_push_0),
        .\r_hit_write_fifo_addr_reg[3]_0 (\read_data_status[0,1][Hit_Full] ),
        .\r_miss_fifo_len_reg[3] (r_miss_fifo_full_2),
        .\r_miss_read_fifo_addr_reg[0] (\r_miss_read_fifo_addr_reg[0] ),
        .\r_miss_read_fifo_addr_reg[1] (\r_miss_read_fifo_addr_reg[1] ),
        .r_read_fifo_addr_4(r_read_fifo_addr_4[3:2]),
        .\rd_port_access[1][Valid] (\rd_port_access[1][Valid] ),
        .rd_port_ready(rd_port_ready),
        .rd_port_ready_cmb_1(rd_port_ready_cmb_1),
        .\read_data_status[0,0][Hit_Full] (\read_data_status[0,0][Hit_Full] ),
        .\read_data_status[0,1][Hit_Almost_Full] (\read_data_status[0,1][Hit_Almost_Full] ),
        .\read_info_status[0,0][Almost_Full] (\read_info_status[0,0][Almost_Full] ),
        .\read_info_status[0,0][Full] (\read_info_status[0,0][Full] ),
        .read_req_ready(read_req_ready_2),
        .rip_last_3(rip_last_3),
        .update_ext_bresp_any(update_ext_bresp_any),
        .\update_rd_offset_cnt_reg[0] (\update_rd_offset_cnt_reg[0]_0 ),
        .\update_read_data_info[0,1][Valid] (\update_read_data_info[0,1][Valid] ),
        .\update_wma_data_reg[24] (\update_wma_data_reg[24]_0 ),
        .update_wr_miss_rs_last(update_wr_miss_rs_last),
        .wm_port(wm_port),
        .\wr_port_data_info_reg[0][Data][31]_0 (\access_data_info[0,0][Data] ),
        .wr_port_data_ready(wr_port_data_ready),
        .wr_port_data_valid_i_reg_0(\access_data_info[0,1][Valid] ),
        .wr_port_ready(wr_port_ready));
endmodule

(* ORIG_REF_NAME = "sc_lookup" *) 
module design_1_system_cache_0_0_sc_lookup
   (lookup_piperun,
    lookup_fetch_piperun,
    lookup_mem_piperun,
    lu_check_valid_delayed_reg_0,
    lud_mem_conflict,
    update_valid,
    update_need_bs,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    \write_req_info[0][Internal] ,
    update_need_tag_write,
    WEBWE,
    ENA,
    lud_reg_valid_reg_0,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_0 ,
    \lu_check_info_reg[Port_Num][0]_0 ,
    lud_step_delayed_restart_reg_0,
    \update_info_reg[Kind]_0 ,
    lookup_wm_allow_write,
    update_way,
    \write_req_info[0][Port_Num] ,
    \update_info_reg[Port_Num][0]_0 ,
    \update_info[Allocate] ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ,
    \update_info[Kind] ,
    \update_info[Wr] ,
    \update_info[Internal_Cmd] ,
    \update_info[Early] ,
    update_miss,
    update_read_miss,
    \lu_check_tag_addr_reg[6]_0 ,
    \lu_check_tag_addr_reg[7]_0 ,
    \lu_check_tag_addr_reg[8]_0 ,
    \lu_check_tag_addr_reg[9]_0 ,
    \lu_check_tag_addr_reg[10]_0 ,
    \lu_check_tag_addr_reg[11]_0 ,
    B_Vec,
    D,
    ADDRARDADDR,
    \lud_reg_port_num_reg[0]_0 ,
    lud_mem_waiting_for_pipe_reg_0,
    lookup_offset_first,
    \lud_reg_port_num_reg[0]_1 ,
    new_read_data_last,
    S,
    wr_port_data_valid_i_reg,
    \Use_FPGA_2.S_AXI_RVALID_reg ,
    S_0,
    wr_port_data_ready,
    new_read_data_word,
    \S0_AXI_RDATA[30] ,
    \bs_fifo_mem_reg[0][Src][1] ,
    DATA_INB,
    \read_req_info[0][Kind] ,
    ud_new_tag_valid2,
    S_1,
    S_3,
    \The_Compare[0].sel_reg_4 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 ,
    A,
    \The_Compare[2].sel_reg_5 ,
    \ri_len_reg[7] ,
    \M_AXI_ARSIZE_reg[2] ,
    \M_AXI_ARLEN_reg[7] ,
    \M_AXI_AWLEN_reg[7] ,
    \M_AXI_AWSIZE_reg[1] ,
    \M_AXI_AWADDR_reg[31] ,
    \bs_fifo_mem_reg[0][Src][0] ,
    lud_reg_valid_reg_1,
    lud_addr_pipeline_full_reg_0,
    lookup_push_write_miss,
    lookup_restart_mem,
    lud_addr_pipeline_full_reg_1,
    \lookup_read_data_new[0,0][Hit] ,
    \lookup_read_data_new[0,1][Valid] ,
    \lookup_read_data_new[0,0][Valid] ,
    \update_info_reg[Addr][5]_0 ,
    update_first_write_hit_reg_0,
    lookup_wm_will_use,
    lookup_wm_evict,
    p_162_in,
    DIBDI,
    \update_info_reg[Addr_Use][5]_0 ,
    ADDRA,
    \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ,
    \lu_check_valid_bits_reg[1]_0 ,
    lu_mem_protect_conflict_reg_0,
    WEA,
    lookup_wm_allocate,
    \update_info_reg[Addr_Stp][5]_0 ,
    \lu_mem_info_reg[Port_Num][0]_0 ,
    in,
    \M_AXI_AWBURST_reg[1] ,
    \lookup_read_data_info[0,1][Valid] ,
    \lookup_read_data_info[0,0][Valid] ,
    lu_mem_removed_way_hold,
    \ri_use_reg[5] ,
    \ri_stp_reg[5] ,
    ACLK,
    ARESET,
    access_valid,
    S_2,
    update_piperun,
    update_write_miss_full,
    \The_Compare[0].sel_reg ,
    A_3,
    \The_Compare[2].sel_reg ,
    S_4,
    \The_Compare[0].sel_reg_5 ,
    A_6,
    S_6,
    S_7,
    S_8,
    A_N,
    \update_release_tag_reg[Valid] ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 ,
    \update_release_tag_reg[Valid]_0 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_1 ,
    \access_info[0][Port_Num] ,
    \access_info[0][Wr] ,
    \access_info[0][Keep] ,
    lud_addr_pipeline_full0,
    \access_info[0][Early] ,
    \access_info[0][Kind] ,
    \arb_access_i_reg[Allocate] ,
    \access_info[0][Force_Hit] ,
    Q,
    lu_mem_write_alloc0,
    r_hit_push,
    \update_read_data_info[0,0][Last] ,
    r_hit_push_7,
    M0_AXI_RDATA,
    \wm_port_reg[0] ,
    p_138_in,
    \bs_fifo_mem_reg[0][Src][1]_0 ,
    queue_push120_out,
    ri_merge_reg,
    update_readback_available,
    update_done_tag_write_reg,
    \read_data_status[0,1][Hit_Pop] ,
    \read_data_status[0,0][Hit_Pop] ,
    \update_release_tag_reg[Addr][11] ,
    \read_data_status[0,1][Hit_Full] ,
    \access_data_info[0,0][Valid] ,
    \access_data_info[0,1][Valid] ,
    lru_check_next_way,
    lud_mem_waiting_for_pipe_reg_1,
    \read_data_status[0,0][Hit_Full] ,
    update_tag_conflict,
    \update_release_tag_reg[Valid]_1 ,
    DATA_OUTA,
    lu_mem_releasing_lock,
    \update_release_tag_reg[Addr][10] ,
    update_lock_release,
    update_write_miss_busy,
    \wr_port_data_info_reg[0][BE][3] ,
    \wr_port_data_info_reg[0][BE][3]_0 ,
    wr_port_data_last_i_reg,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_2 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_3 ,
    \arb_access_i_reg[Len][7] ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_1 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 ,
    \arb_access_i_reg[Size][1] ,
    \arb_access_i_reg[Size][1]_0 ,
    \update_release_tag[Valid] ,
    \arb_access_i_reg[Size][2] ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4);
  output lookup_piperun;
  output lookup_fetch_piperun;
  output lookup_mem_piperun;
  output lu_check_valid_delayed_reg_0;
  output lud_mem_conflict;
  output update_valid;
  output update_need_bs;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  output \write_req_info[0][Internal] ;
  output update_need_tag_write;
  output [0:0]WEBWE;
  output ENA;
  output lud_reg_valid_reg_0;
  output \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 ;
  output \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_0 ;
  output \lu_check_info_reg[Port_Num][0]_0 ;
  output lud_step_delayed_restart_reg_0;
  output \update_info_reg[Kind]_0 ;
  output lookup_wm_allow_write;
  output update_way;
  output [0:0]\write_req_info[0][Port_Num] ;
  output \update_info_reg[Port_Num][0]_0 ;
  output \update_info[Allocate] ;
  output \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ;
  output \update_info[Kind] ;
  output \update_info[Wr] ;
  output \update_info[Internal_Cmd] ;
  output \update_info[Early] ;
  output update_miss;
  output update_read_miss;
  output \lu_check_tag_addr_reg[6]_0 ;
  output \lu_check_tag_addr_reg[7]_0 ;
  output \lu_check_tag_addr_reg[8]_0 ;
  output \lu_check_tag_addr_reg[9]_0 ;
  output \lu_check_tag_addr_reg[10]_0 ;
  output \lu_check_tag_addr_reg[11]_0 ;
  output [1:0]B_Vec;
  output [7:0]D;
  output [11:0]ADDRARDADDR;
  output \lud_reg_port_num_reg[0]_0 ;
  output lud_mem_waiting_for_pipe_reg_0;
  output lookup_offset_first;
  output \lud_reg_port_num_reg[0]_1 ;
  output new_read_data_last;
  output S;
  output wr_port_data_valid_i_reg;
  output \Use_FPGA_2.S_AXI_RVALID_reg ;
  output S_0;
  output wr_port_data_ready;
  output [31:0]new_read_data_word;
  output [31:0]\S0_AXI_RDATA[30] ;
  output \bs_fifo_mem_reg[0][Src][1] ;
  output [2:0]DATA_INB;
  output \read_req_info[0][Kind] ;
  output ud_new_tag_valid2;
  output S_1;
  output S_3;
  output \The_Compare[0].sel_reg_4 ;
  output [31:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 ;
  output A;
  output \The_Compare[2].sel_reg_5 ;
  output [7:0]\ri_len_reg[7] ;
  output [2:0]\M_AXI_ARSIZE_reg[2] ;
  output [7:0]\M_AXI_ARLEN_reg[7] ;
  output [7:0]\M_AXI_AWLEN_reg[7] ;
  output [1:0]\M_AXI_AWSIZE_reg[1] ;
  output [23:0]\M_AXI_AWADDR_reg[31] ;
  output \bs_fifo_mem_reg[0][Src][0] ;
  output lud_reg_valid_reg_1;
  output lud_addr_pipeline_full_reg_0;
  output lookup_push_write_miss;
  output lookup_restart_mem;
  output lud_addr_pipeline_full_reg_1;
  output \lookup_read_data_new[0,0][Hit] ;
  output \lookup_read_data_new[0,1][Valid] ;
  output \lookup_read_data_new[0,0][Valid] ;
  output [5:0]\update_info_reg[Addr][5]_0 ;
  output [0:0]update_first_write_hit_reg_0;
  output lookup_wm_will_use;
  output lookup_wm_evict;
  output p_162_in;
  output [0:0]DIBDI;
  output [5:0]\update_info_reg[Addr_Use][5]_0 ;
  output [7:0]ADDRA;
  output \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ;
  output \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  output \lu_check_valid_bits_reg[1]_0 ;
  output [1:0]lu_mem_protect_conflict_reg_0;
  output [3:0]WEA;
  output lookup_wm_allocate;
  output [5:0]\update_info_reg[Addr_Stp][5]_0 ;
  output \lu_mem_info_reg[Port_Num][0]_0 ;
  output [1:0]in;
  output \M_AXI_AWBURST_reg[1] ;
  output \lookup_read_data_info[0,1][Valid] ;
  output \lookup_read_data_info[0,0][Valid] ;
  output [1:0]lu_mem_removed_way_hold;
  output [5:0]\ri_use_reg[5] ;
  output [5:0]\ri_stp_reg[5] ;
  input ACLK;
  input ARESET;
  input access_valid;
  input S_2;
  input update_piperun;
  input update_write_miss_full;
  input \The_Compare[0].sel_reg ;
  input A_3;
  input \The_Compare[2].sel_reg ;
  input S_4;
  input \The_Compare[0].sel_reg_5 ;
  input A_6;
  input S_6;
  input S_7;
  input S_8;
  input A_N;
  input \update_release_tag_reg[Valid] ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 ;
  input \update_release_tag_reg[Valid]_0 ;
  input \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_1 ;
  input [0:0]\access_info[0][Port_Num] ;
  input \access_info[0][Wr] ;
  input \access_info[0][Keep] ;
  input lud_addr_pipeline_full0;
  input \access_info[0][Early] ;
  input \access_info[0][Kind] ;
  input \arb_access_i_reg[Allocate] ;
  input \access_info[0][Force_Hit] ;
  input [31:0]Q;
  input lu_mem_write_alloc0;
  input r_hit_push;
  input \update_read_data_info[0,0][Last] ;
  input r_hit_push_7;
  input [31:0]M0_AXI_RDATA;
  input \wm_port_reg[0] ;
  input p_138_in;
  input [1:0]\bs_fifo_mem_reg[0][Src][1]_0 ;
  input queue_push120_out;
  input ri_merge_reg;
  input update_readback_available;
  input update_done_tag_write_reg;
  input \read_data_status[0,1][Hit_Pop] ;
  input \read_data_status[0,0][Hit_Pop] ;
  input \update_release_tag_reg[Addr][11] ;
  input \read_data_status[0,1][Hit_Full] ;
  input \access_data_info[0,0][Valid] ;
  input \access_data_info[0,1][Valid] ;
  input lru_check_next_way;
  input lud_mem_waiting_for_pipe_reg_1;
  input \read_data_status[0,0][Hit_Full] ;
  input update_tag_conflict;
  input [1:0]\update_release_tag_reg[Valid]_1 ;
  input [41:0]DATA_OUTA;
  input [1:0]lu_mem_releasing_lock;
  input [1:0]\update_release_tag_reg[Addr][10] ;
  input update_lock_release;
  input [1:0]update_write_miss_busy;
  input [3:0]\wr_port_data_info_reg[0][BE][3] ;
  input [3:0]\wr_port_data_info_reg[0][BE][3]_0 ;
  input wr_port_data_last_i_reg;
  input [1:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_2 ;
  input [1:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_3 ;
  input [7:0]\arb_access_i_reg[Len][7] ;
  input [31:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_1 ;
  input [31:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 ;
  input [5:0]\arb_access_i_reg[Size][1] ;
  input [5:0]\arb_access_i_reg[Size][1]_0 ;
  input \update_release_tag[Valid] ;
  input [2:0]\arb_access_i_reg[Size][2] ;
  input lopt;
  output lopt_1;
  input lopt_2;
  output lopt_3;
  output lopt_4;

  wire A;
  wire A121_out;
  wire A134_out;
  wire A141_out;
  wire A149_out;
  wire A21_out;
  wire A32_out;
  wire ACLK;
  wire [7:0]ADDRA;
  wire [11:0]ADDRARDADDR;
  wire ARESET;
  wire ARESET_I;
  wire A_3;
  wire A_6;
  wire A_N;
  wire A_N160_out;
  wire [1:0]B_Vec;
  wire Chk_Valid_Inst_n_10;
  wire Chk_Valid_Inst_n_11;
  wire Chk_Valid_Inst_n_12;
  wire Chk_Valid_Inst_n_13;
  wire Chk_Valid_Inst_n_18;
  wire Chk_Valid_Inst_n_23;
  wire Chk_Valid_Inst_n_25;
  wire Chk_Valid_Inst_n_28;
  wire Chk_Valid_Inst_n_29;
  wire Chk_Valid_Inst_n_33;
  wire Chk_Valid_Inst_n_38;
  wire Chk_Valid_Inst_n_39;
  wire Chk_Valid_Inst_n_40;
  wire Chk_Valid_Inst_n_5;
  wire Chk_Valid_Inst_n_53;
  wire Chk_Valid_Inst_n_6;
  wire Chk_Valid_Inst_n_70;
  wire Chk_Valid_Inst_n_71;
  wire Chk_Valid_Inst_n_72;
  wire Chk_Valid_Inst_n_74;
  wire Chk_Valid_Inst_n_8;
  wire Chk_Valid_Inst_n_81;
  wire Chk_Valid_Inst_n_82;
  wire Chk_Valid_Inst_n_83;
  wire Chk_Valid_Inst_n_84;
  wire Chk_Valid_Inst_n_85;
  wire Chk_Valid_Inst_n_86;
  wire Chk_Valid_Inst_n_87;
  wire Chk_Valid_Inst_n_88;
  wire Chk_Valid_Inst_n_89;
  wire Chk_Valid_Inst_n_9;
  wire Chk_Valid_Inst_n_90;
  wire Chk_Valid_Inst_n_91;
  wire Chk_Valid_Inst_n_92;
  wire Chk_Valid_Inst_n_93;
  wire Chk_Valid_Inst_n_94;
  wire Chk_Valid_Inst_n_95;
  wire Chk_Valid_Inst_n_96;
  wire Chk_Valid_Inst_n_97;
  wire [7:0]D;
  wire [2:0]DATA_INB;
  wire [41:0]DATA_OUTA;
  wire [0:0]DIBDI;
  wire ENA;
  wire \Gen_Block[0].UD/read_req_kind_i1 ;
  wire \Gen_Set_Cachehit_Mem[0].LU_Tag_Compare_Inst1_n_1 ;
  wire \Gen_Set_Cachehit_Mem[0].LU_Tag_Compare_Inst1_n_2 ;
  wire \Gen_Set_Cachehit_Mem[0].LU_Tag_Compare_Inst1_n_3 ;
  wire \Gen_Set_Cachehit_Mem[0].LU_Tag_Compare_Inst1_n_4 ;
  wire \Gen_Set_Cachehit_Mem[0].LU_Tag_Compare_Inst1_n_5 ;
  wire \Gen_Set_Cachehit_Mem[0].LU_Tag_Compare_Inst1_n_6 ;
  wire \Gen_Set_Cachehit_Mem[0].LU_Tag_Or_Inst3_n_1 ;
  wire LUD_Addr_PR_Or_Inst2_n_1;
  wire LUD_Mem_PR_And_Inst1_n_3;
  wire LUD_Mem_PR_And_Inst1_n_4;
  wire LUD_Mem_PR_And_Inst1_n_5;
  wire LUD_Mem_PR_And_Inst1_n_6;
  wire LUD_Mem_PR_And_Inst1_n_7;
  wire LUD_Step_PR_And_Inst1_n_1;
  wire LU_Check_PR_And_Inst2_n_1;
  wire LU_Check_PR_And_Inst2_n_2;
  wire LU_Check_PR_And_Inst2_n_3;
  wire LU_Check_PR_And_Inst2_n_4;
  wire LU_Check_PR_And_Inst2_n_5;
  wire LU_Check_TagConf_And_Inst1_n_0;
  wire LU_Check_TagConf_And_Inst1_n_1;
  wire LU_DS_RS_And_Inst5_n_0;
  wire LU_PC_And_Inst5_n_1;
  wire LU_PC_And_Inst5_n_17;
  wire LU_PC_And_Inst5_n_2;
  wire LU_PC_And_Inst5_n_3;
  wire LU_PC_And_Inst5_n_6;
  wire [31:0]M0_AXI_RDATA;
  wire [7:0]\M_AXI_ARLEN_reg[7] ;
  wire [2:0]\M_AXI_ARSIZE_reg[2] ;
  wire [23:0]\M_AXI_AWADDR_reg[31] ;
  wire \M_AXI_AWBURST_reg[1] ;
  wire [7:0]\M_AXI_AWLEN_reg[7] ;
  wire [1:0]\M_AXI_AWSIZE_reg[1] ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ;
  wire [31:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_1 ;
  wire [1:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_2 ;
  wire [1:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_3 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_0 ;
  wire [31:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_1 ;
  wire [31:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 ;
  wire Par_Dirty_Inst_n_0;
  wire Par_Dirty_Inst_n_1;
  wire Par_Dirty_Inst_n_10;
  wire Par_Dirty_Inst_n_11;
  wire Par_Dirty_Inst_n_12;
  wire Par_Dirty_Inst_n_13;
  wire Par_Dirty_Inst_n_14;
  wire Par_Dirty_Inst_n_15;
  wire Par_Dirty_Inst_n_16;
  wire Par_Dirty_Inst_n_17;
  wire Par_Dirty_Inst_n_18;
  wire Par_Dirty_Inst_n_19;
  wire Par_Dirty_Inst_n_2;
  wire Par_Dirty_Inst_n_20;
  wire Par_Dirty_Inst_n_21;
  wire Par_Dirty_Inst_n_22;
  wire Par_Dirty_Inst_n_23;
  wire Par_Dirty_Inst_n_24;
  wire Par_Dirty_Inst_n_25;
  wire Par_Dirty_Inst_n_28;
  wire Par_Dirty_Inst_n_3;
  wire Par_Dirty_Inst_n_4;
  wire Par_Dirty_Inst_n_5;
  wire Par_Dirty_Inst_n_6;
  wire Par_Dirty_Inst_n_7;
  wire Par_Dirty_Inst_n_8;
  wire Par_Dirty_Inst_n_9;
  wire Par_Reuse_Inst_n_0;
  wire Par_Reuse_Inst_n_1;
  wire [31:0]Q;
  wire S;
  wire [31:0]\S0_AXI_RDATA[30] ;
  wire SRI;
  wire SRI_0;
  wire SRI_11;
  wire S_0;
  wire S_1;
  wire S_10;
  wire S_12;
  wire S_13;
  wire S_14;
  wire S_2;
  wire S_3;
  wire S_4;
  wire S_5;
  wire S_6;
  wire S_7;
  wire S_8;
  wire S_9;
  wire TAG_Need_Inst_n_3;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ;
  wire \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Compare[0].carry_and_I1/S ;
  wire \The_Compare[0].sel_reg ;
  wire \The_Compare[0].sel_reg_4 ;
  wire \The_Compare[0].sel_reg_5 ;
  wire \The_Compare[1].carry_or_I1/S ;
  wire \The_Compare[2].sel_reg ;
  wire \The_Compare[2].sel_reg_5 ;
  wire USpec_Inst_n_1;
  wire \Use_FPGA_2.S_AXI_RVALID_reg ;
  wire [3:0]WEA;
  wire [0:0]WEBWE;
  wire \access_data_info[0,0][Valid] ;
  wire \access_data_info[0,1][Valid] ;
  wire \access_info[0][Early] ;
  wire \access_info[0][Force_Hit] ;
  wire \access_info[0][Keep] ;
  wire \access_info[0][Kind] ;
  wire [0:0]\access_info[0][Port_Num] ;
  wire \access_info[0][Wr] ;
  wire access_valid;
  wire \ar_fifo_mem_reg[15][Kind][-1111111111]_srl16_i_3_n_0 ;
  wire \arb_access_i_reg[Allocate] ;
  wire [7:0]\arb_access_i_reg[Len][7] ;
  wire [5:0]\arb_access_i_reg[Size][1] ;
  wire [5:0]\arb_access_i_reg[Size][1]_0 ;
  wire [2:0]\arb_access_i_reg[Size][2] ;
  wire \aw_fifo_mem_reg[15][Len][2]_srl16_i_2_n_0 ;
  wire \aw_fifo_mem_reg[15][Len][3]_srl16_i_2_n_0 ;
  wire \aw_fifo_mem_reg[15][Len][3]_srl16_i_3_n_0 ;
  wire \aw_fifo_mem_reg[15][Len][3]_srl16_i_4_n_0 ;
  wire \aw_fifo_mem_reg[15][Len][4]_srl16_i_2_n_0 ;
  wire \aw_fifo_mem_reg[15][Len][5]_srl16_i_2_n_0 ;
  wire \aw_fifo_mem_reg[15][Len][6]_srl16_i_2_n_0 ;
  wire \aw_fifo_mem_reg[15][Len][7]_srl16_i_2_n_0 ;
  wire \bs_fifo_mem_reg[0][Src][0] ;
  wire \bs_fifo_mem_reg[0][Src][1] ;
  wire [1:0]\bs_fifo_mem_reg[0][Src][1]_0 ;
  wire dirty_bit;
  wire dirty_bit_miss;
  wire dirty_bit_miss_valid;
  wire dirty_bit_valid;
  wire dirty_miss_valid;
  wire filtered_protection_bit;
  wire [1:0]in;
  wire lookup_access_data_late;
  wire lookup_data_en_ii_2;
  wire lookup_data_hit_pre_stall;
  wire lookup_data_hit_stall;
  wire lookup_fetch_piperun;
  wire lookup_first_write_hit;
  wire lookup_hit_carry;
  wire lookup_io_and_conflict_stall;
  wire lookup_io_data_stall;
  wire lookup_io_stall_carry;
  wire lookup_io_stall_carry_no_wait;
  wire lookup_io_stall_hit_carry;
  wire lookup_io_stall_hit_carry_no_last;
  wire lookup_io_stall_pre_valid;
  wire lookup_io_stall_valid;
  wire lookup_last_beat;
  wire lookup_md_or_wm;
  wire lookup_md_or_wm_or_whne;
  wire lookup_md_or_wm_or_whne2;
  wire lookup_md_wm_whne_valid;
  wire lookup_mem_piperun;
  wire lookup_miss;
  wire lookup_miss_dirty;
  wire lookup_miss_dirty_no_clean;
  wire lookup_miss_dirty_pre;
  wire lookup_next_is_last_beat;
  wire lookup_next_is_last_beat_reg_n_0;
  wire [5:0]lookup_offset_cnt;
  wire [5:0]lookup_offset_cnt_cmb;
  wire lookup_offset_cnt_cmb0_carry__0_n_3;
  wire lookup_offset_cnt_cmb0_carry__0_n_6;
  wire lookup_offset_cnt_cmb0_carry_n_0;
  wire lookup_offset_cnt_cmb0_carry_n_1;
  wire lookup_offset_cnt_cmb0_carry_n_2;
  wire lookup_offset_cnt_cmb0_carry_n_3;
  wire lookup_offset_cnt_cmb0_carry_n_5;
  wire lookup_offset_cnt_cmb0_carry_n_7;
  wire lookup_offset_first;
  wire lookup_offset_first1;
  wire [7:0]lookup_offset_len_cnt_reg__0;
  wire lookup_piperun;
  wire lookup_protect_conflict;
  wire lookup_push_wm_stall;
  wire lookup_push_write_miss;
  wire lookup_push_write_miss_pre;
  wire lookup_raw_hit_carry2;
  wire [31:0]\lookup_read_data_info[0,0][Data][0] ;
  wire [31:0]\lookup_read_data_info[0,0][Data][1] ;
  wire \lookup_read_data_info[0,0][Last] ;
  wire \lookup_read_data_info[0,0][Valid] ;
  wire \lookup_read_data_info[0,1][Valid] ;
  wire \lookup_read_data_new[0,0][Hit] ;
  wire \lookup_read_data_new[0,0][Valid] ;
  wire \lookup_read_data_new[0,1][Valid] ;
  wire lookup_read_hit_d1;
  wire lookup_read_miss;
  wire lookup_restart_mem;
  wire lookup_restart_mem_done;
  wire [31:14]lookup_stall_addr;
  wire lookup_tag_assoc_way;
  wire lookup_wm_allocate;
  wire lookup_wm_allow_write;
  wire lookup_wm_evict;
  wire lookup_wm_will_use;
  wire lookup_write_hit;
  wire lookup_write_hit_carry;
  wire lookup_write_hit_no_busy;
  wire lookup_write_hit_no_conflict;
  wire lookup_write_miss;
  wire \^lopt ;
  wire \^lopt_1 ;
  wire lopt_10;
  wire lopt_100;
  wire lopt_101;
  wire lopt_102;
  wire lopt_103;
  wire lopt_104;
  wire lopt_105;
  wire lopt_106;
  wire lopt_107;
  wire lopt_108;
  wire lopt_109;
  wire lopt_11;
  wire lopt_110;
  wire lopt_111;
  wire lopt_112;
  wire lopt_113;
  wire lopt_114;
  wire lopt_115;
  wire lopt_116;
  wire lopt_117;
  wire lopt_118;
  wire lopt_119;
  wire lopt_12;
  wire lopt_120;
  wire lopt_121;
  wire lopt_122;
  wire lopt_123;
  wire lopt_124;
  wire lopt_125;
  wire lopt_126;
  wire lopt_127;
  wire lopt_128;
  wire lopt_129;
  wire lopt_13;
  wire lopt_130;
  wire lopt_131;
  wire lopt_132;
  wire lopt_133;
  wire lopt_134;
  wire lopt_135;
  wire lopt_136;
  wire lopt_137;
  wire lopt_138;
  wire lopt_139;
  wire lopt_14;
  wire lopt_140;
  wire lopt_141;
  wire lopt_142;
  wire lopt_143;
  wire lopt_144;
  wire lopt_145;
  wire lopt_146;
  wire lopt_147;
  wire lopt_148;
  wire lopt_149;
  wire lopt_15;
  wire lopt_150;
  wire lopt_151;
  wire lopt_152;
  wire lopt_153;
  wire lopt_154;
  wire lopt_155;
  wire lopt_156;
  wire lopt_157;
  wire lopt_158;
  wire lopt_159;
  wire lopt_16;
  wire lopt_160;
  wire lopt_161;
  wire lopt_162;
  wire lopt_163;
  wire lopt_164;
  wire lopt_165;
  wire lopt_166;
  wire lopt_167;
  wire lopt_168;
  wire lopt_169;
  wire lopt_17;
  wire lopt_170;
  wire lopt_171;
  wire lopt_172;
  wire lopt_173;
  wire lopt_174;
  wire lopt_175;
  wire lopt_176;
  wire lopt_177;
  wire lopt_178;
  wire lopt_179;
  wire lopt_18;
  wire lopt_180;
  wire lopt_181;
  wire lopt_182;
  wire lopt_183;
  wire lopt_184;
  wire lopt_185;
  wire lopt_186;
  wire lopt_187;
  wire lopt_188;
  wire lopt_189;
  wire lopt_19;
  wire lopt_190;
  wire lopt_191;
  wire lopt_192;
  wire lopt_193;
  wire lopt_194;
  wire lopt_195;
  wire lopt_196;
  wire lopt_197;
  wire lopt_198;
  wire lopt_199;
  wire \^lopt_2 ;
  wire lopt_20;
  wire lopt_200;
  wire lopt_201;
  wire lopt_202;
  wire lopt_203;
  wire lopt_204;
  wire lopt_205;
  wire lopt_206;
  wire lopt_207;
  wire lopt_208;
  wire lopt_209;
  wire lopt_21;
  wire lopt_210;
  wire lopt_211;
  wire lopt_212;
  wire lopt_213;
  wire lopt_214;
  wire lopt_215;
  wire lopt_216;
  wire lopt_217;
  wire lopt_218;
  wire lopt_219;
  wire lopt_22;
  wire lopt_220;
  wire lopt_221;
  wire lopt_23;
  wire lopt_24;
  wire lopt_25;
  wire lopt_26;
  wire lopt_27;
  wire lopt_28;
  wire lopt_29;
  wire \^lopt_3 ;
  wire lopt_30;
  wire lopt_31;
  wire lopt_32;
  wire lopt_33;
  wire lopt_34;
  wire lopt_35;
  wire lopt_36;
  wire lopt_37;
  wire lopt_38;
  wire lopt_39;
  wire \^lopt_4 ;
  wire lopt_40;
  wire lopt_41;
  wire lopt_42;
  wire lopt_43;
  wire lopt_44;
  wire lopt_45;
  wire lopt_46;
  wire lopt_47;
  wire lopt_48;
  wire lopt_49;
  wire lopt_5;
  wire lopt_50;
  wire lopt_51;
  wire lopt_52;
  wire lopt_53;
  wire lopt_54;
  wire lopt_55;
  wire lopt_56;
  wire lopt_57;
  wire lopt_58;
  wire lopt_59;
  wire lopt_6;
  wire lopt_60;
  wire lopt_61;
  wire lopt_62;
  wire lopt_63;
  wire lopt_64;
  wire lopt_65;
  wire lopt_66;
  wire lopt_67;
  wire lopt_68;
  wire lopt_69;
  wire lopt_7;
  wire lopt_70;
  wire lopt_71;
  wire lopt_72;
  wire lopt_73;
  wire lopt_74;
  wire lopt_75;
  wire lopt_76;
  wire lopt_77;
  wire lopt_78;
  wire lopt_79;
  wire lopt_8;
  wire lopt_80;
  wire lopt_81;
  wire lopt_82;
  wire lopt_83;
  wire lopt_84;
  wire lopt_85;
  wire lopt_86;
  wire lopt_87;
  wire lopt_88;
  wire lopt_89;
  wire lopt_9;
  wire lopt_90;
  wire lopt_91;
  wire lopt_92;
  wire lopt_93;
  wire lopt_94;
  wire lopt_95;
  wire lopt_96;
  wire lopt_97;
  wire lopt_98;
  wire lopt_99;
  wire lru_check_next_way;
  wire lru_check_used_way;
  wire lru_dirty_bit;
  wire lru_protected_bit;
  wire \lu_check_info_delayed_reg[Wr_n_0_] ;
  wire \lu_check_info_reg[Allocate]__0 ;
  wire \lu_check_info_reg[Early]__0 ;
  wire \lu_check_info_reg[Keep_n_0_] ;
  wire \lu_check_info_reg[KillHit]__0 ;
  wire [7:0]\lu_check_info_reg[Len] ;
  wire \lu_check_info_reg[Port_Num][0]_0 ;
  wire \lu_check_info_reg[Size_n_0_][0] ;
  wire \lu_check_info_reg[Size_n_0_][1] ;
  wire \lu_check_info_reg[Size_n_0_][2] ;
  wire \lu_check_info_reg[Wr]__0 ;
  wire [1:0]lu_check_locked_bits;
  wire [1:0]lu_check_locked_hit;
  wire [1:0]lu_check_locked_hit_copy_lb;
  wire \lu_check_locked_write_reg_n_0_[0] ;
  wire \lu_check_locked_write_reg_n_0_[1] ;
  wire lu_check_match_addr;
  wire lu_check_multi_beat;
  wire lu_check_multi_beat_i_1_n_0;
  wire lu_check_piperun;
  wire lu_check_piperun_pre1;
  wire lu_check_piperun_pre2;
  wire \lu_check_port_one_hot[0]_i_1_n_0 ;
  wire \lu_check_port_one_hot_reg_n_0_[0] ;
  wire lu_check_protected_way;
  wire lu_check_read_info_done;
  wire lu_check_single_beat;
  wire \lu_check_tag_addr_reg[10]_0 ;
  wire \lu_check_tag_addr_reg[11]_0 ;
  wire \lu_check_tag_addr_reg[6]_0 ;
  wire \lu_check_tag_addr_reg[7]_0 ;
  wire \lu_check_tag_addr_reg[8]_0 ;
  wire \lu_check_tag_addr_reg[9]_0 ;
  wire lu_check_tag_hit_all_carry;
  wire [1:0]lu_check_tag_hit_copy_ds;
  wire [1:0]lu_check_tag_hit_copy_lb;
  wire [1:0]lu_check_tag_hit_copy_md;
  wire [1:0]lu_check_tag_hit_copy_pc;
  wire [1:0]lu_check_tag_hit_copy_rs;
  wire [1:0]lu_check_tag_hit_copy_wm;
  wire \lu_check_tag_hit_reg_n_0_[0] ;
  wire [31:14]\lu_check_tag_reg[0][Addr] ;
  wire [31:14]\lu_check_tag_reg[1][Addr] ;
  wire [1:0]lu_check_valid_bits;
  wire \lu_check_valid_bits_reg[1]_0 ;
  wire lu_check_valid_delayed;
  wire lu_check_valid_delayed_reg_0;
  wire lu_check_wait_for_update;
  wire lu_check_wr_already_pushed;
  wire lu_check_write_alloc;
  wire lu_ds_last_beat;
  wire lu_ds_last_beat_hit;
  wire lu_ds_last_beat_multi_start;
  wire lu_ds_last_beat_next_last_n;
  wire lu_ds_last_beat_next_last_n_reg_n_0;
  wire lu_ds_last_beat_no_wait;
  wire lu_ds_last_beat_stall_pre;
  wire lu_ds_last_beat_valid;
  wire lu_ds_last_beat_valid_hit;
  wire lu_ds_rs_del_restart_no_rs;
  wire lu_ds_rs_miss;
  wire lu_ds_rs_new_read_no_rs;
  wire lu_ds_rs_read_miss;
  wire lu_fetch_piperun_pre1;
  wire lu_fetch_piperun_pre2;
  wire lu_io_full_block_read;
  wire lu_io_lud_stall_pipe;
  wire lu_io_selected_full;
  wire lu_mem_force_way;
  wire \lu_mem_info_reg[Addr_Stp_n_0_][0] ;
  wire \lu_mem_info_reg[Addr_Stp_n_0_][1] ;
  wire \lu_mem_info_reg[Addr_Stp_n_0_][2] ;
  wire \lu_mem_info_reg[Addr_Stp_n_0_][3] ;
  wire \lu_mem_info_reg[Addr_Stp_n_0_][4] ;
  wire \lu_mem_info_reg[Addr_Stp_n_0_][5] ;
  wire \lu_mem_info_reg[Addr_Use_n_0_][0] ;
  wire \lu_mem_info_reg[Addr_Use_n_0_][1] ;
  wire \lu_mem_info_reg[Addr_Use_n_0_][2] ;
  wire \lu_mem_info_reg[Addr_Use_n_0_][3] ;
  wire \lu_mem_info_reg[Addr_Use_n_0_][4] ;
  wire \lu_mem_info_reg[Addr_Use_n_0_][5] ;
  wire \lu_mem_info_reg[Addr_n_0_][0] ;
  wire \lu_mem_info_reg[Addr_n_0_][15] ;
  wire \lu_mem_info_reg[Addr_n_0_][16] ;
  wire \lu_mem_info_reg[Addr_n_0_][17] ;
  wire \lu_mem_info_reg[Addr_n_0_][18] ;
  wire \lu_mem_info_reg[Addr_n_0_][19] ;
  wire \lu_mem_info_reg[Addr_n_0_][1] ;
  wire \lu_mem_info_reg[Addr_n_0_][20] ;
  wire \lu_mem_info_reg[Addr_n_0_][21] ;
  wire \lu_mem_info_reg[Addr_n_0_][22] ;
  wire \lu_mem_info_reg[Addr_n_0_][23] ;
  wire \lu_mem_info_reg[Addr_n_0_][24] ;
  wire \lu_mem_info_reg[Addr_n_0_][25] ;
  wire \lu_mem_info_reg[Addr_n_0_][26] ;
  wire \lu_mem_info_reg[Addr_n_0_][27] ;
  wire \lu_mem_info_reg[Addr_n_0_][28] ;
  wire \lu_mem_info_reg[Addr_n_0_][29] ;
  wire \lu_mem_info_reg[Addr_n_0_][2] ;
  wire \lu_mem_info_reg[Addr_n_0_][30] ;
  wire \lu_mem_info_reg[Addr_n_0_][31] ;
  wire \lu_mem_info_reg[Addr_n_0_][3] ;
  wire \lu_mem_info_reg[Addr_n_0_][4] ;
  wire \lu_mem_info_reg[Addr_n_0_][5] ;
  wire \lu_mem_info_reg[Allocate]__0 ;
  wire \lu_mem_info_reg[Early]__0 ;
  wire \lu_mem_info_reg[Force_Hit_n_0_] ;
  wire \lu_mem_info_reg[Keep]__0 ;
  wire \lu_mem_info_reg[Kind_n_0_] ;
  wire [7:0]\lu_mem_info_reg[Len] ;
  wire \lu_mem_info_reg[Port_Num][0]_0 ;
  wire [2:0]\lu_mem_info_reg[Size] ;
  wire \lu_mem_info_reg[Wr]__0 ;
  wire lu_mem_locked_hit_0;
  wire lu_mem_locked_hit_1;
  wire lu_mem_locked_hit_copy_lb_0;
  wire lu_mem_locked_hit_copy_lb_1;
  wire lu_mem_locked_write_0;
  wire lu_mem_locked_write_1;
  wire lu_mem_masked_valid_tag_0;
  wire lu_mem_masked_valid_tag_1;
  wire lu_mem_match_addr;
  wire lu_mem_piperun_or_conflict;
  wire lu_mem_piperun_pre1;
  wire lu_mem_piperun_pre2;
  wire lu_mem_pre_pure_valid_tag_0;
  wire lu_mem_pre_pure_valid_tag_1;
  wire lu_mem_protect_conflict_d1;
  wire [1:0]lu_mem_protect_conflict_reg_0;
  wire [1:0]lu_mem_protected;
  wire lu_mem_protected_pre1_0;
  wire lu_mem_protected_pre1_1;
  wire lu_mem_protected_pre2_0;
  wire lu_mem_protected_pre2_1;
  wire lu_mem_release_lock_hold;
  wire \lu_mem_release_lock_hold[0]_i_1_n_0 ;
  wire \lu_mem_release_lock_hold[1]_i_1_n_0 ;
  wire \lu_mem_release_lock_hold_reg_n_0_[0] ;
  wire \lu_mem_release_lock_hold_reg_n_0_[1] ;
  wire [1:0]lu_mem_releasing_lock;
  wire [1:0]lu_mem_removed_way_hold;
  wire \lu_mem_removed_way_hold[0]_i_1_n_0 ;
  wire \lu_mem_removed_way_hold[1]_i_2_n_0 ;
  wire lu_mem_single_beat__0;
  wire lu_mem_single_beat_i_2_n_0;
  wire lu_mem_single_beat_reg_n_0;
  wire lu_mem_tag_conflict;
  wire lu_mem_tag_hit_0;
  wire lu_mem_tag_hit_1;
  wire lu_mem_tag_hit_copy_ds_0;
  wire lu_mem_tag_hit_copy_ds_1;
  wire lu_mem_tag_hit_copy_lb_0;
  wire lu_mem_tag_hit_copy_lb_1;
  wire lu_mem_tag_hit_copy_md_0;
  wire lu_mem_tag_hit_copy_md_1;
  wire lu_mem_tag_hit_copy_pc_0;
  wire lu_mem_tag_hit_copy_pc_1;
  wire lu_mem_tag_hit_copy_rs_0;
  wire lu_mem_tag_hit_copy_rs_1;
  wire lu_mem_tag_hit_copy_wm_0;
  wire lu_mem_tag_hit_copy_wm_1;
  wire lu_mem_valid_carry_0;
  wire lu_mem_valid_carry_1;
  wire lu_mem_valid_reg_n_0;
  wire lu_mem_valid_tag_0;
  wire lu_mem_valid_tag_1;
  wire lu_mem_write_alloc;
  wire lu_mem_write_alloc0;
  wire lud_addr_pipeline_full0;
  wire lud_addr_pipeline_full_reg_0;
  wire lud_addr_pipeline_full_reg_1;
  wire lud_addr_piperun;
  wire lud_addr_piperun_pre1;
  wire lud_addr_piperun_pre2;
  wire lud_mem_already_used;
  wire lud_mem_completed_reg_n_0;
  wire lud_mem_conflict;
  wire lud_mem_delayed_read_data;
  wire lud_mem_delayed_read_data0;
  wire lud_mem_keep_single_during_stall;
  wire lud_mem_last;
  wire lud_mem_piperun;
  wire [0:0]lud_mem_port_one_hot;
  wire lud_mem_speculative_valid;
  wire lud_mem_use_speculative;
  wire lud_mem_waiting_for_pipe_reg_0;
  wire lud_mem_waiting_for_pipe_reg_1;
  wire lud_mem_way_d1;
  wire lud_reg_piperun;
  wire lud_reg_piperun_pre1;
  wire \lud_reg_port_num_reg[0]_0 ;
  wire \lud_reg_port_num_reg[0]_1 ;
  wire \lud_reg_valid_one_hot[0]_i_1_n_0 ;
  wire \lud_reg_valid_one_hot[1]_i_1_n_0 ;
  wire lud_reg_valid_reg_0;
  wire lud_reg_valid_reg_1;
  wire lud_step_delayed_restart;
  wire lud_step_delayed_restart_reg_0;
  wire lud_step_offset;
  wire lud_step_offset_is_read;
  wire lud_step_want_step_offset;
  wire lud_write_hit_done;
  wire lud_write_hit_done_reg_n_0;
  wire [7:0]minusOp;
  wire new_read_data_last;
  wire [31:0]new_read_data_word;
  wire p_11_in;
  wire p_11_out;
  wire p_138_in;
  wire p_13_in;
  wire p_13_out;
  wire p_162_in;
  wire p_185_in;
  wire p_7_in;
  wire protected_bit;
  wire protected_bit_miss;
  wire protected_bit_miss_valid;
  wire protected_miss_valid;
  wire protection_with_coherency;
  wire queue_push120_out;
  wire r_hit_push;
  wire r_hit_push_7;
  wire \read_data_status[0,0][Hit_Full] ;
  wire \read_data_status[0,0][Hit_Pop] ;
  wire \read_data_status[0,1][Hit_Full] ;
  wire \read_data_status[0,1][Hit_Pop] ;
  wire \read_req_info[0][Kind] ;
  wire [7:0]\ri_len_reg[7] ;
  wire ri_merge_reg;
  wire [5:0]\ri_stp_reg[5] ;
  wire [5:0]\ri_use_reg[5] ;
  wire ud_new_tag_valid2;
  wire update_done_tag_write_reg;
  wire update_first_write_hit;
  wire [0:0]update_first_write_hit_reg_0;
  wire \update_info[Allocate] ;
  wire \update_info[Early] ;
  wire \update_info[Internal_Cmd] ;
  wire \update_info[Keep] ;
  wire \update_info[Kind] ;
  wire [2:0]\update_info[Size] ;
  wire \update_info[Wr] ;
  wire [5:0]\update_info_reg[Addr][5]_0 ;
  wire [5:0]\update_info_reg[Addr_Stp][5]_0 ;
  wire [5:0]\update_info_reg[Addr_Use][5]_0 ;
  wire \update_info_reg[Kind]_0 ;
  wire \update_info_reg[Port_Num][0]_0 ;
  wire update_lock_release;
  wire update_miss;
  wire update_need_bs;
  wire update_need_tag_write;
  wire [31:14]\update_old_tag[Addr] ;
  wire update_piperun;
  wire \update_read_data_info[0,0][Last] ;
  wire update_read_miss;
  wire update_readback_available;
  wire \update_release_tag[Valid] ;
  wire [1:0]\update_release_tag_reg[Addr][10] ;
  wire \update_release_tag_reg[Addr][11] ;
  wire \update_release_tag_reg[Valid] ;
  wire \update_release_tag_reg[Valid]_0 ;
  wire [1:0]\update_release_tag_reg[Valid]_1 ;
  wire update_reused_tag;
  wire update_reused_tag2;
  wire update_reused_tag2_carry__0_n_3;
  wire update_reused_tag2_carry_n_0;
  wire update_reused_tag2_carry_n_1;
  wire update_reused_tag2_carry_n_2;
  wire update_reused_tag2_carry_n_3;
  wire update_tag_conflict;
  wire update_valid;
  wire update_way;
  wire update_write_hit;
  wire update_write_miss;
  wire [1:0]update_write_miss_busy;
  wire update_write_miss_full;
  wire \wm_port_reg[0] ;
  wire [3:0]\wr_port_data_info_reg[0][BE][3] ;
  wire [3:0]\wr_port_data_info_reg[0][BE][3]_0 ;
  wire wr_port_data_last_i_reg;
  wire wr_port_data_ready;
  wire wr_port_data_valid_i_reg;
  wire \write_req_info[0][Internal] ;
  wire [0:0]\write_req_info[0][Port_Num] ;
  wire [3:1]NLW_lookup_offset_cnt_cmb0_carry__0_CO_UNCONNECTED;
  wire [3:2]NLW_lookup_offset_cnt_cmb0_carry__0_O_UNCONNECTED;
  wire [3:0]NLW_update_reused_tag2_carry_O_UNCONNECTED;
  wire [3:2]NLW_update_reused_tag2_carry__0_CO_UNCONNECTED;
  wire [3:0]NLW_update_reused_tag2_carry__0_O_UNCONNECTED;

  assign lopt_1 = lopt_96;
  assign lopt_3 = lopt_98;
  assign lopt_4 = Chk_Valid_Inst_n_82;
  assign lopt_95 = lopt;
  assign lopt_97 = lopt_2;
  design_1_system_cache_0_0_bit_reg_ce_102 AR_Need_Inst
       (.ACLK(ACLK),
        .Q(ARESET_I),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (Chk_Valid_Inst_n_6));
  design_1_system_cache_0_0_bit_reg_ce_103 AW_Need_Inst
       (.ACLK(ACLK),
        .Q(ARESET_I),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (LU_Check_PR_And_Inst2_n_2),
        .\bs_fifo_mem_reg[0][Src][1] (\bs_fifo_mem_reg[0][Src][1] ),
        .\bs_fifo_mem_reg[0][Src][1]_0 (\bs_fifo_mem_reg[0][Src][1]_0 [1]),
        .queue_push120_out(queue_push120_out),
        .\update_info[Keep] (\update_info[Keep] ),
        .\update_info_reg[Allocate] (\update_info[Allocate] ),
        .update_write_hit(update_write_hit),
        .update_write_miss(update_write_miss));
  design_1_system_cache_0_0_bit_reg_ce_104 BS_Need_Inst
       (.ACLK(ACLK),
        .Q(ARESET_I),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (Chk_Valid_Inst_n_10),
        .update_need_bs(update_need_bs));
  design_1_system_cache_0_0_bit_reg_ce_105 Chk_Valid_Inst
       (.A121_out(A121_out),
        .A134_out(A134_out),
        .A141_out(A141_out),
        .A149_out(A149_out),
        .ACLK(ACLK),
        .ADDRARDADDR(ADDRARDADDR[11:2]),
        .A_N160_out(A_N160_out),
        .D({D,\update_info_reg[Addr][5]_0 }),
        .DI({ADDRARDADDR[1:0],Chk_Valid_Inst_n_38,Chk_Valid_Inst_n_39}),
        .DIBDI(DIBDI),
        .E(lookup_offset_first1),
        .O({p_11_in,lookup_offset_cnt_cmb0_carry_n_5,p_7_in,lookup_offset_cnt_cmb0_carry_n_7}),
        .Q(ARESET_I),
        .S(S),
        .SRI(SRI_11),
        .SRI_6(SRI_0),
        .SRI_7(SRI),
        .S_0(S_0),
        .S_1(S_13),
        .S_2(S_12),
        .S_3(S_10),
        .S_4(S_9),
        .S_5(S_5),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (Chk_Valid_Inst_n_6),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (Chk_Valid_Inst_n_8),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 (Chk_Valid_Inst_n_9),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 (Chk_Valid_Inst_n_10),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_3 (Chk_Valid_Inst_n_11),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_4 (Chk_Valid_Inst_n_12),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_5 (Chk_Valid_Inst_n_40),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_6 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_7 (update_need_tag_write),
        .\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst (Chk_Valid_Inst_n_23),
        .\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_0 (Chk_Valid_Inst_n_72),
        .\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst_1 (Chk_Valid_Inst_n_81),
        .\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst (Par_Reuse_Inst_n_1),
        .\Use_FPGA.Full_Inst (lookup_mem_piperun),
        .\access_data_info[0,0][Valid] (\access_data_info[0,0][Valid] ),
        .\access_data_info[0,1][Valid] (\access_data_info[0,1][Valid] ),
        .access_valid(access_valid),
        .lookup_access_data_late(lookup_access_data_late),
        .lookup_data_hit_stall(lookup_data_hit_stall),
        .lookup_last_beat(lookup_last_beat),
        .lookup_miss(lookup_miss),
        .lookup_miss_dirty(lookup_miss_dirty),
        .lookup_next_is_last_beat(lookup_next_is_last_beat),
        .lookup_next_is_last_beat_reg(lookup_next_is_last_beat_reg_n_0),
        .\lookup_offset_cnt_reg[3] ({Chk_Valid_Inst_n_87,Chk_Valid_Inst_n_88,Chk_Valid_Inst_n_89,Chk_Valid_Inst_n_90}),
        .\lookup_offset_cnt_reg[4] ({lookup_offset_cnt_cmb0_carry__0_n_6,p_13_in}),
        .\lookup_offset_cnt_reg[5] (lookup_offset_cnt_cmb),
        .\lookup_offset_cnt_reg[5]_0 ({Chk_Valid_Inst_n_85,Chk_Valid_Inst_n_86}),
        .\lookup_offset_cnt_reg[5]_1 (lookup_offset_cnt),
        .lookup_offset_first_reg(Chk_Valid_Inst_n_91),
        .lookup_offset_first_reg_0(lookup_offset_first),
        .\lookup_offset_len_cnt_reg[7] ({minusOp[7:6],Chk_Valid_Inst_n_53,minusOp[4:0]}),
        .\lookup_offset_len_cnt_reg[7]_0 (lookup_offset_len_cnt_reg__0),
        .lookup_protect_conflict(lookup_protect_conflict),
        .lookup_push_wm_stall(lookup_push_wm_stall),
        .lookup_push_write_miss(lookup_push_write_miss),
        .lookup_push_write_miss_pre(lookup_push_write_miss_pre),
        .\lookup_read_data_new[0,0][Hit] (\lookup_read_data_new[0,0][Hit] ),
        .\lookup_read_data_new[0,0][Valid] (\lookup_read_data_new[0,0][Valid] ),
        .\lookup_read_data_new[0,1][Valid] (\lookup_read_data_new[0,1][Valid] ),
        .lookup_read_miss(lookup_read_miss),
        .lookup_restart_mem(lookup_restart_mem),
        .lookup_wm_will_use(lookup_wm_will_use),
        .lookup_write_hit(lookup_write_hit),
        .lookup_write_miss(lookup_write_miss),
        .lru_check_next_way(lru_check_next_way),
        .lru_check_used_way(lru_check_used_way),
        .\lu_check_info_reg[Addr_Stp][5] (\update_info_reg[Addr_Stp][5]_0 ),
        .\lu_check_info_reg[Addr_Use][5] (\update_info_reg[Addr_Use][5]_0 ),
        .\lu_check_info_reg[Allocate] (\lu_check_info_reg[Allocate]__0 ),
        .\lu_check_info_reg[Early] (\lu_check_info_reg[Early]__0 ),
        .\lu_check_info_reg[Keep] (\lu_check_info_reg[Keep_n_0_] ),
        .\lu_check_info_reg[KillHit] (\lu_check_info_reg[KillHit]__0 ),
        .\lu_check_info_reg[KillHit]_0 (TAG_Need_Inst_n_3),
        .\lu_check_info_reg[Kind] (\update_info_reg[Kind]_0 ),
        .\lu_check_info_reg[Len][7] (\lu_check_info_reg[Len] ),
        .\lu_check_info_reg[Port_Num][0] (\update_info_reg[Port_Num][0]_0 ),
        .\lu_check_info_reg[Wr] (\lu_check_info_reg[Wr]__0 ),
        .\lu_check_info_reg[Wr]_0 (Par_Dirty_Inst_n_28),
        .\lu_check_locked_hit_reg[1] (lu_check_locked_hit),
        .\lu_check_locked_hit_reg[1]_0 (LU_PC_And_Inst5_n_6),
        .lu_check_piperun(lu_check_piperun),
        .\lu_check_port_one_hot_reg[0] (\lu_check_port_one_hot_reg_n_0_[0] ),
        .lu_check_protected_way(lu_check_protected_way),
        .\lu_check_protected_way_reg[0] (Chk_Valid_Inst_n_97),
        .lu_check_read_info_done(lu_check_read_info_done),
        .lu_check_read_info_done_reg(Chk_Valid_Inst_n_96),
        .lu_check_single_beat(lu_check_single_beat),
        .\lu_check_tag_hit_copy_wm_reg[1] (lu_check_tag_hit_copy_wm),
        .\lu_check_tag_hit_reg[1] ({lookup_tag_assoc_way,\lu_check_tag_hit_reg_n_0_[0] }),
        .\lu_check_valid_bits_reg[1] (lu_check_valid_bits),
        .lu_check_valid_delayed_reg(lu_check_valid_delayed_reg_0),
        .lu_check_wait_for_update(lu_check_wait_for_update),
        .lu_check_wait_for_update_reg(Chk_Valid_Inst_n_92),
        .lu_check_wr_already_pushed(lu_check_wr_already_pushed),
        .lu_check_wr_already_pushed_reg(Chk_Valid_Inst_n_93),
        .lu_ds_last_beat_next_last_n(lu_ds_last_beat_next_last_n),
        .\lu_mem_info_reg[Addr][10] (\lu_check_tag_addr_reg[10]_0 ),
        .\lu_mem_info_reg[Addr][11] (\lu_check_tag_addr_reg[11]_0 ),
        .\lu_mem_info_reg[Addr][12] (B_Vec[0]),
        .\lu_mem_info_reg[Addr][13] (B_Vec[1]),
        .\lu_mem_info_reg[Addr][5] ({\lu_mem_info_reg[Addr_n_0_][5] ,\lu_mem_info_reg[Addr_n_0_][4] ,\lu_mem_info_reg[Addr_n_0_][3] ,\lu_mem_info_reg[Addr_n_0_][2] ,\lu_mem_info_reg[Addr_n_0_][1] ,\lu_mem_info_reg[Addr_n_0_][0] }),
        .\lu_mem_info_reg[Addr][6] (\lu_check_tag_addr_reg[6]_0 ),
        .\lu_mem_info_reg[Addr][7] (\lu_check_tag_addr_reg[7]_0 ),
        .\lu_mem_info_reg[Addr][8] (\lu_check_tag_addr_reg[8]_0 ),
        .\lu_mem_info_reg[Addr][9] (\lu_check_tag_addr_reg[9]_0 ),
        .\lu_mem_info_reg[Addr_Stp][5] ({\lu_mem_info_reg[Addr_Stp_n_0_][5] ,\lu_mem_info_reg[Addr_Stp_n_0_][4] ,\lu_mem_info_reg[Addr_Stp_n_0_][3] ,\lu_mem_info_reg[Addr_Stp_n_0_][2] ,\lu_mem_info_reg[Addr_Stp_n_0_][1] ,\lu_mem_info_reg[Addr_Stp_n_0_][0] }),
        .\lu_mem_info_reg[Addr_Use][5] ({\lu_mem_info_reg[Addr_Use_n_0_][5] ,\lu_mem_info_reg[Addr_Use_n_0_][4] ,\lu_mem_info_reg[Addr_Use_n_0_][3] ,\lu_mem_info_reg[Addr_Use_n_0_][2] ,\lu_mem_info_reg[Addr_Use_n_0_][1] ,\lu_mem_info_reg[Addr_Use_n_0_][0] }),
        .\lu_mem_info_reg[Kind] (\lu_mem_info_reg[Kind_n_0_] ),
        .\lu_mem_info_reg[Len][7] (\lu_mem_info_reg[Len] ),
        .\lu_mem_info_reg[Port_Num][0] (\lu_check_info_reg[Port_Num][0]_0 ),
        .\lu_mem_info_reg[Wr] (\lu_mem_info_reg[Wr]__0 ),
        .lu_mem_protect_conflict_reg(lud_mem_conflict),
        .lu_mem_single_beat_reg(lu_mem_single_beat_reg_n_0),
        .lu_mem_valid_reg(LU_PC_And_Inst5_n_2),
        .lu_mem_valid_reg_0(lu_mem_valid_reg_n_0),
        .lud_addr_pipeline_full_reg(lud_addr_pipeline_full_reg_1),
        .lud_addr_pipeline_full_reg_0(Chk_Valid_Inst_n_25),
        .lud_addr_pipeline_full_reg_1(Chk_Valid_Inst_n_74),
        .lud_addr_pipeline_full_reg_2(lud_step_delayed_restart_reg_0),
        .lud_addr_pipeline_full_reg_3(LU_DS_RS_And_Inst5_n_0),
        .lud_addr_piperun(lud_addr_piperun),
        .lud_mem_already_used(lud_mem_already_used),
        .lud_mem_already_used_reg(Chk_Valid_Inst_n_94),
        .lud_mem_completed_reg(USpec_Inst_n_1),
        .lud_mem_delayed_read_data(lud_mem_delayed_read_data),
        .lud_mem_delayed_read_data0(lud_mem_delayed_read_data0),
        .lud_mem_keep_single_during_stall(lud_mem_keep_single_during_stall),
        .lud_mem_last_reg(Chk_Valid_Inst_n_84),
        .\lud_mem_port_one_hot_reg[0] (Chk_Valid_Inst_n_70),
        .\lud_mem_port_one_hot_reg[1] (Chk_Valid_Inst_n_71),
        .\lud_mem_port_one_hot_reg[1]_0 (\lud_reg_port_num_reg[0]_0 ),
        .lud_mem_speculative_valid(lud_mem_speculative_valid),
        .lud_mem_use_speculative(lud_mem_use_speculative),
        .lud_mem_waiting_for_pipe_reg(Chk_Valid_Inst_n_5),
        .lud_mem_waiting_for_pipe_reg_0(lud_mem_waiting_for_pipe_reg_0),
        .lud_mem_waiting_for_pipe_reg_1(lud_mem_waiting_for_pipe_reg_1),
        .lud_reg_valid_reg(lud_reg_valid_reg_0),
        .lud_step_delayed_restart(lud_step_delayed_restart),
        .lud_step_delayed_restart_reg(Chk_Valid_Inst_n_18),
        .lud_step_offset(lud_step_offset),
        .lud_step_offset_is_read(lud_step_offset_is_read),
        .lud_write_hit_done_reg(Chk_Valid_Inst_n_95),
        .lud_write_hit_done_reg_0(lud_write_hit_done_reg_n_0),
        .p_138_in(p_138_in),
        .p_162_in(p_162_in),
        .p_185_in(p_185_in),
        .\read_data_status[0,1][Hit_Full] (\read_data_status[0,1][Hit_Full] ),
        .update_done_tag_write_reg(LU_Check_PR_And_Inst2_n_5),
        .\update_info_reg[Allocate] (Chk_Valid_Inst_n_13),
        .\update_info_reg[Evict] (Chk_Valid_Inst_n_33),
        .update_need_bs(update_need_bs),
        .\update_old_tag_reg[Addr][14] (Chk_Valid_Inst_n_28),
        .\update_old_tag_reg[Addr][14]_0 (Chk_Valid_Inst_n_82),
        .update_piperun(update_piperun),
        .\update_release_tag_reg[Addr][11] (\update_release_tag_reg[Addr][11] ),
        .update_write_miss_full(update_write_miss_full),
        .wm_evict_reg(Chk_Valid_Inst_n_29),
        .wm_evict_reg_0(Chk_Valid_Inst_n_83),
        .\wm_port_reg[0] (\wm_port_reg[0] ),
        .wr_port_data_last_i_reg(wr_port_data_last_i_reg),
        .wr_port_data_ready(wr_port_data_ready),
        .wr_port_data_valid_i_reg(wr_port_data_valid_i_reg));
  design_1_system_cache_0_0_bit_reg_ce_106 E_Need_Inst
       (.ACLK(ACLK),
        .\M_AXI_AWADDR_reg[31] (\M_AXI_AWADDR_reg[31] ),
        .\M_AXI_AWBURST_reg[1] (\M_AXI_AWBURST_reg[1] ),
        .\M_AXI_AWLEN_reg[7] (\M_AXI_AWLEN_reg[7] ),
        .\M_AXI_AWSIZE_reg[1] (\M_AXI_AWSIZE_reg[1] ),
        .Q(ARESET_I),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (\write_req_info[0][Internal] ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (LU_Check_PR_And_Inst2_n_3),
        .\update_info_reg[Addr][31] ({\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 [31:14],\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 [5:0]}),
        .\update_info_reg[Evict] (\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .\update_info_reg[Kind] (\update_info[Kind] ),
        .\update_info_reg[Len][0] (\aw_fifo_mem_reg[15][Len][5]_srl16_i_2_n_0 ),
        .\update_info_reg[Len][0]_0 (\aw_fifo_mem_reg[15][Len][4]_srl16_i_2_n_0 ),
        .\update_info_reg[Len][0]_1 (\aw_fifo_mem_reg[15][Len][2]_srl16_i_2_n_0 ),
        .\update_info_reg[Len][1] (\aw_fifo_mem_reg[15][Len][6]_srl16_i_2_n_0 ),
        .\update_info_reg[Len][1]_0 (\aw_fifo_mem_reg[15][Len][3]_srl16_i_4_n_0 ),
        .\update_info_reg[Len][2] (\aw_fifo_mem_reg[15][Len][7]_srl16_i_2_n_0 ),
        .\update_info_reg[Len][7] (\ri_len_reg[7] ),
        .\update_info_reg[Size][2] (\update_info[Size] ),
        .\update_info_reg[Size][2]_0 (\aw_fifo_mem_reg[15][Len][3]_srl16_i_2_n_0 ),
        .\update_info_reg[Size][2]_1 (\aw_fifo_mem_reg[15][Len][3]_srl16_i_3_n_0 ),
        .\update_old_tag_reg[Addr][31] (\update_old_tag[Addr] ));
  design_1_system_cache_0_0_carry_and_107 \Gen_Set_Cachehit_Mem[0].LU_Tag_And_Inst1 
       (.lopt(\^lopt ),
        .lopt_1(\^lopt_1 ),
        .lopt_2(\^lopt_2 ),
        .lopt_3(\^lopt_3 ),
        .lopt_4(\^lopt_4 ),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lu_mem_valid_carry_0(lu_mem_valid_carry_0),
        .\update_release_tag_reg[Valid] (\update_release_tag_reg[Valid] ));
  design_1_system_cache_0_0_carry_and_n_108 \Gen_Set_Cachehit_Mem[0].LU_Tag_And_Inst2 
       (.lopt(lopt_9),
        .lopt_1(lopt_10),
        .lopt_2(lopt_11),
        .\lu_check_info_reg[KillHit] (\lu_check_info_reg[KillHit]__0 ),
        .\lu_mem_info_reg[Force_Hit] (\lu_mem_info_reg[Force_Hit_n_0_] ),
        .lu_mem_masked_valid_tag_0(lu_mem_masked_valid_tag_0),
        .lu_mem_pre_pure_valid_tag_0(lu_mem_pre_pure_valid_tag_0),
        .lu_mem_protect_conflict_reg(lud_mem_conflict));
  design_1_system_cache_0_0_carry_and_109 \Gen_Set_Cachehit_Mem[0].LU_Tag_And_Inst3 
       (.D(lu_mem_tag_hit_0),
        .lopt(lopt_12),
        .lopt_1(lopt_13),
        .lopt_2(lopt_14),
        .lu_mem_protect_conflict_reg(lud_mem_conflict),
        .lu_mem_valid_reg(lu_mem_valid_reg_n_0),
        .lu_mem_valid_tag_0(lu_mem_valid_tag_0));
  design_1_system_cache_0_0_carry_and_110 \Gen_Set_Cachehit_Mem[0].LU_Tag_And_Inst3b 
       (.D(lu_mem_tag_hit_copy_pc_0),
        .lopt(lopt_15),
        .lopt_1(lopt_16),
        .lopt_2(lopt_17),
        .lu_mem_protect_conflict_reg(lu_mem_tag_hit_0));
  design_1_system_cache_0_0_carry_and_111 \Gen_Set_Cachehit_Mem[0].LU_Tag_And_Inst3c 
       (.D(lu_mem_tag_hit_copy_md_0),
        .lopt(lopt_18),
        .lopt_1(lopt_19),
        .lopt_2(lopt_20),
        .lu_mem_protect_conflict_reg(lu_mem_tag_hit_copy_pc_0));
  design_1_system_cache_0_0_carry_and_112 \Gen_Set_Cachehit_Mem[0].LU_Tag_And_Inst3d 
       (.D(lu_mem_tag_hit_copy_wm_0),
        .lopt(lopt_21),
        .lopt_1(lopt_22),
        .lopt_2(lopt_23),
        .lopt_3(lopt_24),
        .lopt_4(lopt_25),
        .lopt_5(lopt_26),
        .lopt_6(lopt_27),
        .lopt_7(lopt_28),
        .lopt_8(lopt_29),
        .lu_mem_protect_conflict_reg(lu_mem_tag_hit_copy_md_0));
  design_1_system_cache_0_0_carry_and_113 \Gen_Set_Cachehit_Mem[0].LU_Tag_And_Inst3e 
       (.D(lu_mem_tag_hit_copy_ds_0),
        .lopt(lopt_21),
        .lopt_1(lopt_22),
        .lopt_2(lopt_23),
        .lu_mem_protect_conflict_reg(lu_mem_tag_hit_copy_wm_0));
  design_1_system_cache_0_0_carry_and_114 \Gen_Set_Cachehit_Mem[0].LU_Tag_And_Inst3f 
       (.D(lu_mem_tag_hit_copy_lb_0),
        .lopt(lopt_24),
        .lopt_1(lopt_25),
        .lopt_2(lopt_26),
        .lu_mem_protect_conflict_reg(lu_mem_tag_hit_copy_ds_0));
  design_1_system_cache_0_0_carry_and_115 \Gen_Set_Cachehit_Mem[0].LU_Tag_And_Inst3g 
       (.D(lu_mem_tag_hit_copy_rs_0),
        .lopt(lopt_27),
        .lopt_1(lopt_28),
        .lopt_2(lopt_29),
        .lu_mem_protect_conflict_reg(lu_mem_tag_hit_copy_lb_0));
  design_1_system_cache_0_0_carry_and_116 \Gen_Set_Cachehit_Mem[0].LU_Tag_And_Inst4 
       (.D(lu_mem_locked_hit_0),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 (\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .lopt(lopt_30),
        .lopt_1(lopt_31),
        .lopt_2(lopt_32),
        .lopt_3(lopt_33),
        .lopt_4(lopt_34),
        .lopt_5(lopt_35),
        .lopt_6(lopt_36),
        .lopt_7(lopt_37),
        .lopt_8(lopt_38),
        .\lu_check_info_reg[KillHit] (\lu_check_info_reg[KillHit]__0 ),
        .\lu_mem_info_reg[Force_Hit] (\lu_mem_info_reg[Force_Hit_n_0_] ),
        .lu_mem_protect_conflict_reg(lu_mem_tag_hit_copy_rs_0),
        .lu_mem_protect_conflict_reg_0(lud_mem_conflict),
        .\lu_mem_release_lock_hold_reg[0] (\lu_mem_release_lock_hold_reg_n_0_[0] ),
        .lu_mem_releasing_lock(lu_mem_releasing_lock[0]));
  design_1_system_cache_0_0_carry_and_117 \Gen_Set_Cachehit_Mem[0].LU_Tag_And_Inst4b 
       (.D(lu_mem_locked_hit_copy_lb_0),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 (lu_mem_locked_hit_0),
        .lopt(lopt_30),
        .lopt_1(lopt_31),
        .lopt_2(lopt_32));
  design_1_system_cache_0_0_carry_and_118 \Gen_Set_Cachehit_Mem[0].LU_Tag_And_Inst5 
       (.D(lu_mem_locked_write_0),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 (lu_mem_locked_hit_copy_lb_0),
        .lopt(lopt_33),
        .lopt_1(lopt_34),
        .lopt_2(lopt_35),
        .\lu_check_info_reg[Wr] (\lu_check_info_reg[Wr]__0 ),
        .\lu_mem_info_reg[Wr] (\lu_mem_info_reg[Wr]__0 ),
        .lu_mem_protect_conflict_reg(lud_mem_conflict));
  design_1_system_cache_0_0_carry_compare__parameterized2_119 \Gen_Set_Cachehit_Mem[0].LU_Tag_Compare_Inst1 
       (.D({\lu_mem_info_reg[Addr_n_0_][31] ,\lu_mem_info_reg[Addr_n_0_][30] ,\lu_mem_info_reg[Addr_n_0_][29] ,\lu_mem_info_reg[Addr_n_0_][28] ,\lu_mem_info_reg[Addr_n_0_][27] ,\lu_mem_info_reg[Addr_n_0_][26] ,\lu_mem_info_reg[Addr_n_0_][25] ,\lu_mem_info_reg[Addr_n_0_][24] ,\lu_mem_info_reg[Addr_n_0_][23] ,\lu_mem_info_reg[Addr_n_0_][22] ,\lu_mem_info_reg[Addr_n_0_][21] ,\lu_mem_info_reg[Addr_n_0_][20] ,\lu_mem_info_reg[Addr_n_0_][19] ,\lu_mem_info_reg[Addr_n_0_][18] ,\lu_mem_info_reg[Addr_n_0_][17] ,\lu_mem_info_reg[Addr_n_0_][16] ,\lu_mem_info_reg[Addr_n_0_][15] ,lu_mem_force_way}),
        .DATA_OUTA(DATA_OUTA[17:0]),
        .Q(lookup_stall_addr),
        .lopt(\^lopt ),
        .lopt_1(\^lopt_1 ),
        .lopt_10(lopt_10),
        .lopt_11(lopt_11),
        .lopt_2(\^lopt_2 ),
        .lopt_3(\^lopt_3 ),
        .lopt_4(\^lopt_4 ),
        .lopt_5(lopt_5),
        .lopt_6(lopt_6),
        .lopt_7(lopt_7),
        .lopt_8(lopt_8),
        .lopt_9(lopt_9),
        .\lu_check_tag_hit_reg[0] (\Gen_Set_Cachehit_Mem[0].LU_Tag_Compare_Inst1_n_1 ),
        .\lu_check_tag_hit_reg[0]_0 (\Gen_Set_Cachehit_Mem[0].LU_Tag_Compare_Inst1_n_2 ),
        .\lu_check_tag_hit_reg[0]_1 (\Gen_Set_Cachehit_Mem[0].LU_Tag_Compare_Inst1_n_3 ),
        .\lu_check_tag_hit_reg[0]_2 (\Gen_Set_Cachehit_Mem[0].LU_Tag_Compare_Inst1_n_4 ),
        .\lu_check_tag_hit_reg[0]_3 (\Gen_Set_Cachehit_Mem[0].LU_Tag_Compare_Inst1_n_5 ),
        .\lu_check_tag_hit_reg[0]_4 (\Gen_Set_Cachehit_Mem[0].LU_Tag_Compare_Inst1_n_6 ),
        .lu_mem_pre_pure_valid_tag_0(lu_mem_pre_pure_valid_tag_0),
        .lu_mem_protect_conflict_reg(lud_mem_conflict),
        .lu_mem_valid_carry_0(lu_mem_valid_carry_0));
  design_1_system_cache_0_0_carry_or_120 \Gen_Set_Cachehit_Mem[0].LU_Tag_Or_Inst1 
       (.D(lu_mem_force_way),
        .lopt(lopt_12),
        .lopt_1(lopt_13),
        .lopt_2(lopt_14),
        .lopt_3(lopt_15),
        .lopt_4(lopt_16),
        .lopt_5(lopt_17),
        .lopt_6(lopt_18),
        .lopt_7(lopt_19),
        .lopt_8(lopt_20),
        .\lu_check_info_reg[KillHit] (\lu_check_info_reg[KillHit]__0 ),
        .\lu_mem_info_reg[Force_Hit] (\lu_mem_info_reg[Force_Hit_n_0_] ),
        .lu_mem_masked_valid_tag_0(lu_mem_masked_valid_tag_0),
        .lu_mem_protect_conflict_reg(lud_mem_conflict),
        .lu_mem_valid_tag_0(lu_mem_valid_tag_0));
  design_1_system_cache_0_0_carry_or_121 \Gen_Set_Cachehit_Mem[0].LU_Tag_Or_Inst2 
       (.D(lu_mem_locked_write_0),
        .DATA_OUTA(DATA_OUTA[19:18]),
        .lopt(lopt_36),
        .lopt_1(lopt_37),
        .lopt_2(lopt_38),
        .lu_mem_protect_conflict_reg(lud_mem_conflict),
        .lu_mem_protected_pre1_0(lu_mem_protected_pre1_0),
        .\lu_mem_release_lock_hold_reg[0] (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 ),
        .lu_mem_valid_reg(lu_mem_valid_reg_n_0),
        .\update_release_tag_reg[Valid] (\update_release_tag_reg[Valid]_1 [0]));
  design_1_system_cache_0_0_carry_or_122 \Gen_Set_Cachehit_Mem[0].LU_Tag_Or_Inst3 
       (.DATA_OUTA(DATA_OUTA[20]),
        .lopt(lopt_39),
        .lopt_1(lopt_40),
        .\lu_check_protected_reg[0] (\Gen_Set_Cachehit_Mem[0].LU_Tag_Or_Inst3_n_1 ),
        .lu_check_write_alloc(lu_check_write_alloc),
        .lu_mem_protect_conflict_reg(lud_mem_conflict),
        .lu_mem_protected_pre1_0(lu_mem_protected_pre1_0),
        .lu_mem_protected_pre2_0(lu_mem_protected_pre2_0),
        .\lu_mem_release_lock_hold_reg[0] (\lu_mem_release_lock_hold_reg_n_0_[0] ),
        .lu_mem_releasing_lock(lu_mem_releasing_lock[0]),
        .lu_mem_valid_reg(lu_mem_valid_reg_n_0),
        .lu_mem_write_alloc(lu_mem_write_alloc),
        .\update_release_tag_reg[Valid] (\update_release_tag_reg[Valid]_1 [0]));
  design_1_system_cache_0_0_carry_or_123 \Gen_Set_Cachehit_Mem[0].LU_Tag_Or_Inst4 
       (.D(lu_mem_protected[0]),
        .lopt(lopt_39),
        .lopt_1(lopt_40),
        .lu_mem_protected_pre2_0(lu_mem_protected_pre2_0));
  design_1_system_cache_0_0_carry_and_124 \Gen_Set_Cachehit_Mem[1].LU_Tag_And_Inst1 
       (.lopt(lopt_41),
        .lopt_1(lopt_42),
        .lopt_2(lopt_43),
        .lopt_3(lopt_44),
        .lopt_4(lopt_45),
        .lopt_5(lopt_46),
        .lopt_6(lopt_47),
        .lopt_7(lopt_48),
        .lopt_8(lopt_49),
        .lu_mem_valid_carry_1(lu_mem_valid_carry_1),
        .\update_release_tag_reg[Valid] (\update_release_tag_reg[Valid]_0 ));
  design_1_system_cache_0_0_carry_and_n_125 \Gen_Set_Cachehit_Mem[1].LU_Tag_And_Inst2 
       (.lopt(lopt_50),
        .lopt_1(lopt_51),
        .lopt_2(lopt_52),
        .\lu_check_info_reg[KillHit] (\lu_check_info_reg[KillHit]__0 ),
        .\lu_mem_info_reg[Force_Hit] (\lu_mem_info_reg[Force_Hit_n_0_] ),
        .lu_mem_masked_valid_tag_1(lu_mem_masked_valid_tag_1),
        .lu_mem_pre_pure_valid_tag_1(lu_mem_pre_pure_valid_tag_1),
        .lu_mem_protect_conflict_reg(lud_mem_conflict));
  design_1_system_cache_0_0_carry_and_126 \Gen_Set_Cachehit_Mem[1].LU_Tag_And_Inst3 
       (.D(lu_mem_tag_hit_1),
        .lopt(lopt_53),
        .lopt_1(lopt_54),
        .lopt_2(lopt_55),
        .lu_mem_protect_conflict_reg(lud_mem_conflict),
        .lu_mem_valid_reg(lu_mem_valid_reg_n_0),
        .lu_mem_valid_tag_1(lu_mem_valid_tag_1));
  design_1_system_cache_0_0_carry_and_127 \Gen_Set_Cachehit_Mem[1].LU_Tag_And_Inst3b 
       (.D(lu_mem_tag_hit_copy_pc_1),
        .lopt(lopt_56),
        .lopt_1(lopt_57),
        .lopt_2(lopt_58),
        .lu_mem_protect_conflict_reg(lu_mem_tag_hit_1));
  design_1_system_cache_0_0_carry_and_128 \Gen_Set_Cachehit_Mem[1].LU_Tag_And_Inst3c 
       (.D(lu_mem_tag_hit_copy_md_1),
        .lopt(lopt_59),
        .lopt_1(lopt_60),
        .lopt_2(lopt_61),
        .lu_mem_protect_conflict_reg(lu_mem_tag_hit_copy_pc_1));
  design_1_system_cache_0_0_carry_and_129 \Gen_Set_Cachehit_Mem[1].LU_Tag_And_Inst3d 
       (.D(lu_mem_tag_hit_copy_wm_1),
        .lopt(lopt_62),
        .lopt_1(lopt_63),
        .lopt_2(lopt_64),
        .lopt_3(lopt_65),
        .lopt_4(lopt_66),
        .lopt_5(lopt_67),
        .lopt_6(lopt_68),
        .lopt_7(lopt_69),
        .lopt_8(lopt_70),
        .lu_mem_protect_conflict_reg(lu_mem_tag_hit_copy_md_1));
  design_1_system_cache_0_0_carry_and_130 \Gen_Set_Cachehit_Mem[1].LU_Tag_And_Inst3e 
       (.D(lu_mem_tag_hit_copy_ds_1),
        .lopt(lopt_62),
        .lopt_1(lopt_63),
        .lopt_2(lopt_64),
        .lu_mem_protect_conflict_reg(lu_mem_tag_hit_copy_wm_1));
  design_1_system_cache_0_0_carry_and_131 \Gen_Set_Cachehit_Mem[1].LU_Tag_And_Inst3f 
       (.D(lu_mem_tag_hit_copy_lb_1),
        .lopt(lopt_65),
        .lopt_1(lopt_66),
        .lopt_2(lopt_67),
        .lu_mem_protect_conflict_reg(lu_mem_tag_hit_copy_ds_1));
  design_1_system_cache_0_0_carry_and_132 \Gen_Set_Cachehit_Mem[1].LU_Tag_And_Inst3g 
       (.D(lu_mem_tag_hit_copy_rs_1),
        .lopt(lopt_68),
        .lopt_1(lopt_69),
        .lopt_2(lopt_70),
        .lu_mem_protect_conflict_reg(lu_mem_tag_hit_copy_lb_1));
  design_1_system_cache_0_0_carry_and_133 \Gen_Set_Cachehit_Mem[1].LU_Tag_And_Inst4 
       (.D(lu_mem_locked_hit_1),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 (\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_1 ),
        .\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst (\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ),
        .lopt(lopt_71),
        .lopt_1(lopt_72),
        .lopt_2(lopt_73),
        .lopt_3(lopt_74),
        .lopt_4(lopt_75),
        .lopt_5(lopt_76),
        .lopt_6(lopt_77),
        .lopt_7(lopt_78),
        .lopt_8(lopt_79),
        .\lu_check_info_reg[KillHit] (\lu_check_info_reg[KillHit]__0 ),
        .\lu_mem_info_reg[Force_Hit] (\lu_mem_info_reg[Force_Hit_n_0_] ),
        .lu_mem_protect_conflict_reg(lu_mem_tag_hit_copy_rs_1),
        .lu_mem_protect_conflict_reg_0(lud_mem_conflict),
        .\lu_mem_release_lock_hold_reg[1] (\lu_mem_release_lock_hold_reg_n_0_[1] ),
        .lu_mem_releasing_lock(lu_mem_releasing_lock[1]));
  design_1_system_cache_0_0_carry_and_134 \Gen_Set_Cachehit_Mem[1].LU_Tag_And_Inst4b 
       (.D(lu_mem_locked_hit_copy_lb_1),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 (lu_mem_locked_hit_1),
        .lopt(lopt_71),
        .lopt_1(lopt_72),
        .lopt_2(lopt_73));
  design_1_system_cache_0_0_carry_and_135 \Gen_Set_Cachehit_Mem[1].LU_Tag_And_Inst5 
       (.D(lu_mem_locked_write_1),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 (lu_mem_locked_hit_copy_lb_1),
        .lopt(lopt_74),
        .lopt_1(lopt_75),
        .lopt_2(lopt_76),
        .\lu_check_info_reg[Wr] (\lu_check_info_reg[Wr]__0 ),
        .\lu_mem_info_reg[Wr] (\lu_mem_info_reg[Wr]__0 ),
        .lu_mem_protect_conflict_reg(lud_mem_conflict));
  design_1_system_cache_0_0_carry_compare__parameterized2_136 \Gen_Set_Cachehit_Mem[1].LU_Tag_Compare_Inst1 
       (.DATA_OUTA(DATA_OUTA[38:21]),
        .Q({\lu_mem_info_reg[Addr_n_0_][31] ,\lu_mem_info_reg[Addr_n_0_][30] ,\lu_mem_info_reg[Addr_n_0_][28] ,\lu_mem_info_reg[Addr_n_0_][27] ,\lu_mem_info_reg[Addr_n_0_][25] ,\lu_mem_info_reg[Addr_n_0_][24] ,\lu_mem_info_reg[Addr_n_0_][22] ,\lu_mem_info_reg[Addr_n_0_][21] ,\lu_mem_info_reg[Addr_n_0_][19] ,\lu_mem_info_reg[Addr_n_0_][18] ,\lu_mem_info_reg[Addr_n_0_][16] ,\lu_mem_info_reg[Addr_n_0_][15] }),
        .lopt(lopt_41),
        .lopt_1(lopt_42),
        .lopt_10(lopt_51),
        .lopt_11(lopt_52),
        .lopt_2(lopt_43),
        .lopt_3(lopt_44),
        .lopt_4(lopt_45),
        .lopt_5(lopt_46),
        .lopt_6(lopt_47),
        .lopt_7(lopt_48),
        .lopt_8(lopt_49),
        .lopt_9(lopt_50),
        .\lu_check_info_reg[Addr][14] (\Gen_Set_Cachehit_Mem[0].LU_Tag_Compare_Inst1_n_1 ),
        .\lu_check_info_reg[Addr][17] (\Gen_Set_Cachehit_Mem[0].LU_Tag_Compare_Inst1_n_2 ),
        .\lu_check_info_reg[Addr][20] (\Gen_Set_Cachehit_Mem[0].LU_Tag_Compare_Inst1_n_3 ),
        .\lu_check_info_reg[Addr][23] (\Gen_Set_Cachehit_Mem[0].LU_Tag_Compare_Inst1_n_4 ),
        .\lu_check_info_reg[Addr][26] (\Gen_Set_Cachehit_Mem[0].LU_Tag_Compare_Inst1_n_5 ),
        .\lu_check_info_reg[Addr][29] (\Gen_Set_Cachehit_Mem[0].LU_Tag_Compare_Inst1_n_6 ),
        .\lu_check_info_reg[Addr][31] ({lookup_stall_addr[31:30],lookup_stall_addr[28:27],lookup_stall_addr[25:24],lookup_stall_addr[22:21],lookup_stall_addr[19:18],lookup_stall_addr[16:15]}),
        .lu_mem_pre_pure_valid_tag_1(lu_mem_pre_pure_valid_tag_1),
        .lu_mem_protect_conflict_reg(lud_mem_conflict),
        .lu_mem_valid_carry_1(lu_mem_valid_carry_1));
  design_1_system_cache_0_0_carry_or_137 \Gen_Set_Cachehit_Mem[1].LU_Tag_Or_Inst1 
       (.D(lu_mem_force_way),
        .lopt(lopt_53),
        .lopt_1(lopt_54),
        .lopt_2(lopt_55),
        .lopt_3(lopt_56),
        .lopt_4(lopt_57),
        .lopt_5(lopt_58),
        .lopt_6(lopt_59),
        .lopt_7(lopt_60),
        .lopt_8(lopt_61),
        .\lu_check_info_reg[KillHit] (\lu_check_info_reg[KillHit]__0 ),
        .\lu_mem_info_reg[Force_Hit] (\lu_mem_info_reg[Force_Hit_n_0_] ),
        .lu_mem_masked_valid_tag_1(lu_mem_masked_valid_tag_1),
        .lu_mem_protect_conflict_reg(lud_mem_conflict),
        .lu_mem_valid_tag_1(lu_mem_valid_tag_1));
  design_1_system_cache_0_0_carry_or_138 \Gen_Set_Cachehit_Mem[1].LU_Tag_Or_Inst2 
       (.D(lu_mem_locked_write_1),
        .DATA_OUTA(DATA_OUTA[40:39]),
        .lopt(lopt_77),
        .lopt_1(lopt_78),
        .lopt_2(lopt_79),
        .lu_mem_protect_conflict_reg(lud_mem_conflict),
        .lu_mem_protected_pre1_1(lu_mem_protected_pre1_1),
        .\lu_mem_release_lock_hold_reg[1] (\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ),
        .lu_mem_valid_reg(lu_mem_valid_reg_n_0),
        .\update_release_tag_reg[Valid] (\update_release_tag_reg[Valid]_1 [1]));
  design_1_system_cache_0_0_carry_or_139 \Gen_Set_Cachehit_Mem[1].LU_Tag_Or_Inst3 
       (.DATA_OUTA(DATA_OUTA[41]),
        .lopt(lopt_80),
        .lopt_1(lopt_81),
        .lu_mem_protect_conflict_reg(lud_mem_conflict),
        .lu_mem_protected_pre1_1(lu_mem_protected_pre1_1),
        .lu_mem_protected_pre2_1(lu_mem_protected_pre2_1),
        .\lu_mem_release_lock_hold_reg[1] (\lu_mem_release_lock_hold_reg_n_0_[1] ),
        .lu_mem_releasing_lock(lu_mem_releasing_lock[1]),
        .lu_mem_valid_reg(\Gen_Set_Cachehit_Mem[0].LU_Tag_Or_Inst3_n_1 ),
        .\update_release_tag_reg[Valid] (\update_release_tag_reg[Valid]_1 [1]));
  design_1_system_cache_0_0_carry_or_140 \Gen_Set_Cachehit_Mem[1].LU_Tag_Or_Inst4 
       (.D(lu_mem_protected[1]),
        .lopt(lopt_80),
        .lopt_1(lopt_81),
        .lu_mem_protected_pre2_1(lu_mem_protected_pre2_1));
  design_1_system_cache_0_0_carry_latch_and_141 \Gen_Set_Data_En[0].LUD_WStep_PR_And_Inst1 
       (.\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 (\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 ),
        .SRI(SRI_0),
        .lud_step_want_step_offset(lud_step_want_step_offset));
  design_1_system_cache_0_0_carry_latch_and__parameterized2 \Gen_Set_Data_En[1].LUD_WStep_PR_And_Inst1 
       (.\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 (\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_0 ),
        .SRI(SRI),
        .lookup_data_en_ii_2(lookup_data_en_ii_2),
        .\lu_check_valid_bits_reg[1] (\lu_check_valid_bits_reg[1]_0 ),
        .\lu_mem_info_reg[Addr][10] (\lu_check_tag_addr_reg[10]_0 ),
        .\lu_mem_info_reg[Addr][9] (\lu_check_tag_addr_reg[9]_0 ),
        .lu_mem_valid_reg(lu_mem_valid_reg_n_0),
        .lud_step_want_step_offset(lud_step_want_step_offset),
        .update_lock_release(update_lock_release),
        .\update_release_tag_reg[Addr][10] (\update_release_tag_reg[Addr][10] ));
  design_1_system_cache_0_0_carry_and_n_142 LUD_Addr_PR_And_Inst1
       (.S(S_10),
        .lopt(lopt_87),
        .lopt_1(lopt_88),
        .lud_addr_piperun_pre1(lud_addr_piperun_pre1),
        .lud_addr_piperun_pre2(lud_addr_piperun_pre2));
  design_1_system_cache_0_0_carry_or_n_143 LUD_Addr_PR_Or_Inst1
       (.lopt(lopt_87),
        .lopt_1(lopt_88),
        .lopt_2(S_10),
        .lopt_3(lopt_89),
        .lopt_4(lopt_90),
        .lopt_5(S_13),
        .lopt_6(lopt_91),
        .lopt_7(lopt_92),
        .lopt_8(S_9),
        .lu_mem_protect_conflict_reg(Chk_Valid_Inst_n_84),
        .lud_addr_piperun_pre1(lud_addr_piperun_pre1),
        .lud_mem_piperun(lud_mem_piperun));
  design_1_system_cache_0_0_carry_or_144 LUD_Addr_PR_Or_Inst2
       (.S(S_13),
        .lopt(lopt_89),
        .lopt_1(lopt_90),
        .lud_addr_piperun(lud_addr_piperun),
        .lud_addr_piperun_pre2(lud_addr_piperun_pre2),
        .lud_mem_piperun(lud_mem_piperun),
        .lud_mem_speculative_valid(lud_mem_speculative_valid),
        .lud_mem_speculative_valid_reg(LUD_Addr_PR_Or_Inst2_n_1));
  design_1_system_cache_0_0_carry_and_n_145 LUD_Mem_PR_And_Inst1
       (.Q(lu_check_locked_hit),
        .SR(p_13_out),
        .\Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][0] (p_11_out),
        .lookup_protect_conflict(lookup_protect_conflict),
        .\lookup_read_data_info[0,0][Last] (\lookup_read_data_info[0,0][Last] ),
        .lopt(lopt_84),
        .lopt_1(lopt_85),
        .lopt_2(lopt_86),
        .\lu_check_tag_hit_reg[1] (lookup_tag_assoc_way),
        .lud_addr_piperun(lud_addr_piperun),
        .lud_mem_completed_reg(LUD_Mem_PR_And_Inst1_n_3),
        .lud_mem_completed_reg_0(lud_mem_completed_reg_n_0),
        .lud_mem_delayed_read_data(lud_mem_delayed_read_data),
        .lud_mem_keep_single_during_stall(lud_mem_keep_single_during_stall),
        .lud_mem_keep_single_during_stall_reg(LUD_Mem_PR_And_Inst1_n_4),
        .lud_mem_last(lud_mem_last),
        .lud_mem_piperun(lud_mem_piperun),
        .\lud_mem_port_one_hot_reg[1] (\lud_reg_port_num_reg[0]_0 ),
        .lud_mem_waiting_for_pipe_reg(lud_mem_waiting_for_pipe_reg_0),
        .lud_mem_way_d1(lud_mem_way_d1),
        .\lud_mem_way_d1_reg[0] (LUD_Mem_PR_And_Inst1_n_5),
        .lud_reg_last_reg(LUD_Mem_PR_And_Inst1_n_7),
        .lud_reg_piperun(lud_reg_piperun),
        .\lud_reg_port_num_reg[0] (LUD_Mem_PR_And_Inst1_n_6),
        .\lud_reg_port_num_reg[0]_0 (\lud_reg_port_num_reg[0]_1 ),
        .p_185_in(p_185_in));
  design_1_system_cache_0_0_carry_and_146 LUD_Read_PR_And_Inst1
       (.lopt(lopt_93),
        .lopt_1(lopt_94),
        .\lu_check_info_reg[Wr] (Chk_Valid_Inst_n_74),
        .lud_step_offset(lud_step_offset),
        .lud_step_offset_is_read(lud_step_offset_is_read));
  design_1_system_cache_0_0_carry_select_or_n LUD_Reg_PR_Or_Inst1
       (.A_N(A_N),
        .lopt(lopt_82),
        .lopt_1(lopt_83),
        .lopt_2(lud_reg_valid_reg_0),
        .lopt_3(lopt_84),
        .lopt_4(lopt_85),
        .lopt_5(lopt_86),
        .lud_reg_piperun_pre1(lud_reg_piperun_pre1),
        .\lud_reg_port_num_reg[0] (\lud_reg_port_num_reg[0]_1 ),
        .\read_data_status[0,0][Hit_Full] (\read_data_status[0,0][Hit_Full] ));
  design_1_system_cache_0_0_carry_or_n_147 LUD_Reg_PR_Or_Inst2
       (.lopt(lopt_82),
        .lopt_1(lopt_83),
        .lud_reg_piperun(lud_reg_piperun),
        .lud_reg_piperun_pre1(lud_reg_piperun_pre1),
        .lud_reg_valid_reg(lud_reg_valid_reg_0));
  design_1_system_cache_0_0_carry_and_n_148 LUD_Step_PR_And_Inst1
       (.Q(ARESET_I),
        .S(S_12),
        .lookup_data_en_ii_2(lookup_data_en_ii_2),
        .lopt(lopt_93),
        .lopt_1(lopt_94),
        .lopt_2(Chk_Valid_Inst_n_74),
        .lu_mem_protect_conflict_reg(lud_mem_conflict),
        .lud_addr_pipeline_full_reg(lud_step_delayed_restart_reg_0),
        .lud_mem_already_used_reg(Chk_Valid_Inst_n_18),
        .lud_step_delayed_restart(lud_step_delayed_restart),
        .lud_step_delayed_restart_reg(LUD_Step_PR_And_Inst1_n_1),
        .lud_step_offset(lud_step_offset));
  design_1_system_cache_0_0_carry_or_149 LUD_WStep_PR_Or_Inst1
       (.S(S_9),
        .lopt(lopt_91),
        .lopt_1(lopt_92),
        .lud_addr_piperun(lud_addr_piperun),
        .lud_step_want_step_offset(lud_step_want_step_offset));
  design_1_system_cache_0_0_carry_and_n_150 LU_Check_PR_And_Inst1
       (.lopt(lopt_97),
        .lopt_1(lopt_98),
        .lu_check_piperun_pre1(lu_check_piperun_pre1),
        .lu_check_piperun_pre2(lu_check_piperun_pre2),
        .lu_check_wr_already_pushed_reg(Chk_Valid_Inst_n_82));
  design_1_system_cache_0_0_carry_and_n_151 LU_Check_PR_And_Inst2
       (.Q(lu_check_valid_bits[0]),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (LU_Check_PR_And_Inst2_n_2),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (LU_Check_PR_And_Inst2_n_3),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 (LU_Check_PR_And_Inst2_n_4),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 (LU_Check_PR_And_Inst2_n_5),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_3 (lu_check_locked_bits[0]),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_4 (ARESET_I),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_5 (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_6 (Chk_Valid_Inst_n_11),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_7 (update_valid),
        .\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst (Par_Dirty_Inst_n_0),
        .lopt(lopt_99),
        .lopt_1(lopt_100),
        .lopt_2(Chk_Valid_Inst_n_81),
        .lopt_3(lopt_101),
        .lopt_4(lopt_102),
        .lopt_5(lu_check_valid_delayed_reg_0),
        .lopt_6(lopt_103),
        .lopt_7(lopt_104),
        .lopt_8(S_2),
        .\lru_check_next_way_i_reg[0] (Par_Dirty_Inst_n_1),
        .\lu_check_info_reg[Allocate] (\lu_check_info_reg[Allocate]__0 ),
        .\lu_check_info_reg[KillHit] (Chk_Valid_Inst_n_12),
        .\lu_check_info_reg[KillHit]_0 (Chk_Valid_Inst_n_9),
        .lu_check_piperun(lu_check_piperun),
        .lu_check_piperun_pre2(lu_check_piperun_pre2),
        .update_piperun(update_piperun),
        .update_reused_tag(update_reused_tag),
        .update_reused_tag_reg(LU_Check_PR_And_Inst2_n_1),
        .\write_req_info[0][Internal] (\write_req_info[0][Internal] ));
  design_1_system_cache_0_0_carry_or_n_152 LU_Check_PR_Or_Inst1
       (.\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (update_valid),
        .lopt(lopt_95),
        .lopt_1(lopt_96),
        .lu_check_piperun_pre1(lu_check_piperun_pre1),
        .update_piperun(update_piperun));
  design_1_system_cache_0_0_carry_and_153 LU_Check_TagConf_And_Inst1
       (.A121_out(A121_out),
        .Q(ARESET_I),
        .\Use_FPGA.Full_Inst (lookup_mem_piperun),
        .access_valid(access_valid),
        .lookup_protect_conflict(lookup_protect_conflict),
        .lookup_restart_mem_done(lookup_restart_mem_done),
        .lookup_restart_mem_done_reg(lookup_fetch_piperun),
        .lopt(lopt_105),
        .lopt_1(lopt_106),
        .lu_check_match_addr(lu_check_match_addr),
        .\lu_mem_info_reg[Port_Num][0] (LU_Check_TagConf_And_Inst1_n_1),
        .lu_mem_protect_conflict_reg(lud_mem_conflict),
        .lu_mem_tag_conflict(lu_mem_tag_conflict),
        .lu_mem_valid_reg(LU_Check_TagConf_And_Inst1_n_0),
        .lu_mem_valid_reg_0(lu_mem_valid_reg_n_0),
        .update_tag_conflict(update_tag_conflict));
  design_1_system_cache_0_0_carry_compare_154 LU_Check_TagConf_Compare_Inst1
       (.D(D[5:0]),
        .Q(Q[11:6]),
        .\The_Compare[2].sel_reg (\The_Compare[2].sel_reg ),
        .lopt(lopt_105),
        .lopt_1(lopt_106),
        .lopt_2(A121_out),
        .lu_check_match_addr(lu_check_match_addr));
  design_1_system_cache_0_0_carry_select_or LU_DHS_Or_Inst1
       (.lookup_data_hit_pre_stall(lookup_data_hit_pre_stall),
        .lookup_protect_conflict(lookup_protect_conflict),
        .lopt(lopt_124),
        .lopt_1(lopt_125),
        .lopt_2(lopt_126),
        .lopt_3(lopt_127),
        .lopt_4(lopt_128),
        .lopt_5(lopt_129),
        .\lu_check_info_reg[Port_Num][0] (\update_info_reg[Port_Num][0]_0 ),
        .lu_check_wait_for_update(lu_check_wait_for_update),
        .update_write_miss_busy(update_write_miss_busy));
  design_1_system_cache_0_0_carry_or_155 LU_DHS_Or_Inst2
       (.lookup_data_hit_pre_stall(lookup_data_hit_pre_stall),
        .lookup_data_hit_stall(lookup_data_hit_stall),
        .lud_write_hit_done_reg(lud_write_hit_done_reg_n_0));
  design_1_system_cache_0_0_carry_and_156 LU_DS_IO_And_Inst1
       (.lopt(lopt_130),
        .lopt_1(lopt_131),
        .lopt_2(lopt_132),
        .\lu_check_info_reg[Wr] (\lu_check_info_reg[Wr]__0 ),
        .lu_io_full_block_read(lu_io_full_block_read),
        .lu_io_selected_full(lu_io_selected_full),
        .lud_addr_pipeline_full_reg(lud_step_delayed_restart_reg_0),
        .lud_mem_completed_reg(lud_mem_completed_reg_n_0),
        .lud_mem_keep_single_during_stall(lud_mem_keep_single_during_stall));
  design_1_system_cache_0_0_carry_and_n_157 LU_DS_IO_And_Inst2
       (.lookup_io_stall_carry(lookup_io_stall_carry),
        .lookup_io_stall_carry_no_wait(lookup_io_stall_carry_no_wait),
        .lopt(lopt_135),
        .lopt_1(lopt_136),
        .lopt_2(lopt_137),
        .lu_check_wait_for_update(lu_check_wait_for_update));
  design_1_system_cache_0_0_carry_and__parameterized3 LU_DS_IO_And_Inst3
       (.Carry_IN(lookup_io_and_conflict_stall),
        .Carry_OUT(lookup_io_stall_hit_carry),
        .Q(lu_check_tag_hit_copy_ds),
        .lopt(lopt_141),
        .lopt_1(lopt_142),
        .lopt_2(lopt_143));
  design_1_system_cache_0_0_carry_and_n_158 LU_DS_IO_And_Inst4
       (.Carry_OUT(lookup_io_stall_hit_carry),
        .S(S_14),
        .lookup_io_stall_hit_carry_no_last(lookup_io_stall_hit_carry_no_last),
        .lopt(lopt_144),
        .lopt_1(lopt_145));
  design_1_system_cache_0_0_carry_and_159 LU_DS_IO_And_Inst5
       (.A134_out(A134_out),
        .lookup_io_stall_hit_carry_no_last(lookup_io_stall_hit_carry_no_last),
        .lookup_io_stall_pre_valid(lookup_io_stall_pre_valid),
        .lopt(lopt_146),
        .lopt_1(lopt_147));
  design_1_system_cache_0_0_carry_and_n_160 LU_DS_IO_And_Inst6
       (.lookup_io_stall_pre_valid(lookup_io_stall_pre_valid),
        .lookup_io_stall_valid(lookup_io_stall_valid),
        .lopt(lopt_148),
        .lopt_1(lopt_149),
        .lopt_2(lopt_150),
        .\lu_check_info_reg[KillHit] (\lu_check_info_reg[KillHit]__0 ));
  design_1_system_cache_0_0_carry_compare_const LU_DS_IO_And_Inst7
       (.Q(lu_check_locked_hit),
        .lookup_io_data_stall(lookup_io_data_stall),
        .lookup_io_stall_valid(lookup_io_stall_valid),
        .lopt(lopt_148),
        .lopt_1(lopt_149),
        .lopt_2(lopt_150),
        .\lu_check_info_reg[Wr] (\lu_check_info_reg[Wr]__0 ));
  design_1_system_cache_0_0_carry_select_or_161 LU_DS_IO_Or_Inst1
       (.S_4(S_4),
        .lopt(lopt_130),
        .lopt_1(lopt_131),
        .lopt_2(lopt_132),
        .lopt_3(lopt_133),
        .lopt_4(lopt_134),
        .lopt_5(S_5),
        .lu_io_selected_full(lu_io_selected_full),
        .\lud_reg_port_num_reg[0] (\lud_reg_port_num_reg[0]_1 ),
        .\read_data_status[0,0][Hit_Full] (\read_data_status[0,0][Hit_Full] ));
  design_1_system_cache_0_0_carry_or_162 LU_DS_IO_Or_Inst2
       (.S(S_5),
        .lopt(lopt_133),
        .lopt_1(lopt_134),
        .lu_io_full_block_read(lu_io_full_block_read),
        .lu_io_lud_stall_pipe(lu_io_lud_stall_pipe));
  design_1_system_cache_0_0_carry_select_or_163 LU_DS_IO_Or_Inst3
       (.\access_data_info[0,0][Valid] (\access_data_info[0,0][Valid] ),
        .\access_data_info[0,1][Valid] (\access_data_info[0,1][Valid] ),
        .lookup_io_stall_carry(lookup_io_stall_carry),
        .lopt(lopt_135),
        .lopt_1(lopt_136),
        .lopt_2(lopt_137),
        .lopt_3(lopt_138),
        .lopt_4(lopt_139),
        .lopt_5(lopt_140),
        .\lu_check_info_reg[Port_Num][0] (\update_info_reg[Port_Num][0]_0 ),
        .\lu_check_info_reg[Wr] (\lu_check_info_reg[Wr]__0 ),
        .lu_io_lud_stall_pipe(lu_io_lud_stall_pipe));
  design_1_system_cache_0_0_carry_select_or_164 LU_DS_IO_Or_Inst4
       (.Carry_IN(lookup_io_and_conflict_stall),
        .lookup_io_stall_carry_no_wait(lookup_io_stall_carry_no_wait),
        .lopt(lopt_138),
        .lopt_1(lopt_139),
        .lopt_10(lopt_147),
        .lopt_11(A134_out),
        .lopt_2(lopt_140),
        .lopt_3(lopt_141),
        .lopt_4(lopt_142),
        .lopt_5(lopt_143),
        .lopt_6(lopt_144),
        .lopt_7(lopt_145),
        .lopt_8(S_14),
        .lopt_9(lopt_146),
        .\lu_check_info_reg[Port_Num][0] (\update_info_reg[Port_Num][0]_0 ),
        .\lu_check_info_reg[Wr] (\lu_check_info_reg[Wr]__0 ),
        .lu_check_wait_for_update(lu_check_wait_for_update),
        .update_write_miss_busy(update_write_miss_busy));
  design_1_system_cache_0_0_carry_and_165 LU_DS_LB_And_Inst0
       (.lopt(lopt_151),
        .lopt_1(lu_ds_last_beat_next_last_n_reg_n_0),
        .lopt_2(A32_out),
        .lopt_3(lopt_152),
        .lopt_4(lopt_153),
        .lopt_5(lopt_154),
        .lopt_6(lopt_155),
        .lopt_7(lopt_156),
        .lopt_8(lopt_157),
        .lu_check_multi_beat(lu_check_multi_beat),
        .lu_ds_last_beat_multi_start(lu_ds_last_beat_multi_start));
  design_1_system_cache_0_0_carry_and_di LU_DS_LB_And_Inst1
       (.A32_out(A32_out),
        .lopt(lopt_151),
        .lu_ds_last_beat(lu_ds_last_beat),
        .lu_ds_last_beat_multi_start(lu_ds_last_beat_multi_start),
        .lu_ds_last_beat_next_last_n_reg(lu_ds_last_beat_next_last_n_reg_n_0));
  design_1_system_cache_0_0_carry_and_n_166 LU_DS_LB_And_Inst2
       (.Carry_IN(lu_ds_last_beat_no_wait),
        .lopt(lopt_152),
        .lopt_1(lopt_153),
        .lopt_2(lopt_154),
        .lu_check_wait_for_update(lu_check_wait_for_update),
        .lu_ds_last_beat(lu_ds_last_beat),
        .lud_write_hit_done_reg(lud_write_hit_done_reg_n_0));
  design_1_system_cache_0_0_carry_and__parameterized3_167 LU_DS_LB_And_Inst3
       (.Carry_IN(lu_ds_last_beat_no_wait),
        .Carry_OUT(lu_ds_last_beat_hit),
        .Q(lu_check_tag_hit_copy_lb),
        .lopt(lopt_155),
        .lopt_1(lopt_156),
        .lopt_2(lopt_157));
  design_1_system_cache_0_0_carry_and_168 LU_DS_LB_And_Inst4
       (.Carry_OUT(lu_ds_last_beat_hit),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (lu_check_valid_delayed_reg_0),
        .lopt(lopt_158),
        .lopt_1(lopt_159),
        .lopt_2(lopt_160),
        .lopt_3(lopt_161),
        .lopt_4(lopt_162),
        .lopt_5(lopt_163),
        .lu_ds_last_beat_valid_hit(lu_ds_last_beat_valid_hit));
  design_1_system_cache_0_0_carry_and_n_169 LU_DS_LB_And_Inst5
       (.Carry_IN(lu_ds_last_beat_valid),
        .lopt(lopt_158),
        .lopt_1(lopt_159),
        .lopt_2(lopt_160),
        .\lu_check_info_reg[KillHit] (\lu_check_info_reg[KillHit]__0 ),
        .lu_ds_last_beat_valid_hit(lu_ds_last_beat_valid_hit));
  design_1_system_cache_0_0_carry_compare_const__parameterized1 LU_DS_LB_And_Inst6
       (.Carry_IN(lu_ds_last_beat_valid),
        .Carry_OUT(lu_ds_last_beat_stall_pre),
        .Q(lu_check_locked_hit_copy_lb),
        .lopt(lopt_161),
        .lopt_1(lopt_162),
        .lopt_2(lopt_163),
        .\lu_check_info_reg[Wr] (\lu_check_info_reg[Wr]__0 ));
  design_1_system_cache_0_0_carry_compare_const__parameterized3 LU_DS_RS_And_Inst1
       (.Carry_Out(lu_ds_rs_miss),
        .Q(lu_check_tag_hit_copy_rs),
        .lopt(lopt_164),
        .lopt_1(lopt_165),
        .lopt_2(A141_out),
        .lopt_3(lopt_166),
        .lopt_4(lopt_167),
        .lopt_5(lopt_168),
        .lopt_6(lopt_169),
        .lopt_7(lopt_170),
        .lopt_8(lopt_171));
  design_1_system_cache_0_0_carry_and_170 LU_DS_RS_And_Inst2
       (.A141_out(A141_out),
        .Carry_Out(lu_ds_rs_miss),
        .lopt(lopt_164),
        .lopt_1(lopt_165),
        .lu_ds_rs_read_miss(lu_ds_rs_read_miss));
  design_1_system_cache_0_0_carry_and_171 LU_DS_RS_And_Inst3
       (.lopt(lopt_166),
        .lopt_1(lopt_167),
        .lopt_2(lopt_168),
        .lu_ds_rs_new_read_no_rs(lu_ds_rs_new_read_no_rs),
        .lu_ds_rs_read_miss(lu_ds_rs_read_miss),
        .\lu_mem_info_reg[Wr] (\lu_mem_info_reg[Wr]__0 ),
        .lu_mem_valid_reg(lu_mem_valid_reg_n_0));
  design_1_system_cache_0_0_carry_and_172 LU_DS_RS_And_Inst4
       (.lopt(lopt_169),
        .lopt_1(lopt_170),
        .lopt_2(lopt_171),
        .lu_ds_rs_del_restart_no_rs(lu_ds_rs_del_restart_no_rs),
        .lu_ds_rs_new_read_no_rs(lu_ds_rs_new_read_no_rs),
        .lu_mem_protect_conflict_reg(lud_mem_conflict),
        .lud_addr_pipeline_full_reg(lud_step_delayed_restart_reg_0));
  design_1_system_cache_0_0_carry_and_173 LU_DS_RS_And_Inst5
       (.Carry_OUT(lu_ds_last_beat_stall_pre),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (LU_DS_RS_And_Inst5_n_0),
        .lookup_io_data_stall(lookup_io_data_stall),
        .lookup_protect_conflict(lookup_protect_conflict),
        .lookup_restart_mem_done(lookup_restart_mem_done),
        .lu_ds_rs_del_restart_no_rs(lu_ds_rs_del_restart_no_rs),
        .lu_mem_protect_conflict_reg(lud_mem_conflict),
        .lud_addr_pipeline_full_reg(lud_step_delayed_restart_reg_0),
        .lud_step_delayed_restart(lud_step_delayed_restart));
  design_1_system_cache_0_0_carry_and_174 LU_Data_WE_And_Inst1
       (.\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (lu_check_valid_delayed_reg_0),
        .lookup_raw_hit_carry2(lookup_raw_hit_carry2),
        .lopt(lopt_172),
        .lopt_1(lopt_173),
        .lu_check_tag_hit_all_carry(lu_check_tag_hit_all_carry));
  design_1_system_cache_0_0_carry_and_n_175 LU_Data_WE_And_Inst2
       (.lookup_hit_carry(lookup_hit_carry),
        .lookup_raw_hit_carry2(lookup_raw_hit_carry2),
        .lopt(lopt_174),
        .lopt_1(lopt_175),
        .lopt_2(lopt_176));
  design_1_system_cache_0_0_carry_and_176 LU_Data_WE_And_Inst3
       (.lookup_hit_carry(lookup_hit_carry),
        .lookup_write_hit_carry(lookup_write_hit_carry),
        .lopt(lopt_177),
        .lopt_1(lopt_178),
        .\lu_check_info_reg[Wr] (\lu_check_info_reg[Wr]__0 ));
  design_1_system_cache_0_0_carry_select_and_n LU_Data_WE_And_Inst4
       (.Carry_In(lookup_write_hit_no_busy),
        .lookup_write_hit_carry(lookup_write_hit_carry),
        .lopt(lopt_179),
        .lopt_1(lopt_180),
        .lopt_2(lopt_181),
        .lopt_3(lopt_182),
        .lopt_4(lopt_183),
        .lopt_5(\The_Compare[0].sel_reg_5 ),
        .\lu_check_info_reg[Port_Num][0] (\update_info_reg[Port_Num][0]_0 ),
        .update_write_miss_busy(update_write_miss_busy));
  design_1_system_cache_0_0_carry_select_and_177 LU_Data_WE_And_Inst5
       (.A_6(A_6),
        .Carry_Out(lookup_write_hit_no_conflict),
        .\The_Compare[0].sel_reg_5 (\The_Compare[0].sel_reg_5 ),
        .WEA(WEA),
        .lopt(lopt_182),
        .lopt_1(lopt_183),
        .lu_check_allow_write_reg(lookup_wm_allow_write),
        .\lu_check_info_reg[Port_Num][0] (\update_info_reg[Port_Num][0]_0 ),
        .lu_check_wait_for_update(lu_check_wait_for_update),
        .\wr_port_data_info_reg[0][BE][3] (\wr_port_data_info_reg[0][BE][3] ),
        .\wr_port_data_info_reg[0][BE][3]_0 (\wr_port_data_info_reg[0][BE][3]_0 ));
  design_1_system_cache_0_0_carry_compare_const__parameterized5 LU_Data_WE_Const_Inst1
       (.Carry_In(lookup_write_hit_no_busy),
        .Carry_Out(lookup_write_hit_no_conflict),
        .Q({\lu_check_locked_write_reg_n_0_[1] ,\lu_check_locked_write_reg_n_0_[0] }),
        .lopt(lopt_179),
        .lopt_1(lopt_180),
        .lopt_2(lopt_181));
  design_1_system_cache_0_0_carry_vec_or LU_Data_WE_Or_Inst1
       (.Q({lookup_tag_assoc_way,\lu_check_tag_hit_reg_n_0_[0] }),
        .lopt(lopt_172),
        .lopt_1(lopt_173),
        .lopt_2(lu_check_valid_delayed_reg_0),
        .lopt_3(lopt_174),
        .lopt_4(lopt_175),
        .lopt_5(lopt_176),
        .lopt_6(lopt_177),
        .lopt_7(lopt_178),
        .lopt_8(\lu_check_info_reg[Wr]__0 ),
        .lu_check_tag_hit_all_carry(lu_check_tag_hit_all_carry));
  design_1_system_cache_0_0_carry_and_178 LU_Fetch_PR_And_Inst1
       (.\Use_FPGA.Full_Inst (lookup_mem_piperun),
        .lopt(lopt_184),
        .lopt_1(lopt_185),
        .lopt_2(lu_mem_valid_reg_n_0),
        .lopt_3(lopt_186),
        .lopt_4(lopt_187),
        .lopt_5(LU_Check_TagConf_And_Inst1_n_1),
        .lopt_6(lopt_188),
        .lopt_7(lopt_189),
        .lopt_8(access_valid),
        .lu_fetch_piperun_pre2(lu_fetch_piperun_pre2));
  design_1_system_cache_0_0_carry_and_n_179 LU_Fetch_PR_And_Inst2
       (.Q(ARESET_I),
        .lookup_restart_mem_done_reg(LU_Check_TagConf_And_Inst1_n_1),
        .lopt(lopt_186),
        .lopt_1(lopt_187),
        .lu_fetch_piperun_pre1(lu_fetch_piperun_pre1),
        .\lu_mem_info_reg[Port_Num][0] (lookup_fetch_piperun),
        .lu_mem_release_lock_hold(lu_mem_release_lock_hold));
  design_1_system_cache_0_0_carry_or_n_180 LU_Fetch_PR_Or_Inst2
       (.lopt(lopt_184),
        .lopt_1(lopt_185),
        .lu_fetch_piperun_pre1(lu_fetch_piperun_pre1),
        .lu_fetch_piperun_pre2(lu_fetch_piperun_pre2),
        .lu_mem_valid_reg(lu_mem_valid_reg_n_0));
  design_1_system_cache_0_0_carry_latch_and_181 LU_LRU_Latch_Inst1
       (.E(lu_check_piperun),
        .SRI(SRI_11),
        .WEBWE(WEBWE));
  design_1_system_cache_0_0_carry_compare_const__parameterized7 LU_MD_And_Inst1
       (.Carry_IN(dirty_bit_miss),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (Chk_Valid_Inst_n_29),
        .lopt(lopt_190),
        .lopt_1(lopt_191),
        .lru_dirty_bit(lru_dirty_bit));
  design_1_system_cache_0_0_carry_compare_const__parameterized3_182 LU_MD_And_Inst2
       (.Carry_IN(dirty_bit_miss),
        .Carry_OUT(dirty_bit_miss_valid),
        .Q(lu_check_tag_hit_copy_md),
        .lopt(lopt_192),
        .lopt_1(lopt_193),
        .lopt_2(lopt_194));
  design_1_system_cache_0_0_carry_and_183 LU_MD_And_Inst3
       (.Carry_OUT(dirty_bit_miss_valid),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (Chk_Valid_Inst_n_83),
        .dirty_miss_valid(dirty_miss_valid),
        .lopt(lopt_195),
        .lopt_1(lopt_196),
        .lopt_2(\The_Compare[0].carry_and_I1/S ),
        .lopt_3(lopt_197),
        .lopt_4(lopt_198),
        .lopt_5(lopt_199),
        .lopt_6(lopt_200),
        .lopt_7(lopt_201),
        .lopt_8(lopt_202));
  design_1_system_cache_0_0_carry_compare_const_184 LU_MD_And_Inst4
       (.Q({lookup_tag_assoc_way,\lu_check_tag_hit_reg_n_0_[0] }),
        .dirty_bit(dirty_bit),
        .dirty_bit_valid(dirty_bit_valid),
        .lopt(lopt_197),
        .lopt_1(lopt_198),
        .lopt_2(lopt_199),
        .\lu_check_info_reg[KillHit] (\lu_check_info_reg[KillHit]__0 ));
  design_1_system_cache_0_0_carry_and_185 LU_MD_And_Inst5
       (.dirty_bit_valid(dirty_bit_valid),
        .lookup_miss_dirty_pre(lookup_miss_dirty_pre),
        .lopt(lopt_200),
        .lopt_1(lopt_201),
        .lopt_2(lopt_202));
  design_1_system_cache_0_0_carry_and_186 LU_MD_And_Inst6
       (.\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (lu_check_valid_delayed_reg_0),
        .lookup_miss_dirty(lookup_miss_dirty),
        .lookup_miss_dirty_pre(lookup_miss_dirty_pre),
        .lookup_wm_evict(lookup_wm_evict),
        .lopt(lopt_203),
        .lopt_1(lopt_204),
        .lopt_2(lopt_205),
        .lopt_3(lopt_206),
        .lopt_4(lopt_207),
        .lopt_5(lopt_208),
        .lopt_6(lopt_209),
        .lopt_7(lopt_210),
        .lopt_8(lopt_211),
        .\lu_check_info_reg[Keep] (\lu_check_info_reg[Keep_n_0_] ),
        .\lu_check_info_reg[KillHit] (TAG_Need_Inst_n_3),
        .\lu_check_info_reg[Wr] (\lu_check_info_reg[Wr]__0 ));
  design_1_system_cache_0_0_carry_select_or_187 LU_MD_Or_Inst1
       (.S(\The_Compare[1].carry_or_I1/S ),
        .S_6(S_6),
        .lopt(lopt_190),
        .lopt_1(lopt_191),
        .lopt_2(Chk_Valid_Inst_n_29),
        .lopt_3(lopt_192),
        .lopt_4(lopt_193),
        .lopt_5(lopt_194),
        .lru_dirty_bit(lru_dirty_bit));
  design_1_system_cache_0_0_carry_vec_or__parameterized1 LU_MD_Or_Inst3
       (.S(\The_Compare[0].carry_and_I1/S ),
        .dirty_bit(dirty_bit),
        .dirty_miss_valid(dirty_miss_valid),
        .lopt(lopt_195),
        .lopt_1(lopt_196));
  design_1_system_cache_0_0_carry_and_n_188 LU_Mem_PR_And_Inst1
       (.Q(ARESET_I),
        .S_2(S_2),
        .\The_Bit[0].Using_FPGA.Using_Set.FDS_Inst (lookup_mem_piperun),
        .lopt(lopt_103),
        .lopt_1(lopt_104),
        .\lu_mem_info_reg[Wr] (\lu_mem_info_reg[Wr]__0 ),
        .lu_mem_piperun_pre1(lu_mem_piperun_pre1),
        .lu_mem_valid_reg(lu_mem_valid_reg_n_0),
        .lud_write_hit_done(lud_write_hit_done),
        .p_162_in(p_162_in));
  design_1_system_cache_0_0_carry_latch_or LU_Mem_PR_Latch_Inst1
       (.E(lu_mem_piperun_or_conflict),
        .\Use_FPGA.Full_Inst (lookup_mem_piperun),
        .lu_mem_protect_conflict_reg(lud_mem_conflict));
  design_1_system_cache_0_0_carry_or_189 LU_Mem_PR_Or_Inst1
       (.E(lu_check_piperun),
        .lopt(lopt_99),
        .lopt_1(lopt_100),
        .lu_check_wr_already_pushed_reg(Chk_Valid_Inst_n_81),
        .lu_mem_piperun_pre2(lu_mem_piperun_pre2));
  design_1_system_cache_0_0_carry_or_n_190 LU_Mem_PR_Or_Inst2
       (.\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (lu_check_valid_delayed_reg_0),
        .lopt(lopt_101),
        .lopt_1(lopt_102),
        .lu_mem_piperun_pre1(lu_mem_piperun_pre1),
        .lu_mem_piperun_pre2(lu_mem_piperun_pre2));
  design_1_system_cache_0_0_carry_and_191 LU_Mem_TagConf_And_Inst1
       (.access_valid(access_valid),
        .lopt(lopt_212),
        .lopt_1(lopt_213),
        .lopt_2(lopt_214),
        .lu_mem_match_addr(lu_mem_match_addr),
        .lu_mem_tag_conflict(lu_mem_tag_conflict),
        .lu_mem_valid_reg(lu_mem_valid_reg_n_0));
  design_1_system_cache_0_0_carry_compare_192 LU_Mem_TagConf_Compare_Inst1
       (.A_3(A_3),
        .Q(Q[13:12]),
        .\The_Compare[0].sel_reg (\The_Compare[0].sel_reg ),
        .lopt(lopt_212),
        .lopt_1(lopt_213),
        .lopt_2(lopt_214),
        .\lu_mem_info_reg[Addr][12] (B_Vec[0]),
        .\lu_mem_info_reg[Addr][13] (B_Vec[1]),
        .lu_mem_match_addr(lu_mem_match_addr));
  design_1_system_cache_0_0_carry_compare_const__parameterized7_193 LU_PC_And_Inst1
       (.Carry_IN(protected_bit_miss),
        .Q(lu_check_valid_bits),
        .lopt(lopt_107),
        .lopt_1(lopt_108),
        .lopt_2(lopt_109),
        .lru_protected_bit(lru_protected_bit));
  design_1_system_cache_0_0_carry_compare_const__parameterized3_194 LU_PC_And_Inst2
       (.Carry_In(protected_bit_miss),
        .Carry_Out(protected_bit_miss_valid),
        .Q(lu_check_tag_hit_copy_pc),
        .lopt(lopt_110),
        .lopt_1(lopt_111),
        .lopt_2(lopt_112));
  design_1_system_cache_0_0_carry_and_195 LU_PC_And_Inst3
       (.A149_out(A149_out),
        .Carry_Out(protected_bit_miss_valid),
        .lopt(lopt_113),
        .lopt_1(lopt_114),
        .lopt_2(lopt_115),
        .lopt_3(lopt_116),
        .lopt_4(lopt_117),
        .lopt_5(lopt_118),
        .lopt_6(lopt_119),
        .lopt_7(lopt_120),
        .lopt_8(lopt_121),
        .protected_miss_valid(protected_miss_valid));
  design_1_system_cache_0_0_carry_select_and_n_196 LU_PC_And_Inst4
       (.filtered_protection_bit(filtered_protection_bit),
        .lopt(lopt_116),
        .lopt_1(lopt_117),
        .lopt_2(lopt_118),
        .lopt_3(lopt_119),
        .lopt_4(lopt_120),
        .lopt_5(lopt_121),
        .\lu_check_protected_reg[1] (lu_mem_protect_conflict_reg_0),
        .lu_check_protected_way(lu_check_protected_way),
        .lu_mem_protect_conflict_d1(lu_mem_protect_conflict_d1),
        .protected_bit(protected_bit));
  design_1_system_cache_0_0_carry_and_197 LU_PC_And_Inst5
       (.A21_out(A21_out),
        .ADDRA(ADDRA),
        .A_N160_out(A_N160_out),
        .D(D),
        .Q(ARESET_I),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (lu_check_valid_delayed_reg_0),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (LUD_Mem_PR_And_Inst1_n_3),
        .\arb_access_i_reg[Addr][13] (Q[13:6]),
        .lookup_last_beat(lookup_last_beat),
        .lookup_protect_conflict(lookup_protect_conflict),
        .lookup_restart_mem(lookup_restart_mem),
        .lookup_restart_mem_done(lookup_restart_mem_done),
        .lookup_restart_mem_done_reg(LU_PC_And_Inst5_n_17),
        .lopt(lopt_122),
        .lopt_1(lopt_123),
        .\lu_check_info_reg[KillHit] (Chk_Valid_Inst_n_23),
        .\lu_check_locked_hit_reg[0] (Chk_Valid_Inst_n_25),
        .\lu_check_locked_hit_reg[1] (lu_check_locked_hit),
        .\lu_mem_info_reg[Addr][10] (\lu_check_tag_addr_reg[10]_0 ),
        .\lu_mem_info_reg[Addr][11] (\lu_check_tag_addr_reg[11]_0 ),
        .\lu_mem_info_reg[Addr][12] (B_Vec[0]),
        .\lu_mem_info_reg[Addr][13] (B_Vec[1]),
        .\lu_mem_info_reg[Addr][6] (\lu_check_tag_addr_reg[6]_0 ),
        .\lu_mem_info_reg[Addr][7] (\lu_check_tag_addr_reg[7]_0 ),
        .\lu_mem_info_reg[Addr][8] (\lu_check_tag_addr_reg[8]_0 ),
        .\lu_mem_info_reg[Addr][9] (\lu_check_tag_addr_reg[9]_0 ),
        .\lu_mem_info_reg[Wr] (\lu_mem_info_reg[Wr]__0 ),
        .lu_mem_protect_conflict_reg(lud_mem_conflict),
        .lu_mem_valid_reg(lu_mem_valid_reg_n_0),
        .lud_addr_pipeline_full_reg(lud_addr_pipeline_full_reg_0),
        .lud_addr_piperun(lud_addr_piperun),
        .lud_mem_completed_reg(LU_PC_And_Inst5_n_1),
        .lud_mem_completed_reg_0(LU_PC_And_Inst5_n_2),
        .lud_mem_completed_reg_1(lud_mem_completed_reg_n_0),
        .lud_mem_delayed_read_data(lud_mem_delayed_read_data),
        .lud_mem_delayed_read_data_reg(LU_PC_And_Inst5_n_6),
        .lud_mem_keep_single_during_stall(lud_mem_keep_single_during_stall),
        .lud_mem_piperun(lud_mem_piperun),
        .lud_reg_piperun(lud_reg_piperun),
        .\lud_reg_port_num_reg[0] (\lud_reg_port_num_reg[0]_1 ),
        .lud_reg_valid_reg(LU_PC_And_Inst5_n_3),
        .lud_reg_valid_reg_0(lud_reg_valid_reg_1),
        .lud_reg_valid_reg_1(lud_reg_valid_reg_0),
        .protection_with_coherency(protection_with_coherency),
        .\read_data_status[0,0][Hit_Pop] (\read_data_status[0,0][Hit_Pop] ),
        .\read_data_status[0,1][Hit_Pop] (\read_data_status[0,1][Hit_Pop] ));
  design_1_system_cache_0_0_carry_select_or_198 LU_PC_Or_Inst1
       (.S_7(S_7),
        .S_8(S_8),
        .lopt(lopt_107),
        .lopt_1(lopt_108),
        .lopt_2(lopt_109),
        .lopt_3(lopt_110),
        .lopt_4(lopt_111),
        .lopt_5(lopt_112),
        .lru_protected_bit(lru_protected_bit));
  design_1_system_cache_0_0_carry_vec_or__parameterized1_199 LU_PC_Or_Inst3
       (.Q({lookup_tag_assoc_way,\lu_check_tag_hit_reg_n_0_[0] }),
        .lopt(lopt_113),
        .lopt_1(lopt_114),
        .lopt_2(lopt_115),
        .\lu_check_protected_reg[1] (lu_mem_protect_conflict_reg_0),
        .protected_bit(protected_bit),
        .protected_miss_valid(protected_miss_valid));
  design_1_system_cache_0_0_carry_or_200 LU_PC_Or_Inst4
       (.filtered_protection_bit(filtered_protection_bit),
        .lopt(lopt_122),
        .lopt_1(lopt_123),
        .lopt_2(lu_check_valid_delayed_reg_0),
        .lopt_3(lopt_124),
        .lopt_4(lopt_125),
        .lopt_5(lopt_126),
        .lopt_6(lopt_127),
        .lopt_7(lopt_128),
        .lopt_8(lopt_129),
        .protection_with_coherency(protection_with_coherency));
  design_1_system_cache_0_0_carry_or_n_201 LU_PR_Or_Inst1
       (.access_valid(access_valid),
        .lookup_piperun(lookup_piperun),
        .lookup_restart_mem_done_reg(lookup_fetch_piperun),
        .lopt(lopt_188),
        .lopt_1(lopt_189));
  design_1_system_cache_0_0_carry_latch_or_202 LU_Tag_En_Latch_Inst1
       (.A21_out(A21_out),
        .ENA(ENA),
        .lookup_restart_mem_done_reg(lookup_fetch_piperun));
  design_1_system_cache_0_0_carry_and_203 LU_WMS_And_Inst1
       (.lookup_push_wm_stall(lookup_push_wm_stall),
        .lookup_push_write_miss_pre(lookup_push_write_miss_pre),
        .lopt(lopt_220),
        .lopt_1(lopt_221),
        .update_write_miss_full(update_write_miss_full));
  design_1_system_cache_0_0_carry_and_n_204 LU_WM_And_Inst0
       (.lookup_miss_dirty(lookup_miss_dirty),
        .lookup_miss_dirty_no_clean(lookup_miss_dirty_no_clean),
        .lopt(lopt_203),
        .lopt_1(lopt_204),
        .lopt_2(lopt_205),
        .\lu_check_info_reg[KillHit] (\lu_check_info_reg[KillHit]__0 ));
  design_1_system_cache_0_0_carry_and_205 LU_WM_And_Inst1
       (.\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (lu_check_valid_delayed_reg_0),
        .lookup_md_or_wm_or_whne2(lookup_md_or_wm_or_whne2),
        .lookup_md_wm_whne_valid(lookup_md_wm_whne_valid),
        .lopt(lopt_215),
        .lopt_1(lopt_216));
  design_1_system_cache_0_0_carry_and_n_206 LU_WM_And_Inst2
       (.lookup_md_wm_whne_valid(lookup_md_wm_whne_valid),
        .lookup_push_write_miss_pre(lookup_push_write_miss_pre),
        .lopt(lopt_217),
        .lopt_1(lopt_218),
        .lopt_2(lopt_219),
        .lu_check_wait_for_update(lu_check_wait_for_update));
  design_1_system_cache_0_0_carry_or__parameterized2 LU_WM_Or_Inst1
       (.Q(lu_check_tag_hit_copy_wm),
        .lookup_md_or_wm(lookup_md_or_wm),
        .lookup_miss_dirty_no_clean(lookup_miss_dirty_no_clean),
        .lopt(lopt_206),
        .lopt_1(lopt_207),
        .lopt_2(lopt_208),
        .\lu_check_info_reg[Wr] (\lu_check_info_reg[Wr]__0 ));
  design_1_system_cache_0_0_carry_or__parameterized2_207 LU_WM_Or_Inst2
       (.lookup_md_or_wm(lookup_md_or_wm),
        .lookup_md_or_wm_or_whne(lookup_md_or_wm_or_whne),
        .lopt(lopt_209),
        .lopt_1(lopt_210),
        .lopt_2(lopt_211));
  design_1_system_cache_0_0_carry_or__parameterized2_208 LU_WM_Or_Inst3
       (.lookup_md_or_wm_or_whne(lookup_md_or_wm_or_whne),
        .lookup_md_or_wm_or_whne2(lookup_md_or_wm_or_whne2),
        .lopt(lopt_215),
        .lopt_1(lopt_216),
        .lopt_2(lu_check_valid_delayed_reg_0),
        .lopt_3(lopt_217),
        .lopt_4(lopt_218),
        .lopt_5(lopt_219),
        .lopt_6(lopt_220),
        .lopt_7(lopt_221),
        .lopt_8(update_write_miss_full));
  design_1_system_cache_0_0_bit_reg_ce__parameterized2 Late_Inst
       (.A32_out(A32_out),
        .ACLK(ACLK),
        .S(S_14),
        .\Use_FPGA.Full_Inst (lookup_mem_piperun),
        .lookup_access_data_late(lookup_access_data_late),
        .lookup_offset_first(lookup_offset_first),
        .lookup_read_hit_d1(lookup_read_hit_d1),
        .\lu_check_info_delayed_reg[Wr] (\lu_check_info_delayed_reg[Wr_n_0_] ),
        .\lu_check_info_reg[Wr] (\lu_check_info_reg[Wr]__0 ),
        .lu_check_valid_delayed(lu_check_valid_delayed),
        .lu_mem_protect_conflict_d1(lu_mem_protect_conflict_d1),
        .lu_mem_protect_conflict_reg(lud_mem_conflict),
        .lu_mem_valid_reg(Chk_Valid_Inst_n_72),
        .lud_mem_already_used(lud_mem_already_used),
        .lud_mem_last(lud_mem_last),
        .lud_mem_speculative_valid(lud_mem_speculative_valid));
  design_1_system_cache_0_0_reg_ce__parameterized3 Par_Dirty_Inst
       (.ACLK(ACLK),
        .CO(update_reused_tag2),
        .D({Par_Dirty_Inst_n_6,Par_Dirty_Inst_n_7,Par_Dirty_Inst_n_8,Par_Dirty_Inst_n_9,Par_Dirty_Inst_n_10,Par_Dirty_Inst_n_11,Par_Dirty_Inst_n_12,Par_Dirty_Inst_n_13,Par_Dirty_Inst_n_14,Par_Dirty_Inst_n_15,Par_Dirty_Inst_n_16,Par_Dirty_Inst_n_17,Par_Dirty_Inst_n_18,Par_Dirty_Inst_n_19,Par_Dirty_Inst_n_20,Par_Dirty_Inst_n_21,Par_Dirty_Inst_n_22,Par_Dirty_Inst_n_23}),
        .DATA_OUTA({DATA_OUTA[40],DATA_OUTA[19]}),
        .E(lu_mem_piperun_or_conflict),
        .Q(lu_check_locked_bits[1]),
        .S({Par_Dirty_Inst_n_2,Par_Dirty_Inst_n_3,Par_Dirty_Inst_n_4,Par_Dirty_Inst_n_5}),
        .S_0(\The_Compare[1].carry_or_I1/S ),
        .S_1(\The_Compare[0].carry_and_I1/S ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (Par_Dirty_Inst_n_28),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_1 (lu_check_valid_delayed_reg_0),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_2 (ARESET_I),
        .lookup_first_write_hit(lookup_first_write_hit),
        .lookup_read_miss(lookup_read_miss),
        .lookup_write_miss(lookup_write_miss),
        .lru_check_next_way(lru_check_next_way),
        .\lu_check_info_reg[Addr][31] (lookup_stall_addr),
        .\lu_check_info_reg[KillHit] (\lu_check_info_reg[KillHit]__0 ),
        .\lu_check_info_reg[KillHit]_0 (TAG_Need_Inst_n_3),
        .\lu_check_info_reg[Wr] (\lu_check_info_reg[Wr]__0 ),
        .\lu_check_tag_hit_copy_md_reg[1] (lu_check_tag_hit_copy_md),
        .\lu_check_tag_hit_reg[1] (Chk_Valid_Inst_n_28),
        .\lu_check_tag_hit_reg[1]_0 (lookup_tag_assoc_way),
        .\lu_check_tag_reg[0][Addr][31] (\lu_check_tag_reg[0][Addr] ),
        .\lu_check_tag_reg[1][Addr][31] (\lu_check_tag_reg[1][Addr] ),
        .\lu_check_valid_bits_reg[1] (lu_check_valid_bits[1]),
        .\lu_mem_info_reg[Force_Hit] (\lu_mem_info_reg[Force_Hit_n_0_] ),
        .lu_mem_protect_conflict_reg(lud_mem_conflict),
        .update_first_write_hit_reg(update_first_write_hit_reg_0),
        .\update_old_tag_reg[Addr][14] (Par_Dirty_Inst_n_1),
        .update_reused_tag_reg(Par_Dirty_Inst_n_0),
        .update_reused_tag_reg_0({Par_Dirty_Inst_n_24,Par_Dirty_Inst_n_25}));
  design_1_system_cache_0_0_reg_ce__parameterized3_209 Par_Locked_Inst
       (.ACLK(ACLK),
        .E(lu_mem_piperun_or_conflict),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 (\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_3 ),
        .Q(lu_check_locked_bits),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 (ARESET_I));
  design_1_system_cache_0_0_reg_ce__parameterized3_210 Par_Reuse_Inst
       (.ACLK(ACLK),
        .E(lu_mem_piperun_or_conflict),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 (\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_2 ),
        .Q(ARESET_I),
        .lookup_read_miss(lookup_read_miss),
        .\lru_check_next_way_i_reg[0] (Par_Dirty_Inst_n_1),
        .\lu_check_info_reg[Allocate] (\lu_check_info_reg[Allocate]__0 ),
        .\lu_check_locked_hit_reg[1] (Chk_Valid_Inst_n_13),
        .\update_info_reg[Allocate] (Par_Reuse_Inst_n_0),
        .\update_info_reg[Allocate]_0 (Par_Reuse_Inst_n_1));
  (* C_CE_LOW = "1'b0" *) 
  (* C_IS_SET = "1'b0" *) 
  (* C_NUM_CE = "1" *) 
  (* C_TARGET = "3" *) 
  (* DONT_TOUCH *) 
  design_1_system_cache_0_0_bit_reg_ce__13 Reset_Inst
       (.CE(1'b1),
        .CLK(ACLK),
        .D(ARESET),
        .Q(ARESET_I),
        .SR(1'b0));
  design_1_system_cache_0_0_bit_reg_ce_211 TAG_Need_Inst
       (.ACLK(ACLK),
        .DATA_INB(DATA_INB[1:0]),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 (update_need_tag_write),
        .Q(ARESET_I),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (Chk_Valid_Inst_n_8),
        .\lu_check_info_reg[KillHit] (\lu_check_info_reg[KillHit]__0 ),
        .\lu_check_tag_hit_reg[1] ({lookup_tag_assoc_way,\lu_check_tag_hit_reg_n_0_[0] }),
        .ri_merge_reg(ri_merge_reg),
        .update_done_tag_write_reg(update_done_tag_write_reg),
        .update_first_write_hit(update_first_write_hit),
        .update_first_write_hit_reg(TAG_Need_Inst_n_3),
        .\update_info_reg[Allocate] (\update_info[Allocate] ),
        .update_readback_available(update_readback_available),
        .update_reused_tag(update_reused_tag),
        .update_write_miss(update_write_miss));
  design_1_system_cache_0_0_bit_reg_ce_212 USpec_Inst
       (.ACLK(ACLK),
        .Q(ARESET_I),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (USpec_Inst_n_1),
        .\Use_FPGA.Full_Inst (lookup_mem_piperun),
        .lookup_protect_conflict(lookup_protect_conflict),
        .lud_addr_piperun(lud_addr_piperun),
        .lud_mem_completed_reg(Chk_Valid_Inst_n_40),
        .lud_mem_completed_reg_0(lud_mem_completed_reg_n_0),
        .lud_mem_use_speculative(lud_mem_use_speculative),
        .lud_mem_waiting_for_pipe_reg(lud_mem_waiting_for_pipe_reg_0));
  design_1_system_cache_0_0_bit_reg_ce_213 Ud_Valid_Inst
       (.ACLK(ACLK),
        .DATA_INB(DATA_INB[2]),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 (update_valid),
        .Q(ARESET_I),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (LU_Check_PR_And_Inst2_n_4),
        .update_done_tag_write_reg(update_done_tag_write_reg),
        .\update_info_reg[Allocate] (\update_info[Allocate] ),
        .\update_info_reg[Evict] (\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .update_need_tag_write(update_need_tag_write),
        .update_readback_available(update_readback_available));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][0] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [0]),
        .Q(\lookup_read_data_info[0,0][Data][0] [0]),
        .R(p_13_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][10] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [10]),
        .Q(\lookup_read_data_info[0,0][Data][0] [10]),
        .R(p_13_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][11] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [11]),
        .Q(\lookup_read_data_info[0,0][Data][0] [11]),
        .R(p_13_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][12] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [12]),
        .Q(\lookup_read_data_info[0,0][Data][0] [12]),
        .R(p_13_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][13] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [13]),
        .Q(\lookup_read_data_info[0,0][Data][0] [13]),
        .R(p_13_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][14] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [14]),
        .Q(\lookup_read_data_info[0,0][Data][0] [14]),
        .R(p_13_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][15] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [15]),
        .Q(\lookup_read_data_info[0,0][Data][0] [15]),
        .R(p_13_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][16] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [16]),
        .Q(\lookup_read_data_info[0,0][Data][0] [16]),
        .R(p_13_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][17] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [17]),
        .Q(\lookup_read_data_info[0,0][Data][0] [17]),
        .R(p_13_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][18] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [18]),
        .Q(\lookup_read_data_info[0,0][Data][0] [18]),
        .R(p_13_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][19] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [19]),
        .Q(\lookup_read_data_info[0,0][Data][0] [19]),
        .R(p_13_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][1] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [1]),
        .Q(\lookup_read_data_info[0,0][Data][0] [1]),
        .R(p_13_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][20] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [20]),
        .Q(\lookup_read_data_info[0,0][Data][0] [20]),
        .R(p_13_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][21] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [21]),
        .Q(\lookup_read_data_info[0,0][Data][0] [21]),
        .R(p_13_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][22] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [22]),
        .Q(\lookup_read_data_info[0,0][Data][0] [22]),
        .R(p_13_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][23] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [23]),
        .Q(\lookup_read_data_info[0,0][Data][0] [23]),
        .R(p_13_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][24] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [24]),
        .Q(\lookup_read_data_info[0,0][Data][0] [24]),
        .R(p_13_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][25] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [25]),
        .Q(\lookup_read_data_info[0,0][Data][0] [25]),
        .R(p_13_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][26] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [26]),
        .Q(\lookup_read_data_info[0,0][Data][0] [26]),
        .R(p_13_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][27] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [27]),
        .Q(\lookup_read_data_info[0,0][Data][0] [27]),
        .R(p_13_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][28] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [28]),
        .Q(\lookup_read_data_info[0,0][Data][0] [28]),
        .R(p_13_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][29] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [29]),
        .Q(\lookup_read_data_info[0,0][Data][0] [29]),
        .R(p_13_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][2] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [2]),
        .Q(\lookup_read_data_info[0,0][Data][0] [2]),
        .R(p_13_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][30] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [30]),
        .Q(\lookup_read_data_info[0,0][Data][0] [30]),
        .R(p_13_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][31] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [31]),
        .Q(\lookup_read_data_info[0,0][Data][0] [31]),
        .R(p_13_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][3] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [3]),
        .Q(\lookup_read_data_info[0,0][Data][0] [3]),
        .R(p_13_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][4] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [4]),
        .Q(\lookup_read_data_info[0,0][Data][0] [4]),
        .R(p_13_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][5] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [5]),
        .Q(\lookup_read_data_info[0,0][Data][0] [5]),
        .R(p_13_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][6] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [6]),
        .Q(\lookup_read_data_info[0,0][Data][0] [6]),
        .R(p_13_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][7] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [7]),
        .Q(\lookup_read_data_info[0,0][Data][0] [7]),
        .R(p_13_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][8] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [8]),
        .Q(\lookup_read_data_info[0,0][Data][0] [8]),
        .R(p_13_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[0].lookup_read_data_word_i_reg[0][9] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [9]),
        .Q(\lookup_read_data_info[0,0][Data][0] [9]),
        .R(p_13_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][0] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_1 [0]),
        .Q(\lookup_read_data_info[0,0][Data][1] [0]),
        .R(p_11_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][10] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_1 [10]),
        .Q(\lookup_read_data_info[0,0][Data][1] [10]),
        .R(p_11_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][11] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_1 [11]),
        .Q(\lookup_read_data_info[0,0][Data][1] [11]),
        .R(p_11_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][12] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_1 [12]),
        .Q(\lookup_read_data_info[0,0][Data][1] [12]),
        .R(p_11_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][13] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_1 [13]),
        .Q(\lookup_read_data_info[0,0][Data][1] [13]),
        .R(p_11_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][14] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_1 [14]),
        .Q(\lookup_read_data_info[0,0][Data][1] [14]),
        .R(p_11_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][15] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_1 [15]),
        .Q(\lookup_read_data_info[0,0][Data][1] [15]),
        .R(p_11_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][16] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_1 [16]),
        .Q(\lookup_read_data_info[0,0][Data][1] [16]),
        .R(p_11_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][17] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_1 [17]),
        .Q(\lookup_read_data_info[0,0][Data][1] [17]),
        .R(p_11_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][18] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_1 [18]),
        .Q(\lookup_read_data_info[0,0][Data][1] [18]),
        .R(p_11_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][19] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_1 [19]),
        .Q(\lookup_read_data_info[0,0][Data][1] [19]),
        .R(p_11_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][1] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_1 [1]),
        .Q(\lookup_read_data_info[0,0][Data][1] [1]),
        .R(p_11_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][20] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_1 [20]),
        .Q(\lookup_read_data_info[0,0][Data][1] [20]),
        .R(p_11_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][21] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_1 [21]),
        .Q(\lookup_read_data_info[0,0][Data][1] [21]),
        .R(p_11_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][22] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_1 [22]),
        .Q(\lookup_read_data_info[0,0][Data][1] [22]),
        .R(p_11_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][23] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_1 [23]),
        .Q(\lookup_read_data_info[0,0][Data][1] [23]),
        .R(p_11_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][24] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_1 [24]),
        .Q(\lookup_read_data_info[0,0][Data][1] [24]),
        .R(p_11_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][25] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_1 [25]),
        .Q(\lookup_read_data_info[0,0][Data][1] [25]),
        .R(p_11_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][26] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_1 [26]),
        .Q(\lookup_read_data_info[0,0][Data][1] [26]),
        .R(p_11_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][27] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_1 [27]),
        .Q(\lookup_read_data_info[0,0][Data][1] [27]),
        .R(p_11_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][28] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_1 [28]),
        .Q(\lookup_read_data_info[0,0][Data][1] [28]),
        .R(p_11_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][29] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_1 [29]),
        .Q(\lookup_read_data_info[0,0][Data][1] [29]),
        .R(p_11_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][2] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_1 [2]),
        .Q(\lookup_read_data_info[0,0][Data][1] [2]),
        .R(p_11_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][30] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_1 [30]),
        .Q(\lookup_read_data_info[0,0][Data][1] [30]),
        .R(p_11_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][31] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_1 [31]),
        .Q(\lookup_read_data_info[0,0][Data][1] [31]),
        .R(p_11_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][3] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_1 [3]),
        .Q(\lookup_read_data_info[0,0][Data][1] [3]),
        .R(p_11_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][4] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_1 [4]),
        .Q(\lookup_read_data_info[0,0][Data][1] [4]),
        .R(p_11_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][5] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_1 [5]),
        .Q(\lookup_read_data_info[0,0][Data][1] [5]),
        .R(p_11_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][6] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_1 [6]),
        .Q(\lookup_read_data_info[0,0][Data][1] [6]),
        .R(p_11_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][7] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_1 [7]),
        .Q(\lookup_read_data_info[0,0][Data][1] [7]),
        .R(p_11_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][8] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_1 [8]),
        .Q(\lookup_read_data_info[0,0][Data][1] [8]),
        .R(p_11_out));
  FDRE \Use_Rd_Pipeline.Gen_Set_Data_Array[1].lookup_read_data_word_i_reg[1][9] 
       (.C(ACLK),
        .CE(lud_mem_piperun),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_1 [9]),
        .Q(\lookup_read_data_info[0,0][Data][1] [9]),
        .R(p_11_out));
  LUT2 #(
    .INIT(4'h7)) 
    \Using_FPGA.MUXCY_I_i_1__150 
       (.I0(\update_info[Allocate] ),
        .I1(update_write_miss),
        .O(\lu_mem_info_reg[Port_Num][0]_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.MUXCY_I_i_1__23 
       (.I0(\update_info[Allocate] ),
        .O(ud_new_tag_valid2));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.MUXCY_I_i_1__24 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .O(S_1));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.MUXCY_I_i_1__25 
       (.I0(update_first_write_hit),
        .O(S_3));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.MUXCY_I_i_1__27 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 [8]),
        .I1(Q[8]),
        .I2(Q[6]),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 [6]),
        .I4(Q[7]),
        .I5(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 [7]),
        .O(\The_Compare[0].sel_reg_4 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.MUXCY_I_i_1__28 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 [11]),
        .I1(Q[11]),
        .I2(Q[9]),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 [9]),
        .I4(Q[10]),
        .I5(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 [10]),
        .O(A));
  LUT4 #(
    .INIT(16'h9009)) 
    \Using_FPGA.MUXCY_I_i_1__29 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 [12]),
        .I1(Q[12]),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 [13]),
        .I3(Q[13]),
        .O(\The_Compare[2].sel_reg_5 ));
  LUT6 #(
    .INIT(64'h00000000AAA2A2AA)) 
    \ar_fifo_mem_reg[15][Addr][0]_srl16_i_1 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 [0]),
        .I1(\Gen_Block[0].UD/read_req_kind_i1 ),
        .I2(\update_info[Size] [2]),
        .I3(\update_info[Size] [1]),
        .I4(\update_info[Size] [0]),
        .I5(\update_info[Allocate] ),
        .O(in[0]));
  LUT6 #(
    .INIT(64'h00000000AAAAA2AA)) 
    \ar_fifo_mem_reg[15][Addr][1]_srl16_i_1 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 [1]),
        .I1(\Gen_Block[0].UD/read_req_kind_i1 ),
        .I2(\update_info[Size] [0]),
        .I3(\update_info[Size] [1]),
        .I4(\update_info[Size] [2]),
        .I5(\update_info[Allocate] ),
        .O(in[1]));
  (* SOFT_HLUTNM = "soft_lutpair64" *) 
  LUT3 #(
    .INIT(8'hBA)) 
    \ar_fifo_mem_reg[15][Kind][-1111111111]_srl16_i_1 
       (.I0(\update_info[Allocate] ),
        .I1(\Gen_Block[0].UD/read_req_kind_i1 ),
        .I2(\update_info[Kind] ),
        .O(\read_req_info[0][Kind] ));
  LUT6 #(
    .INIT(64'h0000000000000002)) 
    \ar_fifo_mem_reg[15][Kind][-1111111111]_srl16_i_2 
       (.I0(\update_info[Kind] ),
        .I1(\ar_fifo_mem_reg[15][Kind][-1111111111]_srl16_i_3_n_0 ),
        .I2(\ri_len_reg[7] [0]),
        .I3(\ri_len_reg[7] [7]),
        .I4(\ri_len_reg[7] [5]),
        .I5(\ri_len_reg[7] [6]),
        .O(\Gen_Block[0].UD/read_req_kind_i1 ));
  (* SOFT_HLUTNM = "soft_lutpair61" *) 
  LUT4 #(
    .INIT(16'hFFFE)) 
    \ar_fifo_mem_reg[15][Kind][-1111111111]_srl16_i_3 
       (.I0(\ri_len_reg[7] [3]),
        .I1(\ri_len_reg[7] [4]),
        .I2(\ri_len_reg[7] [1]),
        .I3(\ri_len_reg[7] [2]),
        .O(\ar_fifo_mem_reg[15][Kind][-1111111111]_srl16_i_3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair65" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \ar_fifo_mem_reg[15][Len][0]_srl16_i_1 
       (.I0(\ri_len_reg[7] [0]),
        .I1(\update_info[Allocate] ),
        .O(\M_AXI_ARLEN_reg[7] [0]));
  (* SOFT_HLUTNM = "soft_lutpair65" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \ar_fifo_mem_reg[15][Len][1]_srl16_i_1 
       (.I0(\ri_len_reg[7] [1]),
        .I1(\update_info[Allocate] ),
        .O(\M_AXI_ARLEN_reg[7] [1]));
  (* SOFT_HLUTNM = "soft_lutpair66" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \ar_fifo_mem_reg[15][Len][2]_srl16_i_1 
       (.I0(\ri_len_reg[7] [2]),
        .I1(\update_info[Allocate] ),
        .O(\M_AXI_ARLEN_reg[7] [2]));
  (* SOFT_HLUTNM = "soft_lutpair61" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \ar_fifo_mem_reg[15][Len][3]_srl16_i_1 
       (.I0(\ri_len_reg[7] [3]),
        .I1(\update_info[Allocate] ),
        .O(\M_AXI_ARLEN_reg[7] [3]));
  (* SOFT_HLUTNM = "soft_lutpair66" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \ar_fifo_mem_reg[15][Len][4]_srl16_i_1 
       (.I0(\ri_len_reg[7] [4]),
        .I1(\update_info[Allocate] ),
        .O(\M_AXI_ARLEN_reg[7] [4]));
  (* SOFT_HLUTNM = "soft_lutpair67" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \ar_fifo_mem_reg[15][Len][5]_srl16_i_1 
       (.I0(\ri_len_reg[7] [5]),
        .I1(\update_info[Allocate] ),
        .O(\M_AXI_ARLEN_reg[7] [5]));
  (* SOFT_HLUTNM = "soft_lutpair67" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \ar_fifo_mem_reg[15][Len][6]_srl16_i_1 
       (.I0(\ri_len_reg[7] [6]),
        .I1(\update_info[Allocate] ),
        .O(\M_AXI_ARLEN_reg[7] [6]));
  (* SOFT_HLUTNM = "soft_lutpair68" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \ar_fifo_mem_reg[15][Len][7]_srl16_i_1 
       (.I0(\ri_len_reg[7] [7]),
        .I1(\update_info[Allocate] ),
        .O(\M_AXI_ARLEN_reg[7] [7]));
  LUT2 #(
    .INIT(4'h2)) 
    \ar_fifo_mem_reg[15][Size][0]_srl16_i_1 
       (.I0(\update_info[Size] [0]),
        .I1(\update_info[Allocate] ),
        .O(\M_AXI_ARSIZE_reg[2] [0]));
  (* SOFT_HLUTNM = "soft_lutpair64" *) 
  LUT2 #(
    .INIT(4'hE)) 
    \ar_fifo_mem_reg[15][Size][1]_srl16_i_1 
       (.I0(\update_info[Allocate] ),
        .I1(\update_info[Size] [1]),
        .O(\M_AXI_ARSIZE_reg[2] [1]));
  (* SOFT_HLUTNM = "soft_lutpair68" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \ar_fifo_mem_reg[15][Size][2]_srl16_i_1 
       (.I0(\update_info[Size] [2]),
        .I1(\update_info[Allocate] ),
        .O(\M_AXI_ARSIZE_reg[2] [2]));
  LUT6 #(
    .INIT(64'hFFCFFBFBFCCCC8C8)) 
    \aw_fifo_mem_reg[15][Len][2]_srl16_i_2 
       (.I0(\ri_len_reg[7] [0]),
        .I1(\update_info[Size] [2]),
        .I2(\update_info[Size] [1]),
        .I3(\ri_len_reg[7] [1]),
        .I4(\update_info[Size] [0]),
        .I5(\ri_len_reg[7] [2]),
        .O(\aw_fifo_mem_reg[15][Len][2]_srl16_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair62" *) 
  LUT3 #(
    .INIT(8'hEA)) 
    \aw_fifo_mem_reg[15][Len][3]_srl16_i_2 
       (.I0(\update_info[Size] [2]),
        .I1(\update_info[Size] [1]),
        .I2(\update_info[Size] [0]),
        .O(\aw_fifo_mem_reg[15][Len][3]_srl16_i_2_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair62" *) 
  LUT2 #(
    .INIT(4'hB)) 
    \aw_fifo_mem_reg[15][Len][3]_srl16_i_3 
       (.I0(\update_info[Size] [2]),
        .I1(\update_info[Size] [1]),
        .O(\aw_fifo_mem_reg[15][Len][3]_srl16_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFCFFFAFFFC0F0A0)) 
    \aw_fifo_mem_reg[15][Len][3]_srl16_i_4 
       (.I0(\ri_len_reg[7] [1]),
        .I1(\ri_len_reg[7] [0]),
        .I2(\update_info[Size] [2]),
        .I3(\update_info[Size] [1]),
        .I4(\update_info[Size] [0]),
        .I5(\ri_len_reg[7] [3]),
        .O(\aw_fifo_mem_reg[15][Len][3]_srl16_i_4_n_0 ));
  LUT5 #(
    .INIT(32'hFCBBFC88)) 
    \aw_fifo_mem_reg[15][Len][4]_srl16_i_2 
       (.I0(\ri_len_reg[7] [0]),
        .I1(\update_info[Size] [1]),
        .I2(\ri_len_reg[7] [1]),
        .I3(\update_info[Size] [0]),
        .I4(\ri_len_reg[7] [2]),
        .O(\aw_fifo_mem_reg[15][Len][4]_srl16_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \aw_fifo_mem_reg[15][Len][5]_srl16_i_2 
       (.I0(\ri_len_reg[7] [0]),
        .I1(\ri_len_reg[7] [1]),
        .I2(\update_info[Size] [1]),
        .I3(\ri_len_reg[7] [2]),
        .I4(\update_info[Size] [0]),
        .I5(\ri_len_reg[7] [3]),
        .O(\aw_fifo_mem_reg[15][Len][5]_srl16_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \aw_fifo_mem_reg[15][Len][6]_srl16_i_2 
       (.I0(\ri_len_reg[7] [1]),
        .I1(\ri_len_reg[7] [2]),
        .I2(\update_info[Size] [1]),
        .I3(\ri_len_reg[7] [3]),
        .I4(\update_info[Size] [0]),
        .I5(\ri_len_reg[7] [4]),
        .O(\aw_fifo_mem_reg[15][Len][6]_srl16_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \aw_fifo_mem_reg[15][Len][7]_srl16_i_2 
       (.I0(\ri_len_reg[7] [2]),
        .I1(\ri_len_reg[7] [3]),
        .I2(\update_info[Size] [1]),
        .I3(\ri_len_reg[7] [4]),
        .I4(\update_info[Size] [0]),
        .I5(\ri_len_reg[7] [5]),
        .O(\aw_fifo_mem_reg[15][Len][7]_srl16_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h00C0AAAA)) 
    \bs_fifo_mem[0][Src][0]_i_1 
       (.I0(\bs_fifo_mem_reg[0][Src][1]_0 [0]),
        .I1(\update_info[Allocate] ),
        .I2(update_write_miss),
        .I3(update_write_hit),
        .I4(queue_push120_out),
        .O(\bs_fifo_mem_reg[0][Src][0] ));
  FDRE lookup_next_is_last_beat_reg
       (.C(ACLK),
        .CE(lookup_offset_first1),
        .D(lookup_next_is_last_beat),
        .Q(lookup_next_is_last_beat_reg_n_0),
        .R(ARESET_I));
  CARRY4 lookup_offset_cnt_cmb0_carry
       (.CI(1'b0),
        .CO({lookup_offset_cnt_cmb0_carry_n_0,lookup_offset_cnt_cmb0_carry_n_1,lookup_offset_cnt_cmb0_carry_n_2,lookup_offset_cnt_cmb0_carry_n_3}),
        .CYINIT(1'b0),
        .DI({ADDRARDADDR[1:0],Chk_Valid_Inst_n_38,Chk_Valid_Inst_n_39}),
        .O({p_11_in,lookup_offset_cnt_cmb0_carry_n_5,p_7_in,lookup_offset_cnt_cmb0_carry_n_7}),
        .S({Chk_Valid_Inst_n_87,Chk_Valid_Inst_n_88,Chk_Valid_Inst_n_89,Chk_Valid_Inst_n_90}));
  CARRY4 lookup_offset_cnt_cmb0_carry__0
       (.CI(lookup_offset_cnt_cmb0_carry_n_0),
        .CO({NLW_lookup_offset_cnt_cmb0_carry__0_CO_UNCONNECTED[3:1],lookup_offset_cnt_cmb0_carry__0_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,ADDRARDADDR[2]}),
        .O({NLW_lookup_offset_cnt_cmb0_carry__0_O_UNCONNECTED[3:2],lookup_offset_cnt_cmb0_carry__0_n_6,p_13_in}),
        .S({1'b0,1'b0,Chk_Valid_Inst_n_85,Chk_Valid_Inst_n_86}));
  FDRE \lookup_offset_cnt_reg[0] 
       (.C(ACLK),
        .CE(lookup_offset_first1),
        .D(lookup_offset_cnt_cmb[0]),
        .Q(lookup_offset_cnt[0]),
        .R(ARESET_I));
  FDRE \lookup_offset_cnt_reg[1] 
       (.C(ACLK),
        .CE(lookup_offset_first1),
        .D(lookup_offset_cnt_cmb[1]),
        .Q(lookup_offset_cnt[1]),
        .R(ARESET_I));
  FDRE \lookup_offset_cnt_reg[2] 
       (.C(ACLK),
        .CE(lookup_offset_first1),
        .D(lookup_offset_cnt_cmb[2]),
        .Q(lookup_offset_cnt[2]),
        .R(ARESET_I));
  FDRE \lookup_offset_cnt_reg[3] 
       (.C(ACLK),
        .CE(lookup_offset_first1),
        .D(lookup_offset_cnt_cmb[3]),
        .Q(lookup_offset_cnt[3]),
        .R(ARESET_I));
  FDRE \lookup_offset_cnt_reg[4] 
       (.C(ACLK),
        .CE(lookup_offset_first1),
        .D(lookup_offset_cnt_cmb[4]),
        .Q(lookup_offset_cnt[4]),
        .R(ARESET_I));
  FDRE \lookup_offset_cnt_reg[5] 
       (.C(ACLK),
        .CE(lookup_offset_first1),
        .D(lookup_offset_cnt_cmb[5]),
        .Q(lookup_offset_cnt[5]),
        .R(ARESET_I));
  FDRE lookup_offset_first_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(Chk_Valid_Inst_n_91),
        .Q(lookup_offset_first),
        .R(1'b0));
  FDRE \lookup_offset_len_cnt_reg[0] 
       (.C(ACLK),
        .CE(lookup_offset_first1),
        .D(minusOp[0]),
        .Q(lookup_offset_len_cnt_reg__0[0]),
        .R(ARESET_I));
  FDRE \lookup_offset_len_cnt_reg[1] 
       (.C(ACLK),
        .CE(lookup_offset_first1),
        .D(minusOp[1]),
        .Q(lookup_offset_len_cnt_reg__0[1]),
        .R(ARESET_I));
  FDRE \lookup_offset_len_cnt_reg[2] 
       (.C(ACLK),
        .CE(lookup_offset_first1),
        .D(minusOp[2]),
        .Q(lookup_offset_len_cnt_reg__0[2]),
        .R(ARESET_I));
  FDRE \lookup_offset_len_cnt_reg[3] 
       (.C(ACLK),
        .CE(lookup_offset_first1),
        .D(minusOp[3]),
        .Q(lookup_offset_len_cnt_reg__0[3]),
        .R(ARESET_I));
  FDRE \lookup_offset_len_cnt_reg[4] 
       (.C(ACLK),
        .CE(lookup_offset_first1),
        .D(minusOp[4]),
        .Q(lookup_offset_len_cnt_reg__0[4]),
        .R(ARESET_I));
  FDRE \lookup_offset_len_cnt_reg[5] 
       (.C(ACLK),
        .CE(lookup_offset_first1),
        .D(Chk_Valid_Inst_n_53),
        .Q(lookup_offset_len_cnt_reg__0[5]),
        .R(ARESET_I));
  FDRE \lookup_offset_len_cnt_reg[6] 
       (.C(ACLK),
        .CE(lookup_offset_first1),
        .D(minusOp[6]),
        .Q(lookup_offset_len_cnt_reg__0[6]),
        .R(ARESET_I));
  FDRE \lookup_offset_len_cnt_reg[7] 
       (.C(ACLK),
        .CE(lookup_offset_first1),
        .D(minusOp[7]),
        .Q(lookup_offset_len_cnt_reg__0[7]),
        .R(ARESET_I));
  FDRE lookup_read_hit_d1_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(p_185_in),
        .Q(lookup_read_hit_d1),
        .R(ARESET_I));
  FDRE lookup_restart_mem_done_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(LU_PC_And_Inst5_n_17),
        .Q(lookup_restart_mem_done),
        .R(lud_write_hit_done));
  FDRE lu_check_allow_write_reg
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(1'b1),
        .Q(lookup_wm_allow_write),
        .R(ARESET_I));
  FDRE \lu_check_info_delayed_reg[Wr] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\lu_check_info_reg[Wr]__0 ),
        .Q(\lu_check_info_delayed_reg[Wr_n_0_] ),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr][0] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_n_0_][0] ),
        .Q(\update_info_reg[Addr][5]_0 [0]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr][14] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(lu_mem_force_way),
        .Q(lookup_stall_addr[14]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr][15] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_n_0_][15] ),
        .Q(lookup_stall_addr[15]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr][16] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_n_0_][16] ),
        .Q(lookup_stall_addr[16]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr][17] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_n_0_][17] ),
        .Q(lookup_stall_addr[17]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr][18] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_n_0_][18] ),
        .Q(lookup_stall_addr[18]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr][19] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_n_0_][19] ),
        .Q(lookup_stall_addr[19]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr][1] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_n_0_][1] ),
        .Q(\update_info_reg[Addr][5]_0 [1]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr][20] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_n_0_][20] ),
        .Q(lookup_stall_addr[20]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr][21] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_n_0_][21] ),
        .Q(lookup_stall_addr[21]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr][22] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_n_0_][22] ),
        .Q(lookup_stall_addr[22]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr][23] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_n_0_][23] ),
        .Q(lookup_stall_addr[23]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr][24] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_n_0_][24] ),
        .Q(lookup_stall_addr[24]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr][25] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_n_0_][25] ),
        .Q(lookup_stall_addr[25]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr][26] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_n_0_][26] ),
        .Q(lookup_stall_addr[26]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr][27] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_n_0_][27] ),
        .Q(lookup_stall_addr[27]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr][28] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_n_0_][28] ),
        .Q(lookup_stall_addr[28]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr][29] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_n_0_][29] ),
        .Q(lookup_stall_addr[29]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr][2] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_n_0_][2] ),
        .Q(\update_info_reg[Addr][5]_0 [2]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr][30] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_n_0_][30] ),
        .Q(lookup_stall_addr[30]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr][31] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_n_0_][31] ),
        .Q(lookup_stall_addr[31]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr][3] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_n_0_][3] ),
        .Q(\update_info_reg[Addr][5]_0 [3]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr][4] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_n_0_][4] ),
        .Q(\update_info_reg[Addr][5]_0 [4]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr][5] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_n_0_][5] ),
        .Q(\update_info_reg[Addr][5]_0 [5]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr_Stp][0] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_Stp_n_0_][0] ),
        .Q(\update_info_reg[Addr_Stp][5]_0 [0]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr_Stp][1] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_Stp_n_0_][1] ),
        .Q(\update_info_reg[Addr_Stp][5]_0 [1]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr_Stp][2] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_Stp_n_0_][2] ),
        .Q(\update_info_reg[Addr_Stp][5]_0 [2]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr_Stp][3] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_Stp_n_0_][3] ),
        .Q(\update_info_reg[Addr_Stp][5]_0 [3]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr_Stp][4] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_Stp_n_0_][4] ),
        .Q(\update_info_reg[Addr_Stp][5]_0 [4]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr_Stp][5] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_Stp_n_0_][5] ),
        .Q(\update_info_reg[Addr_Stp][5]_0 [5]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr_Use][0] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_Use_n_0_][0] ),
        .Q(\update_info_reg[Addr_Use][5]_0 [0]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr_Use][1] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_Use_n_0_][1] ),
        .Q(\update_info_reg[Addr_Use][5]_0 [1]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr_Use][2] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_Use_n_0_][2] ),
        .Q(\update_info_reg[Addr_Use][5]_0 [2]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr_Use][3] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_Use_n_0_][3] ),
        .Q(\update_info_reg[Addr_Use][5]_0 [3]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr_Use][4] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_Use_n_0_][4] ),
        .Q(\update_info_reg[Addr_Use][5]_0 [4]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Addr_Use][5] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Addr_Use_n_0_][5] ),
        .Q(\update_info_reg[Addr_Use][5]_0 [5]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Allocate] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Allocate]__0 ),
        .Q(\lu_check_info_reg[Allocate]__0 ),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Early] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Early]__0 ),
        .Q(\lu_check_info_reg[Early]__0 ),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Keep] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Keep]__0 ),
        .Q(\lu_check_info_reg[Keep_n_0_] ),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[KillHit] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Force_Hit_n_0_] ),
        .Q(\lu_check_info_reg[KillHit]__0 ),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Kind] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Kind_n_0_] ),
        .Q(\update_info_reg[Kind]_0 ),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Len][0] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Len] [0]),
        .Q(\lu_check_info_reg[Len] [0]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Len][1] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Len] [1]),
        .Q(\lu_check_info_reg[Len] [1]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Len][2] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Len] [2]),
        .Q(\lu_check_info_reg[Len] [2]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Len][3] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Len] [3]),
        .Q(\lu_check_info_reg[Len] [3]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Len][4] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Len] [4]),
        .Q(\lu_check_info_reg[Len] [4]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Len][5] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Len] [5]),
        .Q(\lu_check_info_reg[Len] [5]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Len][6] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Len] [6]),
        .Q(\lu_check_info_reg[Len] [6]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Len][7] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Len] [7]),
        .Q(\lu_check_info_reg[Len] [7]),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Port_Num][0] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_check_info_reg[Port_Num][0]_0 ),
        .Q(\update_info_reg[Port_Num][0]_0 ),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Size][0] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Size] [0]),
        .Q(\lu_check_info_reg[Size_n_0_][0] ),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Size][1] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Size] [1]),
        .Q(\lu_check_info_reg[Size_n_0_][1] ),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Size][2] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Size] [2]),
        .Q(\lu_check_info_reg[Size_n_0_][2] ),
        .R(ARESET_I));
  FDRE \lu_check_info_reg[Wr] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_mem_info_reg[Wr]__0 ),
        .Q(\lu_check_info_reg[Wr]__0 ),
        .R(ARESET_I));
  FDRE \lu_check_locked_hit_copy_lb_reg[0] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_locked_hit_copy_lb_0),
        .Q(lu_check_locked_hit_copy_lb[0]),
        .R(ARESET_I));
  FDRE \lu_check_locked_hit_copy_lb_reg[1] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_locked_hit_copy_lb_1),
        .Q(lu_check_locked_hit_copy_lb[1]),
        .R(ARESET_I));
  FDRE \lu_check_locked_hit_reg[0] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_locked_hit_0),
        .Q(lu_check_locked_hit[0]),
        .R(ARESET_I));
  FDRE \lu_check_locked_hit_reg[1] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_locked_hit_1),
        .Q(lu_check_locked_hit[1]),
        .R(ARESET_I));
  FDRE \lu_check_locked_write_reg[0] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_locked_write_0),
        .Q(\lu_check_locked_write_reg_n_0_[0] ),
        .R(ARESET_I));
  FDRE \lu_check_locked_write_reg[1] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_locked_write_1),
        .Q(\lu_check_locked_write_reg_n_0_[1] ),
        .R(ARESET_I));
  LUT1 #(
    .INIT(2'h1)) 
    lu_check_multi_beat_i_1
       (.I0(lu_mem_single_beat_reg_n_0),
        .O(lu_check_multi_beat_i_1_n_0));
  FDSE lu_check_multi_beat_reg
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(lu_check_multi_beat_i_1_n_0),
        .Q(lu_check_multi_beat),
        .S(ARESET_I));
  LUT1 #(
    .INIT(2'h1)) 
    \lu_check_port_one_hot[0]_i_1 
       (.I0(\lu_check_info_reg[Port_Num][0]_0 ),
        .O(\lu_check_port_one_hot[0]_i_1_n_0 ));
  FDRE \lu_check_port_one_hot_reg[0] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_check_port_one_hot[0]_i_1_n_0 ),
        .Q(\lu_check_port_one_hot_reg_n_0_[0] ),
        .R(ARESET_I));
  FDRE \lu_check_protected_reg[0] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_protected[0]),
        .Q(lu_mem_protect_conflict_reg_0[0]),
        .R(ARESET_I));
  FDRE \lu_check_protected_reg[1] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_protected[1]),
        .Q(lu_mem_protect_conflict_reg_0[1]),
        .R(ARESET_I));
  FDRE \lu_check_protected_way_reg[0] 
       (.C(ACLK),
        .CE(1'b1),
        .D(Chk_Valid_Inst_n_97),
        .Q(lu_check_protected_way),
        .R(ARESET_I));
  FDRE lu_check_read_info_done_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(Chk_Valid_Inst_n_96),
        .Q(lu_check_read_info_done),
        .R(1'b0));
  FDRE lu_check_single_beat_reg
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(lu_mem_single_beat_reg_n_0),
        .Q(lu_check_single_beat),
        .R(ARESET_I));
  FDRE \lu_check_tag_addr_reg[10] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_check_tag_addr_reg[10]_0 ),
        .Q(D[4]),
        .R(ARESET_I));
  FDRE \lu_check_tag_addr_reg[11] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_check_tag_addr_reg[11]_0 ),
        .Q(D[5]),
        .R(ARESET_I));
  FDRE \lu_check_tag_addr_reg[12] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(B_Vec[0]),
        .Q(D[6]),
        .R(ARESET_I));
  FDRE \lu_check_tag_addr_reg[13] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(B_Vec[1]),
        .Q(D[7]),
        .R(ARESET_I));
  FDRE \lu_check_tag_addr_reg[6] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_check_tag_addr_reg[6]_0 ),
        .Q(D[0]),
        .R(ARESET_I));
  FDRE \lu_check_tag_addr_reg[7] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_check_tag_addr_reg[7]_0 ),
        .Q(D[1]),
        .R(ARESET_I));
  FDRE \lu_check_tag_addr_reg[8] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_check_tag_addr_reg[8]_0 ),
        .Q(D[2]),
        .R(ARESET_I));
  FDRE \lu_check_tag_addr_reg[9] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(\lu_check_tag_addr_reg[9]_0 ),
        .Q(D[3]),
        .R(ARESET_I));
  FDRE \lu_check_tag_hit_copy_ds_reg[0] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_tag_hit_copy_ds_0),
        .Q(lu_check_tag_hit_copy_ds[0]),
        .R(ARESET_I));
  FDRE \lu_check_tag_hit_copy_ds_reg[1] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_tag_hit_copy_ds_1),
        .Q(lu_check_tag_hit_copy_ds[1]),
        .R(ARESET_I));
  FDRE \lu_check_tag_hit_copy_lb_reg[0] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_tag_hit_copy_lb_0),
        .Q(lu_check_tag_hit_copy_lb[0]),
        .R(ARESET_I));
  FDRE \lu_check_tag_hit_copy_lb_reg[1] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_tag_hit_copy_lb_1),
        .Q(lu_check_tag_hit_copy_lb[1]),
        .R(ARESET_I));
  FDRE \lu_check_tag_hit_copy_md_reg[0] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_tag_hit_copy_md_0),
        .Q(lu_check_tag_hit_copy_md[0]),
        .R(ARESET_I));
  FDRE \lu_check_tag_hit_copy_md_reg[1] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_tag_hit_copy_md_1),
        .Q(lu_check_tag_hit_copy_md[1]),
        .R(ARESET_I));
  FDRE \lu_check_tag_hit_copy_pc_reg[0] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_tag_hit_copy_pc_0),
        .Q(lu_check_tag_hit_copy_pc[0]),
        .R(ARESET_I));
  FDRE \lu_check_tag_hit_copy_pc_reg[1] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_tag_hit_copy_pc_1),
        .Q(lu_check_tag_hit_copy_pc[1]),
        .R(ARESET_I));
  FDRE \lu_check_tag_hit_copy_rs_reg[0] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_tag_hit_copy_rs_0),
        .Q(lu_check_tag_hit_copy_rs[0]),
        .R(ARESET_I));
  FDRE \lu_check_tag_hit_copy_rs_reg[1] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_tag_hit_copy_rs_1),
        .Q(lu_check_tag_hit_copy_rs[1]),
        .R(ARESET_I));
  FDRE \lu_check_tag_hit_copy_wm_reg[0] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_tag_hit_copy_wm_0),
        .Q(lu_check_tag_hit_copy_wm[0]),
        .R(ARESET_I));
  FDRE \lu_check_tag_hit_copy_wm_reg[1] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_tag_hit_copy_wm_1),
        .Q(lu_check_tag_hit_copy_wm[1]),
        .R(ARESET_I));
  FDRE \lu_check_tag_hit_reg[0] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_tag_hit_0),
        .Q(\lu_check_tag_hit_reg_n_0_[0] ),
        .R(ARESET_I));
  FDRE \lu_check_tag_hit_reg[1] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(lu_mem_tag_hit_1),
        .Q(lookup_tag_assoc_way),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[0][Addr][14] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(DATA_OUTA[0]),
        .Q(\lu_check_tag_reg[0][Addr] [14]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[0][Addr][15] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(DATA_OUTA[1]),
        .Q(\lu_check_tag_reg[0][Addr] [15]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[0][Addr][16] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(DATA_OUTA[2]),
        .Q(\lu_check_tag_reg[0][Addr] [16]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[0][Addr][17] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(DATA_OUTA[3]),
        .Q(\lu_check_tag_reg[0][Addr] [17]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[0][Addr][18] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(DATA_OUTA[4]),
        .Q(\lu_check_tag_reg[0][Addr] [18]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[0][Addr][19] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(DATA_OUTA[5]),
        .Q(\lu_check_tag_reg[0][Addr] [19]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[0][Addr][20] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(DATA_OUTA[6]),
        .Q(\lu_check_tag_reg[0][Addr] [20]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[0][Addr][21] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(DATA_OUTA[7]),
        .Q(\lu_check_tag_reg[0][Addr] [21]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[0][Addr][22] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(DATA_OUTA[8]),
        .Q(\lu_check_tag_reg[0][Addr] [22]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[0][Addr][23] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(DATA_OUTA[9]),
        .Q(\lu_check_tag_reg[0][Addr] [23]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[0][Addr][24] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(DATA_OUTA[10]),
        .Q(\lu_check_tag_reg[0][Addr] [24]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[0][Addr][25] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(DATA_OUTA[11]),
        .Q(\lu_check_tag_reg[0][Addr] [25]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[0][Addr][26] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(DATA_OUTA[12]),
        .Q(\lu_check_tag_reg[0][Addr] [26]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[0][Addr][27] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(DATA_OUTA[13]),
        .Q(\lu_check_tag_reg[0][Addr] [27]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[0][Addr][28] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(DATA_OUTA[14]),
        .Q(\lu_check_tag_reg[0][Addr] [28]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[0][Addr][29] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(DATA_OUTA[15]),
        .Q(\lu_check_tag_reg[0][Addr] [29]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[0][Addr][30] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(DATA_OUTA[16]),
        .Q(\lu_check_tag_reg[0][Addr] [30]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[0][Addr][31] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(DATA_OUTA[17]),
        .Q(\lu_check_tag_reg[0][Addr] [31]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[1][Addr][14] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(DATA_OUTA[21]),
        .Q(\lu_check_tag_reg[1][Addr] [14]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[1][Addr][15] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(DATA_OUTA[22]),
        .Q(\lu_check_tag_reg[1][Addr] [15]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[1][Addr][16] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(DATA_OUTA[23]),
        .Q(\lu_check_tag_reg[1][Addr] [16]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[1][Addr][17] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(DATA_OUTA[24]),
        .Q(\lu_check_tag_reg[1][Addr] [17]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[1][Addr][18] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(DATA_OUTA[25]),
        .Q(\lu_check_tag_reg[1][Addr] [18]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[1][Addr][19] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(DATA_OUTA[26]),
        .Q(\lu_check_tag_reg[1][Addr] [19]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[1][Addr][20] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(DATA_OUTA[27]),
        .Q(\lu_check_tag_reg[1][Addr] [20]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[1][Addr][21] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(DATA_OUTA[28]),
        .Q(\lu_check_tag_reg[1][Addr] [21]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[1][Addr][22] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(DATA_OUTA[29]),
        .Q(\lu_check_tag_reg[1][Addr] [22]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[1][Addr][23] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(DATA_OUTA[30]),
        .Q(\lu_check_tag_reg[1][Addr] [23]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[1][Addr][24] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(DATA_OUTA[31]),
        .Q(\lu_check_tag_reg[1][Addr] [24]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[1][Addr][25] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(DATA_OUTA[32]),
        .Q(\lu_check_tag_reg[1][Addr] [25]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[1][Addr][26] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(DATA_OUTA[33]),
        .Q(\lu_check_tag_reg[1][Addr] [26]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[1][Addr][27] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(DATA_OUTA[34]),
        .Q(\lu_check_tag_reg[1][Addr] [27]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[1][Addr][28] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(DATA_OUTA[35]),
        .Q(\lu_check_tag_reg[1][Addr] [28]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[1][Addr][29] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(DATA_OUTA[36]),
        .Q(\lu_check_tag_reg[1][Addr] [29]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[1][Addr][30] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(DATA_OUTA[37]),
        .Q(\lu_check_tag_reg[1][Addr] [30]),
        .R(ARESET_I));
  FDRE \lu_check_tag_reg[1][Addr][31] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(DATA_OUTA[38]),
        .Q(\lu_check_tag_reg[1][Addr] [31]),
        .R(ARESET_I));
  FDRE \lu_check_valid_bits_reg[0] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(\update_release_tag_reg[Valid]_1 [0]),
        .Q(lu_check_valid_bits[0]),
        .R(ARESET_I));
  FDRE \lu_check_valid_bits_reg[1] 
       (.C(ACLK),
        .CE(lu_mem_piperun_or_conflict),
        .D(\update_release_tag_reg[Valid]_1 [1]),
        .Q(lu_check_valid_bits[1]),
        .R(ARESET_I));
  FDRE lu_check_valid_delayed_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(lu_check_valid_delayed_reg_0),
        .Q(lu_check_valid_delayed),
        .R(ARESET_I));
  FDRE lu_check_wait_for_update_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(Chk_Valid_Inst_n_92),
        .Q(lu_check_wait_for_update),
        .R(1'b0));
  FDRE lu_check_wr_already_pushed_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(Chk_Valid_Inst_n_93),
        .Q(lu_check_wr_already_pushed),
        .R(1'b0));
  FDRE lu_check_write_alloc_reg
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(lu_mem_write_alloc),
        .Q(lu_check_write_alloc),
        .R(ARESET_I));
  FDSE lu_ds_last_beat_next_last_n_reg
       (.C(ACLK),
        .CE(lookup_offset_first1),
        .D(lu_ds_last_beat_next_last_n),
        .Q(lu_ds_last_beat_next_last_n_reg_n_0),
        .S(ARESET_I));
  FDRE \lu_mem_force_way_reg[0] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(Q[14]),
        .Q(lu_mem_force_way),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr][0] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(Q[0]),
        .Q(\lu_mem_info_reg[Addr_n_0_][0] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr][10] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(Q[10]),
        .Q(\lu_check_tag_addr_reg[10]_0 ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr][11] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(Q[11]),
        .Q(\lu_check_tag_addr_reg[11]_0 ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr][12] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(Q[12]),
        .Q(B_Vec[0]),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr][13] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(Q[13]),
        .Q(B_Vec[1]),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr][15] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(Q[15]),
        .Q(\lu_mem_info_reg[Addr_n_0_][15] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr][16] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(Q[16]),
        .Q(\lu_mem_info_reg[Addr_n_0_][16] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr][17] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(Q[17]),
        .Q(\lu_mem_info_reg[Addr_n_0_][17] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr][18] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(Q[18]),
        .Q(\lu_mem_info_reg[Addr_n_0_][18] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr][19] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(Q[19]),
        .Q(\lu_mem_info_reg[Addr_n_0_][19] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr][1] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(Q[1]),
        .Q(\lu_mem_info_reg[Addr_n_0_][1] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr][20] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(Q[20]),
        .Q(\lu_mem_info_reg[Addr_n_0_][20] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr][21] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(Q[21]),
        .Q(\lu_mem_info_reg[Addr_n_0_][21] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr][22] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(Q[22]),
        .Q(\lu_mem_info_reg[Addr_n_0_][22] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr][23] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(Q[23]),
        .Q(\lu_mem_info_reg[Addr_n_0_][23] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr][24] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(Q[24]),
        .Q(\lu_mem_info_reg[Addr_n_0_][24] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr][25] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(Q[25]),
        .Q(\lu_mem_info_reg[Addr_n_0_][25] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr][26] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(Q[26]),
        .Q(\lu_mem_info_reg[Addr_n_0_][26] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr][27] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(Q[27]),
        .Q(\lu_mem_info_reg[Addr_n_0_][27] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr][28] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(Q[28]),
        .Q(\lu_mem_info_reg[Addr_n_0_][28] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr][29] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(Q[29]),
        .Q(\lu_mem_info_reg[Addr_n_0_][29] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr][2] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(Q[2]),
        .Q(\lu_mem_info_reg[Addr_n_0_][2] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr][30] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(Q[30]),
        .Q(\lu_mem_info_reg[Addr_n_0_][30] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr][31] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(Q[31]),
        .Q(\lu_mem_info_reg[Addr_n_0_][31] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr][3] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(Q[3]),
        .Q(\lu_mem_info_reg[Addr_n_0_][3] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr][4] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(Q[4]),
        .Q(\lu_mem_info_reg[Addr_n_0_][4] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr][5] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(Q[5]),
        .Q(\lu_mem_info_reg[Addr_n_0_][5] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr][6] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(Q[6]),
        .Q(\lu_check_tag_addr_reg[6]_0 ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr][7] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(Q[7]),
        .Q(\lu_check_tag_addr_reg[7]_0 ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr][8] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(Q[8]),
        .Q(\lu_check_tag_addr_reg[8]_0 ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr][9] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(Q[9]),
        .Q(\lu_check_tag_addr_reg[9]_0 ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr_Stp][0] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\arb_access_i_reg[Size][1]_0 [0]),
        .Q(\lu_mem_info_reg[Addr_Stp_n_0_][0] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr_Stp][1] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\arb_access_i_reg[Size][1]_0 [1]),
        .Q(\lu_mem_info_reg[Addr_Stp_n_0_][1] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr_Stp][2] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\arb_access_i_reg[Size][1]_0 [2]),
        .Q(\lu_mem_info_reg[Addr_Stp_n_0_][2] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr_Stp][3] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\arb_access_i_reg[Size][1]_0 [3]),
        .Q(\lu_mem_info_reg[Addr_Stp_n_0_][3] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr_Stp][4] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\arb_access_i_reg[Size][1]_0 [4]),
        .Q(\lu_mem_info_reg[Addr_Stp_n_0_][4] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr_Stp][5] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\arb_access_i_reg[Size][1]_0 [5]),
        .Q(\lu_mem_info_reg[Addr_Stp_n_0_][5] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr_Use][0] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\arb_access_i_reg[Size][1] [0]),
        .Q(\lu_mem_info_reg[Addr_Use_n_0_][0] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr_Use][1] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\arb_access_i_reg[Size][1] [1]),
        .Q(\lu_mem_info_reg[Addr_Use_n_0_][1] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr_Use][2] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\arb_access_i_reg[Size][1] [2]),
        .Q(\lu_mem_info_reg[Addr_Use_n_0_][2] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr_Use][3] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\arb_access_i_reg[Size][1] [3]),
        .Q(\lu_mem_info_reg[Addr_Use_n_0_][3] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr_Use][4] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\arb_access_i_reg[Size][1] [4]),
        .Q(\lu_mem_info_reg[Addr_Use_n_0_][4] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Addr_Use][5] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\arb_access_i_reg[Size][1] [5]),
        .Q(\lu_mem_info_reg[Addr_Use_n_0_][5] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Allocate] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\arb_access_i_reg[Allocate] ),
        .Q(\lu_mem_info_reg[Allocate]__0 ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Early] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\access_info[0][Early] ),
        .Q(\lu_mem_info_reg[Early]__0 ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Force_Hit] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\access_info[0][Force_Hit] ),
        .Q(\lu_mem_info_reg[Force_Hit_n_0_] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Keep] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\access_info[0][Keep] ),
        .Q(\lu_mem_info_reg[Keep]__0 ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Kind] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\access_info[0][Kind] ),
        .Q(\lu_mem_info_reg[Kind_n_0_] ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Len][0] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\arb_access_i_reg[Len][7] [0]),
        .Q(\lu_mem_info_reg[Len] [0]),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Len][1] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\arb_access_i_reg[Len][7] [1]),
        .Q(\lu_mem_info_reg[Len] [1]),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Len][2] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\arb_access_i_reg[Len][7] [2]),
        .Q(\lu_mem_info_reg[Len] [2]),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Len][3] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\arb_access_i_reg[Len][7] [3]),
        .Q(\lu_mem_info_reg[Len] [3]),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Len][4] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\arb_access_i_reg[Len][7] [4]),
        .Q(\lu_mem_info_reg[Len] [4]),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Len][5] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\arb_access_i_reg[Len][7] [5]),
        .Q(\lu_mem_info_reg[Len] [5]),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Len][6] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\arb_access_i_reg[Len][7] [6]),
        .Q(\lu_mem_info_reg[Len] [6]),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Len][7] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\arb_access_i_reg[Len][7] [7]),
        .Q(\lu_mem_info_reg[Len] [7]),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Port_Num][0] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\access_info[0][Port_Num] ),
        .Q(\lu_check_info_reg[Port_Num][0]_0 ),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Size][0] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\arb_access_i_reg[Size][2] [0]),
        .Q(\lu_mem_info_reg[Size] [0]),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Size][1] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\arb_access_i_reg[Size][2] [1]),
        .Q(\lu_mem_info_reg[Size] [1]),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Size][2] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\arb_access_i_reg[Size][2] [2]),
        .Q(\lu_mem_info_reg[Size] [2]),
        .R(ARESET_I));
  FDRE \lu_mem_info_reg[Wr] 
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(\access_info[0][Wr] ),
        .Q(\lu_mem_info_reg[Wr]__0 ),
        .R(ARESET_I));
  FDRE lu_mem_protect_conflict_d1_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(lud_mem_conflict),
        .Q(lu_mem_protect_conflict_d1),
        .R(ARESET_I));
  FDRE lu_mem_protect_conflict_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(lookup_protect_conflict),
        .Q(lud_mem_conflict),
        .R(ARESET_I));
  LUT2 #(
    .INIT(4'hE)) 
    \lu_mem_release_lock_hold[0]_i_1 
       (.I0(lu_mem_releasing_lock[0]),
        .I1(\lu_mem_release_lock_hold_reg_n_0_[0] ),
        .O(\lu_mem_release_lock_hold[0]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'hE)) 
    \lu_mem_release_lock_hold[1]_i_1 
       (.I0(lu_mem_releasing_lock[1]),
        .I1(\lu_mem_release_lock_hold_reg_n_0_[1] ),
        .O(\lu_mem_release_lock_hold[1]_i_1_n_0 ));
  FDRE \lu_mem_release_lock_hold_reg[0] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\lu_mem_release_lock_hold[0]_i_1_n_0 ),
        .Q(\lu_mem_release_lock_hold_reg_n_0_[0] ),
        .R(lu_mem_release_lock_hold));
  FDRE \lu_mem_release_lock_hold_reg[1] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\lu_mem_release_lock_hold[1]_i_1_n_0 ),
        .Q(\lu_mem_release_lock_hold_reg_n_0_[1] ),
        .R(lu_mem_release_lock_hold));
  (* SOFT_HLUTNM = "soft_lutpair63" *) 
  LUT3 #(
    .INIT(8'hF4)) 
    \lu_mem_removed_way_hold[0]_i_1 
       (.I0(\update_release_tag[Valid] ),
        .I1(lu_mem_releasing_lock[0]),
        .I2(lu_mem_removed_way_hold[0]),
        .O(\lu_mem_removed_way_hold[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair63" *) 
  LUT3 #(
    .INIT(8'hF4)) 
    \lu_mem_removed_way_hold[1]_i_2 
       (.I0(\update_release_tag[Valid] ),
        .I1(lu_mem_releasing_lock[1]),
        .I2(lu_mem_removed_way_hold[1]),
        .O(\lu_mem_removed_way_hold[1]_i_2_n_0 ));
  FDRE \lu_mem_removed_way_hold_reg[0] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\lu_mem_removed_way_hold[0]_i_1_n_0 ),
        .Q(lu_mem_removed_way_hold[0]),
        .R(lu_mem_release_lock_hold));
  FDRE \lu_mem_removed_way_hold_reg[1] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\lu_mem_removed_way_hold[1]_i_2_n_0 ),
        .Q(lu_mem_removed_way_hold[1]),
        .R(lu_mem_release_lock_hold));
  LUT5 #(
    .INIT(32'h00000001)) 
    lu_mem_single_beat_i_1
       (.I0(\arb_access_i_reg[Len][7] [5]),
        .I1(\arb_access_i_reg[Len][7] [4]),
        .I2(\arb_access_i_reg[Len][7] [6]),
        .I3(\arb_access_i_reg[Len][7] [7]),
        .I4(lu_mem_single_beat_i_2_n_0),
        .O(lu_mem_single_beat__0));
  LUT4 #(
    .INIT(16'hFFFE)) 
    lu_mem_single_beat_i_2
       (.I0(\arb_access_i_reg[Len][7] [2]),
        .I1(\arb_access_i_reg[Len][7] [3]),
        .I2(\arb_access_i_reg[Len][7] [0]),
        .I3(\arb_access_i_reg[Len][7] [1]),
        .O(lu_mem_single_beat_i_2_n_0));
  FDRE lu_mem_single_beat_reg
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(lu_mem_single_beat__0),
        .Q(lu_mem_single_beat_reg_n_0),
        .R(ARESET_I));
  FDRE lu_mem_valid_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(LU_Check_TagConf_And_Inst1_n_0),
        .Q(lu_mem_valid_reg_n_0),
        .R(1'b0));
  FDRE lu_mem_write_alloc_reg
       (.C(ACLK),
        .CE(lookup_fetch_piperun),
        .D(lu_mem_write_alloc0),
        .Q(lu_mem_write_alloc),
        .R(ARESET_I));
  FDRE lud_addr_pipeline_full_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(lud_addr_pipeline_full0),
        .Q(lud_step_delayed_restart_reg_0),
        .R(ARESET_I));
  FDRE lud_mem_already_used_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(Chk_Valid_Inst_n_94),
        .Q(lud_mem_already_used),
        .R(1'b0));
  FDRE lud_mem_completed_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(LU_PC_And_Inst5_n_1),
        .Q(lud_mem_completed_reg_n_0),
        .R(1'b0));
  FDRE lud_mem_delayed_read_data_reg
       (.C(ACLK),
        .CE(lud_addr_piperun),
        .D(lud_mem_delayed_read_data0),
        .Q(lud_mem_delayed_read_data),
        .R(ARESET_I));
  FDRE lud_mem_keep_single_during_stall_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(LUD_Mem_PR_And_Inst1_n_4),
        .Q(lud_mem_keep_single_during_stall),
        .R(ARESET_I));
  FDRE lud_mem_last_reg
       (.C(ACLK),
        .CE(lud_addr_piperun),
        .D(lookup_last_beat),
        .Q(lud_mem_last),
        .R(ARESET_I));
  FDRE \lud_mem_port_one_hot_reg[0] 
       (.C(ACLK),
        .CE(lud_addr_piperun),
        .D(Chk_Valid_Inst_n_70),
        .Q(lud_mem_port_one_hot),
        .R(ARESET_I));
  FDRE \lud_mem_port_one_hot_reg[1] 
       (.C(ACLK),
        .CE(lud_addr_piperun),
        .D(Chk_Valid_Inst_n_71),
        .Q(\lud_reg_port_num_reg[0]_0 ),
        .R(ARESET_I));
  FDRE lud_mem_speculative_valid_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(LUD_Addr_PR_Or_Inst2_n_1),
        .Q(lud_mem_speculative_valid),
        .R(ARESET_I));
  FDRE lud_mem_waiting_for_pipe_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(Chk_Valid_Inst_n_5),
        .Q(lud_mem_waiting_for_pipe_reg_0),
        .R(1'b0));
  FDRE \lud_mem_way_d1_reg[0] 
       (.C(ACLK),
        .CE(1'b1),
        .D(LUD_Mem_PR_And_Inst1_n_5),
        .Q(lud_mem_way_d1),
        .R(ARESET_I));
  FDRE lud_reg_last_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(LUD_Mem_PR_And_Inst1_n_7),
        .Q(\lookup_read_data_info[0,0][Last] ),
        .R(ARESET_I));
  FDRE \lud_reg_port_num_reg[0] 
       (.C(ACLK),
        .CE(1'b1),
        .D(LUD_Mem_PR_And_Inst1_n_6),
        .Q(\lud_reg_port_num_reg[0]_1 ),
        .R(ARESET_I));
  LUT6 #(
    .INIT(64'h00C000C0000000AA)) 
    \lud_reg_valid_one_hot[0]_i_1 
       (.I0(\lookup_read_data_info[0,0][Valid] ),
        .I1(lud_reg_valid_reg_1),
        .I2(lud_mem_port_one_hot),
        .I3(ARESET_I),
        .I4(lud_reg_piperun),
        .I5(lud_mem_piperun),
        .O(\lud_reg_valid_one_hot[0]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h00C000C0000000AA)) 
    \lud_reg_valid_one_hot[1]_i_1 
       (.I0(\lookup_read_data_info[0,1][Valid] ),
        .I1(lud_reg_valid_reg_1),
        .I2(\lud_reg_port_num_reg[0]_0 ),
        .I3(ARESET_I),
        .I4(lud_reg_piperun),
        .I5(lud_mem_piperun),
        .O(\lud_reg_valid_one_hot[1]_i_1_n_0 ));
  FDRE \lud_reg_valid_one_hot_reg[0] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\lud_reg_valid_one_hot[0]_i_1_n_0 ),
        .Q(\lookup_read_data_info[0,0][Valid] ),
        .R(1'b0));
  FDRE \lud_reg_valid_one_hot_reg[1] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\lud_reg_valid_one_hot[1]_i_1_n_0 ),
        .Q(\lookup_read_data_info[0,1][Valid] ),
        .R(1'b0));
  FDRE lud_reg_valid_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(LU_PC_And_Inst5_n_3),
        .Q(lud_reg_valid_reg_0),
        .R(1'b0));
  FDRE lud_step_delayed_restart_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(LUD_Step_PR_And_Inst1_n_1),
        .Q(lud_step_delayed_restart),
        .R(1'b0));
  FDRE lud_write_hit_done_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(Chk_Valid_Inst_n_95),
        .Q(lud_write_hit_done_reg_n_0),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hB8)) 
    rl_fifo_mem_reg_r1_0_15_0_0_i_1
       (.I0(\lookup_read_data_info[0,0][Last] ),
        .I1(r_hit_push),
        .I2(\update_read_data_info[0,0][Last] ),
        .O(new_read_data_last));
  LUT3 #(
    .INIT(8'hB8)) 
    rl_fifo_mem_reg_r1_0_15_0_0_i_1__0
       (.I0(\lookup_read_data_info[0,0][Last] ),
        .I1(r_hit_push_7),
        .I2(\update_read_data_info[0,0][Last] ),
        .O(\Use_FPGA_2.S_AXI_RVALID_reg ));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_0_5_i_1
       (.I0(\lookup_read_data_info[0,0][Data][0] [1]),
        .I1(\lookup_read_data_info[0,0][Data][1] [1]),
        .I2(M0_AXI_RDATA[1]),
        .I3(r_hit_push_7),
        .O(new_read_data_word[1]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_0_5_i_1__0
       (.I0(\lookup_read_data_info[0,0][Data][0] [1]),
        .I1(\lookup_read_data_info[0,0][Data][1] [1]),
        .I2(M0_AXI_RDATA[1]),
        .I3(r_hit_push),
        .O(\S0_AXI_RDATA[30] [1]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_0_5_i_2
       (.I0(\lookup_read_data_info[0,0][Data][0] [0]),
        .I1(\lookup_read_data_info[0,0][Data][1] [0]),
        .I2(M0_AXI_RDATA[0]),
        .I3(r_hit_push_7),
        .O(new_read_data_word[0]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_0_5_i_2__0
       (.I0(\lookup_read_data_info[0,0][Data][0] [0]),
        .I1(\lookup_read_data_info[0,0][Data][1] [0]),
        .I2(M0_AXI_RDATA[0]),
        .I3(r_hit_push),
        .O(\S0_AXI_RDATA[30] [0]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_0_5_i_3
       (.I0(\lookup_read_data_info[0,0][Data][0] [3]),
        .I1(\lookup_read_data_info[0,0][Data][1] [3]),
        .I2(M0_AXI_RDATA[3]),
        .I3(r_hit_push_7),
        .O(new_read_data_word[3]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_0_5_i_3__0
       (.I0(\lookup_read_data_info[0,0][Data][0] [3]),
        .I1(\lookup_read_data_info[0,0][Data][1] [3]),
        .I2(M0_AXI_RDATA[3]),
        .I3(r_hit_push),
        .O(\S0_AXI_RDATA[30] [3]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_0_5_i_4
       (.I0(\lookup_read_data_info[0,0][Data][0] [2]),
        .I1(\lookup_read_data_info[0,0][Data][1] [2]),
        .I2(M0_AXI_RDATA[2]),
        .I3(r_hit_push_7),
        .O(new_read_data_word[2]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_0_5_i_4__0
       (.I0(\lookup_read_data_info[0,0][Data][0] [2]),
        .I1(\lookup_read_data_info[0,0][Data][1] [2]),
        .I2(M0_AXI_RDATA[2]),
        .I3(r_hit_push),
        .O(\S0_AXI_RDATA[30] [2]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_0_5_i_5
       (.I0(\lookup_read_data_info[0,0][Data][0] [5]),
        .I1(\lookup_read_data_info[0,0][Data][1] [5]),
        .I2(M0_AXI_RDATA[5]),
        .I3(r_hit_push_7),
        .O(new_read_data_word[5]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_0_5_i_5__0
       (.I0(\lookup_read_data_info[0,0][Data][0] [5]),
        .I1(\lookup_read_data_info[0,0][Data][1] [5]),
        .I2(M0_AXI_RDATA[5]),
        .I3(r_hit_push),
        .O(\S0_AXI_RDATA[30] [5]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_0_5_i_6
       (.I0(\lookup_read_data_info[0,0][Data][0] [4]),
        .I1(\lookup_read_data_info[0,0][Data][1] [4]),
        .I2(M0_AXI_RDATA[4]),
        .I3(r_hit_push_7),
        .O(new_read_data_word[4]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_0_5_i_6__0
       (.I0(\lookup_read_data_info[0,0][Data][0] [4]),
        .I1(\lookup_read_data_info[0,0][Data][1] [4]),
        .I2(M0_AXI_RDATA[4]),
        .I3(r_hit_push),
        .O(\S0_AXI_RDATA[30] [4]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_12_17_i_1
       (.I0(\lookup_read_data_info[0,0][Data][0] [13]),
        .I1(\lookup_read_data_info[0,0][Data][1] [13]),
        .I2(M0_AXI_RDATA[13]),
        .I3(r_hit_push_7),
        .O(new_read_data_word[13]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_12_17_i_1__0
       (.I0(\lookup_read_data_info[0,0][Data][0] [13]),
        .I1(\lookup_read_data_info[0,0][Data][1] [13]),
        .I2(M0_AXI_RDATA[13]),
        .I3(r_hit_push),
        .O(\S0_AXI_RDATA[30] [13]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_12_17_i_2
       (.I0(\lookup_read_data_info[0,0][Data][0] [12]),
        .I1(\lookup_read_data_info[0,0][Data][1] [12]),
        .I2(M0_AXI_RDATA[12]),
        .I3(r_hit_push_7),
        .O(new_read_data_word[12]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_12_17_i_2__0
       (.I0(\lookup_read_data_info[0,0][Data][0] [12]),
        .I1(\lookup_read_data_info[0,0][Data][1] [12]),
        .I2(M0_AXI_RDATA[12]),
        .I3(r_hit_push),
        .O(\S0_AXI_RDATA[30] [12]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_12_17_i_3
       (.I0(\lookup_read_data_info[0,0][Data][0] [15]),
        .I1(\lookup_read_data_info[0,0][Data][1] [15]),
        .I2(M0_AXI_RDATA[15]),
        .I3(r_hit_push_7),
        .O(new_read_data_word[15]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_12_17_i_3__0
       (.I0(\lookup_read_data_info[0,0][Data][0] [15]),
        .I1(\lookup_read_data_info[0,0][Data][1] [15]),
        .I2(M0_AXI_RDATA[15]),
        .I3(r_hit_push),
        .O(\S0_AXI_RDATA[30] [15]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_12_17_i_4
       (.I0(\lookup_read_data_info[0,0][Data][0] [14]),
        .I1(\lookup_read_data_info[0,0][Data][1] [14]),
        .I2(M0_AXI_RDATA[14]),
        .I3(r_hit_push_7),
        .O(new_read_data_word[14]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_12_17_i_4__0
       (.I0(\lookup_read_data_info[0,0][Data][0] [14]),
        .I1(\lookup_read_data_info[0,0][Data][1] [14]),
        .I2(M0_AXI_RDATA[14]),
        .I3(r_hit_push),
        .O(\S0_AXI_RDATA[30] [14]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_12_17_i_5
       (.I0(\lookup_read_data_info[0,0][Data][0] [17]),
        .I1(\lookup_read_data_info[0,0][Data][1] [17]),
        .I2(M0_AXI_RDATA[17]),
        .I3(r_hit_push_7),
        .O(new_read_data_word[17]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_12_17_i_5__0
       (.I0(\lookup_read_data_info[0,0][Data][0] [17]),
        .I1(\lookup_read_data_info[0,0][Data][1] [17]),
        .I2(M0_AXI_RDATA[17]),
        .I3(r_hit_push),
        .O(\S0_AXI_RDATA[30] [17]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_12_17_i_6
       (.I0(\lookup_read_data_info[0,0][Data][0] [16]),
        .I1(\lookup_read_data_info[0,0][Data][1] [16]),
        .I2(M0_AXI_RDATA[16]),
        .I3(r_hit_push_7),
        .O(new_read_data_word[16]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_12_17_i_6__0
       (.I0(\lookup_read_data_info[0,0][Data][0] [16]),
        .I1(\lookup_read_data_info[0,0][Data][1] [16]),
        .I2(M0_AXI_RDATA[16]),
        .I3(r_hit_push),
        .O(\S0_AXI_RDATA[30] [16]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_18_23_i_1
       (.I0(\lookup_read_data_info[0,0][Data][0] [19]),
        .I1(\lookup_read_data_info[0,0][Data][1] [19]),
        .I2(M0_AXI_RDATA[19]),
        .I3(r_hit_push_7),
        .O(new_read_data_word[19]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_18_23_i_1__0
       (.I0(\lookup_read_data_info[0,0][Data][0] [19]),
        .I1(\lookup_read_data_info[0,0][Data][1] [19]),
        .I2(M0_AXI_RDATA[19]),
        .I3(r_hit_push),
        .O(\S0_AXI_RDATA[30] [19]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_18_23_i_2
       (.I0(\lookup_read_data_info[0,0][Data][0] [18]),
        .I1(\lookup_read_data_info[0,0][Data][1] [18]),
        .I2(M0_AXI_RDATA[18]),
        .I3(r_hit_push_7),
        .O(new_read_data_word[18]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_18_23_i_2__0
       (.I0(\lookup_read_data_info[0,0][Data][0] [18]),
        .I1(\lookup_read_data_info[0,0][Data][1] [18]),
        .I2(M0_AXI_RDATA[18]),
        .I3(r_hit_push),
        .O(\S0_AXI_RDATA[30] [18]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_18_23_i_3
       (.I0(\lookup_read_data_info[0,0][Data][0] [21]),
        .I1(\lookup_read_data_info[0,0][Data][1] [21]),
        .I2(M0_AXI_RDATA[21]),
        .I3(r_hit_push_7),
        .O(new_read_data_word[21]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_18_23_i_3__0
       (.I0(\lookup_read_data_info[0,0][Data][0] [21]),
        .I1(\lookup_read_data_info[0,0][Data][1] [21]),
        .I2(M0_AXI_RDATA[21]),
        .I3(r_hit_push),
        .O(\S0_AXI_RDATA[30] [21]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_18_23_i_4
       (.I0(\lookup_read_data_info[0,0][Data][0] [20]),
        .I1(\lookup_read_data_info[0,0][Data][1] [20]),
        .I2(M0_AXI_RDATA[20]),
        .I3(r_hit_push_7),
        .O(new_read_data_word[20]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_18_23_i_4__0
       (.I0(\lookup_read_data_info[0,0][Data][0] [20]),
        .I1(\lookup_read_data_info[0,0][Data][1] [20]),
        .I2(M0_AXI_RDATA[20]),
        .I3(r_hit_push),
        .O(\S0_AXI_RDATA[30] [20]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_18_23_i_5
       (.I0(\lookup_read_data_info[0,0][Data][0] [23]),
        .I1(\lookup_read_data_info[0,0][Data][1] [23]),
        .I2(M0_AXI_RDATA[23]),
        .I3(r_hit_push_7),
        .O(new_read_data_word[23]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_18_23_i_5__0
       (.I0(\lookup_read_data_info[0,0][Data][0] [23]),
        .I1(\lookup_read_data_info[0,0][Data][1] [23]),
        .I2(M0_AXI_RDATA[23]),
        .I3(r_hit_push),
        .O(\S0_AXI_RDATA[30] [23]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_18_23_i_6
       (.I0(\lookup_read_data_info[0,0][Data][0] [22]),
        .I1(\lookup_read_data_info[0,0][Data][1] [22]),
        .I2(M0_AXI_RDATA[22]),
        .I3(r_hit_push_7),
        .O(new_read_data_word[22]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_18_23_i_6__0
       (.I0(\lookup_read_data_info[0,0][Data][0] [22]),
        .I1(\lookup_read_data_info[0,0][Data][1] [22]),
        .I2(M0_AXI_RDATA[22]),
        .I3(r_hit_push),
        .O(\S0_AXI_RDATA[30] [22]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_24_29_i_1
       (.I0(\lookup_read_data_info[0,0][Data][0] [25]),
        .I1(\lookup_read_data_info[0,0][Data][1] [25]),
        .I2(M0_AXI_RDATA[25]),
        .I3(r_hit_push_7),
        .O(new_read_data_word[25]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_24_29_i_1__0
       (.I0(\lookup_read_data_info[0,0][Data][0] [25]),
        .I1(\lookup_read_data_info[0,0][Data][1] [25]),
        .I2(M0_AXI_RDATA[25]),
        .I3(r_hit_push),
        .O(\S0_AXI_RDATA[30] [25]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_24_29_i_2
       (.I0(\lookup_read_data_info[0,0][Data][0] [24]),
        .I1(\lookup_read_data_info[0,0][Data][1] [24]),
        .I2(M0_AXI_RDATA[24]),
        .I3(r_hit_push_7),
        .O(new_read_data_word[24]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_24_29_i_2__0
       (.I0(\lookup_read_data_info[0,0][Data][0] [24]),
        .I1(\lookup_read_data_info[0,0][Data][1] [24]),
        .I2(M0_AXI_RDATA[24]),
        .I3(r_hit_push),
        .O(\S0_AXI_RDATA[30] [24]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_24_29_i_3
       (.I0(\lookup_read_data_info[0,0][Data][0] [27]),
        .I1(\lookup_read_data_info[0,0][Data][1] [27]),
        .I2(M0_AXI_RDATA[27]),
        .I3(r_hit_push_7),
        .O(new_read_data_word[27]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_24_29_i_3__0
       (.I0(\lookup_read_data_info[0,0][Data][0] [27]),
        .I1(\lookup_read_data_info[0,0][Data][1] [27]),
        .I2(M0_AXI_RDATA[27]),
        .I3(r_hit_push),
        .O(\S0_AXI_RDATA[30] [27]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_24_29_i_4
       (.I0(\lookup_read_data_info[0,0][Data][0] [26]),
        .I1(\lookup_read_data_info[0,0][Data][1] [26]),
        .I2(M0_AXI_RDATA[26]),
        .I3(r_hit_push_7),
        .O(new_read_data_word[26]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_24_29_i_4__0
       (.I0(\lookup_read_data_info[0,0][Data][0] [26]),
        .I1(\lookup_read_data_info[0,0][Data][1] [26]),
        .I2(M0_AXI_RDATA[26]),
        .I3(r_hit_push),
        .O(\S0_AXI_RDATA[30] [26]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_24_29_i_5
       (.I0(\lookup_read_data_info[0,0][Data][0] [29]),
        .I1(\lookup_read_data_info[0,0][Data][1] [29]),
        .I2(M0_AXI_RDATA[29]),
        .I3(r_hit_push_7),
        .O(new_read_data_word[29]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_24_29_i_5__0
       (.I0(\lookup_read_data_info[0,0][Data][0] [29]),
        .I1(\lookup_read_data_info[0,0][Data][1] [29]),
        .I2(M0_AXI_RDATA[29]),
        .I3(r_hit_push),
        .O(\S0_AXI_RDATA[30] [29]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_24_29_i_6
       (.I0(\lookup_read_data_info[0,0][Data][0] [28]),
        .I1(\lookup_read_data_info[0,0][Data][1] [28]),
        .I2(M0_AXI_RDATA[28]),
        .I3(r_hit_push_7),
        .O(new_read_data_word[28]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_24_29_i_6__0
       (.I0(\lookup_read_data_info[0,0][Data][0] [28]),
        .I1(\lookup_read_data_info[0,0][Data][1] [28]),
        .I2(M0_AXI_RDATA[28]),
        .I3(r_hit_push),
        .O(\S0_AXI_RDATA[30] [28]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_30_31_i_1
       (.I0(\lookup_read_data_info[0,0][Data][0] [31]),
        .I1(\lookup_read_data_info[0,0][Data][1] [31]),
        .I2(M0_AXI_RDATA[31]),
        .I3(r_hit_push_7),
        .O(new_read_data_word[31]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_30_31_i_1__0
       (.I0(\lookup_read_data_info[0,0][Data][0] [31]),
        .I1(\lookup_read_data_info[0,0][Data][1] [31]),
        .I2(M0_AXI_RDATA[31]),
        .I3(r_hit_push),
        .O(\S0_AXI_RDATA[30] [31]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_30_31_i_2
       (.I0(\lookup_read_data_info[0,0][Data][0] [30]),
        .I1(\lookup_read_data_info[0,0][Data][1] [30]),
        .I2(M0_AXI_RDATA[30]),
        .I3(r_hit_push_7),
        .O(new_read_data_word[30]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_30_31_i_2__0
       (.I0(\lookup_read_data_info[0,0][Data][0] [30]),
        .I1(\lookup_read_data_info[0,0][Data][1] [30]),
        .I2(M0_AXI_RDATA[30]),
        .I3(r_hit_push),
        .O(\S0_AXI_RDATA[30] [30]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_6_11_i_1
       (.I0(\lookup_read_data_info[0,0][Data][0] [7]),
        .I1(\lookup_read_data_info[0,0][Data][1] [7]),
        .I2(M0_AXI_RDATA[7]),
        .I3(r_hit_push_7),
        .O(new_read_data_word[7]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_6_11_i_1__0
       (.I0(\lookup_read_data_info[0,0][Data][0] [7]),
        .I1(\lookup_read_data_info[0,0][Data][1] [7]),
        .I2(M0_AXI_RDATA[7]),
        .I3(r_hit_push),
        .O(\S0_AXI_RDATA[30] [7]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_6_11_i_2
       (.I0(\lookup_read_data_info[0,0][Data][0] [6]),
        .I1(\lookup_read_data_info[0,0][Data][1] [6]),
        .I2(M0_AXI_RDATA[6]),
        .I3(r_hit_push_7),
        .O(new_read_data_word[6]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_6_11_i_2__0
       (.I0(\lookup_read_data_info[0,0][Data][0] [6]),
        .I1(\lookup_read_data_info[0,0][Data][1] [6]),
        .I2(M0_AXI_RDATA[6]),
        .I3(r_hit_push),
        .O(\S0_AXI_RDATA[30] [6]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_6_11_i_3
       (.I0(\lookup_read_data_info[0,0][Data][0] [9]),
        .I1(\lookup_read_data_info[0,0][Data][1] [9]),
        .I2(M0_AXI_RDATA[9]),
        .I3(r_hit_push_7),
        .O(new_read_data_word[9]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_6_11_i_3__0
       (.I0(\lookup_read_data_info[0,0][Data][0] [9]),
        .I1(\lookup_read_data_info[0,0][Data][1] [9]),
        .I2(M0_AXI_RDATA[9]),
        .I3(r_hit_push),
        .O(\S0_AXI_RDATA[30] [9]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_6_11_i_4
       (.I0(\lookup_read_data_info[0,0][Data][0] [8]),
        .I1(\lookup_read_data_info[0,0][Data][1] [8]),
        .I2(M0_AXI_RDATA[8]),
        .I3(r_hit_push_7),
        .O(new_read_data_word[8]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_6_11_i_4__0
       (.I0(\lookup_read_data_info[0,0][Data][0] [8]),
        .I1(\lookup_read_data_info[0,0][Data][1] [8]),
        .I2(M0_AXI_RDATA[8]),
        .I3(r_hit_push),
        .O(\S0_AXI_RDATA[30] [8]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_6_11_i_5
       (.I0(\lookup_read_data_info[0,0][Data][0] [11]),
        .I1(\lookup_read_data_info[0,0][Data][1] [11]),
        .I2(M0_AXI_RDATA[11]),
        .I3(r_hit_push_7),
        .O(new_read_data_word[11]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_6_11_i_5__0
       (.I0(\lookup_read_data_info[0,0][Data][0] [11]),
        .I1(\lookup_read_data_info[0,0][Data][1] [11]),
        .I2(M0_AXI_RDATA[11]),
        .I3(r_hit_push),
        .O(\S0_AXI_RDATA[30] [11]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_6_11_i_6
       (.I0(\lookup_read_data_info[0,0][Data][0] [10]),
        .I1(\lookup_read_data_info[0,0][Data][1] [10]),
        .I2(M0_AXI_RDATA[10]),
        .I3(r_hit_push_7),
        .O(new_read_data_word[10]));
  LUT4 #(
    .INIT(16'hEEF0)) 
    rw_fifo_mem_reg_0_15_6_11_i_6__0
       (.I0(\lookup_read_data_info[0,0][Data][0] [10]),
        .I1(\lookup_read_data_info[0,0][Data][1] [10]),
        .I2(M0_AXI_RDATA[10]),
        .I3(r_hit_push),
        .O(\S0_AXI_RDATA[30] [10]));
  FDRE update_first_write_hit_reg
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(lookup_first_write_hit),
        .Q(update_first_write_hit),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr][0] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\update_info_reg[Addr][5]_0 [0]),
        .Q(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 [0]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr][10] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(D[4]),
        .Q(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 [10]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr][11] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(D[5]),
        .Q(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 [11]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr][12] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(D[6]),
        .Q(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 [12]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr][13] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(D[7]),
        .Q(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 [13]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr][14] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(lookup_stall_addr[14]),
        .Q(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 [14]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr][15] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(lookup_stall_addr[15]),
        .Q(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 [15]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr][16] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(lookup_stall_addr[16]),
        .Q(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 [16]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr][17] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(lookup_stall_addr[17]),
        .Q(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 [17]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr][18] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(lookup_stall_addr[18]),
        .Q(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 [18]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr][19] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(lookup_stall_addr[19]),
        .Q(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 [19]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr][1] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\update_info_reg[Addr][5]_0 [1]),
        .Q(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 [1]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr][20] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(lookup_stall_addr[20]),
        .Q(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 [20]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr][21] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(lookup_stall_addr[21]),
        .Q(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 [21]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr][22] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(lookup_stall_addr[22]),
        .Q(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 [22]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr][23] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(lookup_stall_addr[23]),
        .Q(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 [23]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr][24] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(lookup_stall_addr[24]),
        .Q(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 [24]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr][25] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(lookup_stall_addr[25]),
        .Q(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 [25]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr][26] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(lookup_stall_addr[26]),
        .Q(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 [26]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr][27] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(lookup_stall_addr[27]),
        .Q(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 [27]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr][28] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(lookup_stall_addr[28]),
        .Q(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 [28]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr][29] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(lookup_stall_addr[29]),
        .Q(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 [29]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr][2] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\update_info_reg[Addr][5]_0 [2]),
        .Q(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 [2]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr][30] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(lookup_stall_addr[30]),
        .Q(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 [30]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr][31] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(lookup_stall_addr[31]),
        .Q(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 [31]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr][3] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\update_info_reg[Addr][5]_0 [3]),
        .Q(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 [3]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr][4] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\update_info_reg[Addr][5]_0 [4]),
        .Q(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 [4]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr][5] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\update_info_reg[Addr][5]_0 [5]),
        .Q(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 [5]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr][6] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(D[0]),
        .Q(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 [6]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr][7] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(D[1]),
        .Q(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 [7]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr][8] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(D[2]),
        .Q(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 [8]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr][9] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(D[3]),
        .Q(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_0 [9]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr_Stp][0] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\update_info_reg[Addr_Stp][5]_0 [0]),
        .Q(\ri_stp_reg[5] [0]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr_Stp][1] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\update_info_reg[Addr_Stp][5]_0 [1]),
        .Q(\ri_stp_reg[5] [1]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr_Stp][2] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\update_info_reg[Addr_Stp][5]_0 [2]),
        .Q(\ri_stp_reg[5] [2]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr_Stp][3] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\update_info_reg[Addr_Stp][5]_0 [3]),
        .Q(\ri_stp_reg[5] [3]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr_Stp][4] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\update_info_reg[Addr_Stp][5]_0 [4]),
        .Q(\ri_stp_reg[5] [4]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr_Stp][5] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\update_info_reg[Addr_Stp][5]_0 [5]),
        .Q(\ri_stp_reg[5] [5]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr_Use][0] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\update_info_reg[Addr_Use][5]_0 [0]),
        .Q(\ri_use_reg[5] [0]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr_Use][1] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\update_info_reg[Addr_Use][5]_0 [1]),
        .Q(\ri_use_reg[5] [1]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr_Use][2] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\update_info_reg[Addr_Use][5]_0 [2]),
        .Q(\ri_use_reg[5] [2]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr_Use][3] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\update_info_reg[Addr_Use][5]_0 [3]),
        .Q(\ri_use_reg[5] [3]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr_Use][4] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\update_info_reg[Addr_Use][5]_0 [4]),
        .Q(\ri_use_reg[5] [4]),
        .R(ARESET_I));
  FDRE \update_info_reg[Addr_Use][5] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\update_info_reg[Addr_Use][5]_0 [5]),
        .Q(\ri_use_reg[5] [5]),
        .R(ARESET_I));
  FDRE \update_info_reg[Allocate] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(Par_Reuse_Inst_n_0),
        .Q(\update_info[Allocate] ),
        .R(ARESET_I));
  FDRE \update_info_reg[Early] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\lu_check_info_reg[Early]__0 ),
        .Q(\update_info[Early] ),
        .R(ARESET_I));
  FDRE \update_info_reg[Evict] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(Chk_Valid_Inst_n_33),
        .Q(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ),
        .R(ARESET_I));
  FDRE \update_info_reg[Internal_Cmd] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\lu_check_info_reg[KillHit]__0 ),
        .Q(\update_info[Internal_Cmd] ),
        .R(ARESET_I));
  FDRE \update_info_reg[Keep] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\lu_check_info_reg[Keep_n_0_] ),
        .Q(\update_info[Keep] ),
        .R(ARESET_I));
  FDRE \update_info_reg[Kind] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\update_info_reg[Kind]_0 ),
        .Q(\update_info[Kind] ),
        .R(ARESET_I));
  FDRE \update_info_reg[Len][0] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\lu_check_info_reg[Len] [0]),
        .Q(\ri_len_reg[7] [0]),
        .R(ARESET_I));
  FDRE \update_info_reg[Len][1] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\lu_check_info_reg[Len] [1]),
        .Q(\ri_len_reg[7] [1]),
        .R(ARESET_I));
  FDRE \update_info_reg[Len][2] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\lu_check_info_reg[Len] [2]),
        .Q(\ri_len_reg[7] [2]),
        .R(ARESET_I));
  FDRE \update_info_reg[Len][3] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\lu_check_info_reg[Len] [3]),
        .Q(\ri_len_reg[7] [3]),
        .R(ARESET_I));
  FDRE \update_info_reg[Len][4] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\lu_check_info_reg[Len] [4]),
        .Q(\ri_len_reg[7] [4]),
        .R(ARESET_I));
  FDRE \update_info_reg[Len][5] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\lu_check_info_reg[Len] [5]),
        .Q(\ri_len_reg[7] [5]),
        .R(ARESET_I));
  FDRE \update_info_reg[Len][6] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\lu_check_info_reg[Len] [6]),
        .Q(\ri_len_reg[7] [6]),
        .R(ARESET_I));
  FDRE \update_info_reg[Len][7] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\lu_check_info_reg[Len] [7]),
        .Q(\ri_len_reg[7] [7]),
        .R(ARESET_I));
  FDRE \update_info_reg[Port_Num][0] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\update_info_reg[Port_Num][0]_0 ),
        .Q(\write_req_info[0][Port_Num] ),
        .R(ARESET_I));
  FDRE \update_info_reg[Size][0] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\lu_check_info_reg[Size_n_0_][0] ),
        .Q(\update_info[Size] [0]),
        .R(ARESET_I));
  FDRE \update_info_reg[Size][1] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\lu_check_info_reg[Size_n_0_][1] ),
        .Q(\update_info[Size] [1]),
        .R(ARESET_I));
  FDRE \update_info_reg[Size][2] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\lu_check_info_reg[Size_n_0_][2] ),
        .Q(\update_info[Size] [2]),
        .R(ARESET_I));
  FDRE \update_info_reg[Wr] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(\lu_check_info_reg[Wr]__0 ),
        .Q(\update_info[Wr] ),
        .R(ARESET_I));
  FDRE update_miss_reg
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(lookup_miss),
        .Q(update_miss),
        .R(ARESET_I));
  FDRE \update_old_tag_reg[Addr][14] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(Par_Dirty_Inst_n_23),
        .Q(\update_old_tag[Addr] [14]),
        .R(ARESET_I));
  FDRE \update_old_tag_reg[Addr][15] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(Par_Dirty_Inst_n_22),
        .Q(\update_old_tag[Addr] [15]),
        .R(ARESET_I));
  FDRE \update_old_tag_reg[Addr][16] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(Par_Dirty_Inst_n_21),
        .Q(\update_old_tag[Addr] [16]),
        .R(ARESET_I));
  FDRE \update_old_tag_reg[Addr][17] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(Par_Dirty_Inst_n_20),
        .Q(\update_old_tag[Addr] [17]),
        .R(ARESET_I));
  FDRE \update_old_tag_reg[Addr][18] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(Par_Dirty_Inst_n_19),
        .Q(\update_old_tag[Addr] [18]),
        .R(ARESET_I));
  FDRE \update_old_tag_reg[Addr][19] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(Par_Dirty_Inst_n_18),
        .Q(\update_old_tag[Addr] [19]),
        .R(ARESET_I));
  FDRE \update_old_tag_reg[Addr][20] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(Par_Dirty_Inst_n_17),
        .Q(\update_old_tag[Addr] [20]),
        .R(ARESET_I));
  FDRE \update_old_tag_reg[Addr][21] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(Par_Dirty_Inst_n_16),
        .Q(\update_old_tag[Addr] [21]),
        .R(ARESET_I));
  FDRE \update_old_tag_reg[Addr][22] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(Par_Dirty_Inst_n_15),
        .Q(\update_old_tag[Addr] [22]),
        .R(ARESET_I));
  FDRE \update_old_tag_reg[Addr][23] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(Par_Dirty_Inst_n_14),
        .Q(\update_old_tag[Addr] [23]),
        .R(ARESET_I));
  FDRE \update_old_tag_reg[Addr][24] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(Par_Dirty_Inst_n_13),
        .Q(\update_old_tag[Addr] [24]),
        .R(ARESET_I));
  FDRE \update_old_tag_reg[Addr][25] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(Par_Dirty_Inst_n_12),
        .Q(\update_old_tag[Addr] [25]),
        .R(ARESET_I));
  FDRE \update_old_tag_reg[Addr][26] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(Par_Dirty_Inst_n_11),
        .Q(\update_old_tag[Addr] [26]),
        .R(ARESET_I));
  FDRE \update_old_tag_reg[Addr][27] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(Par_Dirty_Inst_n_10),
        .Q(\update_old_tag[Addr] [27]),
        .R(ARESET_I));
  FDRE \update_old_tag_reg[Addr][28] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(Par_Dirty_Inst_n_9),
        .Q(\update_old_tag[Addr] [28]),
        .R(ARESET_I));
  FDRE \update_old_tag_reg[Addr][29] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(Par_Dirty_Inst_n_8),
        .Q(\update_old_tag[Addr] [29]),
        .R(ARESET_I));
  FDRE \update_old_tag_reg[Addr][30] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(Par_Dirty_Inst_n_7),
        .Q(\update_old_tag[Addr] [30]),
        .R(ARESET_I));
  FDRE \update_old_tag_reg[Addr][31] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(Par_Dirty_Inst_n_6),
        .Q(\update_old_tag[Addr] [31]),
        .R(ARESET_I));
  FDRE update_read_miss_reg
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(lookup_read_miss),
        .Q(update_read_miss),
        .R(ARESET_I));
  CARRY4 update_reused_tag2_carry
       (.CI(1'b0),
        .CO({update_reused_tag2_carry_n_0,update_reused_tag2_carry_n_1,update_reused_tag2_carry_n_2,update_reused_tag2_carry_n_3}),
        .CYINIT(1'b0),
        .DI({1'b1,1'b1,1'b1,1'b1}),
        .O(NLW_update_reused_tag2_carry_O_UNCONNECTED[3:0]),
        .S({Par_Dirty_Inst_n_2,Par_Dirty_Inst_n_3,Par_Dirty_Inst_n_4,Par_Dirty_Inst_n_5}));
  CARRY4 update_reused_tag2_carry__0
       (.CI(update_reused_tag2_carry_n_0),
        .CO({NLW_update_reused_tag2_carry__0_CO_UNCONNECTED[3:2],update_reused_tag2,update_reused_tag2_carry__0_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b1,1'b1}),
        .O(NLW_update_reused_tag2_carry__0_O_UNCONNECTED[3:0]),
        .S({1'b0,1'b0,Par_Dirty_Inst_n_24,Par_Dirty_Inst_n_25}));
  FDRE update_reused_tag_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(LU_Check_PR_And_Inst2_n_1),
        .Q(update_reused_tag),
        .R(1'b0));
  FDRE \update_way_reg[0] 
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(lru_check_used_way),
        .Q(update_way),
        .R(ARESET_I));
  FDRE update_write_hit_reg
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(lookup_write_hit),
        .Q(update_write_hit),
        .R(ARESET_I));
  FDRE update_write_miss_reg
       (.C(ACLK),
        .CE(lu_check_piperun),
        .D(lookup_write_miss),
        .Q(update_write_miss),
        .R(ARESET_I));
  LUT2 #(
    .INIT(4'h8)) 
    \wm_fifo_mem_reg[15][Allocate][-1111111111]_srl16_i_1 
       (.I0(\lu_check_info_reg[Wr]__0 ),
        .I1(\lu_check_info_reg[Allocate]__0 ),
        .O(lookup_wm_allocate));
endmodule

(* ORIG_REF_NAME = "sc_lru_module" *) 
module design_1_system_cache_0_0_sc_lru_module
   (lru_check_next_way,
    S,
    S_0,
    S_1,
    ACLK,
    lookup_fetch_piperun,
    WEBWE,
    Q,
    D,
    DIBDI,
    ARESET,
    lookup_mem_piperun,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    \lu_check_protected_reg[1] );
  output lru_check_next_way;
  output S;
  output S_0;
  output S_1;
  input ACLK;
  input lookup_fetch_piperun;
  input [0:0]WEBWE;
  input [7:0]Q;
  input [7:0]D;
  input [0:0]DIBDI;
  input ARESET;
  input lookup_mem_piperun;
  input [0:0]\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  input [1:0]\lu_check_protected_reg[1] ;

  wire ACLK;
  wire ARESET;
  wire [7:0]D;
  wire [0:0]DIBDI;
  wire [7:0]Q;
  wire S;
  wire S_0;
  wire S_1;
  wire [0:0]\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire [0:0]WEBWE;
  wire lookup_fetch_piperun;
  wire lookup_mem_piperun;
  wire lru_check_next_way;
  wire [1:0]\lu_check_protected_reg[1] ;
  wire mem_current_tree;

  design_1_system_cache_0_0_sc_ram_module LRU
       (.ACLK(ACLK),
        .D(D),
        .DIBDI(DIBDI),
        .DOADO(mem_current_tree),
        .Q(Q),
        .WEBWE(WEBWE),
        .lookup_fetch_piperun(lookup_fetch_piperun));
  LUT2 #(
    .INIT(4'hB)) 
    \Using_FPGA.MUXCY_I_i_1__95 
       (.I0(lru_check_next_way),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .O(S));
  LUT2 #(
    .INIT(4'hB)) 
    \Using_FPGA.MUXCY_I_i_1__98 
       (.I0(lru_check_next_way),
        .I1(\lu_check_protected_reg[1] [0]),
        .O(S_0));
  LUT2 #(
    .INIT(4'h7)) 
    \Using_FPGA.MUXCY_I_i_1__99 
       (.I0(lru_check_next_way),
        .I1(\lu_check_protected_reg[1] [1]),
        .O(S_1));
  FDRE \lru_check_next_way_i_reg[0] 
       (.C(ACLK),
        .CE(lookup_mem_piperun),
        .D(mem_current_tree),
        .Q(lru_check_next_way),
        .R(ARESET));
endmodule

(* ORIG_REF_NAME = "sc_m_axi_interface" *) 
module design_1_system_cache_0_0_sc_m_axi_interface
   (M0_AXI_AWPROT,
    M0_AXI_WLAST,
    M0_AXI_ARPROT,
    M0_AXI_AWVALID,
    M_AXI_AWVALID_I,
    M0_AXI_WVALID,
    M0_AXI_ARVALID,
    \Order_Optimization_4.search_count_reg[1] ,
    M0_AXI_AWADDR,
    M0_AXI_AWLEN,
    M0_AXI_AWSIZE,
    M0_AXI_AWBURST,
    M0_AXI_WDATA,
    M0_AXI_WSTRB,
    M0_AXI_ARADDR,
    M0_AXI_ARLEN,
    M0_AXI_ARSIZE,
    M0_AXI_ARBURST,
    ACLK,
    ARESET,
    \write_req_ordered_info[0][Prot] ,
    \write_data_ordered_info[0][Last] ,
    \read_req_ordered_info[0][Prot] ,
    \Use_FPGA.Empty_Inst ,
    M_AXI_ARVALID_I,
    M0_AXI_AWREADY,
    aw_fifo_empty,
    M0_AXI_ARREADY,
    M0_AXI_WREADY,
    D,
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst ,
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_0 ,
    \write_req_ordered_info[0][Kind] ,
    \Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst ,
    \Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_0 ,
    \update_info_reg[Addr][31] ,
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_1 ,
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_2 ,
    \read_req_ordered_info[0][Kind] );
  output [0:0]M0_AXI_AWPROT;
  output M0_AXI_WLAST;
  output [0:0]M0_AXI_ARPROT;
  output M0_AXI_AWVALID;
  output M_AXI_AWVALID_I;
  output M0_AXI_WVALID;
  output M0_AXI_ARVALID;
  output \Order_Optimization_4.search_count_reg[1] ;
  output [31:0]M0_AXI_AWADDR;
  output [7:0]M0_AXI_AWLEN;
  output [1:0]M0_AXI_AWSIZE;
  output [1:0]M0_AXI_AWBURST;
  output [31:0]M0_AXI_WDATA;
  output [3:0]M0_AXI_WSTRB;
  output [31:0]M0_AXI_ARADDR;
  output [7:0]M0_AXI_ARLEN;
  output [2:0]M0_AXI_ARSIZE;
  output [1:0]M0_AXI_ARBURST;
  input ACLK;
  input ARESET;
  input [0:0]\write_req_ordered_info[0][Prot] ;
  input \write_data_ordered_info[0][Last] ;
  input [0:0]\read_req_ordered_info[0][Prot] ;
  input \Use_FPGA.Empty_Inst ;
  input M_AXI_ARVALID_I;
  input M0_AXI_AWREADY;
  input aw_fifo_empty;
  input M0_AXI_ARREADY;
  input M0_AXI_WREADY;
  input [31:0]D;
  input [7:0]\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst ;
  input [1:0]\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_0 ;
  input \write_req_ordered_info[0][Kind] ;
  input [31:0]\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst ;
  input [3:0]\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_0 ;
  input [31:0]\update_info_reg[Addr][31] ;
  input [7:0]\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_1 ;
  input [2:0]\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_2 ;
  input \read_req_ordered_info[0][Kind] ;

  wire ACLK;
  wire ARESET;
  wire ARESET_I;
  wire [31:0]D;
  wire [31:0]M0_AXI_ARADDR;
  wire [1:0]M0_AXI_ARBURST;
  wire [7:0]M0_AXI_ARLEN;
  wire [0:0]M0_AXI_ARPROT;
  wire M0_AXI_ARREADY;
  wire [2:0]M0_AXI_ARSIZE;
  wire M0_AXI_ARVALID;
  wire [31:0]M0_AXI_AWADDR;
  wire [1:0]M0_AXI_AWBURST;
  wire [7:0]M0_AXI_AWLEN;
  wire [0:0]M0_AXI_AWPROT;
  wire M0_AXI_AWREADY;
  wire [1:0]M0_AXI_AWSIZE;
  wire M0_AXI_AWVALID;
  wire [31:0]M0_AXI_WDATA;
  wire M0_AXI_WLAST;
  wire M0_AXI_WREADY;
  wire [3:0]M0_AXI_WSTRB;
  wire M0_AXI_WVALID;
  wire \M_AXI_ARADDR[31]_i_1_n_0 ;
  wire \M_AXI_ARBURST[0]_i_1_n_0 ;
  wire M_AXI_ARVALID_I;
  wire \M_AXI_AWADDR[31]_i_1_n_0 ;
  wire \M_AXI_AWBURST[0]_i_1_n_0 ;
  wire M_AXI_AWVALID_I;
  wire \Order_Optimization_4.search_count_reg[1] ;
  wire [7:0]\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst ;
  wire [1:0]\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_0 ;
  wire [7:0]\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_1 ;
  wire [2:0]\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_2 ;
  wire [31:0]\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst ;
  wire [3:0]\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_0 ;
  wire \Use_FPGA.Empty_Inst ;
  wire aw_fifo_empty;
  wire \read_req_ordered_info[0][Kind] ;
  wire [0:0]\read_req_ordered_info[0][Prot] ;
  wire read_req_ordered_ready;
  wire [31:0]\update_info_reg[Addr][31] ;
  wire \write_data_ordered_info[0][Last] ;
  wire write_data_ordered_ready;
  wire \write_req_ordered_info[0][Kind] ;
  wire [0:0]\write_req_ordered_info[0][Prot] ;
  wire write_req_ordered_ready;

  LUT3 #(
    .INIT(8'hFB)) 
    \M_AXI_ARADDR[31]_i_1 
       (.I0(ARESET_I),
        .I1(M0_AXI_ARVALID),
        .I2(M0_AXI_ARREADY),
        .O(\M_AXI_ARADDR[31]_i_1_n_0 ));
  FDRE \M_AXI_ARADDR_reg[0] 
       (.C(ACLK),
        .CE(\M_AXI_ARADDR[31]_i_1_n_0 ),
        .D(\update_info_reg[Addr][31] [0]),
        .Q(M0_AXI_ARADDR[0]),
        .R(ARESET_I));
  FDRE \M_AXI_ARADDR_reg[10] 
       (.C(ACLK),
        .CE(\M_AXI_ARADDR[31]_i_1_n_0 ),
        .D(\update_info_reg[Addr][31] [10]),
        .Q(M0_AXI_ARADDR[10]),
        .R(ARESET_I));
  FDRE \M_AXI_ARADDR_reg[11] 
       (.C(ACLK),
        .CE(\M_AXI_ARADDR[31]_i_1_n_0 ),
        .D(\update_info_reg[Addr][31] [11]),
        .Q(M0_AXI_ARADDR[11]),
        .R(ARESET_I));
  FDRE \M_AXI_ARADDR_reg[12] 
       (.C(ACLK),
        .CE(\M_AXI_ARADDR[31]_i_1_n_0 ),
        .D(\update_info_reg[Addr][31] [12]),
        .Q(M0_AXI_ARADDR[12]),
        .R(ARESET_I));
  FDRE \M_AXI_ARADDR_reg[13] 
       (.C(ACLK),
        .CE(\M_AXI_ARADDR[31]_i_1_n_0 ),
        .D(\update_info_reg[Addr][31] [13]),
        .Q(M0_AXI_ARADDR[13]),
        .R(ARESET_I));
  FDRE \M_AXI_ARADDR_reg[14] 
       (.C(ACLK),
        .CE(\M_AXI_ARADDR[31]_i_1_n_0 ),
        .D(\update_info_reg[Addr][31] [14]),
        .Q(M0_AXI_ARADDR[14]),
        .R(ARESET_I));
  FDRE \M_AXI_ARADDR_reg[15] 
       (.C(ACLK),
        .CE(\M_AXI_ARADDR[31]_i_1_n_0 ),
        .D(\update_info_reg[Addr][31] [15]),
        .Q(M0_AXI_ARADDR[15]),
        .R(ARESET_I));
  FDRE \M_AXI_ARADDR_reg[16] 
       (.C(ACLK),
        .CE(\M_AXI_ARADDR[31]_i_1_n_0 ),
        .D(\update_info_reg[Addr][31] [16]),
        .Q(M0_AXI_ARADDR[16]),
        .R(ARESET_I));
  FDRE \M_AXI_ARADDR_reg[17] 
       (.C(ACLK),
        .CE(\M_AXI_ARADDR[31]_i_1_n_0 ),
        .D(\update_info_reg[Addr][31] [17]),
        .Q(M0_AXI_ARADDR[17]),
        .R(ARESET_I));
  FDRE \M_AXI_ARADDR_reg[18] 
       (.C(ACLK),
        .CE(\M_AXI_ARADDR[31]_i_1_n_0 ),
        .D(\update_info_reg[Addr][31] [18]),
        .Q(M0_AXI_ARADDR[18]),
        .R(ARESET_I));
  FDRE \M_AXI_ARADDR_reg[19] 
       (.C(ACLK),
        .CE(\M_AXI_ARADDR[31]_i_1_n_0 ),
        .D(\update_info_reg[Addr][31] [19]),
        .Q(M0_AXI_ARADDR[19]),
        .R(ARESET_I));
  FDRE \M_AXI_ARADDR_reg[1] 
       (.C(ACLK),
        .CE(\M_AXI_ARADDR[31]_i_1_n_0 ),
        .D(\update_info_reg[Addr][31] [1]),
        .Q(M0_AXI_ARADDR[1]),
        .R(ARESET_I));
  FDRE \M_AXI_ARADDR_reg[20] 
       (.C(ACLK),
        .CE(\M_AXI_ARADDR[31]_i_1_n_0 ),
        .D(\update_info_reg[Addr][31] [20]),
        .Q(M0_AXI_ARADDR[20]),
        .R(ARESET_I));
  FDRE \M_AXI_ARADDR_reg[21] 
       (.C(ACLK),
        .CE(\M_AXI_ARADDR[31]_i_1_n_0 ),
        .D(\update_info_reg[Addr][31] [21]),
        .Q(M0_AXI_ARADDR[21]),
        .R(ARESET_I));
  FDRE \M_AXI_ARADDR_reg[22] 
       (.C(ACLK),
        .CE(\M_AXI_ARADDR[31]_i_1_n_0 ),
        .D(\update_info_reg[Addr][31] [22]),
        .Q(M0_AXI_ARADDR[22]),
        .R(ARESET_I));
  FDRE \M_AXI_ARADDR_reg[23] 
       (.C(ACLK),
        .CE(\M_AXI_ARADDR[31]_i_1_n_0 ),
        .D(\update_info_reg[Addr][31] [23]),
        .Q(M0_AXI_ARADDR[23]),
        .R(ARESET_I));
  FDRE \M_AXI_ARADDR_reg[24] 
       (.C(ACLK),
        .CE(\M_AXI_ARADDR[31]_i_1_n_0 ),
        .D(\update_info_reg[Addr][31] [24]),
        .Q(M0_AXI_ARADDR[24]),
        .R(ARESET_I));
  FDRE \M_AXI_ARADDR_reg[25] 
       (.C(ACLK),
        .CE(\M_AXI_ARADDR[31]_i_1_n_0 ),
        .D(\update_info_reg[Addr][31] [25]),
        .Q(M0_AXI_ARADDR[25]),
        .R(ARESET_I));
  FDRE \M_AXI_ARADDR_reg[26] 
       (.C(ACLK),
        .CE(\M_AXI_ARADDR[31]_i_1_n_0 ),
        .D(\update_info_reg[Addr][31] [26]),
        .Q(M0_AXI_ARADDR[26]),
        .R(ARESET_I));
  FDRE \M_AXI_ARADDR_reg[27] 
       (.C(ACLK),
        .CE(\M_AXI_ARADDR[31]_i_1_n_0 ),
        .D(\update_info_reg[Addr][31] [27]),
        .Q(M0_AXI_ARADDR[27]),
        .R(ARESET_I));
  FDRE \M_AXI_ARADDR_reg[28] 
       (.C(ACLK),
        .CE(\M_AXI_ARADDR[31]_i_1_n_0 ),
        .D(\update_info_reg[Addr][31] [28]),
        .Q(M0_AXI_ARADDR[28]),
        .R(ARESET_I));
  FDRE \M_AXI_ARADDR_reg[29] 
       (.C(ACLK),
        .CE(\M_AXI_ARADDR[31]_i_1_n_0 ),
        .D(\update_info_reg[Addr][31] [29]),
        .Q(M0_AXI_ARADDR[29]),
        .R(ARESET_I));
  FDRE \M_AXI_ARADDR_reg[2] 
       (.C(ACLK),
        .CE(\M_AXI_ARADDR[31]_i_1_n_0 ),
        .D(\update_info_reg[Addr][31] [2]),
        .Q(M0_AXI_ARADDR[2]),
        .R(ARESET_I));
  FDRE \M_AXI_ARADDR_reg[30] 
       (.C(ACLK),
        .CE(\M_AXI_ARADDR[31]_i_1_n_0 ),
        .D(\update_info_reg[Addr][31] [30]),
        .Q(M0_AXI_ARADDR[30]),
        .R(ARESET_I));
  FDRE \M_AXI_ARADDR_reg[31] 
       (.C(ACLK),
        .CE(\M_AXI_ARADDR[31]_i_1_n_0 ),
        .D(\update_info_reg[Addr][31] [31]),
        .Q(M0_AXI_ARADDR[31]),
        .R(ARESET_I));
  FDRE \M_AXI_ARADDR_reg[3] 
       (.C(ACLK),
        .CE(\M_AXI_ARADDR[31]_i_1_n_0 ),
        .D(\update_info_reg[Addr][31] [3]),
        .Q(M0_AXI_ARADDR[3]),
        .R(ARESET_I));
  FDRE \M_AXI_ARADDR_reg[4] 
       (.C(ACLK),
        .CE(\M_AXI_ARADDR[31]_i_1_n_0 ),
        .D(\update_info_reg[Addr][31] [4]),
        .Q(M0_AXI_ARADDR[4]),
        .R(ARESET_I));
  FDRE \M_AXI_ARADDR_reg[5] 
       (.C(ACLK),
        .CE(\M_AXI_ARADDR[31]_i_1_n_0 ),
        .D(\update_info_reg[Addr][31] [5]),
        .Q(M0_AXI_ARADDR[5]),
        .R(ARESET_I));
  FDRE \M_AXI_ARADDR_reg[6] 
       (.C(ACLK),
        .CE(\M_AXI_ARADDR[31]_i_1_n_0 ),
        .D(\update_info_reg[Addr][31] [6]),
        .Q(M0_AXI_ARADDR[6]),
        .R(ARESET_I));
  FDRE \M_AXI_ARADDR_reg[7] 
       (.C(ACLK),
        .CE(\M_AXI_ARADDR[31]_i_1_n_0 ),
        .D(\update_info_reg[Addr][31] [7]),
        .Q(M0_AXI_ARADDR[7]),
        .R(ARESET_I));
  FDRE \M_AXI_ARADDR_reg[8] 
       (.C(ACLK),
        .CE(\M_AXI_ARADDR[31]_i_1_n_0 ),
        .D(\update_info_reg[Addr][31] [8]),
        .Q(M0_AXI_ARADDR[8]),
        .R(ARESET_I));
  FDRE \M_AXI_ARADDR_reg[9] 
       (.C(ACLK),
        .CE(\M_AXI_ARADDR[31]_i_1_n_0 ),
        .D(\update_info_reg[Addr][31] [9]),
        .Q(M0_AXI_ARADDR[9]),
        .R(ARESET_I));
  LUT5 #(
    .INIT(32'h03030A03)) 
    \M_AXI_ARBURST[0]_i_1 
       (.I0(M0_AXI_ARBURST[0]),
        .I1(\read_req_ordered_info[0][Kind] ),
        .I2(ARESET_I),
        .I3(M0_AXI_ARVALID),
        .I4(M0_AXI_ARREADY),
        .O(\M_AXI_ARBURST[0]_i_1_n_0 ));
  FDRE \M_AXI_ARBURST_reg[0] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\M_AXI_ARBURST[0]_i_1_n_0 ),
        .Q(M0_AXI_ARBURST[0]),
        .R(1'b0));
  FDRE \M_AXI_ARBURST_reg[1] 
       (.C(ACLK),
        .CE(\M_AXI_ARADDR[31]_i_1_n_0 ),
        .D(\read_req_ordered_info[0][Kind] ),
        .Q(M0_AXI_ARBURST[1]),
        .R(ARESET_I));
  LUT2 #(
    .INIT(4'hB)) 
    \M_AXI_ARLEN[7]_i_1 
       (.I0(M0_AXI_ARREADY),
        .I1(M0_AXI_ARVALID),
        .O(read_req_ordered_ready));
  FDRE \M_AXI_ARLEN_reg[0] 
       (.C(ACLK),
        .CE(read_req_ordered_ready),
        .D(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_1 [0]),
        .Q(M0_AXI_ARLEN[0]),
        .R(ARESET_I));
  FDRE \M_AXI_ARLEN_reg[1] 
       (.C(ACLK),
        .CE(read_req_ordered_ready),
        .D(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_1 [1]),
        .Q(M0_AXI_ARLEN[1]),
        .R(ARESET_I));
  FDRE \M_AXI_ARLEN_reg[2] 
       (.C(ACLK),
        .CE(read_req_ordered_ready),
        .D(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_1 [2]),
        .Q(M0_AXI_ARLEN[2]),
        .R(ARESET_I));
  FDRE \M_AXI_ARLEN_reg[3] 
       (.C(ACLK),
        .CE(read_req_ordered_ready),
        .D(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_1 [3]),
        .Q(M0_AXI_ARLEN[3]),
        .R(ARESET_I));
  FDRE \M_AXI_ARLEN_reg[4] 
       (.C(ACLK),
        .CE(read_req_ordered_ready),
        .D(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_1 [4]),
        .Q(M0_AXI_ARLEN[4]),
        .R(ARESET_I));
  FDRE \M_AXI_ARLEN_reg[5] 
       (.C(ACLK),
        .CE(read_req_ordered_ready),
        .D(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_1 [5]),
        .Q(M0_AXI_ARLEN[5]),
        .R(ARESET_I));
  FDRE \M_AXI_ARLEN_reg[6] 
       (.C(ACLK),
        .CE(read_req_ordered_ready),
        .D(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_1 [6]),
        .Q(M0_AXI_ARLEN[6]),
        .R(ARESET_I));
  FDRE \M_AXI_ARLEN_reg[7] 
       (.C(ACLK),
        .CE(read_req_ordered_ready),
        .D(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_1 [7]),
        .Q(M0_AXI_ARLEN[7]),
        .R(ARESET_I));
  FDSE \M_AXI_ARPROT_reg[1] 
       (.C(ACLK),
        .CE(read_req_ordered_ready),
        .D(\read_req_ordered_info[0][Prot] ),
        .Q(M0_AXI_ARPROT),
        .S(ARESET_I));
  FDRE \M_AXI_ARSIZE_reg[0] 
       (.C(ACLK),
        .CE(read_req_ordered_ready),
        .D(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_2 [0]),
        .Q(M0_AXI_ARSIZE[0]),
        .R(ARESET_I));
  FDSE \M_AXI_ARSIZE_reg[1] 
       (.C(ACLK),
        .CE(read_req_ordered_ready),
        .D(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_2 [1]),
        .Q(M0_AXI_ARSIZE[1]),
        .S(ARESET_I));
  FDRE \M_AXI_ARSIZE_reg[2] 
       (.C(ACLK),
        .CE(read_req_ordered_ready),
        .D(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_2 [2]),
        .Q(M0_AXI_ARSIZE[2]),
        .R(ARESET_I));
  FDRE M_AXI_ARVALID_I_reg
       (.C(ACLK),
        .CE(read_req_ordered_ready),
        .D(M_AXI_ARVALID_I),
        .Q(M0_AXI_ARVALID),
        .R(ARESET_I));
  LUT3 #(
    .INIT(8'hEF)) 
    \M_AXI_AWADDR[31]_i_1 
       (.I0(ARESET_I),
        .I1(M0_AXI_AWREADY),
        .I2(M0_AXI_AWVALID),
        .O(\M_AXI_AWADDR[31]_i_1_n_0 ));
  FDRE \M_AXI_AWADDR_reg[0] 
       (.C(ACLK),
        .CE(\M_AXI_AWADDR[31]_i_1_n_0 ),
        .D(D[0]),
        .Q(M0_AXI_AWADDR[0]),
        .R(ARESET_I));
  FDRE \M_AXI_AWADDR_reg[10] 
       (.C(ACLK),
        .CE(\M_AXI_AWADDR[31]_i_1_n_0 ),
        .D(D[10]),
        .Q(M0_AXI_AWADDR[10]),
        .R(ARESET_I));
  FDRE \M_AXI_AWADDR_reg[11] 
       (.C(ACLK),
        .CE(\M_AXI_AWADDR[31]_i_1_n_0 ),
        .D(D[11]),
        .Q(M0_AXI_AWADDR[11]),
        .R(ARESET_I));
  FDRE \M_AXI_AWADDR_reg[12] 
       (.C(ACLK),
        .CE(\M_AXI_AWADDR[31]_i_1_n_0 ),
        .D(D[12]),
        .Q(M0_AXI_AWADDR[12]),
        .R(ARESET_I));
  FDRE \M_AXI_AWADDR_reg[13] 
       (.C(ACLK),
        .CE(\M_AXI_AWADDR[31]_i_1_n_0 ),
        .D(D[13]),
        .Q(M0_AXI_AWADDR[13]),
        .R(ARESET_I));
  FDRE \M_AXI_AWADDR_reg[14] 
       (.C(ACLK),
        .CE(\M_AXI_AWADDR[31]_i_1_n_0 ),
        .D(D[14]),
        .Q(M0_AXI_AWADDR[14]),
        .R(ARESET_I));
  FDRE \M_AXI_AWADDR_reg[15] 
       (.C(ACLK),
        .CE(\M_AXI_AWADDR[31]_i_1_n_0 ),
        .D(D[15]),
        .Q(M0_AXI_AWADDR[15]),
        .R(ARESET_I));
  FDRE \M_AXI_AWADDR_reg[16] 
       (.C(ACLK),
        .CE(\M_AXI_AWADDR[31]_i_1_n_0 ),
        .D(D[16]),
        .Q(M0_AXI_AWADDR[16]),
        .R(ARESET_I));
  FDRE \M_AXI_AWADDR_reg[17] 
       (.C(ACLK),
        .CE(\M_AXI_AWADDR[31]_i_1_n_0 ),
        .D(D[17]),
        .Q(M0_AXI_AWADDR[17]),
        .R(ARESET_I));
  FDRE \M_AXI_AWADDR_reg[18] 
       (.C(ACLK),
        .CE(\M_AXI_AWADDR[31]_i_1_n_0 ),
        .D(D[18]),
        .Q(M0_AXI_AWADDR[18]),
        .R(ARESET_I));
  FDRE \M_AXI_AWADDR_reg[19] 
       (.C(ACLK),
        .CE(\M_AXI_AWADDR[31]_i_1_n_0 ),
        .D(D[19]),
        .Q(M0_AXI_AWADDR[19]),
        .R(ARESET_I));
  FDRE \M_AXI_AWADDR_reg[1] 
       (.C(ACLK),
        .CE(\M_AXI_AWADDR[31]_i_1_n_0 ),
        .D(D[1]),
        .Q(M0_AXI_AWADDR[1]),
        .R(ARESET_I));
  FDRE \M_AXI_AWADDR_reg[20] 
       (.C(ACLK),
        .CE(\M_AXI_AWADDR[31]_i_1_n_0 ),
        .D(D[20]),
        .Q(M0_AXI_AWADDR[20]),
        .R(ARESET_I));
  FDRE \M_AXI_AWADDR_reg[21] 
       (.C(ACLK),
        .CE(\M_AXI_AWADDR[31]_i_1_n_0 ),
        .D(D[21]),
        .Q(M0_AXI_AWADDR[21]),
        .R(ARESET_I));
  FDRE \M_AXI_AWADDR_reg[22] 
       (.C(ACLK),
        .CE(\M_AXI_AWADDR[31]_i_1_n_0 ),
        .D(D[22]),
        .Q(M0_AXI_AWADDR[22]),
        .R(ARESET_I));
  FDRE \M_AXI_AWADDR_reg[23] 
       (.C(ACLK),
        .CE(\M_AXI_AWADDR[31]_i_1_n_0 ),
        .D(D[23]),
        .Q(M0_AXI_AWADDR[23]),
        .R(ARESET_I));
  FDRE \M_AXI_AWADDR_reg[24] 
       (.C(ACLK),
        .CE(\M_AXI_AWADDR[31]_i_1_n_0 ),
        .D(D[24]),
        .Q(M0_AXI_AWADDR[24]),
        .R(ARESET_I));
  FDRE \M_AXI_AWADDR_reg[25] 
       (.C(ACLK),
        .CE(\M_AXI_AWADDR[31]_i_1_n_0 ),
        .D(D[25]),
        .Q(M0_AXI_AWADDR[25]),
        .R(ARESET_I));
  FDRE \M_AXI_AWADDR_reg[26] 
       (.C(ACLK),
        .CE(\M_AXI_AWADDR[31]_i_1_n_0 ),
        .D(D[26]),
        .Q(M0_AXI_AWADDR[26]),
        .R(ARESET_I));
  FDRE \M_AXI_AWADDR_reg[27] 
       (.C(ACLK),
        .CE(\M_AXI_AWADDR[31]_i_1_n_0 ),
        .D(D[27]),
        .Q(M0_AXI_AWADDR[27]),
        .R(ARESET_I));
  FDRE \M_AXI_AWADDR_reg[28] 
       (.C(ACLK),
        .CE(\M_AXI_AWADDR[31]_i_1_n_0 ),
        .D(D[28]),
        .Q(M0_AXI_AWADDR[28]),
        .R(ARESET_I));
  FDRE \M_AXI_AWADDR_reg[29] 
       (.C(ACLK),
        .CE(\M_AXI_AWADDR[31]_i_1_n_0 ),
        .D(D[29]),
        .Q(M0_AXI_AWADDR[29]),
        .R(ARESET_I));
  FDRE \M_AXI_AWADDR_reg[2] 
       (.C(ACLK),
        .CE(\M_AXI_AWADDR[31]_i_1_n_0 ),
        .D(D[2]),
        .Q(M0_AXI_AWADDR[2]),
        .R(ARESET_I));
  FDRE \M_AXI_AWADDR_reg[30] 
       (.C(ACLK),
        .CE(\M_AXI_AWADDR[31]_i_1_n_0 ),
        .D(D[30]),
        .Q(M0_AXI_AWADDR[30]),
        .R(ARESET_I));
  FDRE \M_AXI_AWADDR_reg[31] 
       (.C(ACLK),
        .CE(\M_AXI_AWADDR[31]_i_1_n_0 ),
        .D(D[31]),
        .Q(M0_AXI_AWADDR[31]),
        .R(ARESET_I));
  FDRE \M_AXI_AWADDR_reg[3] 
       (.C(ACLK),
        .CE(\M_AXI_AWADDR[31]_i_1_n_0 ),
        .D(D[3]),
        .Q(M0_AXI_AWADDR[3]),
        .R(ARESET_I));
  FDRE \M_AXI_AWADDR_reg[4] 
       (.C(ACLK),
        .CE(\M_AXI_AWADDR[31]_i_1_n_0 ),
        .D(D[4]),
        .Q(M0_AXI_AWADDR[4]),
        .R(ARESET_I));
  FDRE \M_AXI_AWADDR_reg[5] 
       (.C(ACLK),
        .CE(\M_AXI_AWADDR[31]_i_1_n_0 ),
        .D(D[5]),
        .Q(M0_AXI_AWADDR[5]),
        .R(ARESET_I));
  FDRE \M_AXI_AWADDR_reg[6] 
       (.C(ACLK),
        .CE(\M_AXI_AWADDR[31]_i_1_n_0 ),
        .D(D[6]),
        .Q(M0_AXI_AWADDR[6]),
        .R(ARESET_I));
  FDRE \M_AXI_AWADDR_reg[7] 
       (.C(ACLK),
        .CE(\M_AXI_AWADDR[31]_i_1_n_0 ),
        .D(D[7]),
        .Q(M0_AXI_AWADDR[7]),
        .R(ARESET_I));
  FDRE \M_AXI_AWADDR_reg[8] 
       (.C(ACLK),
        .CE(\M_AXI_AWADDR[31]_i_1_n_0 ),
        .D(D[8]),
        .Q(M0_AXI_AWADDR[8]),
        .R(ARESET_I));
  FDRE \M_AXI_AWADDR_reg[9] 
       (.C(ACLK),
        .CE(\M_AXI_AWADDR[31]_i_1_n_0 ),
        .D(D[9]),
        .Q(M0_AXI_AWADDR[9]),
        .R(ARESET_I));
  LUT5 #(
    .INIT(32'h030A0303)) 
    \M_AXI_AWBURST[0]_i_1 
       (.I0(M0_AXI_AWBURST[0]),
        .I1(\write_req_ordered_info[0][Kind] ),
        .I2(ARESET_I),
        .I3(M0_AXI_AWREADY),
        .I4(M0_AXI_AWVALID),
        .O(\M_AXI_AWBURST[0]_i_1_n_0 ));
  FDRE \M_AXI_AWBURST_reg[0] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\M_AXI_AWBURST[0]_i_1_n_0 ),
        .Q(M0_AXI_AWBURST[0]),
        .R(1'b0));
  FDRE \M_AXI_AWBURST_reg[1] 
       (.C(ACLK),
        .CE(\M_AXI_AWADDR[31]_i_1_n_0 ),
        .D(\write_req_ordered_info[0][Kind] ),
        .Q(M0_AXI_AWBURST[1]),
        .R(ARESET_I));
  LUT2 #(
    .INIT(4'hB)) 
    \M_AXI_AWLEN[7]_i_1 
       (.I0(M0_AXI_AWREADY),
        .I1(M0_AXI_AWVALID),
        .O(write_req_ordered_ready));
  FDRE \M_AXI_AWLEN_reg[0] 
       (.C(ACLK),
        .CE(write_req_ordered_ready),
        .D(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst [0]),
        .Q(M0_AXI_AWLEN[0]),
        .R(ARESET_I));
  FDRE \M_AXI_AWLEN_reg[1] 
       (.C(ACLK),
        .CE(write_req_ordered_ready),
        .D(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst [1]),
        .Q(M0_AXI_AWLEN[1]),
        .R(ARESET_I));
  FDRE \M_AXI_AWLEN_reg[2] 
       (.C(ACLK),
        .CE(write_req_ordered_ready),
        .D(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst [2]),
        .Q(M0_AXI_AWLEN[2]),
        .R(ARESET_I));
  FDRE \M_AXI_AWLEN_reg[3] 
       (.C(ACLK),
        .CE(write_req_ordered_ready),
        .D(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst [3]),
        .Q(M0_AXI_AWLEN[3]),
        .R(ARESET_I));
  FDRE \M_AXI_AWLEN_reg[4] 
       (.C(ACLK),
        .CE(write_req_ordered_ready),
        .D(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst [4]),
        .Q(M0_AXI_AWLEN[4]),
        .R(ARESET_I));
  FDRE \M_AXI_AWLEN_reg[5] 
       (.C(ACLK),
        .CE(write_req_ordered_ready),
        .D(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst [5]),
        .Q(M0_AXI_AWLEN[5]),
        .R(ARESET_I));
  FDRE \M_AXI_AWLEN_reg[6] 
       (.C(ACLK),
        .CE(write_req_ordered_ready),
        .D(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst [6]),
        .Q(M0_AXI_AWLEN[6]),
        .R(ARESET_I));
  FDRE \M_AXI_AWLEN_reg[7] 
       (.C(ACLK),
        .CE(write_req_ordered_ready),
        .D(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst [7]),
        .Q(M0_AXI_AWLEN[7]),
        .R(ARESET_I));
  FDSE \M_AXI_AWPROT_reg[1] 
       (.C(ACLK),
        .CE(write_req_ordered_ready),
        .D(\write_req_ordered_info[0][Prot] ),
        .Q(M0_AXI_AWPROT),
        .S(ARESET_I));
  FDRE \M_AXI_AWSIZE_reg[0] 
       (.C(ACLK),
        .CE(write_req_ordered_ready),
        .D(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_0 [0]),
        .Q(M0_AXI_AWSIZE[0]),
        .R(ARESET_I));
  FDSE \M_AXI_AWSIZE_reg[1] 
       (.C(ACLK),
        .CE(write_req_ordered_ready),
        .D(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_0 [1]),
        .Q(M0_AXI_AWSIZE[1]),
        .S(ARESET_I));
  LUT3 #(
    .INIT(8'h0B)) 
    M_AXI_AWVALID_I_i_1
       (.I0(M0_AXI_AWREADY),
        .I1(M0_AXI_AWVALID),
        .I2(aw_fifo_empty),
        .O(M_AXI_AWVALID_I));
  FDRE M_AXI_AWVALID_I_reg
       (.C(ACLK),
        .CE(write_req_ordered_ready),
        .D(M_AXI_AWVALID_I),
        .Q(M0_AXI_AWVALID),
        .R(ARESET_I));
  LUT2 #(
    .INIT(4'hB)) 
    \M_AXI_WDATA[31]_i_1 
       (.I0(M0_AXI_WREADY),
        .I1(M0_AXI_WVALID),
        .O(write_data_ordered_ready));
  FDRE \M_AXI_WDATA_reg[0] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst [0]),
        .Q(M0_AXI_WDATA[0]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[10] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst [10]),
        .Q(M0_AXI_WDATA[10]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[11] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst [11]),
        .Q(M0_AXI_WDATA[11]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[12] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst [12]),
        .Q(M0_AXI_WDATA[12]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[13] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst [13]),
        .Q(M0_AXI_WDATA[13]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[14] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst [14]),
        .Q(M0_AXI_WDATA[14]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[15] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst [15]),
        .Q(M0_AXI_WDATA[15]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[16] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst [16]),
        .Q(M0_AXI_WDATA[16]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[17] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst [17]),
        .Q(M0_AXI_WDATA[17]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[18] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst [18]),
        .Q(M0_AXI_WDATA[18]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[19] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst [19]),
        .Q(M0_AXI_WDATA[19]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[1] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst [1]),
        .Q(M0_AXI_WDATA[1]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[20] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst [20]),
        .Q(M0_AXI_WDATA[20]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[21] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst [21]),
        .Q(M0_AXI_WDATA[21]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[22] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst [22]),
        .Q(M0_AXI_WDATA[22]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[23] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst [23]),
        .Q(M0_AXI_WDATA[23]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[24] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst [24]),
        .Q(M0_AXI_WDATA[24]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[25] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst [25]),
        .Q(M0_AXI_WDATA[25]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[26] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst [26]),
        .Q(M0_AXI_WDATA[26]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[27] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst [27]),
        .Q(M0_AXI_WDATA[27]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[28] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst [28]),
        .Q(M0_AXI_WDATA[28]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[29] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst [29]),
        .Q(M0_AXI_WDATA[29]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[2] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst [2]),
        .Q(M0_AXI_WDATA[2]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[30] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst [30]),
        .Q(M0_AXI_WDATA[30]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[31] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst [31]),
        .Q(M0_AXI_WDATA[31]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[3] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst [3]),
        .Q(M0_AXI_WDATA[3]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[4] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst [4]),
        .Q(M0_AXI_WDATA[4]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[5] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst [5]),
        .Q(M0_AXI_WDATA[5]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[6] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst [6]),
        .Q(M0_AXI_WDATA[6]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[7] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst [7]),
        .Q(M0_AXI_WDATA[7]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[8] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst [8]),
        .Q(M0_AXI_WDATA[8]),
        .R(ARESET_I));
  FDRE \M_AXI_WDATA_reg[9] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst [9]),
        .Q(M0_AXI_WDATA[9]),
        .R(ARESET_I));
  FDRE M_AXI_WLAST_I_reg
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\write_data_ordered_info[0][Last] ),
        .Q(M0_AXI_WLAST),
        .R(ARESET_I));
  FDRE \M_AXI_WSTRB_reg[0] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_0 [0]),
        .Q(M0_AXI_WSTRB[0]),
        .R(ARESET_I));
  FDRE \M_AXI_WSTRB_reg[1] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_0 [1]),
        .Q(M0_AXI_WSTRB[1]),
        .R(ARESET_I));
  FDRE \M_AXI_WSTRB_reg[2] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_0 [2]),
        .Q(M0_AXI_WSTRB[2]),
        .R(ARESET_I));
  FDRE \M_AXI_WSTRB_reg[3] 
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_0 [3]),
        .Q(M0_AXI_WSTRB[3]),
        .R(ARESET_I));
  FDRE M_AXI_WVALID_I_reg
       (.C(ACLK),
        .CE(write_data_ordered_ready),
        .D(\Use_FPGA.Empty_Inst ),
        .Q(M0_AXI_WVALID),
        .R(ARESET_I));
  (* C_CE_LOW = "1'b0" *) 
  (* C_IS_SET = "1'b0" *) 
  (* C_NUM_CE = "1" *) 
  (* C_TARGET = "3" *) 
  (* DONT_TOUCH *) 
  design_1_system_cache_0_0_bit_reg_ce__16 Reset_Inst
       (.CE(1'b1),
        .CLK(ACLK),
        .D(ARESET),
        .Q(ARESET_I),
        .SR(1'b0));
  LUT2 #(
    .INIT(4'hB)) 
    \Using_FPGA.MUXCY_I_i_1__146 
       (.I0(M0_AXI_ARREADY),
        .I1(M0_AXI_ARVALID),
        .O(\Order_Optimization_4.search_count_reg[1] ));
endmodule

(* ORIG_REF_NAME = "sc_ram_module" *) 
module design_1_system_cache_0_0_sc_ram_module
   (DOADO,
    ACLK,
    lookup_fetch_piperun,
    WEBWE,
    Q,
    D,
    DIBDI);
  output [0:0]DOADO;
  input ACLK;
  input lookup_fetch_piperun;
  input [0:0]WEBWE;
  input [7:0]Q;
  input [7:0]D;
  input [0:0]DIBDI;

  wire ACLK;
  wire [7:0]D;
  wire [0:0]DIBDI;
  wire [0:0]DOADO;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_n_84 ;
  wire [7:0]Q;
  wire [0:0]WEBWE;
  wire lookup_fetch_piperun;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DBITERR_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_SBITERR_UNCONNECTED ;
  wire [31:1]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOADO_UNCONNECTED ;
  wire [31:1]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_RDADDRECC_UNCONNECTED ;

  (* box_type = "PRIMITIVE" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(36),
    .READ_WIDTH_B(36),
    .RSTREG_PRIORITY_A("RSTREG"),
    .RSTREG_PRIORITY_B("RSTREG"),
    .SIM_COLLISION_CHECK("NONE"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("READ_FIRST"),
    .WRITE_MODE_B("READ_FIRST"),
    .WRITE_WIDTH_A(36),
    .WRITE_WIDTH_B(36)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 
       (.ADDRARDADDR({1'b1,Q,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .ADDRBWRADDR({1'b1,D,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(ACLK),
        .CLKBWRCLK(ACLK),
        .DBITERR(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,DIBDI}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOADO_UNCONNECTED [31:1],DOADO}),
        .DOBDO({\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOBDO_UNCONNECTED [31:1],\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_n_84 }),
        .DOPADOP(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(lookup_fetch_piperun),
        .ENBWREN(WEBWE),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b1),
        .REGCEB(1'b1),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,1'b0,1'b0}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,WEBWE}));
endmodule

(* ORIG_REF_NAME = "sc_ram_module" *) 
module design_1_system_cache_0_0_sc_ram_module__parameterized1
   (\The_Compare[0].sel_reg ,
    DATA_OUTB,
    A,
    \The_Compare[2].sel_reg ,
    \The_Compare[3].sel_reg ,
    \The_Compare[4].sel_reg ,
    \The_Compare[5].sel_reg ,
    \The_Compare[0].sel_reg_0 ,
    A_1,
    \The_Compare[2].sel_reg_2 ,
    \The_Compare[3].sel_reg_3 ,
    \The_Compare[4].sel_reg_4 ,
    \The_Compare[5].sel_reg_5 ,
    \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ,
    DATA_OUTA,
    \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    \lu_check_locked_hit_reg[0] ,
    \lu_check_locked_hit_reg[1] ,
    Q,
    \lu_mem_release_lock_hold_reg[1] ,
    \lu_mem_release_lock_hold_reg[0] ,
    ACLK,
    ENA,
    ENB,
    ADDRA,
    ADDRB,
    DATA_INB,
    WEB);
  output \The_Compare[0].sel_reg ;
  output [35:0]DATA_OUTB;
  output A;
  output \The_Compare[2].sel_reg ;
  output \The_Compare[3].sel_reg ;
  output \The_Compare[4].sel_reg ;
  output \The_Compare[5].sel_reg ;
  output \The_Compare[0].sel_reg_0 ;
  output A_1;
  output \The_Compare[2].sel_reg_2 ;
  output \The_Compare[3].sel_reg_3 ;
  output \The_Compare[4].sel_reg_4 ;
  output \The_Compare[5].sel_reg_5 ;
  output [1:0]\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ;
  output [43:0]DATA_OUTA;
  output [1:0]\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  output \lu_check_locked_hit_reg[0] ;
  output \lu_check_locked_hit_reg[1] ;
  input [17:0]Q;
  input \lu_mem_release_lock_hold_reg[1] ;
  input \lu_mem_release_lock_hold_reg[0] ;
  input ACLK;
  input ENA;
  input ENB;
  input [7:0]ADDRA;
  input [7:0]ADDRB;
  input [21:0]DATA_INB;
  input [1:0]WEB;

  wire A;
  wire ACLK;
  wire [7:0]ADDRA;
  wire [7:0]ADDRB;
  wire A_1;
  wire [21:0]DATA_INB;
  wire [43:0]DATA_OUTA;
  wire [35:0]DATA_OUTB;
  wire ENA;
  wire ENB;
  wire [17:0]Q;
  wire [1:0]\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst ;
  wire [1:0]\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Compare[0].sel_reg ;
  wire \The_Compare[0].sel_reg_0 ;
  wire \The_Compare[2].sel_reg ;
  wire \The_Compare[2].sel_reg_2 ;
  wire \The_Compare[3].sel_reg ;
  wire \The_Compare[3].sel_reg_3 ;
  wire \The_Compare[4].sel_reg ;
  wire \The_Compare[4].sel_reg_4 ;
  wire \The_Compare[5].sel_reg ;
  wire \The_Compare[5].sel_reg_5 ;
  wire [1:0]WEB;
  wire \lu_check_locked_hit_reg[0] ;
  wire \lu_check_locked_hit_reg[1] ;
  wire \lu_mem_release_lock_hold_reg[0] ;
  wire \lu_mem_release_lock_hold_reg[1] ;
  wire [23:22]p_0_out;
  wire [23:22]p_1_out;
  wire [43:18]update_tag_current_word_i;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DBITERR_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_SBITERR_UNCONNECTED ;
  wire [3:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_RDADDRECC_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DBITERR_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_SBITERR_UNCONNECTED ;
  wire [31:14]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DOADO_UNCONNECTED ;
  wire [31:14]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_RDADDRECC_UNCONNECTED ;

  (* box_type = "PRIMITIVE" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(36),
    .READ_WIDTH_B(36),
    .RSTREG_PRIORITY_A("RSTREG"),
    .RSTREG_PRIORITY_B("RSTREG"),
    .SIM_COLLISION_CHECK("NONE"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("READ_FIRST"),
    .WRITE_MODE_B("READ_FIRST"),
    .WRITE_WIDTH_A(36),
    .WRITE_WIDTH_B(36)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 
       (.ADDRARDADDR({1'b1,ADDRA,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .ADDRBWRADDR({1'b1,ADDRB,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(ACLK),
        .CLKBWRCLK(ACLK),
        .DBITERR(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DIBDI({DATA_INB[7:0],1'b0,1'b0,DATA_INB}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({DATA_OUTA[29:22],p_0_out,DATA_OUTA[21:0]}),
        .DOBDO({DATA_OUTB[25:18],p_1_out,update_tag_current_word_i[21:18],DATA_OUTB[17:0]}),
        .DOPADOP(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA),
        .ENBWREN(ENB),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b1),
        .REGCEB(1'b1),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,1'b0,1'b0}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,WEB,WEB[0],WEB[0]}));
  (* box_type = "PRIMITIVE" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(36),
    .READ_WIDTH_B(36),
    .RSTREG_PRIORITY_A("RSTREG"),
    .RSTREG_PRIORITY_B("RSTREG"),
    .SIM_COLLISION_CHECK("NONE"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("READ_FIRST"),
    .WRITE_MODE_B("READ_FIRST"),
    .WRITE_WIDTH_A(36),
    .WRITE_WIDTH_B(36)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 
       (.ADDRARDADDR({1'b1,ADDRA,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .ADDRBWRADDR({1'b1,ADDRB,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(ACLK),
        .CLKBWRCLK(ACLK),
        .DBITERR(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,DATA_INB[21:8]}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DOADO_UNCONNECTED [31:14],DATA_OUTA[43:30]}),
        .DOBDO({\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DOBDO_UNCONNECTED [31:14],update_tag_current_word_i[43:40],DATA_OUTB[35:26]}),
        .DOPADOP(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(ENA),
        .ENBWREN(ENB),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b1),
        .REGCEB(1'b1),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,1'b0,1'b0}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,WEB[1],WEB[1]}));
  (* SOFT_HLUTNM = "soft_lutpair70" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_1__7 
       (.I0(DATA_OUTA[20]),
        .I1(\lu_mem_release_lock_hold_reg[0] ),
        .O(\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst [0]));
  (* SOFT_HLUTNM = "soft_lutpair70" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_i_1__8 
       (.I0(DATA_OUTA[18]),
        .I1(\lu_mem_release_lock_hold_reg[0] ),
        .O(\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 [0]));
  (* SOFT_HLUTNM = "soft_lutpair69" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_i_1__0 
       (.I0(DATA_OUTA[42]),
        .I1(\lu_mem_release_lock_hold_reg[1] ),
        .O(\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst [1]));
  (* SOFT_HLUTNM = "soft_lutpair69" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_i_1__1 
       (.I0(DATA_OUTA[40]),
        .I1(\lu_mem_release_lock_hold_reg[1] ),
        .O(\The_Bit[1].Using_FPGA.Using_Reset.FDS_Inst_0 [1]));
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.MUXCY_I_i_1__142 
       (.I0(DATA_OUTA[18]),
        .I1(\lu_mem_release_lock_hold_reg[0] ),
        .O(\lu_check_locked_hit_reg[0] ));
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.MUXCY_I_i_1__145 
       (.I0(DATA_OUTA[40]),
        .I1(\lu_mem_release_lock_hold_reg[1] ),
        .O(\lu_check_locked_hit_reg[1] ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.MUXCY_I_i_1__35 
       (.I0(DATA_OUTB[2]),
        .I1(Q[2]),
        .I2(Q[0]),
        .I3(DATA_OUTB[0]),
        .I4(Q[1]),
        .I5(DATA_OUTB[1]),
        .O(\The_Compare[0].sel_reg ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.MUXCY_I_i_1__36 
       (.I0(DATA_OUTB[5]),
        .I1(Q[5]),
        .I2(Q[3]),
        .I3(DATA_OUTB[3]),
        .I4(Q[4]),
        .I5(DATA_OUTB[4]),
        .O(A));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.MUXCY_I_i_1__37 
       (.I0(DATA_OUTB[8]),
        .I1(Q[8]),
        .I2(Q[6]),
        .I3(DATA_OUTB[6]),
        .I4(Q[7]),
        .I5(DATA_OUTB[7]),
        .O(\The_Compare[2].sel_reg ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.MUXCY_I_i_1__38 
       (.I0(DATA_OUTB[11]),
        .I1(Q[11]),
        .I2(Q[9]),
        .I3(DATA_OUTB[9]),
        .I4(Q[10]),
        .I5(DATA_OUTB[10]),
        .O(\The_Compare[3].sel_reg ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.MUXCY_I_i_1__39 
       (.I0(DATA_OUTB[14]),
        .I1(Q[14]),
        .I2(Q[12]),
        .I3(DATA_OUTB[12]),
        .I4(Q[13]),
        .I5(DATA_OUTB[13]),
        .O(\The_Compare[4].sel_reg ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.MUXCY_I_i_1__40 
       (.I0(DATA_OUTB[17]),
        .I1(Q[17]),
        .I2(Q[15]),
        .I3(DATA_OUTB[15]),
        .I4(Q[16]),
        .I5(DATA_OUTB[16]),
        .O(\The_Compare[5].sel_reg ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.MUXCY_I_i_1__41 
       (.I0(DATA_OUTB[20]),
        .I1(Q[2]),
        .I2(Q[0]),
        .I3(DATA_OUTB[18]),
        .I4(Q[1]),
        .I5(DATA_OUTB[19]),
        .O(\The_Compare[0].sel_reg_0 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.MUXCY_I_i_1__42 
       (.I0(DATA_OUTB[23]),
        .I1(Q[5]),
        .I2(Q[3]),
        .I3(DATA_OUTB[21]),
        .I4(Q[4]),
        .I5(DATA_OUTB[22]),
        .O(A_1));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.MUXCY_I_i_1__43 
       (.I0(DATA_OUTB[26]),
        .I1(Q[8]),
        .I2(Q[6]),
        .I3(DATA_OUTB[24]),
        .I4(Q[7]),
        .I5(DATA_OUTB[25]),
        .O(\The_Compare[2].sel_reg_2 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.MUXCY_I_i_1__44 
       (.I0(DATA_OUTB[29]),
        .I1(Q[11]),
        .I2(Q[9]),
        .I3(DATA_OUTB[27]),
        .I4(Q[10]),
        .I5(DATA_OUTB[28]),
        .O(\The_Compare[3].sel_reg_3 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.MUXCY_I_i_1__45 
       (.I0(DATA_OUTB[32]),
        .I1(Q[14]),
        .I2(Q[12]),
        .I3(DATA_OUTB[30]),
        .I4(Q[13]),
        .I5(DATA_OUTB[31]),
        .O(\The_Compare[4].sel_reg_4 ));
  LUT6 #(
    .INIT(64'h9009000000009009)) 
    \Using_FPGA.MUXCY_I_i_1__46 
       (.I0(DATA_OUTB[35]),
        .I1(Q[17]),
        .I2(Q[15]),
        .I3(DATA_OUTB[33]),
        .I4(Q[16]),
        .I5(DATA_OUTB[34]),
        .O(\The_Compare[5].sel_reg_5 ));
endmodule

(* ORIG_REF_NAME = "sc_ram_module" *) 
module design_1_system_cache_0_0_sc_ram_module__parameterized3
   (DATA_OUTA,
    DATA_OUTB,
    ACLK,
    lud_mem_waiting_for_pipe_reg,
    O,
    ADDRARDADDR,
    ADDRBWRADDR,
    DATA_INA,
    DATA_INB,
    WEA,
    update_data_we);
  output [31:0]DATA_OUTA;
  output [31:0]DATA_OUTB;
  input ACLK;
  input lud_mem_waiting_for_pipe_reg;
  input O;
  input [11:0]ADDRARDADDR;
  input [11:0]ADDRBWRADDR;
  input [31:0]DATA_INA;
  input [31:0]DATA_INB;
  input [3:0]WEA;
  input update_data_we;

  wire ACLK;
  wire [11:0]ADDRARDADDR;
  wire [11:0]ADDRBWRADDR;
  wire [31:0]DATA_INA;
  wire [31:0]DATA_INB;
  wire [31:0]DATA_OUTA;
  wire [31:0]DATA_OUTB;
  wire O;
  wire [3:0]WEA;
  wire lud_mem_waiting_for_pipe_reg;
  wire update_data_we;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DBITERR_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_SBITERR_UNCONNECTED ;
  wire [31:8]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOADO_UNCONNECTED ;
  wire [31:8]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_RDADDRECC_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DBITERR_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_SBITERR_UNCONNECTED ;
  wire [31:8]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DOADO_UNCONNECTED ;
  wire [31:8]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_RDADDRECC_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_DBITERR_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_SBITERR_UNCONNECTED ;
  wire [31:8]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_DOADO_UNCONNECTED ;
  wire [31:8]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_RDADDRECC_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_DBITERR_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_SBITERR_UNCONNECTED ;
  wire [31:8]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_DOADO_UNCONNECTED ;
  wire [31:8]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_RDADDRECC_UNCONNECTED ;

  (* box_type = "PRIMITIVE" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(9),
    .READ_WIDTH_B(9),
    .RSTREG_PRIORITY_A("RSTREG"),
    .RSTREG_PRIORITY_B("RSTREG"),
    .SIM_COLLISION_CHECK("NONE"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("READ_FIRST"),
    .WRITE_MODE_B("READ_FIRST"),
    .WRITE_WIDTH_A(9),
    .WRITE_WIDTH_B(9)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 
       (.ADDRARDADDR({1'b1,ADDRARDADDR,1'b1,1'b1,1'b1}),
        .ADDRBWRADDR({1'b1,ADDRBWRADDR,1'b1,1'b1,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(ACLK),
        .CLKBWRCLK(ACLK),
        .DBITERR(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,DATA_INA[7:0]}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,DATA_INB[7:0]}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOADO_UNCONNECTED [31:8],DATA_OUTA[7:0]}),
        .DOBDO({\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOBDO_UNCONNECTED [31:8],DATA_OUTB[7:0]}),
        .DOPADOP(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(lud_mem_waiting_for_pipe_reg),
        .ENBWREN(O),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b1),
        .REGCEB(1'b1),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,1'b0,WEA[0]}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,update_data_we}));
  (* box_type = "PRIMITIVE" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(9),
    .READ_WIDTH_B(9),
    .RSTREG_PRIORITY_A("RSTREG"),
    .RSTREG_PRIORITY_B("RSTREG"),
    .SIM_COLLISION_CHECK("NONE"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("READ_FIRST"),
    .WRITE_MODE_B("READ_FIRST"),
    .WRITE_WIDTH_A(9),
    .WRITE_WIDTH_B(9)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 
       (.ADDRARDADDR({1'b1,ADDRARDADDR,1'b1,1'b1,1'b1}),
        .ADDRBWRADDR({1'b1,ADDRBWRADDR,1'b1,1'b1,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(ACLK),
        .CLKBWRCLK(ACLK),
        .DBITERR(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,DATA_INA[15:8]}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,DATA_INB[15:8]}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DOADO_UNCONNECTED [31:8],DATA_OUTA[15:8]}),
        .DOBDO({\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DOBDO_UNCONNECTED [31:8],DATA_OUTB[15:8]}),
        .DOPADOP(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(lud_mem_waiting_for_pipe_reg),
        .ENBWREN(O),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b1),
        .REGCEB(1'b1),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,1'b0,WEA[1]}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,update_data_we}));
  (* box_type = "PRIMITIVE" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(9),
    .READ_WIDTH_B(9),
    .RSTREG_PRIORITY_A("RSTREG"),
    .RSTREG_PRIORITY_B("RSTREG"),
    .SIM_COLLISION_CHECK("NONE"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("READ_FIRST"),
    .WRITE_MODE_B("READ_FIRST"),
    .WRITE_WIDTH_A(9),
    .WRITE_WIDTH_B(9)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1 
       (.ADDRARDADDR({1'b1,ADDRARDADDR,1'b1,1'b1,1'b1}),
        .ADDRBWRADDR({1'b1,ADDRBWRADDR,1'b1,1'b1,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(ACLK),
        .CLKBWRCLK(ACLK),
        .DBITERR(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,DATA_INA[23:16]}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,DATA_INB[23:16]}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_DOADO_UNCONNECTED [31:8],DATA_OUTA[23:16]}),
        .DOBDO({\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_DOBDO_UNCONNECTED [31:8],DATA_OUTB[23:16]}),
        .DOPADOP(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(lud_mem_waiting_for_pipe_reg),
        .ENBWREN(O),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b1),
        .REGCEB(1'b1),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,1'b0,WEA[2]}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,update_data_we}));
  (* box_type = "PRIMITIVE" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(9),
    .READ_WIDTH_B(9),
    .RSTREG_PRIORITY_A("RSTREG"),
    .RSTREG_PRIORITY_B("RSTREG"),
    .SIM_COLLISION_CHECK("NONE"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("READ_FIRST"),
    .WRITE_MODE_B("READ_FIRST"),
    .WRITE_WIDTH_A(9),
    .WRITE_WIDTH_B(9)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 
       (.ADDRARDADDR({1'b1,ADDRARDADDR,1'b1,1'b1,1'b1}),
        .ADDRBWRADDR({1'b1,ADDRBWRADDR,1'b1,1'b1,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(ACLK),
        .CLKBWRCLK(ACLK),
        .DBITERR(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,DATA_INA[31:24]}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,DATA_INB[31:24]}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_DOADO_UNCONNECTED [31:8],DATA_OUTA[31:24]}),
        .DOBDO({\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_DOBDO_UNCONNECTED [31:8],DATA_OUTB[31:24]}),
        .DOPADOP(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(lud_mem_waiting_for_pipe_reg),
        .ENBWREN(O),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b1),
        .REGCEB(1'b1),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,1'b0,WEA[3]}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,update_data_we}));
endmodule

(* ORIG_REF_NAME = "sc_ram_module" *) 
module design_1_system_cache_0_0_sc_ram_module__parameterized3_44
   (DATA_OUTA,
    DATA_OUTB,
    ACLK,
    lud_mem_waiting_for_pipe_reg,
    O,
    ADDRARDADDR,
    ADDRBWRADDR,
    DATA_INA,
    DATA_INB,
    WEA,
    update_data_we);
  output [31:0]DATA_OUTA;
  output [31:0]DATA_OUTB;
  input ACLK;
  input lud_mem_waiting_for_pipe_reg;
  input O;
  input [11:0]ADDRARDADDR;
  input [11:0]ADDRBWRADDR;
  input [31:0]DATA_INA;
  input [31:0]DATA_INB;
  input [3:0]WEA;
  input update_data_we;

  wire ACLK;
  wire [11:0]ADDRARDADDR;
  wire [11:0]ADDRBWRADDR;
  wire [31:0]DATA_INA;
  wire [31:0]DATA_INB;
  wire [31:0]DATA_OUTA;
  wire [31:0]DATA_OUTB;
  wire O;
  wire [3:0]WEA;
  wire lud_mem_waiting_for_pipe_reg;
  wire update_data_we;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DBITERR_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_SBITERR_UNCONNECTED ;
  wire [31:8]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOADO_UNCONNECTED ;
  wire [31:8]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_RDADDRECC_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DBITERR_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_SBITERR_UNCONNECTED ;
  wire [31:8]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DOADO_UNCONNECTED ;
  wire [31:8]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_RDADDRECC_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_DBITERR_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_SBITERR_UNCONNECTED ;
  wire [31:8]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_DOADO_UNCONNECTED ;
  wire [31:8]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_RDADDRECC_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_CASCADEOUTA_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_CASCADEOUTB_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_DBITERR_UNCONNECTED ;
  wire \NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_SBITERR_UNCONNECTED ;
  wire [31:8]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_DOADO_UNCONNECTED ;
  wire [31:8]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_DOBDO_UNCONNECTED ;
  wire [3:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_DOPADOP_UNCONNECTED ;
  wire [3:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_DOPBDOP_UNCONNECTED ;
  wire [7:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_ECCPARITY_UNCONNECTED ;
  wire [8:0]\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_RDADDRECC_UNCONNECTED ;

  (* box_type = "PRIMITIVE" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(9),
    .READ_WIDTH_B(9),
    .RSTREG_PRIORITY_A("RSTREG"),
    .RSTREG_PRIORITY_B("RSTREG"),
    .SIM_COLLISION_CHECK("NONE"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("READ_FIRST"),
    .WRITE_MODE_B("READ_FIRST"),
    .WRITE_WIDTH_A(9),
    .WRITE_WIDTH_B(9)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1 
       (.ADDRARDADDR({1'b1,ADDRARDADDR,1'b1,1'b1,1'b1}),
        .ADDRBWRADDR({1'b1,ADDRBWRADDR,1'b1,1'b1,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(ACLK),
        .CLKBWRCLK(ACLK),
        .DBITERR(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,DATA_INA[7:0]}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,DATA_INB[7:0]}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOADO_UNCONNECTED [31:8],DATA_OUTA[7:0]}),
        .DOBDO({\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOBDO_UNCONNECTED [31:8],DATA_OUTB[7:0]}),
        .DOPADOP(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(lud_mem_waiting_for_pipe_reg),
        .ENBWREN(O),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b1),
        .REGCEB(1'b1),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,1'b0,WEA[0]}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,update_data_we}));
  (* box_type = "PRIMITIVE" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(9),
    .READ_WIDTH_B(9),
    .RSTREG_PRIORITY_A("RSTREG"),
    .RSTREG_PRIORITY_B("RSTREG"),
    .SIM_COLLISION_CHECK("NONE"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("READ_FIRST"),
    .WRITE_MODE_B("READ_FIRST"),
    .WRITE_WIDTH_A(9),
    .WRITE_WIDTH_B(9)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 
       (.ADDRARDADDR({1'b1,ADDRARDADDR,1'b1,1'b1,1'b1}),
        .ADDRBWRADDR({1'b1,ADDRBWRADDR,1'b1,1'b1,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(ACLK),
        .CLKBWRCLK(ACLK),
        .DBITERR(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,DATA_INA[15:8]}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,DATA_INB[15:8]}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DOADO_UNCONNECTED [31:8],DATA_OUTA[15:8]}),
        .DOBDO({\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DOBDO_UNCONNECTED [31:8],DATA_OUTB[15:8]}),
        .DOPADOP(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(lud_mem_waiting_for_pipe_reg),
        .ENBWREN(O),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b1),
        .REGCEB(1'b1),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,1'b0,WEA[1]}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,update_data_we}));
  (* box_type = "PRIMITIVE" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(9),
    .READ_WIDTH_B(9),
    .RSTREG_PRIORITY_A("RSTREG"),
    .RSTREG_PRIORITY_B("RSTREG"),
    .SIM_COLLISION_CHECK("NONE"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("READ_FIRST"),
    .WRITE_MODE_B("READ_FIRST"),
    .WRITE_WIDTH_A(9),
    .WRITE_WIDTH_B(9)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1 
       (.ADDRARDADDR({1'b1,ADDRARDADDR,1'b1,1'b1,1'b1}),
        .ADDRBWRADDR({1'b1,ADDRBWRADDR,1'b1,1'b1,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(ACLK),
        .CLKBWRCLK(ACLK),
        .DBITERR(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,DATA_INA[23:16]}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,DATA_INB[23:16]}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_DOADO_UNCONNECTED [31:8],DATA_OUTA[23:16]}),
        .DOBDO({\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_DOBDO_UNCONNECTED [31:8],DATA_OUTB[23:16]}),
        .DOPADOP(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(lud_mem_waiting_for_pipe_reg),
        .ENBWREN(O),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b1),
        .REGCEB(1'b1),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,1'b0,WEA[2]}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,update_data_we}));
  (* box_type = "PRIMITIVE" *) 
  RAMB36E1 #(
    .DOA_REG(0),
    .DOB_REG(0),
    .EN_ECC_READ("FALSE"),
    .EN_ECC_WRITE("FALSE"),
    .INITP_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INITP_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_00(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_01(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_02(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_03(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_04(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_05(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_06(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_07(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_08(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_09(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_0F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_10(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_11(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_12(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_13(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_14(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_15(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_16(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_17(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_18(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_19(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_1F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_20(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_21(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_22(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_23(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_24(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_25(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_26(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_27(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_28(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_29(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_2F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_30(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_31(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_32(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_33(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_34(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_35(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_36(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_37(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_38(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_39(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_3F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_40(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_41(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_42(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_43(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_44(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_45(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_46(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_47(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_48(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_49(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_4F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_50(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_51(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_52(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_53(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_54(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_55(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_56(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_57(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_58(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_59(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_5F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_60(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_61(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_62(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_63(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_64(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_65(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_66(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_67(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_68(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_69(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_6F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_70(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_71(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_72(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_73(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_74(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_75(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_76(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_77(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_78(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_79(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7A(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7B(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7C(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7D(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7E(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_7F(256'h0000000000000000000000000000000000000000000000000000000000000000),
    .INIT_A(36'h000000000),
    .INIT_B(36'h000000000),
    .INIT_FILE("NONE"),
    .IS_CLKARDCLK_INVERTED(1'b0),
    .IS_CLKBWRCLK_INVERTED(1'b0),
    .IS_ENARDEN_INVERTED(1'b0),
    .IS_ENBWREN_INVERTED(1'b0),
    .IS_RSTRAMARSTRAM_INVERTED(1'b0),
    .IS_RSTRAMB_INVERTED(1'b0),
    .IS_RSTREGARSTREG_INVERTED(1'b0),
    .IS_RSTREGB_INVERTED(1'b0),
    .RAM_EXTENSION_A("NONE"),
    .RAM_EXTENSION_B("NONE"),
    .RAM_MODE("TDP"),
    .RDADDR_COLLISION_HWCONFIG("DELAYED_WRITE"),
    .READ_WIDTH_A(9),
    .READ_WIDTH_B(9),
    .RSTREG_PRIORITY_A("RSTREG"),
    .RSTREG_PRIORITY_B("RSTREG"),
    .SIM_COLLISION_CHECK("NONE"),
    .SIM_DEVICE("7SERIES"),
    .SRVAL_A(36'h000000000),
    .SRVAL_B(36'h000000000),
    .WRITE_MODE_A("READ_FIRST"),
    .WRITE_MODE_B("READ_FIRST"),
    .WRITE_WIDTH_A(9),
    .WRITE_WIDTH_B(9)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 
       (.ADDRARDADDR({1'b1,ADDRARDADDR,1'b1,1'b1,1'b1}),
        .ADDRBWRADDR({1'b1,ADDRBWRADDR,1'b1,1'b1,1'b1}),
        .CASCADEINA(1'b0),
        .CASCADEINB(1'b0),
        .CASCADEOUTA(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_CASCADEOUTA_UNCONNECTED ),
        .CASCADEOUTB(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_CASCADEOUTB_UNCONNECTED ),
        .CLKARDCLK(ACLK),
        .CLKBWRCLK(ACLK),
        .DBITERR(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_DBITERR_UNCONNECTED ),
        .DIADI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,DATA_INA[31:24]}),
        .DIBDI({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,DATA_INB[31:24]}),
        .DIPADIP({1'b0,1'b0,1'b0,1'b0}),
        .DIPBDIP({1'b0,1'b0,1'b0,1'b0}),
        .DOADO({\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_DOADO_UNCONNECTED [31:8],DATA_OUTA[31:24]}),
        .DOBDO({\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_DOBDO_UNCONNECTED [31:8],DATA_OUTB[31:24]}),
        .DOPADOP(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_DOPADOP_UNCONNECTED [3:0]),
        .DOPBDOP(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_DOPBDOP_UNCONNECTED [3:0]),
        .ECCPARITY(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_ECCPARITY_UNCONNECTED [7:0]),
        .ENARDEN(lud_mem_waiting_for_pipe_reg),
        .ENBWREN(O),
        .INJECTDBITERR(1'b0),
        .INJECTSBITERR(1'b0),
        .RDADDRECC(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_RDADDRECC_UNCONNECTED [8:0]),
        .REGCEAREGCE(1'b1),
        .REGCEB(1'b1),
        .RSTRAMARSTRAM(1'b0),
        .RSTRAMB(1'b0),
        .RSTREGARSTREG(1'b0),
        .RSTREGB(1'b0),
        .SBITERR(\NLW_Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_SBITERR_UNCONNECTED ),
        .WEA({1'b0,1'b0,1'b0,WEA[3]}),
        .WEBWE({1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,1'b0,update_data_we}));
endmodule

(* ORIG_REF_NAME = "sc_s_axi_ctrl_interface" *) 
module design_1_system_cache_0_0_sc_s_axi_ctrl_interface
   (ctrl_init_done_i,
    \ctrl_access[Internal_Cmd] ,
    \ctrl_access[Size] ,
    A,
    \arb_access_i_reg[Valid] ,
    \ctrl_access[Addr] ,
    ACLK,
    ARESET,
    E,
    Q,
    ctrl_ready);
  output ctrl_init_done_i;
  output \ctrl_access[Internal_Cmd] ;
  output [0:0]\ctrl_access[Size] ;
  output A;
  output \arb_access_i_reg[Valid] ;
  output [8:0]\ctrl_access[Addr] ;
  input ACLK;
  input ARESET;
  input [0:0]E;
  input Q;
  input ctrl_ready;

  wire A;
  wire ACLK;
  wire ARESET;
  wire ARESET_I;
  wire [0:0]E;
  wire Q;
  wire \arb_access_i_reg[Valid] ;
  wire b2s;
  wire [8:0]\ctrl_access[Addr] ;
  wire \ctrl_access[Internal_Cmd] ;
  wire [0:0]\ctrl_access[Size] ;
  wire \ctrl_access_i[Addr][14]_i_1_n_0 ;
  wire \ctrl_access_i[Barrier] ;
  wire \ctrl_access_i[Prot][1]_i_1_n_0 ;
  wire \ctrl_access_i[Valid]_i_1_n_0 ;
  wire [14:6]ctrl_init_cnt_reg__0;
  wire ctrl_init_done_i;
  wire ctrl_init_last;
  wire ctrl_init_last_i_3_n_0;
  wire ctrl_ready;
  wire [8:0]plusOp;

  (* C_CE_LOW = "1'b0" *) 
  (* C_IS_SET = "1'b0" *) 
  (* C_NUM_CE = "1" *) 
  (* C_TARGET = "3" *) 
  (* DONT_TOUCH *) 
  design_1_system_cache_0_0_bit_reg_ce Reset_Inst
       (.CE(1'b1),
        .CLK(ACLK),
        .D(ARESET),
        .Q(ARESET_I),
        .SR(1'b0));
  LUT3 #(
    .INIT(8'h04)) 
    \Using_FPGA.MUXCY_I_i_1__14 
       (.I0(ARESET),
        .I1(ctrl_init_done_i),
        .I2(Q),
        .O(A));
  LUT3 #(
    .INIT(8'h04)) 
    \Using_FPGA.MUXCY_I_i_1__15 
       (.I0(ARESET),
        .I1(ctrl_init_done_i),
        .I2(Q),
        .O(\arb_access_i_reg[Valid] ));
  LUT4 #(
    .INIT(16'hFEAA)) 
    \ctrl_access_i[Addr][14]_i_1 
       (.I0(ARESET_I),
        .I1(ctrl_init_done_i),
        .I2(ctrl_init_last),
        .I3(ctrl_ready),
        .O(\ctrl_access_i[Addr][14]_i_1_n_0 ));
  LUT4 #(
    .INIT(16'hFF01)) 
    \ctrl_access_i[Addr][14]_i_2 
       (.I0(ctrl_init_done_i),
        .I1(ctrl_init_last),
        .I2(\ctrl_access[Internal_Cmd] ),
        .I3(ctrl_ready),
        .O(\ctrl_access_i[Barrier] ));
  LUT6 #(
    .INIT(64'h000000000303AAAB)) 
    \ctrl_access_i[Prot][1]_i_1 
       (.I0(\ctrl_access[Size] ),
        .I1(ctrl_init_done_i),
        .I2(ctrl_init_last),
        .I3(\ctrl_access[Internal_Cmd] ),
        .I4(ctrl_ready),
        .I5(ARESET_I),
        .O(\ctrl_access_i[Prot][1]_i_1_n_0 ));
  LUT5 #(
    .INIT(32'h000011F1)) 
    \ctrl_access_i[Valid]_i_1 
       (.I0(ctrl_init_done_i),
        .I1(ctrl_init_last),
        .I2(\ctrl_access[Internal_Cmd] ),
        .I3(ctrl_ready),
        .I4(ARESET_I),
        .O(\ctrl_access_i[Valid]_i_1_n_0 ));
  FDRE \ctrl_access_i_reg[Addr][10] 
       (.C(ACLK),
        .CE(\ctrl_access_i[Barrier] ),
        .D(ctrl_init_cnt_reg__0[10]),
        .Q(\ctrl_access[Addr] [4]),
        .R(\ctrl_access_i[Addr][14]_i_1_n_0 ));
  FDRE \ctrl_access_i_reg[Addr][11] 
       (.C(ACLK),
        .CE(\ctrl_access_i[Barrier] ),
        .D(ctrl_init_cnt_reg__0[11]),
        .Q(\ctrl_access[Addr] [5]),
        .R(\ctrl_access_i[Addr][14]_i_1_n_0 ));
  FDRE \ctrl_access_i_reg[Addr][12] 
       (.C(ACLK),
        .CE(\ctrl_access_i[Barrier] ),
        .D(ctrl_init_cnt_reg__0[12]),
        .Q(\ctrl_access[Addr] [6]),
        .R(\ctrl_access_i[Addr][14]_i_1_n_0 ));
  FDRE \ctrl_access_i_reg[Addr][13] 
       (.C(ACLK),
        .CE(\ctrl_access_i[Barrier] ),
        .D(ctrl_init_cnt_reg__0[13]),
        .Q(\ctrl_access[Addr] [7]),
        .R(\ctrl_access_i[Addr][14]_i_1_n_0 ));
  FDRE \ctrl_access_i_reg[Addr][14] 
       (.C(ACLK),
        .CE(\ctrl_access_i[Barrier] ),
        .D(ctrl_init_cnt_reg__0[14]),
        .Q(\ctrl_access[Addr] [8]),
        .R(\ctrl_access_i[Addr][14]_i_1_n_0 ));
  FDRE \ctrl_access_i_reg[Addr][6] 
       (.C(ACLK),
        .CE(\ctrl_access_i[Barrier] ),
        .D(ctrl_init_cnt_reg__0[6]),
        .Q(\ctrl_access[Addr] [0]),
        .R(\ctrl_access_i[Addr][14]_i_1_n_0 ));
  FDRE \ctrl_access_i_reg[Addr][7] 
       (.C(ACLK),
        .CE(\ctrl_access_i[Barrier] ),
        .D(ctrl_init_cnt_reg__0[7]),
        .Q(\ctrl_access[Addr] [1]),
        .R(\ctrl_access_i[Addr][14]_i_1_n_0 ));
  FDRE \ctrl_access_i_reg[Addr][8] 
       (.C(ACLK),
        .CE(\ctrl_access_i[Barrier] ),
        .D(ctrl_init_cnt_reg__0[8]),
        .Q(\ctrl_access[Addr] [2]),
        .R(\ctrl_access_i[Addr][14]_i_1_n_0 ));
  FDRE \ctrl_access_i_reg[Addr][9] 
       (.C(ACLK),
        .CE(\ctrl_access_i[Barrier] ),
        .D(ctrl_init_cnt_reg__0[9]),
        .Q(\ctrl_access[Addr] [3]),
        .R(\ctrl_access_i[Addr][14]_i_1_n_0 ));
  FDRE \ctrl_access_i_reg[Prot][1] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\ctrl_access_i[Prot][1]_i_1_n_0 ),
        .Q(\ctrl_access[Size] ),
        .R(1'b0));
  FDRE \ctrl_access_i_reg[Valid] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\ctrl_access_i[Valid]_i_1_n_0 ),
        .Q(\ctrl_access[Internal_Cmd] ),
        .R(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \ctrl_init_cnt[10]_i_1 
       (.I0(ctrl_init_cnt_reg__0[10]),
        .I1(ctrl_init_cnt_reg__0[8]),
        .I2(ctrl_init_cnt_reg__0[7]),
        .I3(ctrl_init_cnt_reg__0[6]),
        .I4(ctrl_init_cnt_reg__0[9]),
        .O(plusOp[4]));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \ctrl_init_cnt[11]_i_1 
       (.I0(ctrl_init_cnt_reg__0[11]),
        .I1(ctrl_init_cnt_reg__0[9]),
        .I2(ctrl_init_cnt_reg__0[6]),
        .I3(ctrl_init_cnt_reg__0[7]),
        .I4(ctrl_init_cnt_reg__0[8]),
        .I5(ctrl_init_cnt_reg__0[10]),
        .O(plusOp[5]));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \ctrl_init_cnt[12]_i_1 
       (.I0(ctrl_init_cnt_reg__0[12]),
        .I1(ctrl_init_last_i_3_n_0),
        .O(plusOp[6]));
  (* SOFT_HLUTNM = "soft_lutpair3" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \ctrl_init_cnt[13]_i_1 
       (.I0(ctrl_init_cnt_reg__0[13]),
        .I1(ctrl_init_last_i_3_n_0),
        .I2(ctrl_init_cnt_reg__0[12]),
        .O(plusOp[7]));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \ctrl_init_cnt[14]_i_1 
       (.I0(ctrl_init_cnt_reg__0[14]),
        .I1(ctrl_init_cnt_reg__0[12]),
        .I2(ctrl_init_last_i_3_n_0),
        .I3(ctrl_init_cnt_reg__0[13]),
        .O(plusOp[8]));
  LUT1 #(
    .INIT(2'h1)) 
    \ctrl_init_cnt[6]_i_1 
       (.I0(ctrl_init_cnt_reg__0[6]),
        .O(plusOp[0]));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \ctrl_init_cnt[7]_i_1 
       (.I0(ctrl_init_cnt_reg__0[6]),
        .I1(ctrl_init_cnt_reg__0[7]),
        .O(plusOp[1]));
  (* SOFT_HLUTNM = "soft_lutpair2" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \ctrl_init_cnt[8]_i_1 
       (.I0(ctrl_init_cnt_reg__0[8]),
        .I1(ctrl_init_cnt_reg__0[7]),
        .I2(ctrl_init_cnt_reg__0[6]),
        .O(plusOp[2]));
  (* SOFT_HLUTNM = "soft_lutpair0" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \ctrl_init_cnt[9]_i_1 
       (.I0(ctrl_init_cnt_reg__0[9]),
        .I1(ctrl_init_cnt_reg__0[6]),
        .I2(ctrl_init_cnt_reg__0[7]),
        .I3(ctrl_init_cnt_reg__0[8]),
        .O(plusOp[3]));
  FDRE \ctrl_init_cnt_reg[10] 
       (.C(ACLK),
        .CE(E),
        .D(plusOp[4]),
        .Q(ctrl_init_cnt_reg__0[10]),
        .R(ARESET_I));
  FDRE \ctrl_init_cnt_reg[11] 
       (.C(ACLK),
        .CE(E),
        .D(plusOp[5]),
        .Q(ctrl_init_cnt_reg__0[11]),
        .R(ARESET_I));
  FDRE \ctrl_init_cnt_reg[12] 
       (.C(ACLK),
        .CE(E),
        .D(plusOp[6]),
        .Q(ctrl_init_cnt_reg__0[12]),
        .R(ARESET_I));
  FDRE \ctrl_init_cnt_reg[13] 
       (.C(ACLK),
        .CE(E),
        .D(plusOp[7]),
        .Q(ctrl_init_cnt_reg__0[13]),
        .R(ARESET_I));
  FDRE \ctrl_init_cnt_reg[14] 
       (.C(ACLK),
        .CE(E),
        .D(plusOp[8]),
        .Q(ctrl_init_cnt_reg__0[14]),
        .R(ARESET_I));
  FDRE \ctrl_init_cnt_reg[6] 
       (.C(ACLK),
        .CE(E),
        .D(plusOp[0]),
        .Q(ctrl_init_cnt_reg__0[6]),
        .R(ARESET_I));
  FDRE \ctrl_init_cnt_reg[7] 
       (.C(ACLK),
        .CE(E),
        .D(plusOp[1]),
        .Q(ctrl_init_cnt_reg__0[7]),
        .R(ARESET_I));
  FDRE \ctrl_init_cnt_reg[8] 
       (.C(ACLK),
        .CE(E),
        .D(plusOp[2]),
        .Q(ctrl_init_cnt_reg__0[8]),
        .R(ARESET_I));
  FDRE \ctrl_init_cnt_reg[9] 
       (.C(ACLK),
        .CE(E),
        .D(plusOp[3]),
        .Q(ctrl_init_cnt_reg__0[9]),
        .R(ARESET_I));
  FDRE ctrl_init_done_i_reg
       (.C(ACLK),
        .CE(E),
        .D(ctrl_init_last),
        .Q(ctrl_init_done_i),
        .R(ARESET_I));
  (* SOFT_HLUTNM = "soft_lutpair1" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    ctrl_init_last_i_2
       (.I0(ctrl_init_cnt_reg__0[14]),
        .I1(ctrl_init_cnt_reg__0[12]),
        .I2(ctrl_init_last_i_3_n_0),
        .I3(ctrl_init_cnt_reg__0[13]),
        .O(b2s));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    ctrl_init_last_i_3
       (.I0(ctrl_init_cnt_reg__0[11]),
        .I1(ctrl_init_cnt_reg__0[9]),
        .I2(ctrl_init_cnt_reg__0[6]),
        .I3(ctrl_init_cnt_reg__0[7]),
        .I4(ctrl_init_cnt_reg__0[8]),
        .I5(ctrl_init_cnt_reg__0[10]),
        .O(ctrl_init_last_i_3_n_0));
  FDRE ctrl_init_last_reg
       (.C(ACLK),
        .CE(E),
        .D(b2s),
        .Q(ctrl_init_last),
        .R(ARESET_I));
endmodule

(* ORIG_REF_NAME = "sc_s_axi_opt_interface" *) 
module design_1_system_cache_0_0_sc_s_axi_opt_interface
   (wr_port_data_valid_i_reg_0,
    \read_info_status[0,0][Almost_Full] ,
    \read_info_status[0,0][Full] ,
    E,
    read_req_ready,
    \r_hit_write_fifo_addr_reg[3] ,
    \r_hit_write_fifo_addr_reg[3]_0 ,
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3] ,
    \r_miss_fifo_len_reg[3] ,
    r_push_safe,
    queue_full,
    S0_AXI_RID,
    rip_last,
    S0_AXI_BID,
    \access_data_info[0,0][Last] ,
    S0_AXI_RVALID,
    S0_AXI_BVALID,
    Q,
    r_miss_full_fifo_addr,
    S0_AXI_ARREADY,
    \rd_port_access[0][Valid] ,
    S0_AXI_WREADY,
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[2] ,
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0] ,
    r_read_fifo_addr,
    r_write_fifo_addr,
    \update_wma_strb_reg[0] ,
    \update_wma_data_reg[24] ,
    p_1_in3_in,
    p_2_in,
    p_3_in,
    lud_addr_pipeline_full0,
    \The_Compare[0].sel_reg ,
    \update_rd_offset_cnt_reg[0] ,
    new_read_data_resp,
    \Use_Reg_Ctrl.queue_exist_i_reg ,
    \arb_prohibit_quick_reg[0] ,
    S0_AXI_BRESP,
    \update_wma_data_reg[31] ,
    ACLK,
    ARESET,
    S0_AXI_WVALID,
    S_8,
    \lookup_read_data_new[0,0][Valid] ,
    S0_AXI_RREADY,
    \lookup_read_data_info[0,0][Valid] ,
    \update_read_data_info[0,0][Valid] ,
    S0_AXI_ARID,
    \lookup_read_data_new[0,0][Hit] ,
    queue_push9_out,
    \arbiter_bp_push_prt[0][Valid] ,
    \arbiter_bp_push_prt[0][Early] ,
    \arbiter_bp_push_prt[0][Barrier] ,
    S0_AXI_AWID,
    S0_AXI_WLAST,
    \lu_check_info_reg[Port_Num][0] ,
    S0_AXI_AWVALID,
    \Gen_Port_Ready[0].Use_Slow_Port.Wr_FF_Inst ,
    \Gen_Port_Ready[0].Use_Slow_Port.Rd_FF_Inst ,
    S0_AXI_ARVALID,
    r_hit_last,
    r_miss_last,
    \bs_port_num_reg[0] ,
    update_ext_bresp_any,
    S0_AXI_BREADY,
    wm_port,
    \wr_port_data_info_reg[0][BE][3]_0 ,
    wm_allow,
    \Use_FPGA_Flag_Hit.Full_Inst ,
    lud_addr_pipeline_full,
    lud_reg_valid_reg,
    p_57_in,
    \lud_mem_port_one_hot_reg[1] ,
    \Use_Rd_Ctrl_Pipeline.ri_hit_reg ,
    \Use_FPGA_Flag_Hit.Full_Inst_0 ,
    \lu_check_info_reg[Port_Num][0]_0 ,
    lud_reg_valid_reg_0,
    lud_reg_port_num,
    \read_data_status[0,1][Hit_Almost_Full] ,
    M0_AXI_RRESP,
    rd_port_ready_cmb_0,
    access_piperun,
    S0_AXI_WSTRB,
    S0_AXI_WDATA,
    \bs_src_reg[0] ,
    \bs_src_reg[0]_0 );
  output wr_port_data_valid_i_reg_0;
  output \read_info_status[0,0][Almost_Full] ;
  output \read_info_status[0,0][Full] ;
  output [0:0]E;
  output read_req_ready;
  output [0:0]\r_hit_write_fifo_addr_reg[3] ;
  output \r_hit_write_fifo_addr_reg[3]_0 ;
  output \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3] ;
  output \r_miss_fifo_len_reg[3] ;
  output r_push_safe;
  output queue_full;
  output [0:0]S0_AXI_RID;
  output rip_last;
  output [0:0]S0_AXI_BID;
  output \access_data_info[0,0][Last] ;
  output S0_AXI_RVALID;
  output S0_AXI_BVALID;
  output [3:0]Q;
  output [1:0]r_miss_full_fifo_addr;
  output S0_AXI_ARREADY;
  output \rd_port_access[0][Valid] ;
  output S0_AXI_WREADY;
  output \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[2] ;
  output \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0] ;
  output [1:0]r_read_fifo_addr;
  output [3:0]r_write_fifo_addr;
  output \update_wma_strb_reg[0] ;
  output [3:0]\update_wma_data_reg[24] ;
  output p_1_in3_in;
  output p_2_in;
  output p_3_in;
  output lud_addr_pipeline_full0;
  output \The_Compare[0].sel_reg ;
  output \update_rd_offset_cnt_reg[0] ;
  output [1:0]new_read_data_resp;
  output \Use_Reg_Ctrl.queue_exist_i_reg ;
  output \arb_prohibit_quick_reg[0] ;
  output [1:0]S0_AXI_BRESP;
  output [31:0]\update_wma_data_reg[31] ;
  input ACLK;
  input ARESET;
  input S0_AXI_WVALID;
  input S_8;
  input \lookup_read_data_new[0,0][Valid] ;
  input S0_AXI_RREADY;
  input \lookup_read_data_info[0,0][Valid] ;
  input \update_read_data_info[0,0][Valid] ;
  input [0:0]S0_AXI_ARID;
  input \lookup_read_data_new[0,0][Hit] ;
  input queue_push9_out;
  input \arbiter_bp_push_prt[0][Valid] ;
  input \arbiter_bp_push_prt[0][Early] ;
  input \arbiter_bp_push_prt[0][Barrier] ;
  input [0:0]S0_AXI_AWID;
  input S0_AXI_WLAST;
  input \lu_check_info_reg[Port_Num][0] ;
  input S0_AXI_AWVALID;
  input \Gen_Port_Ready[0].Use_Slow_Port.Wr_FF_Inst ;
  input \Gen_Port_Ready[0].Use_Slow_Port.Rd_FF_Inst ;
  input S0_AXI_ARVALID;
  input r_hit_last;
  input r_miss_last;
  input \bs_port_num_reg[0] ;
  input update_ext_bresp_any;
  input S0_AXI_BREADY;
  input wm_port;
  input [3:0]\wr_port_data_info_reg[0][BE][3]_0 ;
  input wm_allow;
  input \Use_FPGA_Flag_Hit.Full_Inst ;
  input lud_addr_pipeline_full;
  input lud_reg_valid_reg;
  input p_57_in;
  input [0:0]\lud_mem_port_one_hot_reg[1] ;
  input [0:0]\Use_Rd_Ctrl_Pipeline.ri_hit_reg ;
  input \Use_FPGA_Flag_Hit.Full_Inst_0 ;
  input \lu_check_info_reg[Port_Num][0]_0 ;
  input lud_reg_valid_reg_0;
  input lud_reg_port_num;
  input \read_data_status[0,1][Hit_Almost_Full] ;
  input [1:0]M0_AXI_RRESP;
  input rd_port_ready_cmb_0;
  input access_piperun;
  input [3:0]S0_AXI_WSTRB;
  input [31:0]S0_AXI_WDATA;
  input \bs_src_reg[0] ;
  input \bs_src_reg[0]_0 ;

  wire ACLK;
  wire ARESET;
  wire ARESET_I;
  wire [0:0]E;
  wire FIFO_BP_Pointer_n_5;
  wire FIFO_BP_Pointer_n_6;
  wire FIFO_BP_Pointer_n_8;
  wire FIFO_BP_Pointer_n_9;
  wire FIFO_W_Pointer_n_4;
  wire FIFO_W_Pointer_n_7;
  wire \Gen_Port_Ready[0].Use_Slow_Port.Rd_FF_Inst ;
  wire \Gen_Port_Ready[0].Use_Slow_Port.Wr_FF_Inst ;
  wire [1:0]M0_AXI_RRESP;
  wire [3:0]Q;
  wire [0:0]S0_AXI_ARID;
  wire S0_AXI_ARREADY;
  wire S0_AXI_ARVALID;
  wire [0:0]S0_AXI_AWID;
  wire S0_AXI_AWVALID;
  wire [0:0]S0_AXI_BID;
  wire S0_AXI_BREADY;
  wire [1:0]S0_AXI_BRESP;
  wire S0_AXI_BVALID;
  wire [0:0]S0_AXI_RID;
  wire S0_AXI_RREADY;
  wire S0_AXI_RVALID;
  wire [31:0]S0_AXI_WDATA;
  wire S0_AXI_WLAST;
  wire S0_AXI_WREADY;
  wire [3:0]S0_AXI_WSTRB;
  wire S0_AXI_WVALID;
  wire S_8;
  wire \The_Compare[0].sel_reg ;
  wire \Use_FPGA_Flag_Hit.Full_Inst ;
  wire \Use_FPGA_Flag_Hit.Full_Inst_0 ;
  wire \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0] ;
  wire \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[2] ;
  wire \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3] ;
  wire [0:0]\Use_Rd_Ctrl_Pipeline.ri_hit_reg ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg ;
  wire \access_data_info[0,0][Last] ;
  wire access_piperun;
  wire \arb_prohibit_quick_reg[0] ;
  wire \arbiter_bp_push_prt[0][Barrier] ;
  wire \arbiter_bp_push_prt[0][Early] ;
  wire \arbiter_bp_push_prt[0][Valid] ;
  wire \bip_fifo_mem_reg[15][ID][0]_srl16_n_0 ;
  wire [3:0]bip_read_fifo_addr;
  wire \bp_fifo_mem_reg[15][Barrier][-1111111111]_srl16_n_0 ;
  wire \bp_fifo_mem_reg[15][Early][-1111111111]_srl16_n_0 ;
  wire [3:0]bp_read_fifo_addr;
  wire \bs_port_num_reg[0] ;
  wire \bs_src_reg[0] ;
  wire \bs_src_reg[0]_0 ;
  wire [3:0]fit_vec;
  wire \lookup_read_data_info[0,0][Valid] ;
  wire \lookup_read_data_new[0,0][Hit] ;
  wire \lookup_read_data_new[0,0][Valid] ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire \lu_check_info_reg[Port_Num][0] ;
  wire \lu_check_info_reg[Port_Num][0]_0 ;
  wire lud_addr_pipeline_full;
  wire lud_addr_pipeline_full0;
  wire [0:0]\lud_mem_port_one_hot_reg[1] ;
  wire lud_reg_port_num;
  wire lud_reg_valid_reg;
  wire lud_reg_valid_reg_0;
  wire [1:0]new_read_data_resp;
  wire p_1_in3_in;
  wire p_2_in;
  wire p_3_in;
  wire p_57_in;
  wire queue_full;
  wire queue_pop7_out;
  wire queue_push;
  wire queue_push9_out;
  wire r_hit_last;
  wire [0:0]\r_hit_write_fifo_addr_reg[3] ;
  wire \r_hit_write_fifo_addr_reg[3]_0 ;
  wire \r_miss_fifo_len_reg[3] ;
  wire [1:0]r_miss_full_fifo_addr;
  wire r_miss_last;
  wire r_push_safe;
  wire [1:0]r_read_fifo_addr;
  wire [3:0]r_write_fifo_addr;
  wire \rd_port_access[0][Valid] ;
  wire rd_port_ready_cmb_0;
  wire \read_data_status[0,1][Hit_Almost_Full] ;
  wire \read_info_status[0,0][Almost_Full] ;
  wire \read_info_status[0,0][Full] ;
  wire read_req_ready;
  wire rip_last;
  wire update_ext_bresp_any;
  wire \update_rd_offset_cnt_reg[0] ;
  wire \update_read_data_info[0,0][Valid] ;
  wire [3:0]\update_wma_data_reg[24] ;
  wire [31:0]\update_wma_data_reg[31] ;
  wire \update_wma_strb_reg[0] ;
  wire \w_fifo_mem_reg[15][Data][0]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][10]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][11]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][12]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][13]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][14]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][15]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][16]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][17]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][18]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][19]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][1]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][20]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][21]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][22]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][23]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][24]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][25]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][26]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][27]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][28]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][29]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][2]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][30]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][31]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][3]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][4]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][5]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][6]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][7]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][8]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][9]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Last][-1111111111]_srl16_n_0 ;
  wire w_pop;
  wire w_pop_part;
  wire [3:0]w_read_fifo_addr;
  wire w_ready;
  wire wc_fifo_empty;
  wire wm_allow;
  wire wm_port;
  wire [3:0]\wr_port_data_info_reg[0][BE][3]_0 ;
  wire wr_port_data_valid_i_reg_0;

  design_1_system_cache_0_0_sc_srl_fifo_counter__parameterized7_6 FIFO_BIP_Pointer
       (.ACLK(ACLK),
        .\Gen_Port_Ready[0].Use_Slow_Port.Wr_FF_Inst (\Gen_Port_Ready[0].Use_Slow_Port.Wr_FF_Inst ),
        .Q(ARESET_I),
        .S0_AXI_AWVALID(S0_AXI_AWVALID),
        .bip_read_fifo_addr(bip_read_fifo_addr),
        .queue_full(queue_full),
        .queue_pop7_out(queue_pop7_out),
        .queue_push9_out(queue_push9_out));
  design_1_system_cache_0_0_sc_srl_fifo_counter__parameterized7_7 FIFO_BP_Pointer
       (.ACLK(ACLK),
        .Q(ARESET_I),
        .S0_AXI_BREADY(S0_AXI_BREADY),
        .S0_AXI_BRESP(S0_AXI_BRESP),
        .\S_AXI_BRESP_reg[0] (FIFO_BP_Pointer_n_9),
        .\S_AXI_BRESP_reg[1] (FIFO_BP_Pointer_n_8),
        .S_AXI_BVALID_I_reg(FIFO_BP_Pointer_n_5),
        .S_AXI_BVALID_I_reg_0(S0_AXI_BVALID),
        .\Use_FPGA.Almost_Empty_Inst_0 (FIFO_BP_Pointer_n_6),
        .\Use_Reg_Ctrl.queue_exist_i_reg (\Use_Reg_Ctrl.queue_exist_i_reg ),
        .\arbiter_bp_push_i_reg[0][Valid] (\bp_fifo_mem_reg[15][Early][-1111111111]_srl16_n_0 ),
        .\arbiter_bp_push_i_reg[0][Valid]_0 (\bp_fifo_mem_reg[15][Barrier][-1111111111]_srl16_n_0 ),
        .\arbiter_bp_push_prt[0][Valid] (\arbiter_bp_push_prt[0][Valid] ),
        .bp_read_fifo_addr(bp_read_fifo_addr),
        .\bs_port_num_reg[0] (\bs_port_num_reg[0] ),
        .\bs_src_reg[0] (\bs_src_reg[0] ),
        .\bs_src_reg[0]_0 (\bs_src_reg[0]_0 ),
        .queue_pop7_out(queue_pop7_out),
        .update_ext_bresp_any(update_ext_bresp_any),
        .wc_fifo_empty(wc_fifo_empty));
  design_1_system_cache_0_0_sc_srl_fifo_counter__parameterized1_8 FIFO_WC_Pointer
       (.ACLK(ACLK),
        .Q(ARESET_I),
        .S0_AXI_WLAST(S0_AXI_WLAST),
        .\Use_FPGA.Full_Inst (FIFO_W_Pointer_n_7),
        .\arbiter_bp_push_i_reg[0][Valid] (\bp_fifo_mem_reg[15][Barrier][-1111111111]_srl16_n_0 ),
        .\bs_port_num_reg[0] (FIFO_BP_Pointer_n_6),
        .queue_pop7_out(queue_pop7_out),
        .queue_push(queue_push),
        .wc_fifo_empty(wc_fifo_empty));
  design_1_system_cache_0_0_sc_srl_fifo_counter_9 FIFO_W_Pointer
       (.ACLK(ACLK),
        .Q(ARESET_I),
        .S0_AXI_WLAST(S0_AXI_WLAST),
        .S0_AXI_WREADY(S0_AXI_WREADY),
        .S0_AXI_WVALID(S0_AXI_WVALID),
        .\lu_check_info_reg[Port_Num][0] (\lu_check_info_reg[Port_Num][0] ),
        .queue_push(queue_push),
        .sel(FIFO_W_Pointer_n_7),
        .w_pop(w_pop),
        .w_read_fifo_addr(w_read_fifo_addr),
        .wr_port_data_valid_i_reg(FIFO_W_Pointer_n_4),
        .wr_port_data_valid_i_reg_0(wr_port_data_valid_i_reg_0));
  design_1_system_cache_0_0_sc_s_axi_r_channel_10 R_Channel
       (.ACLK(ACLK),
        .\Gen_Port_Ready[0].Use_Slow_Port.Rd_FF_Inst (\Gen_Port_Ready[0].Use_Slow_Port.Rd_FF_Inst ),
        .M0_AXI_RRESP(M0_AXI_RRESP),
        .Q(ARESET_I),
        .S0_AXI_ARID(S0_AXI_ARID),
        .S0_AXI_ARREADY(S0_AXI_ARREADY),
        .S0_AXI_ARVALID(S0_AXI_ARVALID),
        .S0_AXI_RID(S0_AXI_RID),
        .S0_AXI_RREADY(S0_AXI_RREADY),
        .S0_AXI_RVALID(S0_AXI_RVALID),
        .\Use_FPGA.Use_Normal_Line.Line_Fit_Inst (read_req_ready),
        .\Use_FPGA_Flag_Hit.Full_Inst_0 (\Use_FPGA_Flag_Hit.Full_Inst ),
        .\Use_FPGA_Flag_Hit.Full_Inst_1 (\Use_FPGA_Flag_Hit.Full_Inst_0 ),
        .\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0]_0 (\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0] ),
        .\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[2]_0 (\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[2] ),
        .\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_0 (\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3] ),
        .\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_1 (Q),
        .\Use_Rd_Ctrl_Pipeline.ri_hit_reg_0 (\Use_Rd_Ctrl_Pipeline.ri_hit_reg ),
        .access_piperun(access_piperun),
        .\arb_prohibit_quick_reg[0] (\arb_prohibit_quick_reg[0] ),
        .\lookup_read_data_info[0,0][Valid] (\lookup_read_data_info[0,0][Valid] ),
        .\lookup_read_data_new[0,0][Hit] (\lookup_read_data_new[0,0][Hit] ),
        .\lookup_read_data_new[0,0][Valid] (\lookup_read_data_new[0,0][Valid] ),
        .lud_addr_pipeline_full(lud_addr_pipeline_full),
        .lud_addr_pipeline_full0(lud_addr_pipeline_full0),
        .\lud_mem_port_one_hot_reg[1] (\lud_mem_port_one_hot_reg[1] ),
        .lud_reg_port_num(lud_reg_port_num),
        .lud_reg_valid_reg(lud_reg_valid_reg),
        .lud_reg_valid_reg_0(lud_reg_valid_reg_0),
        .new_read_data_resp(new_read_data_resp),
        .p_57_in(p_57_in),
        .r_hit_last(r_hit_last),
        .\r_hit_read_fifo_addr_reg[0]_0 (E),
        .\r_hit_write_fifo_addr_reg[3]_0 (\r_hit_write_fifo_addr_reg[3] ),
        .\r_hit_write_fifo_addr_reg[3]_1 (\r_hit_write_fifo_addr_reg[3]_0 ),
        .\r_miss_fifo_len_reg[3]_0 (\r_miss_fifo_len_reg[3] ),
        .r_miss_full_fifo_addr(r_miss_full_fifo_addr),
        .r_miss_last(r_miss_last),
        .r_push_safe(r_push_safe),
        .r_read_fifo_addr(r_read_fifo_addr),
        .r_write_fifo_addr(r_write_fifo_addr),
        .\rd_port_access[0][Valid] (\rd_port_access[0][Valid] ),
        .rd_port_ready_cmb_0(rd_port_ready_cmb_0),
        .\read_data_status[0,1][Hit_Almost_Full] (\read_data_status[0,1][Hit_Almost_Full] ),
        .\read_info_status[0,0][Almost_Full] (\read_info_status[0,0][Almost_Full] ),
        .\read_info_status[0,0][Full] (\read_info_status[0,0][Full] ),
        .rip_last(rip_last),
        .\update_rd_offset_cnt_reg[0] (\update_rd_offset_cnt_reg[0] ),
        .\update_read_data_info[0,0][Valid] (\update_read_data_info[0,0][Valid] ));
  (* C_CE_LOW = "1'b0" *) 
  (* C_IS_SET = "1'b0" *) 
  (* C_NUM_CE = "1" *) 
  (* C_TARGET = "3" *) 
  (* DONT_TOUCH *) 
  design_1_system_cache_0_0_bit_reg_ce__10 Reset_Inst
       (.CE(1'b1),
        .CLK(ACLK),
        .D(ARESET),
        .Q(ARESET_I),
        .SR(1'b0));
  FDRE \S_AXI_BID_reg[0] 
       (.C(ACLK),
        .CE(queue_pop7_out),
        .D(\bip_fifo_mem_reg[15][ID][0]_srl16_n_0 ),
        .Q(S0_AXI_BID),
        .R(ARESET_I));
  FDRE \S_AXI_BRESP_reg[0] 
       (.C(ACLK),
        .CE(1'b1),
        .D(FIFO_BP_Pointer_n_9),
        .Q(S0_AXI_BRESP[0]),
        .R(1'b0));
  FDRE \S_AXI_BRESP_reg[1] 
       (.C(ACLK),
        .CE(1'b1),
        .D(FIFO_BP_Pointer_n_8),
        .Q(S0_AXI_BRESP[1]),
        .R(1'b0));
  FDRE S_AXI_BVALID_I_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(FIFO_BP_Pointer_n_5),
        .Q(S0_AXI_BVALID),
        .R(ARESET_I));
  LUT2 #(
    .INIT(4'hE)) 
    \Using_FPGA.MUXCY_I_i_1__54 
       (.I0(wr_port_data_valid_i_reg_0),
        .I1(\lu_check_info_reg[Port_Num][0]_0 ),
        .O(\The_Compare[0].sel_reg ));
  design_1_system_cache_0_0_carry_and_11 WC_And_Inst2
       (.E(w_pop),
        .lopt(lopt_2),
        .lopt_1(lopt_3),
        .lopt_2(lopt_4),
        .w_pop_part(w_pop_part));
  design_1_system_cache_0_0_carry_or_12 WC_Or_Inst1
       (.S_8(S_8),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(wr_port_data_valid_i_reg_0),
        .lopt_3(lopt_2),
        .lopt_4(lopt_3),
        .lopt_5(lopt_4),
        .w_ready(w_ready));
  design_1_system_cache_0_0_carry_or_n_13 WC_Or_Inst2
       (.lopt(lopt),
        .lopt_1(lopt_1),
        .w_pop_part(w_pop_part),
        .w_ready(w_ready),
        .wr_port_data_valid_i_reg(wr_port_data_valid_i_reg_0));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/bip_fifo_mem_reg[15][ID] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/bip_fifo_mem_reg[15][ID][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \bip_fifo_mem_reg[15][ID][0]_srl16 
       (.A0(bip_read_fifo_addr[0]),
        .A1(bip_read_fifo_addr[1]),
        .A2(bip_read_fifo_addr[2]),
        .A3(bip_read_fifo_addr[3]),
        .CE(queue_push9_out),
        .CLK(ACLK),
        .D(S0_AXI_AWID),
        .Q(\bip_fifo_mem_reg[15][ID][0]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/bp_fifo_mem_reg[15][Barrier] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/bp_fifo_mem_reg[15][Barrier][-1111111111]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \bp_fifo_mem_reg[15][Barrier][-1111111111]_srl16 
       (.A0(bp_read_fifo_addr[0]),
        .A1(bp_read_fifo_addr[1]),
        .A2(bp_read_fifo_addr[2]),
        .A3(bp_read_fifo_addr[3]),
        .CE(\arbiter_bp_push_prt[0][Valid] ),
        .CLK(ACLK),
        .D(\arbiter_bp_push_prt[0][Barrier] ),
        .Q(\bp_fifo_mem_reg[15][Barrier][-1111111111]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/bp_fifo_mem_reg[15][Early] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/bp_fifo_mem_reg[15][Early][-1111111111]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \bp_fifo_mem_reg[15][Early][-1111111111]_srl16 
       (.A0(bp_read_fifo_addr[0]),
        .A1(bp_read_fifo_addr[1]),
        .A2(bp_read_fifo_addr[2]),
        .A3(bp_read_fifo_addr[3]),
        .CE(\arbiter_bp_push_prt[0][Valid] ),
        .CLK(ACLK),
        .D(\arbiter_bp_push_prt[0][Early] ),
        .Q(\bp_fifo_mem_reg[15][Early][-1111111111]_srl16_n_0 ));
  LUT4 #(
    .INIT(16'hE200)) 
    \update_wma_strb[0]_i_2 
       (.I0(\update_wma_data_reg[24] [0]),
        .I1(wm_port),
        .I2(\wr_port_data_info_reg[0][BE][3]_0 [0]),
        .I3(wm_allow),
        .O(\update_wma_strb_reg[0] ));
  LUT4 #(
    .INIT(16'hE200)) 
    \update_wma_strb[1]_i_2 
       (.I0(\update_wma_data_reg[24] [1]),
        .I1(wm_port),
        .I2(\wr_port_data_info_reg[0][BE][3]_0 [1]),
        .I3(wm_allow),
        .O(p_1_in3_in));
  LUT4 #(
    .INIT(16'hE200)) 
    \update_wma_strb[2]_i_2 
       (.I0(\update_wma_data_reg[24] [2]),
        .I1(wm_port),
        .I2(\wr_port_data_info_reg[0][BE][3]_0 [2]),
        .I3(wm_allow),
        .O(p_2_in));
  LUT4 #(
    .INIT(16'hE200)) 
    \update_wma_strb[3]_i_2 
       (.I0(\update_wma_data_reg[24] [3]),
        .I1(wm_port),
        .I2(\wr_port_data_info_reg[0][BE][3]_0 [3]),
        .I3(wm_allow),
        .O(p_3_in));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][BE] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][BE][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][BE][0]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S0_AXI_WSTRB[0]),
        .Q(fit_vec[0]));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][BE] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][BE][1]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][BE][1]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S0_AXI_WSTRB[1]),
        .Q(fit_vec[1]));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][BE] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][BE][2]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][BE][2]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S0_AXI_WSTRB[2]),
        .Q(fit_vec[2]));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][BE] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][BE][3]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][BE][3]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S0_AXI_WSTRB[3]),
        .Q(fit_vec[3]));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][0]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[0]),
        .Q(\w_fifo_mem_reg[15][Data][0]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][10]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][10]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[10]),
        .Q(\w_fifo_mem_reg[15][Data][10]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][11]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][11]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[11]),
        .Q(\w_fifo_mem_reg[15][Data][11]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][12]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][12]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[12]),
        .Q(\w_fifo_mem_reg[15][Data][12]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][13]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][13]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[13]),
        .Q(\w_fifo_mem_reg[15][Data][13]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][14]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][14]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[14]),
        .Q(\w_fifo_mem_reg[15][Data][14]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][15]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][15]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[15]),
        .Q(\w_fifo_mem_reg[15][Data][15]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][16]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][16]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[16]),
        .Q(\w_fifo_mem_reg[15][Data][16]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][17]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][17]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[17]),
        .Q(\w_fifo_mem_reg[15][Data][17]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][18]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][18]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[18]),
        .Q(\w_fifo_mem_reg[15][Data][18]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][19]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][19]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[19]),
        .Q(\w_fifo_mem_reg[15][Data][19]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][1]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][1]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[1]),
        .Q(\w_fifo_mem_reg[15][Data][1]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][20]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][20]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[20]),
        .Q(\w_fifo_mem_reg[15][Data][20]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][21]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][21]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[21]),
        .Q(\w_fifo_mem_reg[15][Data][21]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][22]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][22]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[22]),
        .Q(\w_fifo_mem_reg[15][Data][22]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][23]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][23]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[23]),
        .Q(\w_fifo_mem_reg[15][Data][23]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][24]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][24]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[24]),
        .Q(\w_fifo_mem_reg[15][Data][24]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][25]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][25]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[25]),
        .Q(\w_fifo_mem_reg[15][Data][25]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][26]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][26]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[26]),
        .Q(\w_fifo_mem_reg[15][Data][26]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][27]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][27]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[27]),
        .Q(\w_fifo_mem_reg[15][Data][27]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][28]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][28]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[28]),
        .Q(\w_fifo_mem_reg[15][Data][28]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][29]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][29]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[29]),
        .Q(\w_fifo_mem_reg[15][Data][29]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][2]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][2]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[2]),
        .Q(\w_fifo_mem_reg[15][Data][2]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][30]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][30]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[30]),
        .Q(\w_fifo_mem_reg[15][Data][30]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][31]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][31]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[31]),
        .Q(\w_fifo_mem_reg[15][Data][31]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][3]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][3]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[3]),
        .Q(\w_fifo_mem_reg[15][Data][3]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][4]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][4]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[4]),
        .Q(\w_fifo_mem_reg[15][Data][4]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][5]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][5]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[5]),
        .Q(\w_fifo_mem_reg[15][Data][5]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][6]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][6]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[6]),
        .Q(\w_fifo_mem_reg[15][Data][6]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][7]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][7]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[7]),
        .Q(\w_fifo_mem_reg[15][Data][7]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][8]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][8]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[8]),
        .Q(\w_fifo_mem_reg[15][Data][8]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Data][9]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][9]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S0_AXI_WDATA[9]),
        .Q(\w_fifo_mem_reg[15][Data][9]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Last] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/w_fifo_mem_reg[15][Last][-1111111111]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Last][-1111111111]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S0_AXI_WLAST),
        .Q(\w_fifo_mem_reg[15][Last][-1111111111]_srl16_n_0 ));
  FDRE \wr_port_data_info_reg[0][BE][0] 
       (.C(ACLK),
        .CE(w_pop),
        .D(fit_vec[0]),
        .Q(\update_wma_data_reg[24] [0]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][BE][1] 
       (.C(ACLK),
        .CE(w_pop),
        .D(fit_vec[1]),
        .Q(\update_wma_data_reg[24] [1]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][BE][2] 
       (.C(ACLK),
        .CE(w_pop),
        .D(fit_vec[2]),
        .Q(\update_wma_data_reg[24] [2]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][BE][3] 
       (.C(ACLK),
        .CE(w_pop),
        .D(fit_vec[3]),
        .Q(\update_wma_data_reg[24] [3]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][0] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][0]_srl16_n_0 ),
        .Q(\update_wma_data_reg[31] [0]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][10] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][10]_srl16_n_0 ),
        .Q(\update_wma_data_reg[31] [10]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][11] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][11]_srl16_n_0 ),
        .Q(\update_wma_data_reg[31] [11]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][12] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][12]_srl16_n_0 ),
        .Q(\update_wma_data_reg[31] [12]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][13] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][13]_srl16_n_0 ),
        .Q(\update_wma_data_reg[31] [13]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][14] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][14]_srl16_n_0 ),
        .Q(\update_wma_data_reg[31] [14]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][15] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][15]_srl16_n_0 ),
        .Q(\update_wma_data_reg[31] [15]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][16] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][16]_srl16_n_0 ),
        .Q(\update_wma_data_reg[31] [16]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][17] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][17]_srl16_n_0 ),
        .Q(\update_wma_data_reg[31] [17]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][18] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][18]_srl16_n_0 ),
        .Q(\update_wma_data_reg[31] [18]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][19] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][19]_srl16_n_0 ),
        .Q(\update_wma_data_reg[31] [19]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][1] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][1]_srl16_n_0 ),
        .Q(\update_wma_data_reg[31] [1]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][20] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][20]_srl16_n_0 ),
        .Q(\update_wma_data_reg[31] [20]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][21] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][21]_srl16_n_0 ),
        .Q(\update_wma_data_reg[31] [21]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][22] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][22]_srl16_n_0 ),
        .Q(\update_wma_data_reg[31] [22]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][23] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][23]_srl16_n_0 ),
        .Q(\update_wma_data_reg[31] [23]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][24] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][24]_srl16_n_0 ),
        .Q(\update_wma_data_reg[31] [24]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][25] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][25]_srl16_n_0 ),
        .Q(\update_wma_data_reg[31] [25]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][26] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][26]_srl16_n_0 ),
        .Q(\update_wma_data_reg[31] [26]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][27] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][27]_srl16_n_0 ),
        .Q(\update_wma_data_reg[31] [27]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][28] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][28]_srl16_n_0 ),
        .Q(\update_wma_data_reg[31] [28]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][29] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][29]_srl16_n_0 ),
        .Q(\update_wma_data_reg[31] [29]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][2] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][2]_srl16_n_0 ),
        .Q(\update_wma_data_reg[31] [2]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][30] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][30]_srl16_n_0 ),
        .Q(\update_wma_data_reg[31] [30]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][31] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][31]_srl16_n_0 ),
        .Q(\update_wma_data_reg[31] [31]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][3] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][3]_srl16_n_0 ),
        .Q(\update_wma_data_reg[31] [3]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][4] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][4]_srl16_n_0 ),
        .Q(\update_wma_data_reg[31] [4]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][5] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][5]_srl16_n_0 ),
        .Q(\update_wma_data_reg[31] [5]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][6] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][6]_srl16_n_0 ),
        .Q(\update_wma_data_reg[31] [6]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][7] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][7]_srl16_n_0 ),
        .Q(\update_wma_data_reg[31] [7]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][8] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][8]_srl16_n_0 ),
        .Q(\update_wma_data_reg[31] [8]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][9] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][9]_srl16_n_0 ),
        .Q(\update_wma_data_reg[31] [9]),
        .R(ARESET_I));
  FDSE wr_port_data_last_i_reg
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Last][-1111111111]_srl16_n_0 ),
        .Q(\access_data_info[0,0][Last] ),
        .S(ARESET_I));
  FDRE wr_port_data_valid_i_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(FIFO_W_Pointer_n_4),
        .Q(wr_port_data_valid_i_reg_0),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "sc_s_axi_opt_interface" *) 
module design_1_system_cache_0_0_sc_s_axi_opt_interface__parameterized1
   (wr_port_data_valid_i_reg_0,
    E,
    read_req_ready,
    \r_hit_write_fifo_addr_reg[3] ,
    \r_hit_write_fifo_addr_reg[3]_0 ,
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3] ,
    \r_miss_fifo_len_reg[3] ,
    \Use_FPGA_2.S_AXI_RVALID_reg ,
    \read_data_status[0,1][Hit_Almost_Full] ,
    queue_full,
    S1_AXI_RID,
    rip_last_3,
    S1_AXI_BID,
    \access_data_info[0,1][Last] ,
    S1_AXI_RVALID,
    S1_AXI_BVALID,
    Q,
    \r_miss_read_fifo_addr_reg[1] ,
    S1_AXI_ARREADY,
    \rd_port_access[1][Valid] ,
    S1_AXI_WREADY,
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[2] ,
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0] ,
    r_read_fifo_addr_4,
    \Use_FPGA_2.S_AXI_RVALID_reg_0 ,
    \Use_Reg_Ctrl.queue_exist_i_reg ,
    update_wr_miss_rs_last,
    D,
    lud_write_hit_done_reg,
    lud_addr_pipeline_full_reg,
    S,
    S_5,
    A,
    A_N,
    DATA_INA,
    \update_rd_offset_cnt_reg[0] ,
    dvm_2nd_part_reg,
    \S1_AXI_RRESP[1] ,
    \Use_Reg_Ctrl.queue_exist_i_reg_0 ,
    \arb_prohibit_quick_reg[1] ,
    S1_AXI_BRESP,
    \update_wma_data_reg[24] ,
    ACLK,
    ARESET,
    S1_AXI_WVALID,
    S_9,
    \lookup_read_data_new[0,1][Valid] ,
    S1_AXI_RREADY,
    \lookup_read_data_info[0,1][Valid] ,
    \update_read_data_info[0,1][Valid] ,
    S1_AXI_ARID,
    \lookup_read_data_new[0,0][Hit] ,
    queue_push9_out,
    \arbiter_bp_push_prt[1][Valid] ,
    \arbiter_bp_push_prt[1][Early] ,
    \arbiter_bp_push_prt[1][Barrier] ,
    S1_AXI_AWID,
    S1_AXI_WLAST,
    wr_port_data_ready,
    S1_AXI_AWVALID,
    wr_port_ready,
    rd_port_ready,
    S1_AXI_ARVALID,
    \r_hit_read_fifo_addr_reg[0] ,
    \r_miss_read_fifo_addr_reg[0] ,
    update_ext_bresp_any,
    \bs_port_num_reg[0] ,
    S1_AXI_BREADY,
    wm_port,
    \access_data_info[0,0][Valid] ,
    \access_data_info[0,0][Last] ,
    \wr_port_data_info_reg[0][Data][31]_0 ,
    lu_check_valid,
    \lu_check_info_reg[Port_Num][0] ,
    \read_data_status[0,0][Hit_Full] ,
    lud_reg_port_num,
    \lu_mem_info_reg[Port_Num][0] ,
    \read_info_status[0,0][Full] ,
    p_162_in,
    lookup_restart_mem,
    \read_info_status[0,0][Almost_Full] ,
    M0_AXI_RRESP,
    access_piperun,
    rd_port_ready_cmb_1,
    S1_AXI_WSTRB,
    S1_AXI_WDATA,
    \bs_src_reg[0] ,
    \bs_src_reg[0]_0 );
  output wr_port_data_valid_i_reg_0;
  output [0:0]E;
  output read_req_ready;
  output [0:0]\r_hit_write_fifo_addr_reg[3] ;
  output \r_hit_write_fifo_addr_reg[3]_0 ;
  output \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3] ;
  output \r_miss_fifo_len_reg[3] ;
  output \Use_FPGA_2.S_AXI_RVALID_reg ;
  output \read_data_status[0,1][Hit_Almost_Full] ;
  output queue_full;
  output [0:0]S1_AXI_RID;
  output rip_last_3;
  output [0:0]S1_AXI_BID;
  output \access_data_info[0,1][Last] ;
  output S1_AXI_RVALID;
  output S1_AXI_BVALID;
  output [3:0]Q;
  output [1:0]\r_miss_read_fifo_addr_reg[1] ;
  output S1_AXI_ARREADY;
  output \rd_port_access[1][Valid] ;
  output S1_AXI_WREADY;
  output \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[2] ;
  output \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0] ;
  output [1:0]r_read_fifo_addr_4;
  output [3:0]\Use_FPGA_2.S_AXI_RVALID_reg_0 ;
  output \Use_Reg_Ctrl.queue_exist_i_reg ;
  output update_wr_miss_rs_last;
  output [31:0]D;
  output lud_write_hit_done_reg;
  output lud_addr_pipeline_full_reg;
  output S;
  output S_5;
  output A;
  output A_N;
  output [31:0]DATA_INA;
  output \update_rd_offset_cnt_reg[0] ;
  output dvm_2nd_part_reg;
  output [1:0]\S1_AXI_RRESP[1] ;
  output \Use_Reg_Ctrl.queue_exist_i_reg_0 ;
  output \arb_prohibit_quick_reg[1] ;
  output [1:0]S1_AXI_BRESP;
  output [3:0]\update_wma_data_reg[24] ;
  input ACLK;
  input ARESET;
  input S1_AXI_WVALID;
  input S_9;
  input \lookup_read_data_new[0,1][Valid] ;
  input S1_AXI_RREADY;
  input \lookup_read_data_info[0,1][Valid] ;
  input \update_read_data_info[0,1][Valid] ;
  input [0:0]S1_AXI_ARID;
  input \lookup_read_data_new[0,0][Hit] ;
  input queue_push9_out;
  input \arbiter_bp_push_prt[1][Valid] ;
  input \arbiter_bp_push_prt[1][Early] ;
  input \arbiter_bp_push_prt[1][Barrier] ;
  input [0:0]S1_AXI_AWID;
  input S1_AXI_WLAST;
  input wr_port_data_ready;
  input S1_AXI_AWVALID;
  input wr_port_ready;
  input rd_port_ready;
  input S1_AXI_ARVALID;
  input \r_hit_read_fifo_addr_reg[0] ;
  input \r_miss_read_fifo_addr_reg[0] ;
  input update_ext_bresp_any;
  input \bs_port_num_reg[0] ;
  input S1_AXI_BREADY;
  input wm_port;
  input \access_data_info[0,0][Valid] ;
  input \access_data_info[0,0][Last] ;
  input [31:0]\wr_port_data_info_reg[0][Data][31]_0 ;
  input lu_check_valid;
  input \lu_check_info_reg[Port_Num][0] ;
  input \read_data_status[0,0][Hit_Full] ;
  input lud_reg_port_num;
  input \lu_mem_info_reg[Port_Num][0] ;
  input \read_info_status[0,0][Full] ;
  input p_162_in;
  input lookup_restart_mem;
  input \read_info_status[0,0][Almost_Full] ;
  input [1:0]M0_AXI_RRESP;
  input access_piperun;
  input rd_port_ready_cmb_1;
  input [3:0]S1_AXI_WSTRB;
  input [31:0]S1_AXI_WDATA;
  input \bs_src_reg[0] ;
  input \bs_src_reg[0]_0 ;

  wire A;
  wire ACLK;
  wire ARESET;
  wire ARESET_I;
  wire A_N;
  wire [31:0]D;
  wire [31:0]DATA_INA;
  wire [0:0]E;
  wire FIFO_BP_Pointer_n_5;
  wire FIFO_BP_Pointer_n_6;
  wire FIFO_BP_Pointer_n_8;
  wire FIFO_BP_Pointer_n_9;
  wire FIFO_W_Pointer_n_4;
  wire FIFO_W_Pointer_n_7;
  wire [1:0]M0_AXI_RRESP;
  wire [3:0]Q;
  wire S;
  wire [0:0]S1_AXI_ARID;
  wire S1_AXI_ARREADY;
  wire S1_AXI_ARVALID;
  wire [0:0]S1_AXI_AWID;
  wire S1_AXI_AWVALID;
  wire [0:0]S1_AXI_BID;
  wire S1_AXI_BREADY;
  wire [1:0]S1_AXI_BRESP;
  wire S1_AXI_BVALID;
  wire [0:0]S1_AXI_RID;
  wire S1_AXI_RREADY;
  wire [1:0]\S1_AXI_RRESP[1] ;
  wire S1_AXI_RVALID;
  wire [31:0]S1_AXI_WDATA;
  wire S1_AXI_WLAST;
  wire S1_AXI_WREADY;
  wire [3:0]S1_AXI_WSTRB;
  wire S1_AXI_WVALID;
  wire S_5;
  wire S_9;
  wire \Use_FPGA_2.S_AXI_RVALID_reg ;
  wire [3:0]\Use_FPGA_2.S_AXI_RVALID_reg_0 ;
  wire \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0] ;
  wire \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[2] ;
  wire \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3] ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg_0 ;
  wire \access_data_info[0,0][Last] ;
  wire \access_data_info[0,0][Valid] ;
  wire [31:0]\access_data_info[0,1][Data] ;
  wire \access_data_info[0,1][Last] ;
  wire access_piperun;
  wire \arb_prohibit_quick_reg[1] ;
  wire \arbiter_bp_push_prt[1][Barrier] ;
  wire \arbiter_bp_push_prt[1][Early] ;
  wire \arbiter_bp_push_prt[1][Valid] ;
  wire \bip_fifo_mem_reg[15][ID][0]_srl16_n_0 ;
  wire [3:0]bip_read_fifo_addr;
  wire \bp_fifo_mem_reg[15][Barrier][-1111111111]_srl16_n_0 ;
  wire \bp_fifo_mem_reg[15][Early][-1111111111]_srl16_n_0 ;
  wire [3:0]bp_read_fifo_addr;
  wire \bs_port_num_reg[0] ;
  wire \bs_src_reg[0] ;
  wire \bs_src_reg[0]_0 ;
  wire dvm_2nd_part_reg;
  wire [3:0]fit_vec;
  wire \lookup_read_data_info[0,1][Valid] ;
  wire \lookup_read_data_new[0,0][Hit] ;
  wire \lookup_read_data_new[0,1][Valid] ;
  wire lookup_restart_mem;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire \lu_check_info_reg[Port_Num][0] ;
  wire lu_check_valid;
  wire \lu_mem_info_reg[Port_Num][0] ;
  wire lud_addr_pipeline_full_reg;
  wire lud_reg_port_num;
  wire lud_write_hit_done_reg;
  wire p_162_in;
  wire queue_full;
  wire queue_pop7_out;
  wire queue_push;
  wire queue_push9_out;
  wire \r_hit_read_fifo_addr_reg[0] ;
  wire [0:0]\r_hit_write_fifo_addr_reg[3] ;
  wire \r_hit_write_fifo_addr_reg[3]_0 ;
  wire \r_miss_fifo_len_reg[3] ;
  wire \r_miss_read_fifo_addr_reg[0] ;
  wire [1:0]\r_miss_read_fifo_addr_reg[1] ;
  wire [1:0]r_read_fifo_addr_4;
  wire \rd_port_access[1][Valid] ;
  wire rd_port_ready;
  wire rd_port_ready_cmb_1;
  wire \read_data_status[0,0][Hit_Full] ;
  wire \read_data_status[0,1][Hit_Almost_Full] ;
  wire \read_info_status[0,0][Almost_Full] ;
  wire \read_info_status[0,0][Full] ;
  wire read_req_ready;
  wire rip_last_3;
  wire update_ext_bresp_any;
  wire \update_rd_offset_cnt_reg[0] ;
  wire \update_read_data_info[0,1][Valid] ;
  wire [3:0]\update_wma_data_reg[24] ;
  wire update_wr_miss_rs_last;
  wire \w_fifo_mem_reg[15][Data][0]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][10]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][11]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][12]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][13]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][14]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][15]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][16]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][17]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][18]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][19]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][1]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][20]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][21]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][22]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][23]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][24]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][25]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][26]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][27]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][28]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][29]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][2]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][30]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][31]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][3]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][4]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][5]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][6]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][7]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][8]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Data][9]_srl16_n_0 ;
  wire \w_fifo_mem_reg[15][Last][-1111111111]_srl16_n_0 ;
  wire w_pop;
  wire w_pop_part;
  wire [3:0]w_read_fifo_addr;
  wire w_ready;
  wire wc_fifo_empty;
  wire wm_port;
  wire [31:0]\wr_port_data_info_reg[0][Data][31]_0 ;
  wire wr_port_data_ready;
  wire wr_port_data_valid_i_reg_0;
  wire wr_port_ready;

  design_1_system_cache_0_0_sc_srl_fifo_counter__parameterized7 FIFO_BIP_Pointer
       (.ACLK(ACLK),
        .Q(ARESET_I),
        .S1_AXI_AWVALID(S1_AXI_AWVALID),
        .\Use_FPGA.Almost_Full_Inst_0 (queue_full),
        .bip_read_fifo_addr(bip_read_fifo_addr),
        .dvm_2nd_part_reg(dvm_2nd_part_reg),
        .queue_pop7_out(queue_pop7_out),
        .queue_push9_out(queue_push9_out),
        .wr_port_ready(wr_port_ready));
  design_1_system_cache_0_0_sc_srl_fifo_counter__parameterized7_0 FIFO_BP_Pointer
       (.ACLK(ACLK),
        .Q(ARESET_I),
        .S1_AXI_BREADY(S1_AXI_BREADY),
        .S1_AXI_BRESP(S1_AXI_BRESP),
        .\S_AXI_BRESP_reg[0] (FIFO_BP_Pointer_n_9),
        .\S_AXI_BRESP_reg[1] (FIFO_BP_Pointer_n_8),
        .S_AXI_BVALID_I_reg(FIFO_BP_Pointer_n_5),
        .S_AXI_BVALID_I_reg_0(S1_AXI_BVALID),
        .\Use_FPGA.Almost_Empty_Inst_0 (FIFO_BP_Pointer_n_6),
        .\Use_Reg_Ctrl.queue_exist_i_reg (\Use_Reg_Ctrl.queue_exist_i_reg_0 ),
        .\arbiter_bp_push_i_reg[1][Valid] (\bp_fifo_mem_reg[15][Early][-1111111111]_srl16_n_0 ),
        .\arbiter_bp_push_i_reg[1][Valid]_0 (\bp_fifo_mem_reg[15][Barrier][-1111111111]_srl16_n_0 ),
        .\arbiter_bp_push_prt[1][Valid] (\arbiter_bp_push_prt[1][Valid] ),
        .bp_read_fifo_addr(bp_read_fifo_addr),
        .\bs_port_num_reg[0] (\bs_port_num_reg[0] ),
        .\bs_src_reg[0] (\bs_src_reg[0] ),
        .\bs_src_reg[0]_0 (\bs_src_reg[0]_0 ),
        .queue_pop7_out(queue_pop7_out),
        .update_ext_bresp_any(update_ext_bresp_any),
        .wc_fifo_empty(wc_fifo_empty));
  design_1_system_cache_0_0_sc_srl_fifo_counter__parameterized1 FIFO_WC_Pointer
       (.ACLK(ACLK),
        .Q(ARESET_I),
        .S1_AXI_WLAST(S1_AXI_WLAST),
        .\Use_FPGA.Full_Inst (FIFO_W_Pointer_n_7),
        .\arbiter_bp_push_i_reg[1][Valid] (\bp_fifo_mem_reg[15][Barrier][-1111111111]_srl16_n_0 ),
        .\bs_port_num_reg[0] (FIFO_BP_Pointer_n_6),
        .queue_pop7_out(queue_pop7_out),
        .queue_push(queue_push),
        .wc_fifo_empty(wc_fifo_empty));
  design_1_system_cache_0_0_sc_srl_fifo_counter FIFO_W_Pointer
       (.ACLK(ACLK),
        .Q(ARESET_I),
        .S1_AXI_WLAST(S1_AXI_WLAST),
        .S1_AXI_WREADY(S1_AXI_WREADY),
        .S1_AXI_WVALID(S1_AXI_WVALID),
        .queue_push(queue_push),
        .sel(FIFO_W_Pointer_n_7),
        .w_pop(w_pop),
        .w_read_fifo_addr(w_read_fifo_addr),
        .wr_port_data_ready(wr_port_data_ready),
        .wr_port_data_valid_i_reg(FIFO_W_Pointer_n_4),
        .wr_port_data_valid_i_reg_0(wr_port_data_valid_i_reg_0));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_25__0 
       (.I0(\access_data_info[0,1][Data] [7]),
        .I1(\lu_check_info_reg[Port_Num][0] ),
        .I2(\wr_port_data_info_reg[0][Data][31]_0 [7]),
        .O(DATA_INA[7]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_26__0 
       (.I0(\access_data_info[0,1][Data] [6]),
        .I1(\lu_check_info_reg[Port_Num][0] ),
        .I2(\wr_port_data_info_reg[0][Data][31]_0 [6]),
        .O(DATA_INA[6]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_27__0 
       (.I0(\access_data_info[0,1][Data] [5]),
        .I1(\lu_check_info_reg[Port_Num][0] ),
        .I2(\wr_port_data_info_reg[0][Data][31]_0 [5]),
        .O(DATA_INA[5]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_28__0 
       (.I0(\access_data_info[0,1][Data] [4]),
        .I1(\lu_check_info_reg[Port_Num][0] ),
        .I2(\wr_port_data_info_reg[0][Data][31]_0 [4]),
        .O(DATA_INA[4]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_29__0 
       (.I0(\access_data_info[0,1][Data] [3]),
        .I1(\lu_check_info_reg[Port_Num][0] ),
        .I2(\wr_port_data_info_reg[0][Data][31]_0 [3]),
        .O(DATA_INA[3]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_30__0 
       (.I0(\access_data_info[0,1][Data] [2]),
        .I1(\lu_check_info_reg[Port_Num][0] ),
        .I2(\wr_port_data_info_reg[0][Data][31]_0 [2]),
        .O(DATA_INA[2]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_31__0 
       (.I0(\access_data_info[0,1][Data] [1]),
        .I1(\lu_check_info_reg[Port_Num][0] ),
        .I2(\wr_port_data_info_reg[0][Data][31]_0 [1]),
        .O(DATA_INA[1]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_32__0 
       (.I0(\access_data_info[0,1][Data] [0]),
        .I1(\lu_check_info_reg[Port_Num][0] ),
        .I2(\wr_port_data_info_reg[0][Data][31]_0 [0]),
        .O(DATA_INA[0]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_1 
       (.I0(\access_data_info[0,1][Data] [15]),
        .I1(\lu_check_info_reg[Port_Num][0] ),
        .I2(\wr_port_data_info_reg[0][Data][31]_0 [15]),
        .O(DATA_INA[15]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_2 
       (.I0(\access_data_info[0,1][Data] [14]),
        .I1(\lu_check_info_reg[Port_Num][0] ),
        .I2(\wr_port_data_info_reg[0][Data][31]_0 [14]),
        .O(DATA_INA[14]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_3 
       (.I0(\access_data_info[0,1][Data] [13]),
        .I1(\lu_check_info_reg[Port_Num][0] ),
        .I2(\wr_port_data_info_reg[0][Data][31]_0 [13]),
        .O(DATA_INA[13]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_4 
       (.I0(\access_data_info[0,1][Data] [12]),
        .I1(\lu_check_info_reg[Port_Num][0] ),
        .I2(\wr_port_data_info_reg[0][Data][31]_0 [12]),
        .O(DATA_INA[12]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_5 
       (.I0(\access_data_info[0,1][Data] [11]),
        .I1(\lu_check_info_reg[Port_Num][0] ),
        .I2(\wr_port_data_info_reg[0][Data][31]_0 [11]),
        .O(DATA_INA[11]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_6 
       (.I0(\access_data_info[0,1][Data] [10]),
        .I1(\lu_check_info_reg[Port_Num][0] ),
        .I2(\wr_port_data_info_reg[0][Data][31]_0 [10]),
        .O(DATA_INA[10]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_7 
       (.I0(\access_data_info[0,1][Data] [9]),
        .I1(\lu_check_info_reg[Port_Num][0] ),
        .I2(\wr_port_data_info_reg[0][Data][31]_0 [9]),
        .O(DATA_INA[9]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_8 
       (.I0(\access_data_info[0,1][Data] [8]),
        .I1(\lu_check_info_reg[Port_Num][0] ),
        .I2(\wr_port_data_info_reg[0][Data][31]_0 [8]),
        .O(DATA_INA[8]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_i_1 
       (.I0(\access_data_info[0,1][Data] [23]),
        .I1(\lu_check_info_reg[Port_Num][0] ),
        .I2(\wr_port_data_info_reg[0][Data][31]_0 [23]),
        .O(DATA_INA[23]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_i_2 
       (.I0(\access_data_info[0,1][Data] [22]),
        .I1(\lu_check_info_reg[Port_Num][0] ),
        .I2(\wr_port_data_info_reg[0][Data][31]_0 [22]),
        .O(DATA_INA[22]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_i_3 
       (.I0(\access_data_info[0,1][Data] [21]),
        .I1(\lu_check_info_reg[Port_Num][0] ),
        .I2(\wr_port_data_info_reg[0][Data][31]_0 [21]),
        .O(DATA_INA[21]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_i_4 
       (.I0(\access_data_info[0,1][Data] [20]),
        .I1(\lu_check_info_reg[Port_Num][0] ),
        .I2(\wr_port_data_info_reg[0][Data][31]_0 [20]),
        .O(DATA_INA[20]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_i_5 
       (.I0(\access_data_info[0,1][Data] [19]),
        .I1(\lu_check_info_reg[Port_Num][0] ),
        .I2(\wr_port_data_info_reg[0][Data][31]_0 [19]),
        .O(DATA_INA[19]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_i_6 
       (.I0(\access_data_info[0,1][Data] [18]),
        .I1(\lu_check_info_reg[Port_Num][0] ),
        .I2(\wr_port_data_info_reg[0][Data][31]_0 [18]),
        .O(DATA_INA[18]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_i_7 
       (.I0(\access_data_info[0,1][Data] [17]),
        .I1(\lu_check_info_reg[Port_Num][0] ),
        .I2(\wr_port_data_info_reg[0][Data][31]_0 [17]),
        .O(DATA_INA[17]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_i_8 
       (.I0(\access_data_info[0,1][Data] [16]),
        .I1(\lu_check_info_reg[Port_Num][0] ),
        .I2(\wr_port_data_info_reg[0][Data][31]_0 [16]),
        .O(DATA_INA[16]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_1 
       (.I0(\access_data_info[0,1][Data] [31]),
        .I1(\lu_check_info_reg[Port_Num][0] ),
        .I2(\wr_port_data_info_reg[0][Data][31]_0 [31]),
        .O(DATA_INA[31]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_2 
       (.I0(\access_data_info[0,1][Data] [30]),
        .I1(\lu_check_info_reg[Port_Num][0] ),
        .I2(\wr_port_data_info_reg[0][Data][31]_0 [30]),
        .O(DATA_INA[30]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_3 
       (.I0(\access_data_info[0,1][Data] [29]),
        .I1(\lu_check_info_reg[Port_Num][0] ),
        .I2(\wr_port_data_info_reg[0][Data][31]_0 [29]),
        .O(DATA_INA[29]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_4 
       (.I0(\access_data_info[0,1][Data] [28]),
        .I1(\lu_check_info_reg[Port_Num][0] ),
        .I2(\wr_port_data_info_reg[0][Data][31]_0 [28]),
        .O(DATA_INA[28]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_5 
       (.I0(\access_data_info[0,1][Data] [27]),
        .I1(\lu_check_info_reg[Port_Num][0] ),
        .I2(\wr_port_data_info_reg[0][Data][31]_0 [27]),
        .O(DATA_INA[27]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_6 
       (.I0(\access_data_info[0,1][Data] [26]),
        .I1(\lu_check_info_reg[Port_Num][0] ),
        .I2(\wr_port_data_info_reg[0][Data][31]_0 [26]),
        .O(DATA_INA[26]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_7 
       (.I0(\access_data_info[0,1][Data] [25]),
        .I1(\lu_check_info_reg[Port_Num][0] ),
        .I2(\wr_port_data_info_reg[0][Data][31]_0 [25]),
        .O(DATA_INA[25]));
  LUT3 #(
    .INIT(8'hB8)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_8 
       (.I0(\access_data_info[0,1][Data] [24]),
        .I1(\lu_check_info_reg[Port_Num][0] ),
        .I2(\wr_port_data_info_reg[0][Data][31]_0 [24]),
        .O(DATA_INA[24]));
  design_1_system_cache_0_0_sc_s_axi_r_channel R_Channel
       (.ACLK(ACLK),
        .A_N(A_N),
        .E(E),
        .M0_AXI_RRESP(M0_AXI_RRESP),
        .Q(ARESET_I),
        .S(S),
        .S1_AXI_ARID(S1_AXI_ARID),
        .S1_AXI_ARREADY(S1_AXI_ARREADY),
        .S1_AXI_ARVALID(S1_AXI_ARVALID),
        .S1_AXI_RID(S1_AXI_RID),
        .S1_AXI_RREADY(S1_AXI_RREADY),
        .\S1_AXI_RRESP[1] (\S1_AXI_RRESP[1] ),
        .S1_AXI_RVALID(S1_AXI_RVALID),
        .S_5(S_5),
        .\Use_FPGA.Use_Normal_Line.Line_Fit_Inst (read_req_ready),
        .\Use_FPGA_2.S_AXI_RVALID_reg_0 (\Use_FPGA_2.S_AXI_RVALID_reg ),
        .\Use_FPGA_2.S_AXI_RVALID_reg_1 (\Use_FPGA_2.S_AXI_RVALID_reg_0 ),
        .\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0]_0 (\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0] ),
        .\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[2]_0 (\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[2] ),
        .\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_0 (\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3] ),
        .\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_1 (Q),
        .access_piperun(access_piperun),
        .\arb_prohibit_quick_reg[1] (\arb_prohibit_quick_reg[1] ),
        .\lookup_read_data_info[0,1][Valid] (\lookup_read_data_info[0,1][Valid] ),
        .\lookup_read_data_new[0,0][Hit] (\lookup_read_data_new[0,0][Hit] ),
        .\lookup_read_data_new[0,1][Valid] (\lookup_read_data_new[0,1][Valid] ),
        .lookup_restart_mem(lookup_restart_mem),
        .\lu_mem_info_reg[Port_Num][0] (\lu_mem_info_reg[Port_Num][0] ),
        .lud_addr_pipeline_full_reg(lud_addr_pipeline_full_reg),
        .lud_reg_port_num(lud_reg_port_num),
        .p_162_in(p_162_in),
        .\r_hit_read_fifo_addr_reg[0]_0 (\r_hit_read_fifo_addr_reg[0] ),
        .\r_hit_write_fifo_addr_reg[3]_0 (\r_hit_write_fifo_addr_reg[3] ),
        .\r_hit_write_fifo_addr_reg[3]_1 (\r_hit_write_fifo_addr_reg[3]_0 ),
        .\r_miss_fifo_len_reg[3]_0 (\r_miss_fifo_len_reg[3] ),
        .\r_miss_read_fifo_addr_reg[0]_0 (\r_miss_read_fifo_addr_reg[0] ),
        .\r_miss_read_fifo_addr_reg[1]_0 (\r_miss_read_fifo_addr_reg[1] ),
        .r_read_fifo_addr_4(r_read_fifo_addr_4),
        .\rd_port_access[1][Valid] (\rd_port_access[1][Valid] ),
        .rd_port_ready(rd_port_ready),
        .rd_port_ready_cmb_1(rd_port_ready_cmb_1),
        .\read_data_status[0,0][Hit_Full] (\read_data_status[0,0][Hit_Full] ),
        .\read_data_status[0,1][Hit_Almost_Full] (\read_data_status[0,1][Hit_Almost_Full] ),
        .\read_info_status[0,0][Almost_Full] (\read_info_status[0,0][Almost_Full] ),
        .\read_info_status[0,0][Full] (\read_info_status[0,0][Full] ),
        .rip_last_3(rip_last_3),
        .\update_rd_offset_cnt_reg[0] (\update_rd_offset_cnt_reg[0] ),
        .\update_read_data_info[0,1][Valid] (\update_read_data_info[0,1][Valid] ));
  (* C_CE_LOW = "1'b0" *) 
  (* C_IS_SET = "1'b0" *) 
  (* C_NUM_CE = "1" *) 
  (* C_TARGET = "3" *) 
  (* DONT_TOUCH *) 
  design_1_system_cache_0_0_bit_reg_ce__11 Reset_Inst
       (.CE(1'b1),
        .CLK(ACLK),
        .D(ARESET),
        .Q(ARESET_I),
        .SR(1'b0));
  FDRE \S_AXI_BID_reg[0] 
       (.C(ACLK),
        .CE(queue_pop7_out),
        .D(\bip_fifo_mem_reg[15][ID][0]_srl16_n_0 ),
        .Q(S1_AXI_BID),
        .R(ARESET_I));
  FDRE \S_AXI_BRESP_reg[0] 
       (.C(ACLK),
        .CE(1'b1),
        .D(FIFO_BP_Pointer_n_9),
        .Q(S1_AXI_BRESP[0]),
        .R(1'b0));
  FDRE \S_AXI_BRESP_reg[1] 
       (.C(ACLK),
        .CE(1'b1),
        .D(FIFO_BP_Pointer_n_8),
        .Q(S1_AXI_BRESP[1]),
        .R(1'b0));
  FDRE S_AXI_BVALID_I_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(FIFO_BP_Pointer_n_5),
        .Q(S1_AXI_BVALID),
        .R(ARESET_I));
  (* SOFT_HLUTNM = "soft_lutpair172" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_5 
       (.I0(wr_port_data_valid_i_reg_0),
        .I1(wm_port),
        .I2(\access_data_info[0,0][Valid] ),
        .O(\Use_Reg_Ctrl.queue_exist_i_reg ));
  LUT2 #(
    .INIT(4'hB)) 
    \Using_FPGA.MUXCY_I_i_1__91 
       (.I0(wr_port_data_valid_i_reg_0),
        .I1(\lu_check_info_reg[Port_Num][0] ),
        .O(A));
  design_1_system_cache_0_0_carry_and WC_And_Inst2
       (.E(w_pop),
        .lopt(lopt_2),
        .lopt_1(lopt_3),
        .lopt_2(lopt_4),
        .w_pop_part(w_pop_part));
  design_1_system_cache_0_0_carry_or WC_Or_Inst1
       (.S_9(S_9),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(wr_port_data_valid_i_reg_0),
        .lopt_3(lopt_2),
        .lopt_4(lopt_3),
        .lopt_5(lopt_4),
        .w_ready(w_ready));
  design_1_system_cache_0_0_carry_or_n WC_Or_Inst2
       (.lopt(lopt),
        .lopt_1(lopt_1),
        .w_pop_part(w_pop_part),
        .w_ready(w_ready),
        .wr_port_data_valid_i_reg(wr_port_data_valid_i_reg_0));
  (* srl_bus_name = "U0/\FE/Use_Port_1.AXI_1/bip_fifo_mem_reg[15][ID] " *) 
  (* srl_name = "U0/\FE/Use_Port_1.AXI_1/bip_fifo_mem_reg[15][ID][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \bip_fifo_mem_reg[15][ID][0]_srl16 
       (.A0(bip_read_fifo_addr[0]),
        .A1(bip_read_fifo_addr[1]),
        .A2(bip_read_fifo_addr[2]),
        .A3(bip_read_fifo_addr[3]),
        .CE(queue_push9_out),
        .CLK(ACLK),
        .D(S1_AXI_AWID),
        .Q(\bip_fifo_mem_reg[15][ID][0]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_1.AXI_1/bp_fifo_mem_reg[15][Barrier] " *) 
  (* srl_name = "U0/\FE/Use_Port_1.AXI_1/bp_fifo_mem_reg[15][Barrier][-1111111111]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \bp_fifo_mem_reg[15][Barrier][-1111111111]_srl16 
       (.A0(bp_read_fifo_addr[0]),
        .A1(bp_read_fifo_addr[1]),
        .A2(bp_read_fifo_addr[2]),
        .A3(bp_read_fifo_addr[3]),
        .CE(\arbiter_bp_push_prt[1][Valid] ),
        .CLK(ACLK),
        .D(\arbiter_bp_push_prt[1][Barrier] ),
        .Q(\bp_fifo_mem_reg[15][Barrier][-1111111111]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_1.AXI_1/bp_fifo_mem_reg[15][Early] " *) 
  (* srl_name = "U0/\FE/Use_Port_1.AXI_1/bp_fifo_mem_reg[15][Early][-1111111111]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \bp_fifo_mem_reg[15][Early][-1111111111]_srl16 
       (.A0(bp_read_fifo_addr[0]),
        .A1(bp_read_fifo_addr[1]),
        .A2(bp_read_fifo_addr[2]),
        .A3(bp_read_fifo_addr[3]),
        .CE(\arbiter_bp_push_prt[1][Valid] ),
        .CLK(ACLK),
        .D(\arbiter_bp_push_prt[1][Early] ),
        .Q(\bp_fifo_mem_reg[15][Early][-1111111111]_srl16_n_0 ));
  LUT6 #(
    .INIT(64'h7F0F7FFF7FFF7FFF)) 
    lud_write_hit_done_i_3
       (.I0(\access_data_info[0,1][Last] ),
        .I1(wr_port_data_valid_i_reg_0),
        .I2(lu_check_valid),
        .I3(\lu_check_info_reg[Port_Num][0] ),
        .I4(\access_data_info[0,0][Valid] ),
        .I5(\access_data_info[0,0][Last] ),
        .O(lud_write_hit_done_reg));
  (* SOFT_HLUTNM = "soft_lutpair172" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    update_wm_pop_normal_hold_i_2
       (.I0(\access_data_info[0,1][Last] ),
        .I1(wm_port),
        .I2(\access_data_info[0,0][Last] ),
        .O(update_wr_miss_rs_last));
  (* SOFT_HLUTNM = "soft_lutpair173" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \update_wma_data[0]_i_1 
       (.I0(\access_data_info[0,1][Data] [0]),
        .I1(\wr_port_data_info_reg[0][Data][31]_0 [0]),
        .I2(wm_port),
        .O(D[0]));
  (* SOFT_HLUTNM = "soft_lutpair178" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \update_wma_data[10]_i_1 
       (.I0(\access_data_info[0,1][Data] [10]),
        .I1(\wr_port_data_info_reg[0][Data][31]_0 [10]),
        .I2(wm_port),
        .O(D[10]));
  (* SOFT_HLUTNM = "soft_lutpair178" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \update_wma_data[11]_i_1 
       (.I0(\access_data_info[0,1][Data] [11]),
        .I1(\wr_port_data_info_reg[0][Data][31]_0 [11]),
        .I2(wm_port),
        .O(D[11]));
  (* SOFT_HLUTNM = "soft_lutpair179" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \update_wma_data[12]_i_1 
       (.I0(\access_data_info[0,1][Data] [12]),
        .I1(\wr_port_data_info_reg[0][Data][31]_0 [12]),
        .I2(wm_port),
        .O(D[12]));
  (* SOFT_HLUTNM = "soft_lutpair179" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \update_wma_data[13]_i_1 
       (.I0(\access_data_info[0,1][Data] [13]),
        .I1(\wr_port_data_info_reg[0][Data][31]_0 [13]),
        .I2(wm_port),
        .O(D[13]));
  (* SOFT_HLUTNM = "soft_lutpair180" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \update_wma_data[14]_i_1 
       (.I0(\access_data_info[0,1][Data] [14]),
        .I1(\wr_port_data_info_reg[0][Data][31]_0 [14]),
        .I2(wm_port),
        .O(D[14]));
  (* SOFT_HLUTNM = "soft_lutpair180" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \update_wma_data[15]_i_2 
       (.I0(\access_data_info[0,1][Data] [15]),
        .I1(\wr_port_data_info_reg[0][Data][31]_0 [15]),
        .I2(wm_port),
        .O(D[15]));
  (* SOFT_HLUTNM = "soft_lutpair181" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \update_wma_data[16]_i_1 
       (.I0(\access_data_info[0,1][Data] [16]),
        .I1(\wr_port_data_info_reg[0][Data][31]_0 [16]),
        .I2(wm_port),
        .O(D[16]));
  (* SOFT_HLUTNM = "soft_lutpair181" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \update_wma_data[17]_i_1 
       (.I0(\access_data_info[0,1][Data] [17]),
        .I1(\wr_port_data_info_reg[0][Data][31]_0 [17]),
        .I2(wm_port),
        .O(D[17]));
  (* SOFT_HLUTNM = "soft_lutpair182" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \update_wma_data[18]_i_1 
       (.I0(\access_data_info[0,1][Data] [18]),
        .I1(\wr_port_data_info_reg[0][Data][31]_0 [18]),
        .I2(wm_port),
        .O(D[18]));
  (* SOFT_HLUTNM = "soft_lutpair182" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \update_wma_data[19]_i_1 
       (.I0(\access_data_info[0,1][Data] [19]),
        .I1(\wr_port_data_info_reg[0][Data][31]_0 [19]),
        .I2(wm_port),
        .O(D[19]));
  (* SOFT_HLUTNM = "soft_lutpair173" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \update_wma_data[1]_i_1 
       (.I0(\access_data_info[0,1][Data] [1]),
        .I1(\wr_port_data_info_reg[0][Data][31]_0 [1]),
        .I2(wm_port),
        .O(D[1]));
  (* SOFT_HLUTNM = "soft_lutpair183" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \update_wma_data[20]_i_1 
       (.I0(\access_data_info[0,1][Data] [20]),
        .I1(\wr_port_data_info_reg[0][Data][31]_0 [20]),
        .I2(wm_port),
        .O(D[20]));
  (* SOFT_HLUTNM = "soft_lutpair183" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \update_wma_data[21]_i_1 
       (.I0(\access_data_info[0,1][Data] [21]),
        .I1(\wr_port_data_info_reg[0][Data][31]_0 [21]),
        .I2(wm_port),
        .O(D[21]));
  (* SOFT_HLUTNM = "soft_lutpair184" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \update_wma_data[22]_i_1 
       (.I0(\access_data_info[0,1][Data] [22]),
        .I1(\wr_port_data_info_reg[0][Data][31]_0 [22]),
        .I2(wm_port),
        .O(D[22]));
  (* SOFT_HLUTNM = "soft_lutpair184" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \update_wma_data[23]_i_2 
       (.I0(\access_data_info[0,1][Data] [23]),
        .I1(\wr_port_data_info_reg[0][Data][31]_0 [23]),
        .I2(wm_port),
        .O(D[23]));
  (* SOFT_HLUTNM = "soft_lutpair185" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \update_wma_data[24]_i_1 
       (.I0(\access_data_info[0,1][Data] [24]),
        .I1(\wr_port_data_info_reg[0][Data][31]_0 [24]),
        .I2(wm_port),
        .O(D[24]));
  (* SOFT_HLUTNM = "soft_lutpair185" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \update_wma_data[25]_i_1 
       (.I0(\access_data_info[0,1][Data] [25]),
        .I1(\wr_port_data_info_reg[0][Data][31]_0 [25]),
        .I2(wm_port),
        .O(D[25]));
  (* SOFT_HLUTNM = "soft_lutpair186" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \update_wma_data[26]_i_1 
       (.I0(\access_data_info[0,1][Data] [26]),
        .I1(\wr_port_data_info_reg[0][Data][31]_0 [26]),
        .I2(wm_port),
        .O(D[26]));
  (* SOFT_HLUTNM = "soft_lutpair186" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \update_wma_data[27]_i_1 
       (.I0(\access_data_info[0,1][Data] [27]),
        .I1(\wr_port_data_info_reg[0][Data][31]_0 [27]),
        .I2(wm_port),
        .O(D[27]));
  (* SOFT_HLUTNM = "soft_lutpair187" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \update_wma_data[28]_i_1 
       (.I0(\access_data_info[0,1][Data] [28]),
        .I1(\wr_port_data_info_reg[0][Data][31]_0 [28]),
        .I2(wm_port),
        .O(D[28]));
  (* SOFT_HLUTNM = "soft_lutpair187" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \update_wma_data[29]_i_1 
       (.I0(\access_data_info[0,1][Data] [29]),
        .I1(\wr_port_data_info_reg[0][Data][31]_0 [29]),
        .I2(wm_port),
        .O(D[29]));
  (* SOFT_HLUTNM = "soft_lutpair174" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \update_wma_data[2]_i_1 
       (.I0(\access_data_info[0,1][Data] [2]),
        .I1(\wr_port_data_info_reg[0][Data][31]_0 [2]),
        .I2(wm_port),
        .O(D[2]));
  (* SOFT_HLUTNM = "soft_lutpair188" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \update_wma_data[30]_i_1 
       (.I0(\access_data_info[0,1][Data] [30]),
        .I1(\wr_port_data_info_reg[0][Data][31]_0 [30]),
        .I2(wm_port),
        .O(D[30]));
  (* SOFT_HLUTNM = "soft_lutpair188" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \update_wma_data[31]_i_2 
       (.I0(\access_data_info[0,1][Data] [31]),
        .I1(\wr_port_data_info_reg[0][Data][31]_0 [31]),
        .I2(wm_port),
        .O(D[31]));
  (* SOFT_HLUTNM = "soft_lutpair174" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \update_wma_data[3]_i_1 
       (.I0(\access_data_info[0,1][Data] [3]),
        .I1(\wr_port_data_info_reg[0][Data][31]_0 [3]),
        .I2(wm_port),
        .O(D[3]));
  (* SOFT_HLUTNM = "soft_lutpair175" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \update_wma_data[4]_i_1 
       (.I0(\access_data_info[0,1][Data] [4]),
        .I1(\wr_port_data_info_reg[0][Data][31]_0 [4]),
        .I2(wm_port),
        .O(D[4]));
  (* SOFT_HLUTNM = "soft_lutpair175" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \update_wma_data[5]_i_1 
       (.I0(\access_data_info[0,1][Data] [5]),
        .I1(\wr_port_data_info_reg[0][Data][31]_0 [5]),
        .I2(wm_port),
        .O(D[5]));
  (* SOFT_HLUTNM = "soft_lutpair176" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \update_wma_data[6]_i_1 
       (.I0(\access_data_info[0,1][Data] [6]),
        .I1(\wr_port_data_info_reg[0][Data][31]_0 [6]),
        .I2(wm_port),
        .O(D[6]));
  (* SOFT_HLUTNM = "soft_lutpair176" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \update_wma_data[7]_i_2 
       (.I0(\access_data_info[0,1][Data] [7]),
        .I1(\wr_port_data_info_reg[0][Data][31]_0 [7]),
        .I2(wm_port),
        .O(D[7]));
  (* SOFT_HLUTNM = "soft_lutpair177" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \update_wma_data[8]_i_1 
       (.I0(\access_data_info[0,1][Data] [8]),
        .I1(\wr_port_data_info_reg[0][Data][31]_0 [8]),
        .I2(wm_port),
        .O(D[8]));
  (* SOFT_HLUTNM = "soft_lutpair177" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    \update_wma_data[9]_i_1 
       (.I0(\access_data_info[0,1][Data] [9]),
        .I1(\wr_port_data_info_reg[0][Data][31]_0 [9]),
        .I2(wm_port),
        .O(D[9]));
  (* srl_bus_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][BE] " *) 
  (* srl_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][BE][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][BE][0]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S1_AXI_WSTRB[0]),
        .Q(fit_vec[0]));
  (* srl_bus_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][BE] " *) 
  (* srl_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][BE][1]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][BE][1]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S1_AXI_WSTRB[1]),
        .Q(fit_vec[1]));
  (* srl_bus_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][BE] " *) 
  (* srl_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][BE][2]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][BE][2]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S1_AXI_WSTRB[2]),
        .Q(fit_vec[2]));
  (* srl_bus_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][BE] " *) 
  (* srl_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][BE][3]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][BE][3]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S1_AXI_WSTRB[3]),
        .Q(fit_vec[3]));
  (* srl_bus_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][0]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S1_AXI_WDATA[0]),
        .Q(\w_fifo_mem_reg[15][Data][0]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data][10]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][10]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S1_AXI_WDATA[10]),
        .Q(\w_fifo_mem_reg[15][Data][10]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data][11]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][11]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S1_AXI_WDATA[11]),
        .Q(\w_fifo_mem_reg[15][Data][11]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data][12]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][12]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S1_AXI_WDATA[12]),
        .Q(\w_fifo_mem_reg[15][Data][12]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data][13]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][13]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S1_AXI_WDATA[13]),
        .Q(\w_fifo_mem_reg[15][Data][13]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data][14]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][14]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S1_AXI_WDATA[14]),
        .Q(\w_fifo_mem_reg[15][Data][14]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data][15]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][15]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S1_AXI_WDATA[15]),
        .Q(\w_fifo_mem_reg[15][Data][15]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data][16]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][16]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S1_AXI_WDATA[16]),
        .Q(\w_fifo_mem_reg[15][Data][16]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data][17]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][17]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S1_AXI_WDATA[17]),
        .Q(\w_fifo_mem_reg[15][Data][17]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data][18]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][18]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S1_AXI_WDATA[18]),
        .Q(\w_fifo_mem_reg[15][Data][18]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data][19]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][19]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S1_AXI_WDATA[19]),
        .Q(\w_fifo_mem_reg[15][Data][19]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data][1]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][1]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S1_AXI_WDATA[1]),
        .Q(\w_fifo_mem_reg[15][Data][1]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data][20]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][20]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S1_AXI_WDATA[20]),
        .Q(\w_fifo_mem_reg[15][Data][20]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data][21]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][21]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S1_AXI_WDATA[21]),
        .Q(\w_fifo_mem_reg[15][Data][21]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data][22]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][22]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S1_AXI_WDATA[22]),
        .Q(\w_fifo_mem_reg[15][Data][22]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data][23]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][23]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S1_AXI_WDATA[23]),
        .Q(\w_fifo_mem_reg[15][Data][23]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data][24]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][24]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S1_AXI_WDATA[24]),
        .Q(\w_fifo_mem_reg[15][Data][24]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data][25]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][25]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S1_AXI_WDATA[25]),
        .Q(\w_fifo_mem_reg[15][Data][25]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data][26]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][26]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S1_AXI_WDATA[26]),
        .Q(\w_fifo_mem_reg[15][Data][26]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data][27]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][27]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S1_AXI_WDATA[27]),
        .Q(\w_fifo_mem_reg[15][Data][27]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data][28]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][28]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S1_AXI_WDATA[28]),
        .Q(\w_fifo_mem_reg[15][Data][28]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data][29]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][29]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S1_AXI_WDATA[29]),
        .Q(\w_fifo_mem_reg[15][Data][29]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data][2]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][2]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S1_AXI_WDATA[2]),
        .Q(\w_fifo_mem_reg[15][Data][2]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data][30]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][30]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S1_AXI_WDATA[30]),
        .Q(\w_fifo_mem_reg[15][Data][30]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data][31]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][31]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S1_AXI_WDATA[31]),
        .Q(\w_fifo_mem_reg[15][Data][31]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data][3]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][3]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S1_AXI_WDATA[3]),
        .Q(\w_fifo_mem_reg[15][Data][3]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data][4]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][4]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S1_AXI_WDATA[4]),
        .Q(\w_fifo_mem_reg[15][Data][4]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data][5]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][5]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S1_AXI_WDATA[5]),
        .Q(\w_fifo_mem_reg[15][Data][5]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data][6]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][6]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S1_AXI_WDATA[6]),
        .Q(\w_fifo_mem_reg[15][Data][6]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data][7]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][7]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S1_AXI_WDATA[7]),
        .Q(\w_fifo_mem_reg[15][Data][7]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data][8]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][8]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S1_AXI_WDATA[8]),
        .Q(\w_fifo_mem_reg[15][Data][8]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data] " *) 
  (* srl_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Data][9]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Data][9]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S1_AXI_WDATA[9]),
        .Q(\w_fifo_mem_reg[15][Data][9]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Last] " *) 
  (* srl_name = "U0/\FE/Use_Port_1.AXI_1/w_fifo_mem_reg[15][Last][-1111111111]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \w_fifo_mem_reg[15][Last][-1111111111]_srl16 
       (.A0(w_read_fifo_addr[0]),
        .A1(w_read_fifo_addr[1]),
        .A2(w_read_fifo_addr[2]),
        .A3(w_read_fifo_addr[3]),
        .CE(FIFO_W_Pointer_n_7),
        .CLK(ACLK),
        .D(S1_AXI_WLAST),
        .Q(\w_fifo_mem_reg[15][Last][-1111111111]_srl16_n_0 ));
  FDRE \wr_port_data_info_reg[0][BE][0] 
       (.C(ACLK),
        .CE(w_pop),
        .D(fit_vec[0]),
        .Q(\update_wma_data_reg[24] [0]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][BE][1] 
       (.C(ACLK),
        .CE(w_pop),
        .D(fit_vec[1]),
        .Q(\update_wma_data_reg[24] [1]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][BE][2] 
       (.C(ACLK),
        .CE(w_pop),
        .D(fit_vec[2]),
        .Q(\update_wma_data_reg[24] [2]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][BE][3] 
       (.C(ACLK),
        .CE(w_pop),
        .D(fit_vec[3]),
        .Q(\update_wma_data_reg[24] [3]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][0] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][0]_srl16_n_0 ),
        .Q(\access_data_info[0,1][Data] [0]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][10] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][10]_srl16_n_0 ),
        .Q(\access_data_info[0,1][Data] [10]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][11] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][11]_srl16_n_0 ),
        .Q(\access_data_info[0,1][Data] [11]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][12] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][12]_srl16_n_0 ),
        .Q(\access_data_info[0,1][Data] [12]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][13] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][13]_srl16_n_0 ),
        .Q(\access_data_info[0,1][Data] [13]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][14] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][14]_srl16_n_0 ),
        .Q(\access_data_info[0,1][Data] [14]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][15] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][15]_srl16_n_0 ),
        .Q(\access_data_info[0,1][Data] [15]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][16] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][16]_srl16_n_0 ),
        .Q(\access_data_info[0,1][Data] [16]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][17] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][17]_srl16_n_0 ),
        .Q(\access_data_info[0,1][Data] [17]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][18] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][18]_srl16_n_0 ),
        .Q(\access_data_info[0,1][Data] [18]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][19] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][19]_srl16_n_0 ),
        .Q(\access_data_info[0,1][Data] [19]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][1] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][1]_srl16_n_0 ),
        .Q(\access_data_info[0,1][Data] [1]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][20] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][20]_srl16_n_0 ),
        .Q(\access_data_info[0,1][Data] [20]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][21] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][21]_srl16_n_0 ),
        .Q(\access_data_info[0,1][Data] [21]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][22] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][22]_srl16_n_0 ),
        .Q(\access_data_info[0,1][Data] [22]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][23] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][23]_srl16_n_0 ),
        .Q(\access_data_info[0,1][Data] [23]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][24] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][24]_srl16_n_0 ),
        .Q(\access_data_info[0,1][Data] [24]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][25] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][25]_srl16_n_0 ),
        .Q(\access_data_info[0,1][Data] [25]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][26] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][26]_srl16_n_0 ),
        .Q(\access_data_info[0,1][Data] [26]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][27] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][27]_srl16_n_0 ),
        .Q(\access_data_info[0,1][Data] [27]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][28] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][28]_srl16_n_0 ),
        .Q(\access_data_info[0,1][Data] [28]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][29] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][29]_srl16_n_0 ),
        .Q(\access_data_info[0,1][Data] [29]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][2] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][2]_srl16_n_0 ),
        .Q(\access_data_info[0,1][Data] [2]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][30] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][30]_srl16_n_0 ),
        .Q(\access_data_info[0,1][Data] [30]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][31] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][31]_srl16_n_0 ),
        .Q(\access_data_info[0,1][Data] [31]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][3] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][3]_srl16_n_0 ),
        .Q(\access_data_info[0,1][Data] [3]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][4] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][4]_srl16_n_0 ),
        .Q(\access_data_info[0,1][Data] [4]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][5] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][5]_srl16_n_0 ),
        .Q(\access_data_info[0,1][Data] [5]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][6] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][6]_srl16_n_0 ),
        .Q(\access_data_info[0,1][Data] [6]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][7] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][7]_srl16_n_0 ),
        .Q(\access_data_info[0,1][Data] [7]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][8] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][8]_srl16_n_0 ),
        .Q(\access_data_info[0,1][Data] [8]),
        .R(ARESET_I));
  FDRE \wr_port_data_info_reg[0][Data][9] 
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Data][9]_srl16_n_0 ),
        .Q(\access_data_info[0,1][Data] [9]),
        .R(ARESET_I));
  FDSE wr_port_data_last_i_reg
       (.C(ACLK),
        .CE(w_pop),
        .D(\w_fifo_mem_reg[15][Last][-1111111111]_srl16_n_0 ),
        .Q(\access_data_info[0,1][Last] ),
        .S(ARESET_I));
  FDRE wr_port_data_valid_i_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(FIFO_W_Pointer_n_4),
        .Q(wr_port_data_valid_i_reg_0),
        .R(1'b0));
endmodule

(* ORIG_REF_NAME = "sc_s_axi_r_channel" *) 
module design_1_system_cache_0_0_sc_s_axi_r_channel
   (E,
    \Use_FPGA.Use_Normal_Line.Line_Fit_Inst ,
    \r_hit_write_fifo_addr_reg[3]_0 ,
    \r_hit_write_fifo_addr_reg[3]_1 ,
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_0 ,
    \r_miss_fifo_len_reg[3]_0 ,
    \Use_FPGA_2.S_AXI_RVALID_reg_0 ,
    \read_data_status[0,1][Hit_Almost_Full] ,
    S1_AXI_RID,
    rip_last_3,
    S1_AXI_RVALID,
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_1 ,
    \r_miss_read_fifo_addr_reg[1]_0 ,
    S1_AXI_ARREADY,
    \rd_port_access[1][Valid] ,
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[2]_0 ,
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0]_0 ,
    r_read_fifo_addr_4,
    \Use_FPGA_2.S_AXI_RVALID_reg_1 ,
    lud_addr_pipeline_full_reg,
    S,
    S_5,
    A_N,
    \update_rd_offset_cnt_reg[0] ,
    \S1_AXI_RRESP[1] ,
    \arb_prohibit_quick_reg[1] ,
    Q,
    ACLK,
    \lookup_read_data_new[0,1][Valid] ,
    S1_AXI_RREADY,
    \lookup_read_data_info[0,1][Valid] ,
    \update_read_data_info[0,1][Valid] ,
    S1_AXI_ARID,
    \lookup_read_data_new[0,0][Hit] ,
    rd_port_ready,
    S1_AXI_ARVALID,
    \r_hit_read_fifo_addr_reg[0]_0 ,
    \r_miss_read_fifo_addr_reg[0]_0 ,
    \read_data_status[0,0][Hit_Full] ,
    lud_reg_port_num,
    \lu_mem_info_reg[Port_Num][0] ,
    \read_info_status[0,0][Full] ,
    p_162_in,
    lookup_restart_mem,
    \read_info_status[0,0][Almost_Full] ,
    M0_AXI_RRESP,
    access_piperun,
    rd_port_ready_cmb_1);
  output [0:0]E;
  output \Use_FPGA.Use_Normal_Line.Line_Fit_Inst ;
  output \r_hit_write_fifo_addr_reg[3]_0 ;
  output \r_hit_write_fifo_addr_reg[3]_1 ;
  output \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_0 ;
  output \r_miss_fifo_len_reg[3]_0 ;
  output \Use_FPGA_2.S_AXI_RVALID_reg_0 ;
  output \read_data_status[0,1][Hit_Almost_Full] ;
  output [0:0]S1_AXI_RID;
  output rip_last_3;
  output S1_AXI_RVALID;
  output [3:0]\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_1 ;
  output [1:0]\r_miss_read_fifo_addr_reg[1]_0 ;
  output S1_AXI_ARREADY;
  output \rd_port_access[1][Valid] ;
  output \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[2]_0 ;
  output \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0]_0 ;
  output [1:0]r_read_fifo_addr_4;
  output [3:0]\Use_FPGA_2.S_AXI_RVALID_reg_1 ;
  output lud_addr_pipeline_full_reg;
  output S;
  output S_5;
  output A_N;
  output \update_rd_offset_cnt_reg[0] ;
  output [1:0]\S1_AXI_RRESP[1] ;
  output \arb_prohibit_quick_reg[1] ;
  input Q;
  input ACLK;
  input \lookup_read_data_new[0,1][Valid] ;
  input S1_AXI_RREADY;
  input \lookup_read_data_info[0,1][Valid] ;
  input \update_read_data_info[0,1][Valid] ;
  input [0:0]S1_AXI_ARID;
  input \lookup_read_data_new[0,0][Hit] ;
  input rd_port_ready;
  input S1_AXI_ARVALID;
  input \r_hit_read_fifo_addr_reg[0]_0 ;
  input \r_miss_read_fifo_addr_reg[0]_0 ;
  input \read_data_status[0,0][Hit_Full] ;
  input lud_reg_port_num;
  input \lu_mem_info_reg[Port_Num][0] ;
  input \read_info_status[0,0][Full] ;
  input p_162_in;
  input lookup_restart_mem;
  input \read_info_status[0,0][Almost_Full] ;
  input [1:0]M0_AXI_RRESP;
  input access_piperun;
  input rd_port_ready_cmb_1;

  wire ACLK;
  wire A_N;
  wire D;
  wire [0:0]E;
  wire FIFO_RIP_Pointer_n_6;
  wire FIFO_RIP_Pointer_n_9;
  wire FIFO_RI_Pointer_n_0;
  wire I4;
  wire [1:0]M0_AXI_RRESP;
  wire Q;
  wire RC_And_Inst5_n_1;
  wire RC_And_Inst5_n_2;
  wire RC_And_Inst5_n_3;
  wire RC_And_Inst5_n_5;
  wire RC_And_Inst5_n_6;
  wire RC_And_Inst6_n_1;
  wire RC_And_Inst6_n_2;
  wire S;
  wire [0:0]S1_AXI_ARID;
  wire S1_AXI_ARREADY;
  wire S1_AXI_ARVALID;
  wire [0:0]S1_AXI_RID;
  wire S1_AXI_RREADY;
  wire [1:0]\S1_AXI_RRESP[1] ;
  wire S1_AXI_RVALID;
  wire S_5;
  wire \Use_FPGA.Use_Normal_Line.Line_Fit_Inst ;
  wire \Use_FPGA_2.S_AXI_RVALID_reg_0 ;
  wire [3:0]\Use_FPGA_2.S_AXI_RVALID_reg_1 ;
  wire \Use_FPGA_Flag_Hit.Almost_Empty_Inst_i_1__0_n_0 ;
  wire \Use_FPGA_Flag_Hit.Empty_Inst_i_1__0_n_0 ;
  wire \Use_FPGA_Flag_Hit.Full_Inst_i_1__0_n_0 ;
  wire \Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst_i_1__0_n_0 ;
  wire \Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst_i_2__0_n_0 ;
  wire \Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst_n_0 ;
  wire \Use_FPGA_Flag_Miss.Almost_Empty_Inst_i_1__0_n_0 ;
  wire \Use_FPGA_Flag_Miss.Almost_Full_Inst_i_1__0_n_0 ;
  wire \Use_FPGA_Flag_Miss.Empty_Inst_i_1__0_n_0 ;
  wire \Use_FPGA_Flag_Miss.Full_Inst_i_1__0_n_0 ;
  wire \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0]_0 ;
  wire \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[2]_0 ;
  wire \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_0 ;
  wire [3:0]\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_1 ;
  wire access_piperun;
  wire \arb_prohibit_quick_reg[1] ;
  wire \lookup_read_data_info[0,1][Valid] ;
  wire \lookup_read_data_new[0,0][Hit] ;
  wire \lookup_read_data_new[0,1][Valid] ;
  wire lookup_restart_mem;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire \lu_mem_info_reg[Port_Num][0] ;
  wire lud_addr_pipeline_full_reg;
  wire lud_reg_port_num;
  wire p_162_in;
  wire p_3_out__2;
  wire p_4_out__2;
  wire queue_almost_empty_next__8;
  wire queue_almost_empty_next__9;
  wire queue_almost_full_next__8;
  wire queue_almost_full_next__9;
  wire [3:0]queue_index;
  wire r_hit_fifo_almost_empty;
  wire \r_hit_fifo_len[0]_i_1__0_n_0 ;
  wire \r_hit_fifo_len[1]_i_1__0_n_0 ;
  wire \r_hit_fifo_len[2]_i_1__0_n_0 ;
  wire \r_hit_fifo_len[3]_i_1__0_n_0 ;
  wire [3:0]r_hit_fifo_len_reg;
  wire \r_hit_read_fifo_addr[0]_i_1__0_n_0 ;
  wire \r_hit_read_fifo_addr[1]_i_1__0_n_0 ;
  wire \r_hit_read_fifo_addr[2]_i_1__0_n_0 ;
  wire \r_hit_read_fifo_addr[3]_i_1__0_n_0 ;
  wire \r_hit_read_fifo_addr_reg[0]_0 ;
  wire r_hit_refresh;
  wire [3:0]r_hit_write_fifo_addr;
  wire \r_hit_write_fifo_addr[0]_i_1__0_n_0 ;
  wire \r_hit_write_fifo_addr[1]_i_1__0_n_0 ;
  wire \r_hit_write_fifo_addr[2]_i_1__0_n_0 ;
  wire \r_hit_write_fifo_addr[3]_i_1__0_n_0 ;
  wire \r_hit_write_fifo_addr_reg[3]_0 ;
  wire \r_hit_write_fifo_addr_reg[3]_1 ;
  wire r_miss_fifo_almost_empty;
  wire r_miss_fifo_almost_full;
  wire r_miss_fifo_empty;
  wire \r_miss_fifo_len[0]_i_1_n_0 ;
  wire \r_miss_fifo_len[1]_i_1__0_n_0 ;
  wire \r_miss_fifo_len[2]_i_1__0_n_0 ;
  wire \r_miss_fifo_len[3]_i_1__0_n_0 ;
  wire [3:0]r_miss_fifo_len_reg;
  wire \r_miss_fifo_len_reg[3]_0 ;
  wire r_miss_push;
  wire \r_miss_read_fifo_addr[0]_i_1__0_n_0 ;
  wire \r_miss_read_fifo_addr[1]_i_1__0_n_0 ;
  wire \r_miss_read_fifo_addr_reg[0]_0 ;
  wire [1:0]\r_miss_read_fifo_addr_reg[1]_0 ;
  wire r_miss_refresh;
  wire [1:0]r_miss_write_fifo_addr;
  wire \r_miss_write_fifo_addr[0]_i_1__0_n_0 ;
  wire \r_miss_write_fifo_addr[1]_i_1__0_n_0 ;
  wire [3:1]r_next_fifo_addr__7;
  wire r_pop;
  wire r_pop_safe_i;
  wire r_pop_valid;
  wire [1:0]r_read_fifo_addr_4;
  wire \rd_port_access[1][Valid] ;
  wire rd_port_ready;
  wire rd_port_ready_cmb_1;
  wire \read_data_status[0,0][Hit_Full] ;
  wire \read_data_status[0,1][Hit_Almost_Full] ;
  wire \read_info_status[0,0][Almost_Full] ;
  wire \read_info_status[0,0][Full] ;
  wire ri_exist;
  wire \ri_fifo_mem_reg[15][Hit][-1111111111]_srl16_n_0 ;
  wire \rip_fifo_mem_reg[15][ID][0]_srl16_n_0 ;
  wire \rip_fifo_mem_reg[15][Last][-1111111111]_srl16_n_0 ;
  wire rip_last_3;
  wire rip_pop;
  wire [3:0]rip_read_fifo_addr;
  wire rip_refresh_reg;
  wire \update_rd_offset_cnt_reg[0] ;
  wire \update_read_data_info[0,1][Valid] ;
  wire \NLW_Use_FPGA_1.LUT_Refresh_Inst_O5_UNCONNECTED ;

  design_1_system_cache_0_0_sc_srl_fifo_counter__parameterized5 FIFO_RIP_Pointer
       (.ACLK(ACLK),
        .Q(Q),
        .S1_AXI_ARREADY(S1_AXI_ARREADY),
        .S1_AXI_ARVALID(S1_AXI_ARVALID),
        .\Use_FPGA.Almost_Full_Inst_0 (FIFO_RIP_Pointer_n_6),
        .\Use_FPGA.Use_Normal_Line.Line_Fit_Inst_0 (\Use_FPGA.Use_Normal_Line.Line_Fit_Inst ),
        .\r_hit_write_fifo_addr_reg[3] (FIFO_RIP_Pointer_n_9),
        .\rd_port_access[1][Valid] (\rd_port_access[1][Valid] ),
        .rd_port_ready(rd_port_ready),
        .ri_exist(ri_exist),
        .rip_pop(rip_pop),
        .rip_read_fifo_addr(rip_read_fifo_addr),
        .rip_refresh_reg(rip_refresh_reg));
  design_1_system_cache_0_0_sc_srl_fifo_counter__parameterized3 FIFO_RI_Pointer
       (.ACLK(ACLK),
        .Q(Q),
        .S(S),
        .\Use_FPGA.Almost_Empty_Inst_0 (FIFO_RI_Pointer_n_0),
        .\Use_Reg_Ctrl.queue_exist_i_reg_0 (RC_And_Inst6_n_2),
        .\lookup_read_data_new[0,1][Valid] (\lookup_read_data_new[0,1][Valid] ),
        .lookup_restart_mem(lookup_restart_mem),
        .\lu_mem_info_reg[Port_Num][0] (\lu_mem_info_reg[Port_Num][0] ),
        .p_162_in(p_162_in),
        .queue_index(queue_index),
        .\read_info_status[0,0][Almost_Full] (\read_info_status[0,0][Almost_Full] ),
        .\read_info_status[0,0][Full] (\read_info_status[0,0][Full] ),
        .ri_exist(ri_exist),
        .rip_pop(rip_pop));
  design_1_system_cache_0_0_carry_and_1 RC_And_Inst3
       (.\Use_Reg_Ctrl.queue_exist_i_reg (FIFO_RIP_Pointer_n_9),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(S1_AXI_RREADY),
        .lopt_3(lopt_2),
        .lopt_4(lopt_3),
        .lopt_5(lopt_4),
        .lopt_6(lopt_5),
        .lopt_7(lopt_6),
        .lopt_8(lopt_7),
        .r_pop_valid(r_pop_valid));
  design_1_system_cache_0_0_carry_and_2 RC_And_Inst4
       (.S1_AXI_RREADY(S1_AXI_RREADY),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .r_pop(r_pop),
        .r_pop_valid(r_pop_valid));
  design_1_system_cache_0_0_carry_and_n RC_And_Inst5
       (.I4(I4),
        .Q(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_1 ),
        .\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst (\ri_fifo_mem_reg[15][Hit][-1111111111]_srl16_n_0 ),
        .\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0] (RC_And_Inst5_n_5),
        .\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0]_0 (RC_And_Inst5_n_6),
        .\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0]_1 (\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0]_0 ),
        .\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[1] (RC_And_Inst5_n_1),
        .\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[2] (RC_And_Inst5_n_2),
        .\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3] (RC_And_Inst5_n_3),
        .\Use_Rd_Ctrl_Pipeline.ri_hit_reg (\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_0 ),
        .\Use_Reg_Ctrl.queue_exist_i_reg (RC_And_Inst6_n_2),
        .lopt(lopt_2),
        .lopt_1(lopt_3),
        .lopt_2(lopt_4),
        .p_3_out__2(p_3_out__2),
        .r_miss_fifo_almost_empty(r_miss_fifo_almost_empty),
        .r_miss_fifo_empty(r_miss_fifo_empty),
        .r_miss_push(r_miss_push),
        .\r_miss_read_fifo_addr_reg[1] (\r_miss_read_fifo_addr_reg[1]_0 ),
        .r_next_fifo_addr__7(r_next_fifo_addr__7),
        .r_pop(r_pop),
        .r_pop_safe_i(r_pop_safe_i),
        .ri_exist(ri_exist),
        .rip_pop(rip_pop));
  design_1_system_cache_0_0_carry_and_3 RC_And_Inst6
       (.Q(Q),
        .\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst (\ri_fifo_mem_reg[15][Hit][-1111111111]_srl16_n_0 ),
        .\Use_FPGA.Empty_Inst (FIFO_RI_Pointer_n_0),
        .\Use_FPGA_2.S_AXI_RVALID_reg (RC_And_Inst6_n_1),
        .\Use_Rd_Ctrl_Pipeline.ri_hit_reg (RC_And_Inst6_n_2),
        .\Use_Rd_Ctrl_Pipeline.ri_hit_reg_0 (\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_0 ),
        .lopt(lopt_5),
        .lopt_1(lopt_6),
        .lopt_2(lopt_7),
        .p_3_out__2(p_3_out__2),
        .p_4_out__2(p_4_out__2),
        .\r_hit_read_fifo_addr_reg[0] (\r_hit_read_fifo_addr_reg[0]_0 ),
        .\r_miss_read_fifo_addr_reg[0] (\r_miss_read_fifo_addr_reg[0]_0 ),
        .r_pop_safe_i(r_pop_safe_i),
        .ri_exist(ri_exist),
        .rip_pop(rip_pop));
  design_1_system_cache_0_0_carry_latch_and RC_Latch_Inst1
       (.E(E),
        .I4(I4),
        .\Use_Rd_Ctrl_Pipeline.ri_hit_reg (\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_0 ),
        .\lud_reg_valid_one_hot_reg[1] (\r_hit_write_fifo_addr_reg[3]_0 ),
        .p_4_out__2(p_4_out__2),
        .r_hit_fifo_almost_empty(r_hit_fifo_almost_empty),
        .r_pop_safe_i(r_pop_safe_i));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h2222D22222222222)) 
    \Use_FPGA_1.LUT_Hit_Inst 
       (.I0(\lookup_read_data_info[0,1][Valid] ),
        .I1(\r_hit_write_fifo_addr_reg[3]_1 ),
        .I2(r_pop),
        .I3(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_0 ),
        .I4(I4),
        .I5(1'b1),
        .O5(\r_hit_write_fifo_addr_reg[3]_0 ),
        .O6(r_hit_refresh));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h2F222F220D000D00)) 
    \Use_FPGA_1.LUT_Push_Inst 
       (.I0(\lookup_read_data_info[0,1][Valid] ),
        .I1(\r_hit_write_fifo_addr_reg[3]_1 ),
        .I2(\r_miss_fifo_len_reg[3]_0 ),
        .I3(\update_read_data_info[0,1][Valid] ),
        .I4(1'b0),
        .I5(1'b1),
        .O5(r_miss_push),
        .O6(\Use_FPGA_2.S_AXI_RVALID_reg_0 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h0D000D00F2FF0D00)) 
    \Use_FPGA_1.LUT_Refresh_Inst 
       (.I0(\lookup_read_data_info[0,1][Valid] ),
        .I1(\r_hit_write_fifo_addr_reg[3]_1 ),
        .I2(\r_miss_fifo_len_reg[3]_0 ),
        .I3(\update_read_data_info[0,1][Valid] ),
        .I4(r_pop_safe_i),
        .I5(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_0 ),
        .O5(\NLW_Use_FPGA_1.LUT_Refresh_Inst_O5_UNCONNECTED ),
        .O6(r_miss_refresh));
  FDRE \Use_FPGA_2.S_AXI_RVALID_reg 
       (.C(ACLK),
        .CE(1'b1),
        .D(RC_And_Inst6_n_1),
        .Q(S1_AXI_RVALID),
        .R(1'b0));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA_Flag_Hit.Almost_Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA_Flag_Hit.Almost_Empty_Inst_i_1__0_n_0 ),
        .Q(r_hit_fifo_almost_empty),
        .R(Q));
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_FPGA_Flag_Hit.Almost_Empty_Inst_i_1__0 
       (.I0(queue_almost_empty_next__9),
        .I1(r_hit_refresh),
        .I2(r_hit_fifo_almost_empty),
        .O(\Use_FPGA_Flag_Hit.Almost_Empty_Inst_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h88888888888B8888)) 
    \Use_FPGA_Flag_Hit.Almost_Empty_Inst_i_2__0 
       (.I0(I4),
        .I1(\r_hit_write_fifo_addr_reg[3]_0 ),
        .I2(r_hit_fifo_len_reg[3]),
        .I3(r_hit_fifo_len_reg[2]),
        .I4(r_hit_fifo_len_reg[1]),
        .I5(r_hit_fifo_len_reg[0]),
        .O(queue_almost_empty_next__9));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA_Flag_Hit.Almost_Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(D),
        .Q(\read_data_status[0,1][Hit_Almost_Full] ),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair162" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_FPGA_Flag_Hit.Almost_Full_Inst_i_1__0 
       (.I0(queue_almost_full_next__8),
        .I1(r_hit_refresh),
        .I2(\read_data_status[0,1][Hit_Almost_Full] ),
        .O(D));
  LUT6 #(
    .INIT(64'h1000FFFF10000000)) 
    \Use_FPGA_Flag_Hit.Almost_Full_Inst_i_2__0 
       (.I0(r_hit_fifo_len_reg[1]),
        .I1(r_hit_fifo_len_reg[2]),
        .I2(r_hit_fifo_len_reg[0]),
        .I3(r_hit_fifo_len_reg[3]),
        .I4(\r_hit_write_fifo_addr_reg[3]_0 ),
        .I5(\r_hit_write_fifo_addr_reg[3]_1 ),
        .O(queue_almost_full_next__8));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA_Flag_Hit.Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA_Flag_Hit.Empty_Inst_i_1__0_n_0 ),
        .Q(I4),
        .S(Q));
  LUT4 #(
    .INIT(16'h2F20)) 
    \Use_FPGA_Flag_Hit.Empty_Inst_i_1__0 
       (.I0(r_hit_fifo_almost_empty),
        .I1(\r_hit_write_fifo_addr_reg[3]_0 ),
        .I2(r_hit_refresh),
        .I3(I4),
        .O(\Use_FPGA_Flag_Hit.Empty_Inst_i_1__0_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA_Flag_Hit.Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA_Flag_Hit.Full_Inst_i_1__0_n_0 ),
        .Q(\r_hit_write_fifo_addr_reg[3]_1 ),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair162" *) 
  LUT4 #(
    .INIT(16'h8F80)) 
    \Use_FPGA_Flag_Hit.Full_Inst_i_1__0 
       (.I0(\r_hit_write_fifo_addr_reg[3]_0 ),
        .I1(\read_data_status[0,1][Hit_Almost_Full] ),
        .I2(r_hit_refresh),
        .I3(\r_hit_write_fifo_addr_reg[3]_1 ),
        .O(\Use_FPGA_Flag_Hit.Full_Inst_i_1__0_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst_i_1__0_n_0 ),
        .Q(\Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst_n_0 ),
        .S(Q));
  (* SOFT_HLUTNM = "soft_lutpair166" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst_i_1__0 
       (.I0(\Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst_i_2__0_n_0 ),
        .I1(r_hit_refresh),
        .I2(\Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst_n_0 ),
        .O(\Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair157" *) 
  LUT5 #(
    .INIT(32'h001FFFFF)) 
    \Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst_i_2__0 
       (.I0(r_hit_fifo_len_reg[0]),
        .I1(r_hit_fifo_len_reg[1]),
        .I2(\r_hit_write_fifo_addr_reg[3]_0 ),
        .I3(r_hit_fifo_len_reg[2]),
        .I4(r_hit_fifo_len_reg[3]),
        .O(\Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst_i_2__0_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA_Flag_Miss.Almost_Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA_Flag_Miss.Almost_Empty_Inst_i_1__0_n_0 ),
        .Q(r_miss_fifo_almost_empty),
        .R(Q));
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_FPGA_Flag_Miss.Almost_Empty_Inst_i_1__0 
       (.I0(queue_almost_empty_next__8),
        .I1(r_miss_refresh),
        .I2(r_miss_fifo_almost_empty),
        .O(\Use_FPGA_Flag_Miss.Almost_Empty_Inst_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h88888888888B8888)) 
    \Use_FPGA_Flag_Miss.Almost_Empty_Inst_i_2__0 
       (.I0(r_miss_fifo_empty),
        .I1(r_miss_push),
        .I2(r_miss_fifo_len_reg[3]),
        .I3(r_miss_fifo_len_reg[2]),
        .I4(r_miss_fifo_len_reg[1]),
        .I5(r_miss_fifo_len_reg[0]),
        .O(queue_almost_empty_next__8));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA_Flag_Miss.Almost_Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA_Flag_Miss.Almost_Full_Inst_i_1__0_n_0 ),
        .Q(r_miss_fifo_almost_full),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair165" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_FPGA_Flag_Miss.Almost_Full_Inst_i_1__0 
       (.I0(queue_almost_full_next__9),
        .I1(r_miss_refresh),
        .I2(r_miss_fifo_almost_full),
        .O(\Use_FPGA_Flag_Miss.Almost_Full_Inst_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h0010FFFF00100000)) 
    \Use_FPGA_Flag_Miss.Almost_Full_Inst_i_2__0 
       (.I0(r_miss_fifo_len_reg[3]),
        .I1(r_miss_fifo_len_reg[2]),
        .I2(r_miss_fifo_len_reg[0]),
        .I3(r_miss_fifo_len_reg[1]),
        .I4(r_miss_push),
        .I5(\r_miss_fifo_len_reg[3]_0 ),
        .O(queue_almost_full_next__9));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA_Flag_Miss.Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA_Flag_Miss.Empty_Inst_i_1__0_n_0 ),
        .Q(r_miss_fifo_empty),
        .S(Q));
  LUT4 #(
    .INIT(16'h2F20)) 
    \Use_FPGA_Flag_Miss.Empty_Inst_i_1__0 
       (.I0(r_miss_fifo_almost_empty),
        .I1(r_miss_push),
        .I2(r_miss_refresh),
        .I3(r_miss_fifo_empty),
        .O(\Use_FPGA_Flag_Miss.Empty_Inst_i_1__0_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA_Flag_Miss.Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA_Flag_Miss.Full_Inst_i_1__0_n_0 ),
        .Q(\r_miss_fifo_len_reg[3]_0 ),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair165" *) 
  LUT4 #(
    .INIT(16'h8F80)) 
    \Use_FPGA_Flag_Miss.Full_Inst_i_1__0 
       (.I0(r_miss_push),
        .I1(r_miss_fifo_almost_full),
        .I2(r_miss_refresh),
        .I3(\r_miss_fifo_len_reg[3]_0 ),
        .O(\Use_FPGA_Flag_Miss.Full_Inst_i_1__0_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[1]_i_3__0 
       (.I0(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[2]_0 ),
        .I1(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0]_0 ),
        .O(r_next_fifo_addr__7[1]));
  (* SOFT_HLUTNM = "soft_lutpair159" *) 
  LUT5 #(
    .INIT(32'h7F403FC0)) 
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[2]_i_2__0 
       (.I0(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_0 ),
        .I1(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[2]_0 ),
        .I2(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0]_0 ),
        .I3(r_read_fifo_addr_4[0]),
        .I4(r_read_fifo_addr_4[1]),
        .O(r_next_fifo_addr__7[2]));
  (* SOFT_HLUTNM = "soft_lutpair159" *) 
  LUT5 #(
    .INIT(32'h7F7FC000)) 
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[3]_i_3__0 
       (.I0(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_0 ),
        .I1(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[2]_0 ),
        .I2(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0]_0 ),
        .I3(r_read_fifo_addr_4[0]),
        .I4(r_read_fifo_addr_4[1]),
        .O(r_next_fifo_addr__7[3]));
  FDRE #(
    .INIT(1'b0)) 
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0] 
       (.C(ACLK),
        .CE(RC_And_Inst5_n_5),
        .D(RC_And_Inst5_n_6),
        .Q(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0]_0 ),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[1] 
       (.C(ACLK),
        .CE(RC_And_Inst5_n_5),
        .D(RC_And_Inst5_n_1),
        .Q(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[2]_0 ),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[2] 
       (.C(ACLK),
        .CE(RC_And_Inst5_n_5),
        .D(RC_And_Inst5_n_2),
        .Q(r_read_fifo_addr_4[0]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3] 
       (.C(ACLK),
        .CE(RC_And_Inst5_n_5),
        .D(RC_And_Inst5_n_3),
        .Q(r_read_fifo_addr_4[1]),
        .R(Q));
  FDRE \Use_Rd_Ctrl_Pipeline.ri_hit_reg 
       (.C(ACLK),
        .CE(RC_And_Inst6_n_2),
        .D(\ri_fifo_mem_reg[15][Hit][-1111111111]_srl16_n_0 ),
        .Q(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_0 ),
        .R(Q));
  LUT2 #(
    .INIT(4'hB)) 
    \Using_FPGA.MUXCY_I_i_1__112 
       (.I0(\r_hit_write_fifo_addr_reg[3]_1 ),
        .I1(lud_reg_port_num),
        .O(A_N));
  LUT2 #(
    .INIT(4'h7)) 
    \Using_FPGA.MUXCY_I_i_1__90 
       (.I0(\r_hit_write_fifo_addr_reg[3]_1 ),
        .I1(lud_reg_port_num),
        .O(S_5));
  (* SOFT_HLUTNM = "soft_lutpair166" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \arb_prohibit_quick[1]_i_1 
       (.I0(\Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst_n_0 ),
        .I1(access_piperun),
        .I2(rd_port_ready_cmb_1),
        .O(\arb_prohibit_quick_reg[1] ));
  (* SOFT_HLUTNM = "soft_lutpair167" *) 
  LUT3 #(
    .INIT(8'hAC)) 
    lud_addr_pipeline_full_i_2
       (.I0(\r_hit_write_fifo_addr_reg[3]_1 ),
        .I1(\read_data_status[0,0][Hit_Full] ),
        .I2(lud_reg_port_num),
        .O(lud_addr_pipeline_full_reg));
  LUT1 #(
    .INIT(2'h1)) 
    \r_hit_fifo_len[0]_i_1__0 
       (.I0(r_hit_fifo_len_reg[0]),
        .O(\r_hit_fifo_len[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair164" *) 
  LUT3 #(
    .INIT(8'h69)) 
    \r_hit_fifo_len[1]_i_1__0 
       (.I0(r_hit_fifo_len_reg[0]),
        .I1(\r_hit_write_fifo_addr_reg[3]_0 ),
        .I2(r_hit_fifo_len_reg[1]),
        .O(\r_hit_fifo_len[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair164" *) 
  LUT4 #(
    .INIT(16'h78E1)) 
    \r_hit_fifo_len[2]_i_1__0 
       (.I0(r_hit_fifo_len_reg[0]),
        .I1(\r_hit_write_fifo_addr_reg[3]_0 ),
        .I2(r_hit_fifo_len_reg[2]),
        .I3(r_hit_fifo_len_reg[1]),
        .O(\r_hit_fifo_len[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair157" *) 
  LUT5 #(
    .INIT(32'h7F80FE01)) 
    \r_hit_fifo_len[3]_i_1__0 
       (.I0(\r_hit_write_fifo_addr_reg[3]_0 ),
        .I1(r_hit_fifo_len_reg[0]),
        .I2(r_hit_fifo_len_reg[1]),
        .I3(r_hit_fifo_len_reg[3]),
        .I4(r_hit_fifo_len_reg[2]),
        .O(\r_hit_fifo_len[3]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \r_hit_fifo_len_reg[0] 
       (.C(ACLK),
        .CE(r_hit_refresh),
        .D(\r_hit_fifo_len[0]_i_1__0_n_0 ),
        .Q(r_hit_fifo_len_reg[0]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \r_hit_fifo_len_reg[1] 
       (.C(ACLK),
        .CE(r_hit_refresh),
        .D(\r_hit_fifo_len[1]_i_1__0_n_0 ),
        .Q(r_hit_fifo_len_reg[1]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \r_hit_fifo_len_reg[2] 
       (.C(ACLK),
        .CE(r_hit_refresh),
        .D(\r_hit_fifo_len[2]_i_1__0_n_0 ),
        .Q(r_hit_fifo_len_reg[2]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \r_hit_fifo_len_reg[3] 
       (.C(ACLK),
        .CE(r_hit_refresh),
        .D(\r_hit_fifo_len[3]_i_1__0_n_0 ),
        .Q(r_hit_fifo_len_reg[3]),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair170" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \r_hit_read_fifo_addr[0]_i_1__0 
       (.I0(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_1 [0]),
        .O(\r_hit_read_fifo_addr[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair170" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \r_hit_read_fifo_addr[1]_i_1__0 
       (.I0(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_1 [1]),
        .I1(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_1 [0]),
        .O(\r_hit_read_fifo_addr[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair161" *) 
  LUT4 #(
    .INIT(16'h2A6A)) 
    \r_hit_read_fifo_addr[2]_i_1__0 
       (.I0(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_1 [2]),
        .I1(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_1 [1]),
        .I2(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_1 [0]),
        .I3(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_1 [3]),
        .O(\r_hit_read_fifo_addr[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair161" *) 
  LUT4 #(
    .INIT(16'h3F80)) 
    \r_hit_read_fifo_addr[3]_i_1__0 
       (.I0(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_1 [2]),
        .I1(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_1 [1]),
        .I2(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_1 [0]),
        .I3(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_1 [3]),
        .O(\r_hit_read_fifo_addr[3]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \r_hit_read_fifo_addr_reg[0] 
       (.C(ACLK),
        .CE(E),
        .D(\r_hit_read_fifo_addr[0]_i_1__0_n_0 ),
        .Q(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_1 [0]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \r_hit_read_fifo_addr_reg[1] 
       (.C(ACLK),
        .CE(E),
        .D(\r_hit_read_fifo_addr[1]_i_1__0_n_0 ),
        .Q(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_1 [1]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \r_hit_read_fifo_addr_reg[2] 
       (.C(ACLK),
        .CE(E),
        .D(\r_hit_read_fifo_addr[2]_i_1__0_n_0 ),
        .Q(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_1 [2]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \r_hit_read_fifo_addr_reg[3] 
       (.C(ACLK),
        .CE(E),
        .D(\r_hit_read_fifo_addr[3]_i_1__0_n_0 ),
        .Q(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_1 [3]),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair171" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \r_hit_write_fifo_addr[0]_i_1__0 
       (.I0(r_hit_write_fifo_addr[0]),
        .O(\r_hit_write_fifo_addr[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair171" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \r_hit_write_fifo_addr[1]_i_1__0 
       (.I0(r_hit_write_fifo_addr[1]),
        .I1(r_hit_write_fifo_addr[0]),
        .O(\r_hit_write_fifo_addr[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair163" *) 
  LUT4 #(
    .INIT(16'h2A6A)) 
    \r_hit_write_fifo_addr[2]_i_1__0 
       (.I0(r_hit_write_fifo_addr[2]),
        .I1(r_hit_write_fifo_addr[1]),
        .I2(r_hit_write_fifo_addr[0]),
        .I3(r_hit_write_fifo_addr[3]),
        .O(\r_hit_write_fifo_addr[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair163" *) 
  LUT4 #(
    .INIT(16'h3F80)) 
    \r_hit_write_fifo_addr[3]_i_1__0 
       (.I0(r_hit_write_fifo_addr[2]),
        .I1(r_hit_write_fifo_addr[1]),
        .I2(r_hit_write_fifo_addr[0]),
        .I3(r_hit_write_fifo_addr[3]),
        .O(\r_hit_write_fifo_addr[3]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \r_hit_write_fifo_addr_reg[0] 
       (.C(ACLK),
        .CE(\r_hit_write_fifo_addr_reg[3]_0 ),
        .D(\r_hit_write_fifo_addr[0]_i_1__0_n_0 ),
        .Q(r_hit_write_fifo_addr[0]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \r_hit_write_fifo_addr_reg[1] 
       (.C(ACLK),
        .CE(\r_hit_write_fifo_addr_reg[3]_0 ),
        .D(\r_hit_write_fifo_addr[1]_i_1__0_n_0 ),
        .Q(r_hit_write_fifo_addr[1]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \r_hit_write_fifo_addr_reg[2] 
       (.C(ACLK),
        .CE(\r_hit_write_fifo_addr_reg[3]_0 ),
        .D(\r_hit_write_fifo_addr[2]_i_1__0_n_0 ),
        .Q(r_hit_write_fifo_addr[2]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \r_hit_write_fifo_addr_reg[3] 
       (.C(ACLK),
        .CE(\r_hit_write_fifo_addr_reg[3]_0 ),
        .D(\r_hit_write_fifo_addr[3]_i_1__0_n_0 ),
        .Q(r_hit_write_fifo_addr[3]),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair168" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \r_miss_fifo_len[0]_i_1 
       (.I0(r_miss_fifo_len_reg[0]),
        .O(\r_miss_fifo_len[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair168" *) 
  LUT3 #(
    .INIT(8'h69)) 
    \r_miss_fifo_len[1]_i_1__0 
       (.I0(r_miss_fifo_len_reg[0]),
        .I1(r_miss_push),
        .I2(r_miss_fifo_len_reg[1]),
        .O(\r_miss_fifo_len[1]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair158" *) 
  LUT4 #(
    .INIT(16'h78E1)) 
    \r_miss_fifo_len[2]_i_1__0 
       (.I0(r_miss_fifo_len_reg[0]),
        .I1(r_miss_push),
        .I2(r_miss_fifo_len_reg[2]),
        .I3(r_miss_fifo_len_reg[1]),
        .O(\r_miss_fifo_len[2]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair158" *) 
  LUT5 #(
    .INIT(32'h7F80FE01)) 
    \r_miss_fifo_len[3]_i_1__0 
       (.I0(r_miss_push),
        .I1(r_miss_fifo_len_reg[0]),
        .I2(r_miss_fifo_len_reg[1]),
        .I3(r_miss_fifo_len_reg[3]),
        .I4(r_miss_fifo_len_reg[2]),
        .O(\r_miss_fifo_len[3]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \r_miss_fifo_len_reg[0] 
       (.C(ACLK),
        .CE(r_miss_refresh),
        .D(\r_miss_fifo_len[0]_i_1_n_0 ),
        .Q(r_miss_fifo_len_reg[0]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \r_miss_fifo_len_reg[1] 
       (.C(ACLK),
        .CE(r_miss_refresh),
        .D(\r_miss_fifo_len[1]_i_1__0_n_0 ),
        .Q(r_miss_fifo_len_reg[1]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \r_miss_fifo_len_reg[2] 
       (.C(ACLK),
        .CE(r_miss_refresh),
        .D(\r_miss_fifo_len[2]_i_1__0_n_0 ),
        .Q(r_miss_fifo_len_reg[2]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \r_miss_fifo_len_reg[3] 
       (.C(ACLK),
        .CE(r_miss_refresh),
        .D(\r_miss_fifo_len[3]_i_1__0_n_0 ),
        .Q(r_miss_fifo_len_reg[3]),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair160" *) 
  LUT3 #(
    .INIT(8'hB4)) 
    \r_miss_read_fifo_addr[0]_i_1__0 
       (.I0(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_0 ),
        .I1(r_pop_safe_i),
        .I2(\r_miss_read_fifo_addr_reg[1]_0 [0]),
        .O(\r_miss_read_fifo_addr[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair160" *) 
  LUT4 #(
    .INIT(16'hF708)) 
    \r_miss_read_fifo_addr[1]_i_1__0 
       (.I0(\r_miss_read_fifo_addr_reg[1]_0 [0]),
        .I1(r_pop_safe_i),
        .I2(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_0 ),
        .I3(\r_miss_read_fifo_addr_reg[1]_0 [1]),
        .O(\r_miss_read_fifo_addr[1]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \r_miss_read_fifo_addr_reg[0] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\r_miss_read_fifo_addr[0]_i_1__0_n_0 ),
        .Q(\r_miss_read_fifo_addr_reg[1]_0 [0]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \r_miss_read_fifo_addr_reg[1] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\r_miss_read_fifo_addr[1]_i_1__0_n_0 ),
        .Q(\r_miss_read_fifo_addr_reg[1]_0 [1]),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair169" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \r_miss_write_fifo_addr[0]_i_1__0 
       (.I0(r_miss_push),
        .I1(r_miss_write_fifo_addr[0]),
        .O(\r_miss_write_fifo_addr[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair169" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \r_miss_write_fifo_addr[1]_i_1__0 
       (.I0(r_miss_write_fifo_addr[0]),
        .I1(r_miss_push),
        .I2(r_miss_write_fifo_addr[1]),
        .O(\r_miss_write_fifo_addr[1]_i_1__0_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \r_miss_write_fifo_addr_reg[0] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\r_miss_write_fifo_addr[0]_i_1__0_n_0 ),
        .Q(r_miss_write_fifo_addr[0]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \r_miss_write_fifo_addr_reg[1] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\r_miss_write_fifo_addr[1]_i_1__0_n_0 ),
        .Q(r_miss_write_fifo_addr[1]),
        .R(Q));
  (* srl_bus_name = "U0/\FE/Use_Port_1.AXI_1/R_Channel/ri_fifo_mem_reg[15][Hit] " *) 
  (* srl_name = "U0/\FE/Use_Port_1.AXI_1/R_Channel/ri_fifo_mem_reg[15][Hit][-1111111111]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Hit][-1111111111]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(\lookup_read_data_new[0,1][Valid] ),
        .CLK(ACLK),
        .D(\lookup_read_data_new[0,0][Hit] ),
        .Q(\ri_fifo_mem_reg[15][Hit][-1111111111]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_1.AXI_1/R_Channel/rip_fifo_mem_reg[15][ID] " *) 
  (* srl_name = "U0/\FE/Use_Port_1.AXI_1/R_Channel/rip_fifo_mem_reg[15][ID][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \rip_fifo_mem_reg[15][ID][0]_srl16 
       (.A0(rip_read_fifo_addr[0]),
        .A1(rip_read_fifo_addr[1]),
        .A2(rip_read_fifo_addr[2]),
        .A3(rip_read_fifo_addr[3]),
        .CE(FIFO_RIP_Pointer_n_6),
        .CLK(ACLK),
        .D(S1_AXI_ARID),
        .Q(\rip_fifo_mem_reg[15][ID][0]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_1.AXI_1/R_Channel/rip_fifo_mem_reg[15][Last] " *) 
  (* srl_name = "U0/\FE/Use_Port_1.AXI_1/R_Channel/rip_fifo_mem_reg[15][Last][-1111111111]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \rip_fifo_mem_reg[15][Last][-1111111111]_srl16 
       (.A0(rip_read_fifo_addr[0]),
        .A1(rip_read_fifo_addr[1]),
        .A2(rip_read_fifo_addr[2]),
        .A3(rip_read_fifo_addr[3]),
        .CE(FIFO_RIP_Pointer_n_6),
        .CLK(ACLK),
        .D(1'b1),
        .Q(\rip_fifo_mem_reg[15][Last][-1111111111]_srl16_n_0 ));
  FDRE \rip_id_reg[0] 
       (.C(ACLK),
        .CE(rip_refresh_reg),
        .D(\rip_fifo_mem_reg[15][ID][0]_srl16_n_0 ),
        .Q(S1_AXI_RID),
        .R(Q));
  FDRE rip_last_reg
       (.C(ACLK),
        .CE(rip_refresh_reg),
        .D(\rip_fifo_mem_reg[15][Last][-1111111111]_srl16_n_0 ),
        .Q(rip_last_3),
        .R(Q));
  LUT2 #(
    .INIT(4'h2)) 
    rr_fifo_mem_reg_0_15_0_0_i_1__0
       (.I0(M0_AXI_RRESP[0]),
        .I1(\r_hit_write_fifo_addr_reg[3]_0 ),
        .O(\S1_AXI_RRESP[1] [0]));
  LUT2 #(
    .INIT(4'h2)) 
    rr_fifo_mem_reg_0_15_1_1_i_1__0
       (.I0(M0_AXI_RRESP[1]),
        .I1(\r_hit_write_fifo_addr_reg[3]_0 ),
        .O(\S1_AXI_RRESP[1] [1]));
  LUT2 #(
    .INIT(4'hB)) 
    rw_fifo_mem_reg_0_15_30_31_i_3__0
       (.I0(r_hit_write_fifo_addr[3]),
        .I1(\r_hit_write_fifo_addr_reg[3]_0 ),
        .O(\Use_FPGA_2.S_AXI_RVALID_reg_1 [3]));
  LUT2 #(
    .INIT(4'hB)) 
    rw_fifo_mem_reg_0_15_30_31_i_4__0
       (.I0(r_hit_write_fifo_addr[2]),
        .I1(\r_hit_write_fifo_addr_reg[3]_0 ),
        .O(\Use_FPGA_2.S_AXI_RVALID_reg_1 [2]));
  LUT3 #(
    .INIT(8'hB8)) 
    rw_fifo_mem_reg_0_15_30_31_i_5__0
       (.I0(r_hit_write_fifo_addr[1]),
        .I1(\r_hit_write_fifo_addr_reg[3]_0 ),
        .I2(r_miss_write_fifo_addr[1]),
        .O(\Use_FPGA_2.S_AXI_RVALID_reg_1 [1]));
  LUT3 #(
    .INIT(8'hB8)) 
    rw_fifo_mem_reg_0_15_30_31_i_6__0
       (.I0(r_hit_write_fifo_addr[0]),
        .I1(\r_hit_write_fifo_addr_reg[3]_0 ),
        .I2(r_miss_write_fifo_addr[0]),
        .O(\Use_FPGA_2.S_AXI_RVALID_reg_1 [0]));
  (* SOFT_HLUTNM = "soft_lutpair167" *) 
  LUT3 #(
    .INIT(8'h0D)) 
    update_read_resize_first_i_3
       (.I0(\lookup_read_data_info[0,1][Valid] ),
        .I1(\r_hit_write_fifo_addr_reg[3]_1 ),
        .I2(\r_miss_fifo_len_reg[3]_0 ),
        .O(\update_rd_offset_cnt_reg[0] ));
endmodule

(* ORIG_REF_NAME = "sc_s_axi_r_channel" *) 
module design_1_system_cache_0_0_sc_s_axi_r_channel_10
   (\read_info_status[0,0][Almost_Full] ,
    \read_info_status[0,0][Full] ,
    \r_hit_read_fifo_addr_reg[0]_0 ,
    \Use_FPGA.Use_Normal_Line.Line_Fit_Inst ,
    \r_hit_write_fifo_addr_reg[3]_0 ,
    \r_hit_write_fifo_addr_reg[3]_1 ,
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_0 ,
    \r_miss_fifo_len_reg[3]_0 ,
    r_push_safe,
    S0_AXI_RID,
    rip_last,
    S0_AXI_RVALID,
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_1 ,
    r_miss_full_fifo_addr,
    S0_AXI_ARREADY,
    \rd_port_access[0][Valid] ,
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[2]_0 ,
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0]_0 ,
    r_read_fifo_addr,
    r_write_fifo_addr,
    lud_addr_pipeline_full0,
    \update_rd_offset_cnt_reg[0] ,
    new_read_data_resp,
    \arb_prohibit_quick_reg[0] ,
    Q,
    ACLK,
    \lookup_read_data_new[0,0][Valid] ,
    S0_AXI_RREADY,
    \lookup_read_data_info[0,0][Valid] ,
    \update_read_data_info[0,0][Valid] ,
    S0_AXI_ARID,
    \lookup_read_data_new[0,0][Hit] ,
    \Gen_Port_Ready[0].Use_Slow_Port.Rd_FF_Inst ,
    S0_AXI_ARVALID,
    r_hit_last,
    r_miss_last,
    \Use_FPGA_Flag_Hit.Full_Inst_0 ,
    lud_addr_pipeline_full,
    lud_reg_valid_reg,
    p_57_in,
    \lud_mem_port_one_hot_reg[1] ,
    \Use_Rd_Ctrl_Pipeline.ri_hit_reg_0 ,
    \Use_FPGA_Flag_Hit.Full_Inst_1 ,
    lud_reg_valid_reg_0,
    lud_reg_port_num,
    \read_data_status[0,1][Hit_Almost_Full] ,
    M0_AXI_RRESP,
    rd_port_ready_cmb_0,
    access_piperun);
  output \read_info_status[0,0][Almost_Full] ;
  output \read_info_status[0,0][Full] ;
  output \r_hit_read_fifo_addr_reg[0]_0 ;
  output \Use_FPGA.Use_Normal_Line.Line_Fit_Inst ;
  output \r_hit_write_fifo_addr_reg[3]_0 ;
  output \r_hit_write_fifo_addr_reg[3]_1 ;
  output \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_0 ;
  output \r_miss_fifo_len_reg[3]_0 ;
  output r_push_safe;
  output [0:0]S0_AXI_RID;
  output rip_last;
  output S0_AXI_RVALID;
  output [3:0]\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_1 ;
  output [1:0]r_miss_full_fifo_addr;
  output S0_AXI_ARREADY;
  output \rd_port_access[0][Valid] ;
  output \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[2]_0 ;
  output \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0]_0 ;
  output [1:0]r_read_fifo_addr;
  output [3:0]r_write_fifo_addr;
  output lud_addr_pipeline_full0;
  output \update_rd_offset_cnt_reg[0] ;
  output [1:0]new_read_data_resp;
  output \arb_prohibit_quick_reg[0] ;
  input Q;
  input ACLK;
  input \lookup_read_data_new[0,0][Valid] ;
  input S0_AXI_RREADY;
  input \lookup_read_data_info[0,0][Valid] ;
  input \update_read_data_info[0,0][Valid] ;
  input [0:0]S0_AXI_ARID;
  input \lookup_read_data_new[0,0][Hit] ;
  input \Gen_Port_Ready[0].Use_Slow_Port.Rd_FF_Inst ;
  input S0_AXI_ARVALID;
  input r_hit_last;
  input r_miss_last;
  input \Use_FPGA_Flag_Hit.Full_Inst_0 ;
  input lud_addr_pipeline_full;
  input lud_reg_valid_reg;
  input p_57_in;
  input [0:0]\lud_mem_port_one_hot_reg[1] ;
  input [0:0]\Use_Rd_Ctrl_Pipeline.ri_hit_reg_0 ;
  input \Use_FPGA_Flag_Hit.Full_Inst_1 ;
  input lud_reg_valid_reg_0;
  input lud_reg_port_num;
  input \read_data_status[0,1][Hit_Almost_Full] ;
  input [1:0]M0_AXI_RRESP;
  input rd_port_ready_cmb_0;
  input access_piperun;

  wire ACLK;
  wire D;
  wire FIFO_RIP_Pointer_n_6;
  wire FIFO_RIP_Pointer_n_9;
  wire FIFO_RI_Pointer_n_2;
  wire \Gen_Port_Ready[0].Use_Slow_Port.Rd_FF_Inst ;
  wire I4;
  wire [1:0]M0_AXI_RRESP;
  wire Q;
  wire RC_And_Inst5_n_1;
  wire RC_And_Inst5_n_2;
  wire RC_And_Inst5_n_3;
  wire RC_And_Inst5_n_5;
  wire RC_And_Inst5_n_6;
  wire RC_And_Inst6_n_1;
  wire RC_And_Inst6_n_2;
  wire [0:0]S0_AXI_ARID;
  wire S0_AXI_ARREADY;
  wire S0_AXI_ARVALID;
  wire [0:0]S0_AXI_RID;
  wire S0_AXI_RREADY;
  wire S0_AXI_RVALID;
  wire \Use_FPGA.Use_Normal_Line.Line_Fit_Inst ;
  wire \Use_FPGA_Flag_Hit.Almost_Empty_Inst_i_1_n_0 ;
  wire \Use_FPGA_Flag_Hit.Empty_Inst_i_1_n_0 ;
  wire \Use_FPGA_Flag_Hit.Full_Inst_0 ;
  wire \Use_FPGA_Flag_Hit.Full_Inst_1 ;
  wire \Use_FPGA_Flag_Hit.Full_Inst_i_1_n_0 ;
  wire \Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst_i_1_n_0 ;
  wire \Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst_i_2_n_0 ;
  wire \Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst_n_0 ;
  wire \Use_FPGA_Flag_Miss.Almost_Empty_Inst_i_1_n_0 ;
  wire \Use_FPGA_Flag_Miss.Almost_Full_Inst_i_1_n_0 ;
  wire \Use_FPGA_Flag_Miss.Empty_Inst_i_1_n_0 ;
  wire \Use_FPGA_Flag_Miss.Full_Inst_i_1_n_0 ;
  wire \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0]_0 ;
  wire \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[2]_0 ;
  wire \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_0 ;
  wire [3:0]\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_1 ;
  wire [0:0]\Use_Rd_Ctrl_Pipeline.ri_hit_reg_0 ;
  wire access_piperun;
  wire \arb_prohibit_quick_reg[0] ;
  wire \lookup_read_data_info[0,0][Valid] ;
  wire \lookup_read_data_new[0,0][Hit] ;
  wire \lookup_read_data_new[0,0][Valid] ;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lud_addr_pipeline_full;
  wire lud_addr_pipeline_full0;
  wire [0:0]\lud_mem_port_one_hot_reg[1] ;
  wire lud_reg_port_num;
  wire lud_reg_valid_reg;
  wire lud_reg_valid_reg_0;
  wire [1:0]new_read_data_resp;
  wire p_3_out__2;
  wire p_4_out__2;
  wire p_57_in;
  wire queue_almost_empty_next__2;
  wire queue_almost_empty_next__3;
  wire queue_almost_full_next__2;
  wire queue_almost_full_next__3;
  wire [3:0]queue_index;
  wire r_hit_fifo_almost_empty;
  wire \r_hit_fifo_len[0]_i_1_n_0 ;
  wire \r_hit_fifo_len[1]_i_1_n_0 ;
  wire \r_hit_fifo_len[2]_i_1_n_0 ;
  wire \r_hit_fifo_len[3]_i_1_n_0 ;
  wire [3:0]r_hit_fifo_len_reg__0;
  wire r_hit_last;
  wire \r_hit_read_fifo_addr[0]_i_1_n_0 ;
  wire \r_hit_read_fifo_addr[1]_i_1_n_0 ;
  wire \r_hit_read_fifo_addr[2]_i_1_n_0 ;
  wire \r_hit_read_fifo_addr[3]_i_1_n_0 ;
  wire \r_hit_read_fifo_addr_reg[0]_0 ;
  wire r_hit_refresh;
  wire [3:0]r_hit_write_fifo_addr;
  wire \r_hit_write_fifo_addr[0]_i_1_n_0 ;
  wire \r_hit_write_fifo_addr[1]_i_1_n_0 ;
  wire \r_hit_write_fifo_addr[2]_i_1_n_0 ;
  wire \r_hit_write_fifo_addr[3]_i_1_n_0 ;
  wire \r_hit_write_fifo_addr_reg[3]_0 ;
  wire \r_hit_write_fifo_addr_reg[3]_1 ;
  wire r_miss_fifo_almost_empty;
  wire r_miss_fifo_almost_full;
  wire r_miss_fifo_empty;
  wire \r_miss_fifo_len[0]_i_1__0_n_0 ;
  wire \r_miss_fifo_len[1]_i_1_n_0 ;
  wire \r_miss_fifo_len[2]_i_1_n_0 ;
  wire \r_miss_fifo_len[3]_i_1_n_0 ;
  wire \r_miss_fifo_len_reg[3]_0 ;
  wire [3:0]r_miss_fifo_len_reg__0;
  wire [1:0]r_miss_full_fifo_addr;
  wire r_miss_last;
  wire r_miss_push;
  wire \r_miss_read_fifo_addr[0]_i_1_n_0 ;
  wire \r_miss_read_fifo_addr[1]_i_1_n_0 ;
  wire r_miss_refresh;
  wire [1:0]r_miss_write_fifo_addr;
  wire \r_miss_write_fifo_addr[0]_i_1_n_0 ;
  wire \r_miss_write_fifo_addr[1]_i_1_n_0 ;
  wire [3:1]r_next_fifo_addr__7;
  wire r_pop;
  wire r_pop_safe_i;
  wire r_pop_valid;
  wire r_push_safe;
  wire [1:0]r_read_fifo_addr;
  wire [3:0]r_write_fifo_addr;
  wire \rd_port_access[0][Valid] ;
  wire rd_port_ready_cmb_0;
  wire \read_data_status[0,0][Hit_Almost_Full] ;
  wire \read_data_status[0,1][Hit_Almost_Full] ;
  wire \read_info_status[0,0][Almost_Full] ;
  wire \read_info_status[0,0][Full] ;
  wire ri_exist;
  wire \ri_fifo_mem_reg[15][Hit][-1111111111]_srl16_n_0 ;
  wire \rip_fifo_mem_reg[15][ID][0]_srl16_n_0 ;
  wire \rip_fifo_mem_reg[15][Last][-1111111111]_srl16_n_0 ;
  wire rip_last;
  wire rip_pop;
  wire [3:0]rip_read_fifo_addr;
  wire rip_refresh_reg;
  wire \update_rd_offset_cnt_reg[0] ;
  wire \update_read_data_info[0,0][Valid] ;
  wire \NLW_Use_FPGA_1.LUT_Refresh_Inst_O5_UNCONNECTED ;

  design_1_system_cache_0_0_sc_srl_fifo_counter__parameterized5_14 FIFO_RIP_Pointer
       (.ACLK(ACLK),
        .\Gen_Port_Ready[0].Use_Slow_Port.Rd_FF_Inst (\Gen_Port_Ready[0].Use_Slow_Port.Rd_FF_Inst ),
        .Q(Q),
        .S0_AXI_ARREADY(S0_AXI_ARREADY),
        .S0_AXI_ARVALID(S0_AXI_ARVALID),
        .\Use_FPGA.Almost_Full_Inst_0 (FIFO_RIP_Pointer_n_6),
        .\Use_FPGA.Use_Normal_Line.Line_Fit_Inst_0 (\Use_FPGA.Use_Normal_Line.Line_Fit_Inst ),
        .\r_hit_write_fifo_addr_reg[3] (FIFO_RIP_Pointer_n_9),
        .\rd_port_access[0][Valid] (\rd_port_access[0][Valid] ),
        .ri_exist(ri_exist),
        .rip_pop(rip_pop),
        .rip_read_fifo_addr(rip_read_fifo_addr),
        .rip_refresh_reg(rip_refresh_reg));
  design_1_system_cache_0_0_sc_srl_fifo_counter__parameterized3_15 FIFO_RI_Pointer
       (.ACLK(ACLK),
        .Q(Q),
        .\Use_FPGA.Almost_Empty_Inst_0 (FIFO_RI_Pointer_n_2),
        .\Use_Reg_Ctrl.queue_exist_i_reg_0 (RC_And_Inst6_n_2),
        .\lookup_read_data_new[0,0][Valid] (\lookup_read_data_new[0,0][Valid] ),
        .queue_index(queue_index),
        .\read_info_status[0,0][Almost_Full] (\read_info_status[0,0][Almost_Full] ),
        .\read_info_status[0,0][Full] (\read_info_status[0,0][Full] ),
        .ri_exist(ri_exist),
        .rip_pop(rip_pop));
  design_1_system_cache_0_0_carry_and_16 RC_And_Inst3
       (.\Use_Reg_Ctrl.queue_exist_i_reg (FIFO_RIP_Pointer_n_9),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(S0_AXI_RREADY),
        .lopt_3(lopt_2),
        .lopt_4(lopt_3),
        .lopt_5(lopt_4),
        .lopt_6(lopt_5),
        .lopt_7(lopt_6),
        .lopt_8(lopt_7),
        .r_pop_valid(r_pop_valid));
  design_1_system_cache_0_0_carry_and_17 RC_And_Inst4
       (.S0_AXI_RREADY(S0_AXI_RREADY),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .r_pop(r_pop),
        .r_pop_valid(r_pop_valid));
  design_1_system_cache_0_0_carry_and_n_18 RC_And_Inst5
       (.I4(I4),
        .Q(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_1 ),
        .\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst (\ri_fifo_mem_reg[15][Hit][-1111111111]_srl16_n_0 ),
        .\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0] (RC_And_Inst5_n_5),
        .\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0]_0 (RC_And_Inst5_n_6),
        .\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0]_1 (\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0]_0 ),
        .\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[1] (RC_And_Inst5_n_1),
        .\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[2] (RC_And_Inst5_n_2),
        .\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3] (RC_And_Inst5_n_3),
        .\Use_Rd_Ctrl_Pipeline.ri_hit_reg (\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_0 ),
        .\Use_Reg_Ctrl.queue_exist_i_reg (RC_And_Inst6_n_2),
        .lopt(lopt_2),
        .lopt_1(lopt_3),
        .lopt_2(lopt_4),
        .p_3_out__2(p_3_out__2),
        .r_miss_fifo_almost_empty(r_miss_fifo_almost_empty),
        .r_miss_fifo_empty(r_miss_fifo_empty),
        .r_miss_full_fifo_addr(r_miss_full_fifo_addr),
        .r_miss_push(r_miss_push),
        .r_next_fifo_addr__7(r_next_fifo_addr__7),
        .r_pop(r_pop),
        .r_pop_safe_i(r_pop_safe_i),
        .ri_exist(ri_exist),
        .rip_pop(rip_pop));
  design_1_system_cache_0_0_carry_and_19 RC_And_Inst6
       (.Q(Q),
        .\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst (\ri_fifo_mem_reg[15][Hit][-1111111111]_srl16_n_0 ),
        .\Use_FPGA.Empty_Inst (FIFO_RI_Pointer_n_2),
        .\Use_FPGA_2.S_AXI_RVALID_reg (RC_And_Inst6_n_1),
        .\Use_Rd_Ctrl_Pipeline.ri_hit_reg (RC_And_Inst6_n_2),
        .\Use_Rd_Ctrl_Pipeline.ri_hit_reg_0 (\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_0 ),
        .lopt(lopt_5),
        .lopt_1(lopt_6),
        .lopt_2(lopt_7),
        .p_3_out__2(p_3_out__2),
        .p_4_out__2(p_4_out__2),
        .r_hit_last(r_hit_last),
        .r_miss_last(r_miss_last),
        .r_pop_safe_i(r_pop_safe_i),
        .ri_exist(ri_exist),
        .rip_pop(rip_pop));
  design_1_system_cache_0_0_carry_latch_and_20 RC_Latch_Inst1
       (.E(\r_hit_read_fifo_addr_reg[0]_0 ),
        .I4(I4),
        .\Use_FPGA_Flag_Hit.Full_Inst (\Use_FPGA_Flag_Hit.Full_Inst_0 ),
        .\Use_FPGA_Flag_Hit.Full_Inst_0 (\r_hit_write_fifo_addr_reg[3]_1 ),
        .\Use_FPGA_Flag_Hit.Full_Inst_1 (\Use_FPGA_Flag_Hit.Full_Inst_1 ),
        .\Use_Rd_Ctrl_Pipeline.ri_hit_reg (\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_0 ),
        .\Use_Rd_Ctrl_Pipeline.ri_hit_reg_0 (\Use_Rd_Ctrl_Pipeline.ri_hit_reg_0 ),
        .lud_addr_pipeline_full(lud_addr_pipeline_full),
        .lud_addr_pipeline_full0(lud_addr_pipeline_full0),
        .\lud_mem_port_one_hot_reg[1] (\lud_mem_port_one_hot_reg[1] ),
        .lud_reg_port_num(lud_reg_port_num),
        .\lud_reg_valid_one_hot_reg[0] (\r_hit_write_fifo_addr_reg[3]_0 ),
        .lud_reg_valid_reg(lud_reg_valid_reg),
        .lud_reg_valid_reg_0(lud_reg_valid_reg_0),
        .p_4_out__2(p_4_out__2),
        .p_57_in(p_57_in),
        .r_hit_fifo_almost_empty(r_hit_fifo_almost_empty),
        .r_pop_safe_i(r_pop_safe_i),
        .\read_data_status[0,0][Hit_Almost_Full] (\read_data_status[0,0][Hit_Almost_Full] ),
        .\read_data_status[0,1][Hit_Almost_Full] (\read_data_status[0,1][Hit_Almost_Full] ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h2222D22222222222)) 
    \Use_FPGA_1.LUT_Hit_Inst 
       (.I0(\lookup_read_data_info[0,0][Valid] ),
        .I1(\r_hit_write_fifo_addr_reg[3]_1 ),
        .I2(r_pop),
        .I3(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_0 ),
        .I4(I4),
        .I5(1'b1),
        .O5(\r_hit_write_fifo_addr_reg[3]_0 ),
        .O6(r_hit_refresh));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h2F222F220D000D00)) 
    \Use_FPGA_1.LUT_Push_Inst 
       (.I0(\lookup_read_data_info[0,0][Valid] ),
        .I1(\r_hit_write_fifo_addr_reg[3]_1 ),
        .I2(\r_miss_fifo_len_reg[3]_0 ),
        .I3(\update_read_data_info[0,0][Valid] ),
        .I4(1'b0),
        .I5(1'b1),
        .O5(r_miss_push),
        .O6(r_push_safe));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h0D000D00F2FF0D00)) 
    \Use_FPGA_1.LUT_Refresh_Inst 
       (.I0(\lookup_read_data_info[0,0][Valid] ),
        .I1(\r_hit_write_fifo_addr_reg[3]_1 ),
        .I2(\r_miss_fifo_len_reg[3]_0 ),
        .I3(\update_read_data_info[0,0][Valid] ),
        .I4(r_pop_safe_i),
        .I5(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_0 ),
        .O5(\NLW_Use_FPGA_1.LUT_Refresh_Inst_O5_UNCONNECTED ),
        .O6(r_miss_refresh));
  FDRE \Use_FPGA_2.S_AXI_RVALID_reg 
       (.C(ACLK),
        .CE(1'b1),
        .D(RC_And_Inst6_n_1),
        .Q(S0_AXI_RVALID),
        .R(1'b0));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA_Flag_Hit.Almost_Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA_Flag_Hit.Almost_Empty_Inst_i_1_n_0 ),
        .Q(r_hit_fifo_almost_empty),
        .R(Q));
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_FPGA_Flag_Hit.Almost_Empty_Inst_i_1 
       (.I0(queue_almost_empty_next__3),
        .I1(r_hit_refresh),
        .I2(r_hit_fifo_almost_empty),
        .O(\Use_FPGA_Flag_Hit.Almost_Empty_Inst_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h88888888888B8888)) 
    \Use_FPGA_Flag_Hit.Almost_Empty_Inst_i_2 
       (.I0(I4),
        .I1(\r_hit_write_fifo_addr_reg[3]_0 ),
        .I2(r_hit_fifo_len_reg__0[3]),
        .I3(r_hit_fifo_len_reg__0[2]),
        .I4(r_hit_fifo_len_reg__0[1]),
        .I5(r_hit_fifo_len_reg__0[0]),
        .O(queue_almost_empty_next__3));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA_Flag_Hit.Almost_Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(D),
        .Q(\read_data_status[0,0][Hit_Almost_Full] ),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair136" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_FPGA_Flag_Hit.Almost_Full_Inst_i_1 
       (.I0(queue_almost_full_next__2),
        .I1(r_hit_refresh),
        .I2(\read_data_status[0,0][Hit_Almost_Full] ),
        .O(D));
  LUT6 #(
    .INIT(64'h1000FFFF10000000)) 
    \Use_FPGA_Flag_Hit.Almost_Full_Inst_i_2 
       (.I0(r_hit_fifo_len_reg__0[1]),
        .I1(r_hit_fifo_len_reg__0[2]),
        .I2(r_hit_fifo_len_reg__0[0]),
        .I3(r_hit_fifo_len_reg__0[3]),
        .I4(\r_hit_write_fifo_addr_reg[3]_0 ),
        .I5(\r_hit_write_fifo_addr_reg[3]_1 ),
        .O(queue_almost_full_next__2));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA_Flag_Hit.Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA_Flag_Hit.Empty_Inst_i_1_n_0 ),
        .Q(I4),
        .S(Q));
  LUT4 #(
    .INIT(16'h2F20)) 
    \Use_FPGA_Flag_Hit.Empty_Inst_i_1 
       (.I0(r_hit_fifo_almost_empty),
        .I1(\r_hit_write_fifo_addr_reg[3]_0 ),
        .I2(r_hit_refresh),
        .I3(I4),
        .O(\Use_FPGA_Flag_Hit.Empty_Inst_i_1_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA_Flag_Hit.Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA_Flag_Hit.Full_Inst_i_1_n_0 ),
        .Q(\r_hit_write_fifo_addr_reg[3]_1 ),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair136" *) 
  LUT4 #(
    .INIT(16'h8F80)) 
    \Use_FPGA_Flag_Hit.Full_Inst_i_1 
       (.I0(\r_hit_write_fifo_addr_reg[3]_0 ),
        .I1(\read_data_status[0,0][Hit_Almost_Full] ),
        .I2(r_hit_refresh),
        .I3(\r_hit_write_fifo_addr_reg[3]_1 ),
        .O(\Use_FPGA_Flag_Hit.Full_Inst_i_1_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst_i_1_n_0 ),
        .Q(\Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst_n_0 ),
        .S(Q));
  (* SOFT_HLUTNM = "soft_lutpair140" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst_i_1 
       (.I0(\Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst_i_2_n_0 ),
        .I1(r_hit_refresh),
        .I2(\Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst_n_0 ),
        .O(\Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair132" *) 
  LUT5 #(
    .INIT(32'h001FFFFF)) 
    \Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst_i_2 
       (.I0(r_hit_fifo_len_reg__0[0]),
        .I1(r_hit_fifo_len_reg__0[1]),
        .I2(\r_hit_write_fifo_addr_reg[3]_0 ),
        .I3(r_hit_fifo_len_reg__0[2]),
        .I4(r_hit_fifo_len_reg__0[3]),
        .O(\Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst_i_2_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA_Flag_Miss.Almost_Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA_Flag_Miss.Almost_Empty_Inst_i_1_n_0 ),
        .Q(r_miss_fifo_almost_empty),
        .R(Q));
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_FPGA_Flag_Miss.Almost_Empty_Inst_i_1 
       (.I0(queue_almost_empty_next__2),
        .I1(r_miss_refresh),
        .I2(r_miss_fifo_almost_empty),
        .O(\Use_FPGA_Flag_Miss.Almost_Empty_Inst_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h88888888888B8888)) 
    \Use_FPGA_Flag_Miss.Almost_Empty_Inst_i_2 
       (.I0(r_miss_fifo_empty),
        .I1(r_miss_push),
        .I2(r_miss_fifo_len_reg__0[3]),
        .I3(r_miss_fifo_len_reg__0[2]),
        .I4(r_miss_fifo_len_reg__0[1]),
        .I5(r_miss_fifo_len_reg__0[0]),
        .O(queue_almost_empty_next__2));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA_Flag_Miss.Almost_Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA_Flag_Miss.Almost_Full_Inst_i_1_n_0 ),
        .Q(r_miss_fifo_almost_full),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair137" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \Use_FPGA_Flag_Miss.Almost_Full_Inst_i_1 
       (.I0(queue_almost_full_next__3),
        .I1(r_miss_refresh),
        .I2(r_miss_fifo_almost_full),
        .O(\Use_FPGA_Flag_Miss.Almost_Full_Inst_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h0010FFFF00100000)) 
    \Use_FPGA_Flag_Miss.Almost_Full_Inst_i_2 
       (.I0(r_miss_fifo_len_reg__0[3]),
        .I1(r_miss_fifo_len_reg__0[2]),
        .I2(r_miss_fifo_len_reg__0[0]),
        .I3(r_miss_fifo_len_reg__0[1]),
        .I4(r_miss_push),
        .I5(\r_miss_fifo_len_reg[3]_0 ),
        .O(queue_almost_full_next__3));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA_Flag_Miss.Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA_Flag_Miss.Empty_Inst_i_1_n_0 ),
        .Q(r_miss_fifo_empty),
        .S(Q));
  LUT4 #(
    .INIT(16'h2F20)) 
    \Use_FPGA_Flag_Miss.Empty_Inst_i_1 
       (.I0(r_miss_fifo_almost_empty),
        .I1(r_miss_push),
        .I2(r_miss_refresh),
        .I3(r_miss_fifo_empty),
        .O(\Use_FPGA_Flag_Miss.Empty_Inst_i_1_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA_Flag_Miss.Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA_Flag_Miss.Full_Inst_i_1_n_0 ),
        .Q(\r_miss_fifo_len_reg[3]_0 ),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair137" *) 
  LUT4 #(
    .INIT(16'h8F80)) 
    \Use_FPGA_Flag_Miss.Full_Inst_i_1 
       (.I0(r_miss_push),
        .I1(r_miss_fifo_almost_full),
        .I2(r_miss_refresh),
        .I3(\r_miss_fifo_len_reg[3]_0 ),
        .O(\Use_FPGA_Flag_Miss.Full_Inst_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[1]_i_3 
       (.I0(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[2]_0 ),
        .I1(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0]_0 ),
        .O(r_next_fifo_addr__7[1]));
  (* SOFT_HLUTNM = "soft_lutpair133" *) 
  LUT5 #(
    .INIT(32'h7F403FC0)) 
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[2]_i_2 
       (.I0(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_0 ),
        .I1(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[2]_0 ),
        .I2(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0]_0 ),
        .I3(r_read_fifo_addr[0]),
        .I4(r_read_fifo_addr[1]),
        .O(r_next_fifo_addr__7[2]));
  (* SOFT_HLUTNM = "soft_lutpair133" *) 
  LUT5 #(
    .INIT(32'h7F7FC000)) 
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr[3]_i_3 
       (.I0(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_0 ),
        .I1(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[2]_0 ),
        .I2(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0]_0 ),
        .I3(r_read_fifo_addr[0]),
        .I4(r_read_fifo_addr[1]),
        .O(r_next_fifo_addr__7[3]));
  FDRE #(
    .INIT(1'b0)) 
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0] 
       (.C(ACLK),
        .CE(RC_And_Inst5_n_5),
        .D(RC_And_Inst5_n_6),
        .Q(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[0]_0 ),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[1] 
       (.C(ACLK),
        .CE(RC_And_Inst5_n_5),
        .D(RC_And_Inst5_n_1),
        .Q(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[2]_0 ),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[2] 
       (.C(ACLK),
        .CE(RC_And_Inst5_n_5),
        .D(RC_And_Inst5_n_2),
        .Q(r_read_fifo_addr[0]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3] 
       (.C(ACLK),
        .CE(RC_And_Inst5_n_5),
        .D(RC_And_Inst5_n_3),
        .Q(r_read_fifo_addr[1]),
        .R(Q));
  FDRE \Use_Rd_Ctrl_Pipeline.ri_hit_reg 
       (.C(ACLK),
        .CE(RC_And_Inst6_n_2),
        .D(\ri_fifo_mem_reg[15][Hit][-1111111111]_srl16_n_0 ),
        .Q(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_0 ),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair140" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \arb_prohibit_quick[0]_i_1 
       (.I0(\Use_FPGA_Flag_Hit.Use_Normal_Line.Line_Fit_Inst_n_0 ),
        .I1(rd_port_ready_cmb_0),
        .I2(access_piperun),
        .O(\arb_prohibit_quick_reg[0] ));
  LUT1 #(
    .INIT(2'h1)) 
    \r_hit_fifo_len[0]_i_1 
       (.I0(r_hit_fifo_len_reg__0[0]),
        .O(\r_hit_fifo_len[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair139" *) 
  LUT3 #(
    .INIT(8'h69)) 
    \r_hit_fifo_len[1]_i_1 
       (.I0(r_hit_fifo_len_reg__0[0]),
        .I1(\r_hit_write_fifo_addr_reg[3]_0 ),
        .I2(r_hit_fifo_len_reg__0[1]),
        .O(\r_hit_fifo_len[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair139" *) 
  LUT4 #(
    .INIT(16'h78E1)) 
    \r_hit_fifo_len[2]_i_1 
       (.I0(r_hit_fifo_len_reg__0[0]),
        .I1(\r_hit_write_fifo_addr_reg[3]_0 ),
        .I2(r_hit_fifo_len_reg__0[2]),
        .I3(r_hit_fifo_len_reg__0[1]),
        .O(\r_hit_fifo_len[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair132" *) 
  LUT5 #(
    .INIT(32'h7F80FE01)) 
    \r_hit_fifo_len[3]_i_1 
       (.I0(\r_hit_write_fifo_addr_reg[3]_0 ),
        .I1(r_hit_fifo_len_reg__0[0]),
        .I2(r_hit_fifo_len_reg__0[1]),
        .I3(r_hit_fifo_len_reg__0[3]),
        .I4(r_hit_fifo_len_reg__0[2]),
        .O(\r_hit_fifo_len[3]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \r_hit_fifo_len_reg[0] 
       (.C(ACLK),
        .CE(r_hit_refresh),
        .D(\r_hit_fifo_len[0]_i_1_n_0 ),
        .Q(r_hit_fifo_len_reg__0[0]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \r_hit_fifo_len_reg[1] 
       (.C(ACLK),
        .CE(r_hit_refresh),
        .D(\r_hit_fifo_len[1]_i_1_n_0 ),
        .Q(r_hit_fifo_len_reg__0[1]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \r_hit_fifo_len_reg[2] 
       (.C(ACLK),
        .CE(r_hit_refresh),
        .D(\r_hit_fifo_len[2]_i_1_n_0 ),
        .Q(r_hit_fifo_len_reg__0[2]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \r_hit_fifo_len_reg[3] 
       (.C(ACLK),
        .CE(r_hit_refresh),
        .D(\r_hit_fifo_len[3]_i_1_n_0 ),
        .Q(r_hit_fifo_len_reg__0[3]),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair143" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \r_hit_read_fifo_addr[0]_i_1 
       (.I0(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_1 [0]),
        .O(\r_hit_read_fifo_addr[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair143" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \r_hit_read_fifo_addr[1]_i_1 
       (.I0(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_1 [1]),
        .I1(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_1 [0]),
        .O(\r_hit_read_fifo_addr[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair135" *) 
  LUT4 #(
    .INIT(16'h2A6A)) 
    \r_hit_read_fifo_addr[2]_i_1 
       (.I0(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_1 [2]),
        .I1(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_1 [1]),
        .I2(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_1 [0]),
        .I3(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_1 [3]),
        .O(\r_hit_read_fifo_addr[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair135" *) 
  LUT4 #(
    .INIT(16'h3F80)) 
    \r_hit_read_fifo_addr[3]_i_1 
       (.I0(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_1 [2]),
        .I1(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_1 [1]),
        .I2(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_1 [0]),
        .I3(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_1 [3]),
        .O(\r_hit_read_fifo_addr[3]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \r_hit_read_fifo_addr_reg[0] 
       (.C(ACLK),
        .CE(\r_hit_read_fifo_addr_reg[0]_0 ),
        .D(\r_hit_read_fifo_addr[0]_i_1_n_0 ),
        .Q(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_1 [0]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \r_hit_read_fifo_addr_reg[1] 
       (.C(ACLK),
        .CE(\r_hit_read_fifo_addr_reg[0]_0 ),
        .D(\r_hit_read_fifo_addr[1]_i_1_n_0 ),
        .Q(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_1 [1]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \r_hit_read_fifo_addr_reg[2] 
       (.C(ACLK),
        .CE(\r_hit_read_fifo_addr_reg[0]_0 ),
        .D(\r_hit_read_fifo_addr[2]_i_1_n_0 ),
        .Q(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_1 [2]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \r_hit_read_fifo_addr_reg[3] 
       (.C(ACLK),
        .CE(\r_hit_read_fifo_addr_reg[0]_0 ),
        .D(\r_hit_read_fifo_addr[3]_i_1_n_0 ),
        .Q(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_1 [3]),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair144" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \r_hit_write_fifo_addr[0]_i_1 
       (.I0(r_hit_write_fifo_addr[0]),
        .O(\r_hit_write_fifo_addr[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair144" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \r_hit_write_fifo_addr[1]_i_1 
       (.I0(r_hit_write_fifo_addr[1]),
        .I1(r_hit_write_fifo_addr[0]),
        .O(\r_hit_write_fifo_addr[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair138" *) 
  LUT4 #(
    .INIT(16'h2A6A)) 
    \r_hit_write_fifo_addr[2]_i_1 
       (.I0(r_hit_write_fifo_addr[2]),
        .I1(r_hit_write_fifo_addr[1]),
        .I2(r_hit_write_fifo_addr[0]),
        .I3(r_hit_write_fifo_addr[3]),
        .O(\r_hit_write_fifo_addr[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair138" *) 
  LUT4 #(
    .INIT(16'h3F80)) 
    \r_hit_write_fifo_addr[3]_i_1 
       (.I0(r_hit_write_fifo_addr[2]),
        .I1(r_hit_write_fifo_addr[1]),
        .I2(r_hit_write_fifo_addr[0]),
        .I3(r_hit_write_fifo_addr[3]),
        .O(\r_hit_write_fifo_addr[3]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \r_hit_write_fifo_addr_reg[0] 
       (.C(ACLK),
        .CE(\r_hit_write_fifo_addr_reg[3]_0 ),
        .D(\r_hit_write_fifo_addr[0]_i_1_n_0 ),
        .Q(r_hit_write_fifo_addr[0]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \r_hit_write_fifo_addr_reg[1] 
       (.C(ACLK),
        .CE(\r_hit_write_fifo_addr_reg[3]_0 ),
        .D(\r_hit_write_fifo_addr[1]_i_1_n_0 ),
        .Q(r_hit_write_fifo_addr[1]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \r_hit_write_fifo_addr_reg[2] 
       (.C(ACLK),
        .CE(\r_hit_write_fifo_addr_reg[3]_0 ),
        .D(\r_hit_write_fifo_addr[2]_i_1_n_0 ),
        .Q(r_hit_write_fifo_addr[2]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \r_hit_write_fifo_addr_reg[3] 
       (.C(ACLK),
        .CE(\r_hit_write_fifo_addr_reg[3]_0 ),
        .D(\r_hit_write_fifo_addr[3]_i_1_n_0 ),
        .Q(r_hit_write_fifo_addr[3]),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair141" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \r_miss_fifo_len[0]_i_1__0 
       (.I0(r_miss_fifo_len_reg__0[0]),
        .O(\r_miss_fifo_len[0]_i_1__0_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair141" *) 
  LUT3 #(
    .INIT(8'h69)) 
    \r_miss_fifo_len[1]_i_1 
       (.I0(r_miss_fifo_len_reg__0[0]),
        .I1(r_miss_push),
        .I2(r_miss_fifo_len_reg__0[1]),
        .O(\r_miss_fifo_len[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair131" *) 
  LUT4 #(
    .INIT(16'h78E1)) 
    \r_miss_fifo_len[2]_i_1 
       (.I0(r_miss_fifo_len_reg__0[0]),
        .I1(r_miss_push),
        .I2(r_miss_fifo_len_reg__0[2]),
        .I3(r_miss_fifo_len_reg__0[1]),
        .O(\r_miss_fifo_len[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair131" *) 
  LUT5 #(
    .INIT(32'h7F80FE01)) 
    \r_miss_fifo_len[3]_i_1 
       (.I0(r_miss_push),
        .I1(r_miss_fifo_len_reg__0[0]),
        .I2(r_miss_fifo_len_reg__0[1]),
        .I3(r_miss_fifo_len_reg__0[3]),
        .I4(r_miss_fifo_len_reg__0[2]),
        .O(\r_miss_fifo_len[3]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \r_miss_fifo_len_reg[0] 
       (.C(ACLK),
        .CE(r_miss_refresh),
        .D(\r_miss_fifo_len[0]_i_1__0_n_0 ),
        .Q(r_miss_fifo_len_reg__0[0]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \r_miss_fifo_len_reg[1] 
       (.C(ACLK),
        .CE(r_miss_refresh),
        .D(\r_miss_fifo_len[1]_i_1_n_0 ),
        .Q(r_miss_fifo_len_reg__0[1]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \r_miss_fifo_len_reg[2] 
       (.C(ACLK),
        .CE(r_miss_refresh),
        .D(\r_miss_fifo_len[2]_i_1_n_0 ),
        .Q(r_miss_fifo_len_reg__0[2]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \r_miss_fifo_len_reg[3] 
       (.C(ACLK),
        .CE(r_miss_refresh),
        .D(\r_miss_fifo_len[3]_i_1_n_0 ),
        .Q(r_miss_fifo_len_reg__0[3]),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair134" *) 
  LUT3 #(
    .INIT(8'hB4)) 
    \r_miss_read_fifo_addr[0]_i_1 
       (.I0(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_0 ),
        .I1(r_pop_safe_i),
        .I2(r_miss_full_fifo_addr[0]),
        .O(\r_miss_read_fifo_addr[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair134" *) 
  LUT4 #(
    .INIT(16'hF708)) 
    \r_miss_read_fifo_addr[1]_i_1 
       (.I0(r_miss_full_fifo_addr[0]),
        .I1(r_pop_safe_i),
        .I2(\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_0 ),
        .I3(r_miss_full_fifo_addr[1]),
        .O(\r_miss_read_fifo_addr[1]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \r_miss_read_fifo_addr_reg[0] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\r_miss_read_fifo_addr[0]_i_1_n_0 ),
        .Q(r_miss_full_fifo_addr[0]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \r_miss_read_fifo_addr_reg[1] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\r_miss_read_fifo_addr[1]_i_1_n_0 ),
        .Q(r_miss_full_fifo_addr[1]),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair142" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \r_miss_write_fifo_addr[0]_i_1 
       (.I0(r_miss_push),
        .I1(r_miss_write_fifo_addr[0]),
        .O(\r_miss_write_fifo_addr[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair142" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \r_miss_write_fifo_addr[1]_i_1 
       (.I0(r_miss_write_fifo_addr[0]),
        .I1(r_miss_push),
        .I2(r_miss_write_fifo_addr[1]),
        .O(\r_miss_write_fifo_addr[1]_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \r_miss_write_fifo_addr_reg[0] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\r_miss_write_fifo_addr[0]_i_1_n_0 ),
        .Q(r_miss_write_fifo_addr[0]),
        .R(Q));
  FDRE #(
    .INIT(1'b0)) 
    \r_miss_write_fifo_addr_reg[1] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\r_miss_write_fifo_addr[1]_i_1_n_0 ),
        .Q(r_miss_write_fifo_addr[1]),
        .R(Q));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/R_Channel/ri_fifo_mem_reg[15][Hit] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/R_Channel/ri_fifo_mem_reg[15][Hit][-1111111111]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Hit][-1111111111]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(\lookup_read_data_new[0,0][Valid] ),
        .CLK(ACLK),
        .D(\lookup_read_data_new[0,0][Hit] ),
        .Q(\ri_fifo_mem_reg[15][Hit][-1111111111]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/R_Channel/rip_fifo_mem_reg[15][ID] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/R_Channel/rip_fifo_mem_reg[15][ID][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \rip_fifo_mem_reg[15][ID][0]_srl16 
       (.A0(rip_read_fifo_addr[0]),
        .A1(rip_read_fifo_addr[1]),
        .A2(rip_read_fifo_addr[2]),
        .A3(rip_read_fifo_addr[3]),
        .CE(FIFO_RIP_Pointer_n_6),
        .CLK(ACLK),
        .D(S0_AXI_ARID),
        .Q(\rip_fifo_mem_reg[15][ID][0]_srl16_n_0 ));
  (* srl_bus_name = "U0/\FE/Use_Port_0.AXI_0/R_Channel/rip_fifo_mem_reg[15][Last] " *) 
  (* srl_name = "U0/\FE/Use_Port_0.AXI_0/R_Channel/rip_fifo_mem_reg[15][Last][-1111111111]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \rip_fifo_mem_reg[15][Last][-1111111111]_srl16 
       (.A0(rip_read_fifo_addr[0]),
        .A1(rip_read_fifo_addr[1]),
        .A2(rip_read_fifo_addr[2]),
        .A3(rip_read_fifo_addr[3]),
        .CE(FIFO_RIP_Pointer_n_6),
        .CLK(ACLK),
        .D(1'b1),
        .Q(\rip_fifo_mem_reg[15][Last][-1111111111]_srl16_n_0 ));
  FDRE \rip_id_reg[0] 
       (.C(ACLK),
        .CE(rip_refresh_reg),
        .D(\rip_fifo_mem_reg[15][ID][0]_srl16_n_0 ),
        .Q(S0_AXI_RID),
        .R(Q));
  FDRE rip_last_reg
       (.C(ACLK),
        .CE(rip_refresh_reg),
        .D(\rip_fifo_mem_reg[15][Last][-1111111111]_srl16_n_0 ),
        .Q(rip_last),
        .R(Q));
  LUT2 #(
    .INIT(4'h2)) 
    rr_fifo_mem_reg_0_15_0_0_i_1
       (.I0(M0_AXI_RRESP[0]),
        .I1(\r_hit_write_fifo_addr_reg[3]_0 ),
        .O(new_read_data_resp[0]));
  LUT2 #(
    .INIT(4'h2)) 
    rr_fifo_mem_reg_0_15_1_1_i_1
       (.I0(M0_AXI_RRESP[1]),
        .I1(\r_hit_write_fifo_addr_reg[3]_0 ),
        .O(new_read_data_resp[1]));
  LUT2 #(
    .INIT(4'hB)) 
    rw_fifo_mem_reg_0_15_30_31_i_3
       (.I0(r_hit_write_fifo_addr[3]),
        .I1(\r_hit_write_fifo_addr_reg[3]_0 ),
        .O(r_write_fifo_addr[3]));
  LUT2 #(
    .INIT(4'hB)) 
    rw_fifo_mem_reg_0_15_30_31_i_4
       (.I0(r_hit_write_fifo_addr[2]),
        .I1(\r_hit_write_fifo_addr_reg[3]_0 ),
        .O(r_write_fifo_addr[2]));
  LUT3 #(
    .INIT(8'hB8)) 
    rw_fifo_mem_reg_0_15_30_31_i_5
       (.I0(r_hit_write_fifo_addr[1]),
        .I1(\r_hit_write_fifo_addr_reg[3]_0 ),
        .I2(r_miss_write_fifo_addr[1]),
        .O(r_write_fifo_addr[1]));
  LUT3 #(
    .INIT(8'hB8)) 
    rw_fifo_mem_reg_0_15_30_31_i_6
       (.I0(r_hit_write_fifo_addr[0]),
        .I1(\r_hit_write_fifo_addr_reg[3]_0 ),
        .I2(r_miss_write_fifo_addr[0]),
        .O(r_write_fifo_addr[0]));
  LUT3 #(
    .INIT(8'h0D)) 
    update_read_resize_first_i_4
       (.I0(\lookup_read_data_info[0,0][Valid] ),
        .I1(\r_hit_write_fifo_addr_reg[3]_1 ),
        .I2(\r_miss_fifo_len_reg[3]_0 ),
        .O(\update_rd_offset_cnt_reg[0] ));
endmodule

(* ORIG_REF_NAME = "sc_srl_fifo_counter" *) 
module design_1_system_cache_0_0_sc_srl_fifo_counter
   (w_read_fifo_addr,
    wr_port_data_valid_i_reg,
    queue_push,
    S1_AXI_WREADY,
    sel,
    Q,
    ACLK,
    w_pop,
    S1_AXI_WVALID,
    wr_port_data_valid_i_reg_0,
    wr_port_data_ready,
    S1_AXI_WLAST);
  output [3:0]w_read_fifo_addr;
  output wr_port_data_valid_i_reg;
  output queue_push;
  output S1_AXI_WREADY;
  output sel;
  input Q;
  input ACLK;
  input w_pop;
  input S1_AXI_WVALID;
  input wr_port_data_valid_i_reg_0;
  input wr_port_data_ready;
  input S1_AXI_WLAST;

  wire ACLK;
  wire CI;
  wire D;
  wire DI;
  wire LI;
  wire Q;
  wire S1_AXI_WLAST;
  wire S1_AXI_WREADY;
  wire S1_AXI_WVALID;
  wire \Use_FPGA.Almost_Empty_Inst_i_1__4_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_i_2__4_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_n_0 ;
  wire \Use_FPGA.Almost_Full_Inst_n_0 ;
  wire \Use_FPGA.Empty_Inst_i_1__4_n_0 ;
  wire \Use_FPGA.Full_Inst_i_1__3_n_0 ;
  wire carry_2;
  wire carry_3;
  wire cnt_di_1;
  wire cnt_di_2;
  wire cnt_s_1;
  wire cnt_s_2;
  wire cnt_s_3;
  wire queue_almost_full_next__5;
  wire queue_push;
  wire read_fifo_addr_next_0;
  wire read_fifo_addr_next_1;
  wire read_fifo_addr_next_2;
  wire read_fifo_addr_next_3;
  wire sel;
  wire w_fifo_empty;
  wire w_fifo_full;
  wire w_pop;
  wire [3:0]w_read_fifo_addr;
  wire wr_port_data_ready;
  wire wr_port_data_valid_i_reg;
  wire wr_port_data_valid_i_reg_0;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED ;

  (* SOFT_HLUTNM = "soft_lutpair149" *) 
  LUT1 #(
    .INIT(2'h1)) 
    S1_AXI_WREADY_INST_0
       (.I0(w_fifo_full),
        .O(S1_AXI_WREADY));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Almost_Empty_Inst_i_1__4_n_0 ),
        .Q(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .R(Q));
  LUT6 #(
    .INIT(64'hFFBAFFCF308A3000)) 
    \Use_FPGA.Almost_Empty_Inst_i_1__4 
       (.I0(\Use_FPGA.Almost_Empty_Inst_i_2__4_n_0 ),
        .I1(w_fifo_full),
        .I2(S1_AXI_WVALID),
        .I3(w_fifo_empty),
        .I4(w_pop),
        .I5(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .O(\Use_FPGA.Almost_Empty_Inst_i_1__4_n_0 ));
  LUT4 #(
    .INIT(16'h0010)) 
    \Use_FPGA.Almost_Empty_Inst_i_2__4 
       (.I0(w_read_fifo_addr[3]),
        .I1(w_read_fifo_addr[2]),
        .I2(w_read_fifo_addr[0]),
        .I3(w_read_fifo_addr[1]),
        .O(\Use_FPGA.Almost_Empty_Inst_i_2__4_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(D),
        .Q(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .R(Q));
  LUT6 #(
    .INIT(64'hEFBAEFEF208A2020)) 
    \Use_FPGA.Almost_Full_Inst_i_1__3 
       (.I0(queue_almost_full_next__5),
        .I1(w_fifo_full),
        .I2(S1_AXI_WVALID),
        .I3(w_fifo_empty),
        .I4(w_pop),
        .I5(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .O(D));
  LUT6 #(
    .INIT(64'hFFFFFFFF10000000)) 
    \Use_FPGA.Almost_Full_Inst_i_2__4 
       (.I0(w_read_fifo_addr[0]),
        .I1(w_read_fifo_addr[1]),
        .I2(w_read_fifo_addr[3]),
        .I3(w_read_fifo_addr[2]),
        .I4(S1_AXI_WVALID),
        .I5(w_fifo_full),
        .O(queue_almost_full_next__5));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h9CAF635063506350)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst 
       (.I0(w_fifo_empty),
        .I1(w_fifo_full),
        .I2(w_pop),
        .I3(S1_AXI_WVALID),
        .I4(w_read_fifo_addr[0]),
        .I5(1'b1),
        .O5(DI),
        .O6(LI));
  LUT3 #(
    .INIT(8'h20)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst_i_2__0 
       (.I0(S1_AXI_WLAST),
        .I1(w_fifo_full),
        .I2(S1_AXI_WVALID),
        .O(queue_push));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_0),
        .Q(w_read_fifo_addr[0]),
        .S(Q));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4 
       (.CI(1'b0),
        .CO({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED [3],carry_3,carry_2,CI}),
        .CYINIT(1'b0),
        .DI({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED [3],cnt_di_2,cnt_di_1,DI}),
        .O({read_fifo_addr_next_3,read_fifo_addr_next_2,read_fifo_addr_next_1,read_fifo_addr_next_0}),
        .S({cnt_s_3,cnt_s_2,cnt_s_1,LI}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[1].Active_Low.Other_Bits.LUT_Inst 
       (.I0(w_fifo_empty),
        .I1(w_fifo_full),
        .I2(w_pop),
        .I3(S1_AXI_WVALID),
        .I4(w_read_fifo_addr[1]),
        .I5(1'b1),
        .O5(cnt_di_1),
        .O6(cnt_s_1));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_1),
        .Q(w_read_fifo_addr[1]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[2].Active_Low.Other_Bits.LUT_Inst 
       (.I0(w_fifo_empty),
        .I1(w_fifo_full),
        .I2(w_pop),
        .I3(S1_AXI_WVALID),
        .I4(w_read_fifo_addr[2]),
        .I5(1'b1),
        .O5(cnt_di_2),
        .O6(cnt_s_2));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_2),
        .Q(w_read_fifo_addr[2]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[3].Active_Low.Last_Bit.LUT_Inst 
       (.I0(w_fifo_empty),
        .I1(w_fifo_full),
        .I2(w_pop),
        .I3(S1_AXI_WVALID),
        .I4(w_read_fifo_addr[3]),
        .I5(1'b1),
        .O(cnt_s_3));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_3),
        .Q(w_read_fifo_addr[3]),
        .S(Q));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Empty_Inst_i_1__4_n_0 ),
        .Q(w_fifo_empty),
        .S(Q));
  (* SOFT_HLUTNM = "soft_lutpair149" *) 
  LUT5 #(
    .INIT(32'hCF8ACF00)) 
    \Use_FPGA.Empty_Inst_i_1__4 
       (.I0(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .I1(w_fifo_full),
        .I2(S1_AXI_WVALID),
        .I3(w_fifo_empty),
        .I4(w_pop),
        .O(\Use_FPGA.Empty_Inst_i_1__4_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Full_Inst_i_1__3_n_0 ),
        .Q(w_fifo_full),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair148" *) 
  LUT5 #(
    .INIT(32'hEC00ECEC)) 
    \Use_FPGA.Full_Inst_i_1__3 
       (.I0(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .I1(w_fifo_full),
        .I2(S1_AXI_WVALID),
        .I3(w_fifo_empty),
        .I4(w_pop),
        .O(\Use_FPGA.Full_Inst_i_1__3_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair148" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \w_fifo_mem_reg[15][Last][-1111111111]_srl16_i_1__0 
       (.I0(S1_AXI_WVALID),
        .I1(w_fifo_full),
        .O(sel));
  LUT5 #(
    .INIT(32'h0000330A)) 
    wr_port_data_valid_i_i_1__0
       (.I0(wr_port_data_valid_i_reg_0),
        .I1(w_fifo_empty),
        .I2(wr_port_data_ready),
        .I3(w_pop),
        .I4(Q),
        .O(wr_port_data_valid_i_reg));
endmodule

(* ORIG_REF_NAME = "sc_srl_fifo_counter" *) 
module design_1_system_cache_0_0_sc_srl_fifo_counter_9
   (w_read_fifo_addr,
    wr_port_data_valid_i_reg,
    queue_push,
    S0_AXI_WREADY,
    sel,
    Q,
    ACLK,
    w_pop,
    S0_AXI_WVALID,
    wr_port_data_valid_i_reg_0,
    \lu_check_info_reg[Port_Num][0] ,
    S0_AXI_WLAST);
  output [3:0]w_read_fifo_addr;
  output wr_port_data_valid_i_reg;
  output queue_push;
  output S0_AXI_WREADY;
  output sel;
  input Q;
  input ACLK;
  input w_pop;
  input S0_AXI_WVALID;
  input wr_port_data_valid_i_reg_0;
  input \lu_check_info_reg[Port_Num][0] ;
  input S0_AXI_WLAST;

  wire ACLK;
  wire CI;
  wire D;
  wire DI;
  wire LI;
  wire Q;
  wire S0_AXI_WLAST;
  wire S0_AXI_WREADY;
  wire S0_AXI_WVALID;
  wire \Use_FPGA.Almost_Empty_Inst_i_1_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_i_2_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_n_0 ;
  wire \Use_FPGA.Almost_Full_Inst_n_0 ;
  wire \Use_FPGA.Empty_Inst_i_1_n_0 ;
  wire \Use_FPGA.Full_Inst_i_1_n_0 ;
  wire carry_2;
  wire carry_3;
  wire cnt_di_1;
  wire cnt_di_2;
  wire cnt_s_1;
  wire cnt_s_2;
  wire cnt_s_3;
  wire \lu_check_info_reg[Port_Num][0] ;
  wire queue_almost_full_next;
  wire queue_push;
  wire read_fifo_addr_next_0;
  wire read_fifo_addr_next_1;
  wire read_fifo_addr_next_2;
  wire read_fifo_addr_next_3;
  wire sel;
  wire w_fifo_empty;
  wire w_fifo_full;
  wire w_pop;
  wire [3:0]w_read_fifo_addr;
  wire wr_port_data_valid_i_reg;
  wire wr_port_data_valid_i_reg_0;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED ;

  (* SOFT_HLUTNM = "soft_lutpair123" *) 
  LUT1 #(
    .INIT(2'h1)) 
    S0_AXI_WREADY_INST_0
       (.I0(w_fifo_full),
        .O(S0_AXI_WREADY));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Almost_Empty_Inst_i_1_n_0 ),
        .Q(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .R(Q));
  LUT6 #(
    .INIT(64'hFFBAFFCF308A3000)) 
    \Use_FPGA.Almost_Empty_Inst_i_1 
       (.I0(\Use_FPGA.Almost_Empty_Inst_i_2_n_0 ),
        .I1(w_fifo_full),
        .I2(S0_AXI_WVALID),
        .I3(w_fifo_empty),
        .I4(w_pop),
        .I5(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .O(\Use_FPGA.Almost_Empty_Inst_i_1_n_0 ));
  LUT4 #(
    .INIT(16'h0010)) 
    \Use_FPGA.Almost_Empty_Inst_i_2 
       (.I0(w_read_fifo_addr[3]),
        .I1(w_read_fifo_addr[2]),
        .I2(w_read_fifo_addr[0]),
        .I3(w_read_fifo_addr[1]),
        .O(\Use_FPGA.Almost_Empty_Inst_i_2_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(D),
        .Q(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .R(Q));
  LUT6 #(
    .INIT(64'hEFBAEFEF208A2020)) 
    \Use_FPGA.Almost_Full_Inst_i_1 
       (.I0(queue_almost_full_next),
        .I1(w_fifo_full),
        .I2(S0_AXI_WVALID),
        .I3(w_fifo_empty),
        .I4(w_pop),
        .I5(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .O(D));
  LUT6 #(
    .INIT(64'hFFFFFFFF10000000)) 
    \Use_FPGA.Almost_Full_Inst_i_2__1 
       (.I0(w_read_fifo_addr[0]),
        .I1(w_read_fifo_addr[1]),
        .I2(w_read_fifo_addr[3]),
        .I3(w_read_fifo_addr[2]),
        .I4(S0_AXI_WVALID),
        .I5(w_fifo_full),
        .O(queue_almost_full_next));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h9CAF635063506350)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst 
       (.I0(w_fifo_empty),
        .I1(w_fifo_full),
        .I2(w_pop),
        .I3(S0_AXI_WVALID),
        .I4(w_read_fifo_addr[0]),
        .I5(1'b1),
        .O5(DI),
        .O6(LI));
  LUT3 #(
    .INIT(8'h20)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst_i_2 
       (.I0(S0_AXI_WLAST),
        .I1(w_fifo_full),
        .I2(S0_AXI_WVALID),
        .O(queue_push));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_0),
        .Q(w_read_fifo_addr[0]),
        .S(Q));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4 
       (.CI(1'b0),
        .CO({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED [3],carry_3,carry_2,CI}),
        .CYINIT(1'b0),
        .DI({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED [3],cnt_di_2,cnt_di_1,DI}),
        .O({read_fifo_addr_next_3,read_fifo_addr_next_2,read_fifo_addr_next_1,read_fifo_addr_next_0}),
        .S({cnt_s_3,cnt_s_2,cnt_s_1,LI}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[1].Active_Low.Other_Bits.LUT_Inst 
       (.I0(w_fifo_empty),
        .I1(w_fifo_full),
        .I2(w_pop),
        .I3(S0_AXI_WVALID),
        .I4(w_read_fifo_addr[1]),
        .I5(1'b1),
        .O5(cnt_di_1),
        .O6(cnt_s_1));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_1),
        .Q(w_read_fifo_addr[1]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[2].Active_Low.Other_Bits.LUT_Inst 
       (.I0(w_fifo_empty),
        .I1(w_fifo_full),
        .I2(w_pop),
        .I3(S0_AXI_WVALID),
        .I4(w_read_fifo_addr[2]),
        .I5(1'b1),
        .O5(cnt_di_2),
        .O6(cnt_s_2));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_2),
        .Q(w_read_fifo_addr[2]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[3].Active_Low.Last_Bit.LUT_Inst 
       (.I0(w_fifo_empty),
        .I1(w_fifo_full),
        .I2(w_pop),
        .I3(S0_AXI_WVALID),
        .I4(w_read_fifo_addr[3]),
        .I5(1'b1),
        .O(cnt_s_3));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_3),
        .Q(w_read_fifo_addr[3]),
        .S(Q));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Empty_Inst_i_1_n_0 ),
        .Q(w_fifo_empty),
        .S(Q));
  (* SOFT_HLUTNM = "soft_lutpair123" *) 
  LUT5 #(
    .INIT(32'hCF8ACF00)) 
    \Use_FPGA.Empty_Inst_i_1 
       (.I0(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .I1(w_fifo_full),
        .I2(S0_AXI_WVALID),
        .I3(w_fifo_empty),
        .I4(w_pop),
        .O(\Use_FPGA.Empty_Inst_i_1_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Full_Inst_i_1_n_0 ),
        .Q(w_fifo_full),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair122" *) 
  LUT5 #(
    .INIT(32'hEC00ECEC)) 
    \Use_FPGA.Full_Inst_i_1 
       (.I0(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .I1(w_fifo_full),
        .I2(S0_AXI_WVALID),
        .I3(w_fifo_empty),
        .I4(w_pop),
        .O(\Use_FPGA.Full_Inst_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair122" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \w_fifo_mem_reg[15][Last][-1111111111]_srl16_i_1 
       (.I0(S0_AXI_WVALID),
        .I1(w_fifo_full),
        .O(sel));
  LUT5 #(
    .INIT(32'h0000330A)) 
    wr_port_data_valid_i_i_1
       (.I0(wr_port_data_valid_i_reg_0),
        .I1(w_fifo_empty),
        .I2(\lu_check_info_reg[Port_Num][0] ),
        .I3(w_pop),
        .I4(Q),
        .O(wr_port_data_valid_i_reg));
endmodule

(* ORIG_REF_NAME = "sc_srl_fifo_counter" *) 
module design_1_system_cache_0_0_sc_srl_fifo_counter__parameterized1
   (wc_fifo_empty,
    Q,
    ACLK,
    \bs_port_num_reg[0] ,
    queue_push,
    \Use_FPGA.Full_Inst ,
    S1_AXI_WLAST,
    \arbiter_bp_push_i_reg[1][Valid] ,
    queue_pop7_out);
  output wc_fifo_empty;
  input Q;
  input ACLK;
  input \bs_port_num_reg[0] ;
  input queue_push;
  input \Use_FPGA.Full_Inst ;
  input S1_AXI_WLAST;
  input \arbiter_bp_push_i_reg[1][Valid] ;
  input queue_pop7_out;

  wire ACLK;
  wire CI;
  wire DI;
  wire LI;
  wire Q;
  wire S1_AXI_WLAST;
  wire \Use_FPGA.Almost_Empty_Inst_i_1__5_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_i_2__8_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_n_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_n_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst_n_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst_n_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst_n_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_n_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[5].FDS_Inst_n_0 ;
  wire \Use_FPGA.Empty_Inst_i_1__5_n_0 ;
  wire \Use_FPGA.Full_Inst ;
  wire \arbiter_bp_push_i_reg[1][Valid] ;
  wire \bs_port_num_reg[0] ;
  wire carry_2;
  wire carry_3;
  wire carry_4;
  wire carry_5;
  wire cnt_di_1;
  wire cnt_di_2;
  wire cnt_di_3;
  wire cnt_di_4;
  wire cnt_s_1;
  wire cnt_s_2;
  wire cnt_s_3;
  wire cnt_s_4;
  wire cnt_s_5;
  wire queue_pop7_out;
  wire queue_push;
  wire read_fifo_addr_next_0;
  wire read_fifo_addr_next_1;
  wire read_fifo_addr_next_2;
  wire read_fifo_addr_next_3;
  wire read_fifo_addr_next_4;
  wire read_fifo_addr_next_5;
  wire wc_fifo_empty;
  wire [3:1]\NLW_Use_FPGA.Cnt_Bit_Gen[4].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_Use_FPGA.Cnt_Bit_Gen[4].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED ;
  wire [3:2]\NLW_Use_FPGA.Cnt_Bit_Gen[4].Use_Muxcy.MUXCY_Inst_CARRY4_O_UNCONNECTED ;
  wire [3:2]\NLW_Use_FPGA.Cnt_Bit_Gen[4].Use_Muxcy.MUXCY_Inst_CARRY4_S_UNCONNECTED ;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Almost_Empty_Inst_i_1__5_n_0 ),
        .Q(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .R(Q));
  LUT6 #(
    .INIT(64'hFCCCAFFF0CCCA000)) 
    \Use_FPGA.Almost_Empty_Inst_i_1__5 
       (.I0(wc_fifo_empty),
        .I1(\Use_FPGA.Almost_Empty_Inst_i_2__8_n_0 ),
        .I2(\Use_FPGA.Full_Inst ),
        .I3(S1_AXI_WLAST),
        .I4(\bs_port_num_reg[0] ),
        .I5(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .O(\Use_FPGA.Almost_Empty_Inst_i_1__5_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000100)) 
    \Use_FPGA.Almost_Empty_Inst_i_2__8 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[5].FDS_Inst_n_0 ),
        .I1(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_n_0 ),
        .I2(\Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst_n_0 ),
        .I3(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_n_0 ),
        .I4(\Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst_n_0 ),
        .I5(\Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst_n_0 ),
        .O(\Use_FPGA.Almost_Empty_Inst_i_2__8_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h9CAF635063506350)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(\bs_port_num_reg[0] ),
        .I3(queue_push),
        .I4(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_n_0 ),
        .I5(1'b1),
        .O5(DI),
        .O6(LI));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_0),
        .Q(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_n_0 ),
        .S(Q));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4 
       (.CI(1'b0),
        .CO({carry_4,carry_3,carry_2,CI}),
        .CYINIT(1'b0),
        .DI({cnt_di_3,cnt_di_2,cnt_di_1,DI}),
        .O({read_fifo_addr_next_3,read_fifo_addr_next_2,read_fifo_addr_next_1,read_fifo_addr_next_0}),
        .S({cnt_s_3,cnt_s_2,cnt_s_1,LI}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[1].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(\bs_port_num_reg[0] ),
        .I3(queue_push),
        .I4(\Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst_n_0 ),
        .I5(1'b1),
        .O5(cnt_di_1),
        .O6(cnt_s_1));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_1),
        .Q(\Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst_n_0 ),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[2].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(\bs_port_num_reg[0] ),
        .I3(queue_push),
        .I4(\Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst_n_0 ),
        .I5(1'b1),
        .O5(cnt_di_2),
        .O6(cnt_s_2));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_2),
        .Q(\Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst_n_0 ),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[3].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(\bs_port_num_reg[0] ),
        .I3(queue_push),
        .I4(\Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst_n_0 ),
        .I5(1'b1),
        .O5(cnt_di_3),
        .O6(cnt_s_3));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_3),
        .Q(\Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst_n_0 ),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[4].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(\bs_port_num_reg[0] ),
        .I3(queue_push),
        .I4(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_n_0 ),
        .I5(1'b1),
        .O5(cnt_di_4),
        .O6(cnt_s_4));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_4),
        .Q(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_n_0 ),
        .S(Q));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cnt_Bit_Gen[4].Use_Muxcy.MUXCY_Inst_CARRY4 
       (.CI(carry_4),
        .CO({\NLW_Use_FPGA.Cnt_Bit_Gen[4].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED [3:1],carry_5}),
        .CYINIT(1'b0),
        .DI({\NLW_Use_FPGA.Cnt_Bit_Gen[4].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED [3:1],cnt_di_4}),
        .O({\NLW_Use_FPGA.Cnt_Bit_Gen[4].Use_Muxcy.MUXCY_Inst_CARRY4_O_UNCONNECTED [3:2],read_fifo_addr_next_5,read_fifo_addr_next_4}),
        .S({\NLW_Use_FPGA.Cnt_Bit_Gen[4].Use_Muxcy.MUXCY_Inst_CARRY4_S_UNCONNECTED [3:2],cnt_s_5,cnt_s_4}));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[5].Active_Low.Last_Bit.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(\bs_port_num_reg[0] ),
        .I3(queue_push),
        .I4(\Use_FPGA.Cnt_Bit_Gen[5].FDS_Inst_n_0 ),
        .I5(1'b1),
        .O(cnt_s_5));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[5].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_5),
        .Q(\Use_FPGA.Cnt_Bit_Gen[5].FDS_Inst_n_0 ),
        .S(Q));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Empty_Inst_i_1__5_n_0 ),
        .Q(wc_fifo_empty),
        .S(Q));
  LUT6 #(
    .INIT(64'h3FEA3F3F002A0000)) 
    \Use_FPGA.Empty_Inst_i_1__5 
       (.I0(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .I1(\Use_FPGA.Full_Inst ),
        .I2(S1_AXI_WLAST),
        .I3(\arbiter_bp_push_i_reg[1][Valid] ),
        .I4(queue_pop7_out),
        .I5(wc_fifo_empty),
        .O(\Use_FPGA.Empty_Inst_i_1__5_n_0 ));
endmodule

(* ORIG_REF_NAME = "sc_srl_fifo_counter" *) 
module design_1_system_cache_0_0_sc_srl_fifo_counter__parameterized10
   (\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 ,
    wma_merge_done_reg,
    \write_data_info[0][Valid] ,
    E,
    queue_push118_out,
    update_write_miss_ongoing_reg,
    wma_word_done_d1_reg,
    wma_word_done_d1_reg_0,
    p_20_in,
    \Use_Reg_Ctrl.queue_exist_i_reg ,
    update_evict_ongoing_reg,
    update_evict_valid_reg,
    A18_out,
    A_N,
    \Use_Reg_Ctrl.queue_exist_i_reg_0 ,
    queue_push,
    \Use_FPGA.Almost_Full_Inst_0 ,
    \Use_FPGA.Almost_Full_Inst_1 ,
    \update_wma_data_reg[24] ,
    \Use_Reg_Ctrl.queue_exist_i_reg_1 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 ,
    update_wm_pop_normal_hold_reg,
    \update_wma_strb_reg[3] ,
    \update_wma_strb_reg[2] ,
    \update_wma_strb_reg[1] ,
    \update_wma_strb_reg[0] ,
    Q,
    ACLK,
    O,
    wma_word_done_d1,
    wma_merge_done,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    update_evict_valid,
    update_evict_busy,
    wm_allocate_reg,
    wm_local_wrap_reg,
    wm_exist,
    \access_data_info[0,1][Last] ,
    \wm_port_reg[0] ,
    \access_data_info[0,0][Last] ,
    update_write_miss_ongoing,
    wm_kind,
    wm_local_wrap,
    \wm_remove_unaligned_reg[0] ,
    update_wr_miss_rs_last,
    wm_evict_reg,
    \Use_Reg_Ctrl.queue_exist_i_reg_2 ,
    wr_port_data_valid_i_reg,
    update_wma_select_port3,
    ri_evicted,
    update_read_miss_ongoing_reg,
    ri_merge_reg,
    ri_exist,
    write_data_full,
    \Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_0 ,
    A,
    \Use_FPGA.Empty_Inst_0 ,
    wm_allow_reg,
    \wr_port_data_info_reg[0][BE][3] ,
    \wr_port_data_info_reg[0][BE][3]_0 ,
    \wm_offset_reg[0] ,
    \wm_offset_reg[3] ,
    M0_AXI_RDATA,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_1 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_2 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_3 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_4 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_5 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_6 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_7 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_8 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_9 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_10 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_11 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_12 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_13 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_14 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_15 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_16 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_17 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_18 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_19 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_20 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_21 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_22 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_23 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_24 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_25 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_26 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_27 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_28 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_29 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_30 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_31 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_32 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_33 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_34 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_35 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_36 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_37 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_38 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_39 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_40 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_41 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_42 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_43 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_44 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_45 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_46 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_47 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_48 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_49 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_50 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_51 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_52 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_53 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_54 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_55 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_56 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_57 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_58 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_59 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_60 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_61 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_62 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_63 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_64 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_65 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_66 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_67 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_68 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_69 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_70 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_71 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_72 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_73 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_74 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_75 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_76 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_77 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_78 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_79 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_80 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_81 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_82 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_83 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_84 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_85 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_86 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_87 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_88 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_89 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_90 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_91 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_92 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_93 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_94 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_95 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_96 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_97 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_98 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_99 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_100 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_101 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_102 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_103 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_104 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_105 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_106 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_107 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_108 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_109 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_110 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_111 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_112 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_113 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_114 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_115 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_116 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_117 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_118 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_119 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_120 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_121 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_122 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_123 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_124 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_125 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_126 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_127 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_128 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_129 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_130 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_131 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_132 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_133 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_134 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_135 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_136 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_137 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_138 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_139 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_140 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_141 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_142 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_143 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_144 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_145 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_146 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_147 ,
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_148 ,
    update_wm_pop_normal_hold_reg_0,
    queue_pop,
    p_3_in,
    update_wma_strb,
    p_2_in,
    p_1_in3_in,
    \wr_port_data_info_reg[0][BE][0] );
  output [6:0]\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 ;
  output wma_merge_done_reg;
  output \write_data_info[0][Valid] ;
  output [0:0]E;
  output queue_push118_out;
  output update_write_miss_ongoing_reg;
  output wma_word_done_d1_reg;
  output wma_word_done_d1_reg_0;
  output p_20_in;
  output \Use_Reg_Ctrl.queue_exist_i_reg ;
  output update_evict_ongoing_reg;
  output update_evict_valid_reg;
  output A18_out;
  output A_N;
  output \Use_Reg_Ctrl.queue_exist_i_reg_0 ;
  output queue_push;
  output \Use_FPGA.Almost_Full_Inst_0 ;
  output \Use_FPGA.Almost_Full_Inst_1 ;
  output [3:0]\update_wma_data_reg[24] ;
  output \Use_Reg_Ctrl.queue_exist_i_reg_1 ;
  output [31:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 ;
  output update_wm_pop_normal_hold_reg;
  output \update_wma_strb_reg[3] ;
  output \update_wma_strb_reg[2] ;
  output \update_wma_strb_reg[1] ;
  output \update_wma_strb_reg[0] ;
  input Q;
  input ACLK;
  input O;
  input wma_word_done_d1;
  input wma_merge_done;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  input update_evict_valid;
  input update_evict_busy;
  input wm_allocate_reg;
  input wm_local_wrap_reg;
  input wm_exist;
  input \access_data_info[0,1][Last] ;
  input \wm_port_reg[0] ;
  input \access_data_info[0,0][Last] ;
  input update_write_miss_ongoing;
  input wm_kind;
  input wm_local_wrap;
  input \wm_remove_unaligned_reg[0] ;
  input update_wr_miss_rs_last;
  input wm_evict_reg;
  input \Use_Reg_Ctrl.queue_exist_i_reg_2 ;
  input wr_port_data_valid_i_reg;
  input update_wma_select_port3;
  input ri_evicted;
  input update_read_miss_ongoing_reg;
  input ri_merge_reg;
  input ri_exist;
  input write_data_full;
  input \Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_0 ;
  input [0:0]A;
  input \Use_FPGA.Empty_Inst_0 ;
  input wm_allow_reg;
  input [3:0]\wr_port_data_info_reg[0][BE][3] ;
  input [3:0]\wr_port_data_info_reg[0][BE][3]_0 ;
  input \wm_offset_reg[0] ;
  input \wm_offset_reg[3] ;
  input [31:0]M0_AXI_RDATA;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_1 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_2 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_3 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_4 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_5 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_6 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_7 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_8 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_9 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_10 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_11 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_12 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_13 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_14 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_15 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_16 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_17 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_18 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_19 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_20 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_21 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_22 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_23 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_24 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_25 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_26 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_27 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_28 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_29 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_30 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_31 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_32 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_33 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_34 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_35 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_36 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_37 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_38 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_39 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_40 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_41 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_42 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_43 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_44 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_45 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_46 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_47 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_48 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_49 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_50 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_51 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_52 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_53 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_54 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_55 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_56 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_57 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_58 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_59 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_60 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_61 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_62 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_63 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_64 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_65 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_66 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_67 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_68 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_69 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_70 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_71 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_72 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_73 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_74 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_75 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_76 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_77 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_78 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_79 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_80 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_81 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_82 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_83 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_84 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_85 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_86 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_87 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_88 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_89 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_90 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_91 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_92 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_93 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_94 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_95 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_96 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_97 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_98 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_99 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_100 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_101 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_102 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_103 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_104 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_105 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_106 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_107 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_108 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_109 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_110 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_111 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_112 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_113 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_114 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_115 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_116 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_117 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_118 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_119 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_120 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_121 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_122 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_123 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_124 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_125 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_126 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_127 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_128 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_129 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_130 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_131 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_132 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_133 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_134 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_135 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_136 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_137 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_138 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_139 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_140 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_141 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_142 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_143 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_144 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_145 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_146 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_147 ;
  input \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_148 ;
  input update_wm_pop_normal_hold_reg_0;
  input queue_pop;
  input p_3_in;
  input [3:0]update_wma_strb;
  input p_2_in;
  input p_1_in3_in;
  input \wr_port_data_info_reg[0][BE][0] ;

  wire [0:0]A;
  wire A18_out;
  wire ACLK;
  wire A_N;
  wire CI;
  wire D;
  wire DI;
  wire [0:0]E;
  wire LI;
  wire [31:0]M0_AXI_RDATA;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_43_n_0 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_44_n_0 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_45_n_0 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_46_n_0 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_47_n_0 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_48_n_0 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_49_n_0 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_50_n_0 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_51_n_0 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_18_n_0 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_i_18_n_0 ;
  wire [31:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_18_n_0 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_19_n_0 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_20_n_0 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_21_n_0 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_22_n_0 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_23_n_0 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_24_n_0 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_25_n_0 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_26_n_0 ;
  wire O;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \Use_FPGA.Almost_Empty_Inst_i_1__12_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_i_2__16_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_i_3_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_n_0 ;
  wire \Use_FPGA.Almost_Full_Inst_0 ;
  wire \Use_FPGA.Almost_Full_Inst_1 ;
  wire \Use_FPGA.Almost_Full_Inst_i_2__12_n_0 ;
  wire \Use_FPGA.Almost_Full_Inst_i_3_n_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_0 ;
  wire [6:0]\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_1 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_10 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_100 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_101 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_102 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_103 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_104 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_105 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_106 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_107 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_108 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_109 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_11 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_110 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_111 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_112 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_113 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_114 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_115 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_116 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_117 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_118 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_119 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_12 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_120 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_121 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_122 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_123 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_124 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_125 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_126 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_127 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_128 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_129 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_13 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_130 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_131 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_132 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_133 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_134 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_135 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_136 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_137 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_138 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_139 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_14 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_140 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_141 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_142 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_143 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_144 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_145 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_146 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_147 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_148 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_15 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_16 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_17 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_18 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_19 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_2 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_20 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_21 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_22 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_23 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_24 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_25 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_26 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_27 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_28 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_29 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_3 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_30 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_31 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_32 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_33 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_34 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_35 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_36 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_37 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_38 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_39 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_4 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_40 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_41 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_42 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_43 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_44 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_45 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_46 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_47 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_48 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_49 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_5 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_50 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_51 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_52 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_53 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_54 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_55 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_56 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_57 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_58 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_59 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_6 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_60 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_61 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_62 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_63 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_64 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_65 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_66 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_67 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_68 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_69 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_7 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_70 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_71 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_72 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_73 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_74 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_75 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_76 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_77 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_78 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_79 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_8 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_80 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_81 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_82 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_83 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_84 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_85 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_86 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_87 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_88 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_89 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_9 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_90 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_91 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_92 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_93 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_94 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_95 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_96 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_97 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_98 ;
  wire \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_99 ;
  wire \Use_FPGA.Empty_Inst_0 ;
  wire \Use_FPGA.Empty_Inst_i_1__12_n_0 ;
  wire \Use_FPGA.Full_Inst_i_1__9_n_0 ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg_0 ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg_1 ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg_2 ;
  wire \access_data_info[0,0][Last] ;
  wire \access_data_info[0,1][Last] ;
  wire carry_2;
  wire carry_3;
  wire carry_4;
  wire carry_5;
  wire carry_6;
  wire carry_7;
  wire carry_8;
  wire cnt_di_1;
  wire cnt_di_2;
  wire cnt_di_3;
  wire cnt_di_4;
  wire cnt_di_5;
  wire cnt_di_6;
  wire cnt_di_7;
  wire cnt_s_1;
  wire cnt_s_2;
  wire cnt_s_3;
  wire cnt_s_4;
  wire cnt_s_5;
  wire cnt_s_6;
  wire cnt_s_7;
  wire cnt_s_8;
  wire p_1_in3_in;
  wire p_20_in;
  wire p_2_in;
  wire p_3_in;
  wire [7:0]p_4_in;
  wire [7:0]p_7_in;
  wire queue_almost_full;
  wire queue_pop;
  wire queue_push;
  wire queue_push118_out;
  wire read_fifo_addr_next_0;
  wire read_fifo_addr_next_1;
  wire read_fifo_addr_next_2;
  wire read_fifo_addr_next_3;
  wire read_fifo_addr_next_4;
  wire read_fifo_addr_next_5;
  wire read_fifo_addr_next_6;
  wire read_fifo_addr_next_7;
  wire read_fifo_addr_next_8;
  wire ri_evicted;
  wire ri_exist;
  wire ri_merge_reg;
  wire update_evict_busy;
  wire update_evict_ongoing_reg;
  wire update_evict_valid;
  wire update_evict_valid_reg;
  wire update_read_miss_ongoing_reg;
  wire update_wm_pop_normal_hold_reg;
  wire update_wm_pop_normal_hold_reg_0;
  wire [3:0]\update_wma_data_reg[24] ;
  wire update_wma_select_port3;
  wire [3:0]update_wma_strb;
  wire \update_wma_strb_reg[0] ;
  wire \update_wma_strb_reg[1] ;
  wire \update_wma_strb_reg[2] ;
  wire \update_wma_strb_reg[3] ;
  wire update_wr_miss_rs_last;
  wire update_wr_miss_rs_valid;
  wire update_write_miss_ongoing;
  wire update_write_miss_ongoing_reg;
  wire wm_allocate_reg;
  wire wm_allow_reg;
  wire wm_evict_reg;
  wire wm_exist;
  wire wm_kind;
  wire wm_local_wrap;
  wire wm_local_wrap_reg;
  wire \wm_offset_reg[0] ;
  wire \wm_offset_reg[3] ;
  wire \wm_port_reg[0] ;
  wire \wm_remove_unaligned_reg[0] ;
  wire wma_fifo_empty;
  wire wma_fifo_full;
  wire wma_merge_done;
  wire wma_merge_done_i_2_n_0;
  wire wma_merge_done_reg;
  wire [8:7]wma_read_fifo_addr;
  wire wma_word_done_d1;
  wire wma_word_done_d1_reg;
  wire wma_word_done_d1_reg_0;
  wire \wr_port_data_info_reg[0][BE][0] ;
  wire [3:0]\wr_port_data_info_reg[0][BE][3] ;
  wire [3:0]\wr_port_data_info_reg[0][BE][3]_0 ;
  wire wr_port_data_valid_i_reg;
  wire write_data_full;
  wire \write_data_info[0][Valid] ;
  wire [3:0]\NLW_Use_FPGA.Cnt_Bit_Gen[8].XOR_Inst_CARRY4_CO_UNCONNECTED ;
  wire [3:0]\NLW_Use_FPGA.Cnt_Bit_Gen[8].XOR_Inst_CARRY4_DI_UNCONNECTED ;
  wire [3:1]\NLW_Use_FPGA.Cnt_Bit_Gen[8].XOR_Inst_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_Use_FPGA.Cnt_Bit_Gen[8].XOR_Inst_CARRY4_S_UNCONNECTED ;

  LUT5 #(
    .INIT(32'hFF20DF00)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_33__0 
       (.I0(ri_merge_reg),
        .I1(wma_merge_done),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_43_n_0 ),
        .I3(M0_AXI_RDATA[7]),
        .I4(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_44_n_0 ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [7]));
  LUT5 #(
    .INIT(32'hFF20DF00)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_34__0 
       (.I0(ri_merge_reg),
        .I1(wma_merge_done),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_43_n_0 ),
        .I3(M0_AXI_RDATA[6]),
        .I4(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_45_n_0 ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [6]));
  LUT5 #(
    .INIT(32'hFF20DF00)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_35__0 
       (.I0(ri_merge_reg),
        .I1(wma_merge_done),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_43_n_0 ),
        .I3(M0_AXI_RDATA[5]),
        .I4(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_46_n_0 ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [5]));
  LUT5 #(
    .INIT(32'hFF20DF00)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_36__0 
       (.I0(ri_merge_reg),
        .I1(wma_merge_done),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_43_n_0 ),
        .I3(M0_AXI_RDATA[4]),
        .I4(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_47_n_0 ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [4]));
  LUT5 #(
    .INIT(32'hFF20DF00)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_37__0 
       (.I0(ri_merge_reg),
        .I1(wma_merge_done),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_43_n_0 ),
        .I3(M0_AXI_RDATA[3]),
        .I4(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_48_n_0 ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [3]));
  LUT5 #(
    .INIT(32'hFF20DF00)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_38__0 
       (.I0(ri_merge_reg),
        .I1(wma_merge_done),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_43_n_0 ),
        .I3(M0_AXI_RDATA[2]),
        .I4(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_49_n_0 ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [2]));
  LUT5 #(
    .INIT(32'hFF20DF00)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_39__0 
       (.I0(ri_merge_reg),
        .I1(wma_merge_done),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_43_n_0 ),
        .I3(M0_AXI_RDATA[1]),
        .I4(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_50_n_0 ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [1]));
  LUT5 #(
    .INIT(32'hFF20DF00)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_40__0 
       (.I0(ri_merge_reg),
        .I1(wma_merge_done),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_43_n_0 ),
        .I3(M0_AXI_RDATA[0]),
        .I4(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_51_n_0 ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [0]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_43 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_5 ),
        .I1(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_6 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_7 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_8 ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_43_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_44 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_49 ),
        .I1(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_50 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_51 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_52 ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_44_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_45 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_45 ),
        .I1(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_46 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_47 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_48 ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_45_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_46 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_41 ),
        .I1(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_42 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_43 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_44 ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_46_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_47 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_37 ),
        .I1(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_38 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_39 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_40 ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_47_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_48 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_33 ),
        .I1(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_34 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_35 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_36 ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_48_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_49 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_29 ),
        .I1(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_30 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_31 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_32 ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_49_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_50 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_25 ),
        .I1(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_26 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_27 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_28 ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_50_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_51 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_21 ),
        .I1(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_22 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_23 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_24 ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_51_n_0 ));
  LUT5 #(
    .INIT(32'hFF20DF00)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_10 
       (.I0(ri_merge_reg),
        .I1(wma_merge_done),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_18_n_0 ),
        .I3(M0_AXI_RDATA[14]),
        .I4(p_4_in[6]),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [14]));
  LUT5 #(
    .INIT(32'hFF20DF00)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_11 
       (.I0(ri_merge_reg),
        .I1(wma_merge_done),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_18_n_0 ),
        .I3(M0_AXI_RDATA[13]),
        .I4(p_4_in[5]),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [13]));
  LUT5 #(
    .INIT(32'hFF20DF00)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_12 
       (.I0(ri_merge_reg),
        .I1(wma_merge_done),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_18_n_0 ),
        .I3(M0_AXI_RDATA[12]),
        .I4(p_4_in[4]),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [12]));
  LUT5 #(
    .INIT(32'hFF20DF00)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_13 
       (.I0(ri_merge_reg),
        .I1(wma_merge_done),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_18_n_0 ),
        .I3(M0_AXI_RDATA[11]),
        .I4(p_4_in[3]),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [11]));
  LUT5 #(
    .INIT(32'hFF20DF00)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_14 
       (.I0(ri_merge_reg),
        .I1(wma_merge_done),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_18_n_0 ),
        .I3(M0_AXI_RDATA[10]),
        .I4(p_4_in[2]),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [10]));
  LUT5 #(
    .INIT(32'hFF20DF00)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_15 
       (.I0(ri_merge_reg),
        .I1(wma_merge_done),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_18_n_0 ),
        .I3(M0_AXI_RDATA[9]),
        .I4(p_4_in[1]),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [9]));
  LUT5 #(
    .INIT(32'hFF20DF00)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_16 
       (.I0(ri_merge_reg),
        .I1(wma_merge_done),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_18_n_0 ),
        .I3(M0_AXI_RDATA[8]),
        .I4(p_4_in[0]),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [8]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_18 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_9 ),
        .I1(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_10 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_11 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_12 ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_18_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_19 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_81 ),
        .I1(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_82 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_83 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_84 ),
        .O(p_4_in[7]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_20 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_77 ),
        .I1(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_78 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_79 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_80 ),
        .O(p_4_in[6]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_21 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_73 ),
        .I1(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_74 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_75 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_76 ),
        .O(p_4_in[5]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_22 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_69 ),
        .I1(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_70 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_71 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_72 ),
        .O(p_4_in[4]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_23 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_65 ),
        .I1(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_66 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_67 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_68 ),
        .O(p_4_in[3]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_24 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_61 ),
        .I1(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_62 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_63 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_64 ),
        .O(p_4_in[2]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_25 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_57 ),
        .I1(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_58 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_59 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_60 ),
        .O(p_4_in[1]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_26 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_53 ),
        .I1(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_54 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_55 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_56 ),
        .O(p_4_in[0]));
  LUT5 #(
    .INIT(32'hFF20DF00)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_9 
       (.I0(ri_merge_reg),
        .I1(wma_merge_done),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1_i_18_n_0 ),
        .I3(M0_AXI_RDATA[15]),
        .I4(p_4_in[7]),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [15]));
  LUT5 #(
    .INIT(32'hFF20DF00)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_i_10 
       (.I0(ri_merge_reg),
        .I1(wma_merge_done),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_i_18_n_0 ),
        .I3(M0_AXI_RDATA[22]),
        .I4(p_7_in[6]),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [22]));
  LUT5 #(
    .INIT(32'hFF20DF00)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_i_11 
       (.I0(ri_merge_reg),
        .I1(wma_merge_done),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_i_18_n_0 ),
        .I3(M0_AXI_RDATA[21]),
        .I4(p_7_in[5]),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [21]));
  LUT5 #(
    .INIT(32'hFF20DF00)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_i_12 
       (.I0(ri_merge_reg),
        .I1(wma_merge_done),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_i_18_n_0 ),
        .I3(M0_AXI_RDATA[20]),
        .I4(p_7_in[4]),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [20]));
  LUT5 #(
    .INIT(32'hFF20DF00)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_i_13 
       (.I0(ri_merge_reg),
        .I1(wma_merge_done),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_i_18_n_0 ),
        .I3(M0_AXI_RDATA[19]),
        .I4(p_7_in[3]),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [19]));
  LUT5 #(
    .INIT(32'hFF20DF00)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_i_14 
       (.I0(ri_merge_reg),
        .I1(wma_merge_done),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_i_18_n_0 ),
        .I3(M0_AXI_RDATA[18]),
        .I4(p_7_in[2]),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [18]));
  LUT5 #(
    .INIT(32'hFF20DF00)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_i_15 
       (.I0(ri_merge_reg),
        .I1(wma_merge_done),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_i_18_n_0 ),
        .I3(M0_AXI_RDATA[17]),
        .I4(p_7_in[1]),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [17]));
  LUT5 #(
    .INIT(32'hFF20DF00)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_i_16 
       (.I0(ri_merge_reg),
        .I1(wma_merge_done),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_i_18_n_0 ),
        .I3(M0_AXI_RDATA[16]),
        .I4(p_7_in[0]),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [16]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_i_18 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_13 ),
        .I1(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_14 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_15 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_16 ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_i_18_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_i_19 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_113 ),
        .I1(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_114 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_115 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_116 ),
        .O(p_7_in[7]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_i_20 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_109 ),
        .I1(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_110 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_111 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_112 ),
        .O(p_7_in[6]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_i_21 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_105 ),
        .I1(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_106 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_107 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_108 ),
        .O(p_7_in[5]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_i_22 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_101 ),
        .I1(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_102 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_103 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_104 ),
        .O(p_7_in[4]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_i_23 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_97 ),
        .I1(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_98 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_99 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_100 ),
        .O(p_7_in[3]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_i_24 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_93 ),
        .I1(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_94 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_95 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_96 ),
        .O(p_7_in[2]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_i_25 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_89 ),
        .I1(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_90 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_91 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_92 ),
        .O(p_7_in[1]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_i_26 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_85 ),
        .I1(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_86 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_87 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_88 ),
        .O(p_7_in[0]));
  LUT5 #(
    .INIT(32'hFF20DF00)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_i_9 
       (.I0(ri_merge_reg),
        .I1(wma_merge_done),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[2].RAMB36_I1_i_18_n_0 ),
        .I3(M0_AXI_RDATA[23]),
        .I4(p_7_in[7]),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [23]));
  LUT5 #(
    .INIT(32'hFF20DF00)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_10 
       (.I0(ri_merge_reg),
        .I1(wma_merge_done),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_18_n_0 ),
        .I3(M0_AXI_RDATA[30]),
        .I4(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_20_n_0 ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [30]));
  LUT5 #(
    .INIT(32'hFF20DF00)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_11 
       (.I0(ri_merge_reg),
        .I1(wma_merge_done),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_18_n_0 ),
        .I3(M0_AXI_RDATA[29]),
        .I4(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_21_n_0 ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [29]));
  LUT5 #(
    .INIT(32'hFF20DF00)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_12 
       (.I0(ri_merge_reg),
        .I1(wma_merge_done),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_18_n_0 ),
        .I3(M0_AXI_RDATA[28]),
        .I4(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_22_n_0 ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [28]));
  LUT5 #(
    .INIT(32'hFF20DF00)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_13 
       (.I0(ri_merge_reg),
        .I1(wma_merge_done),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_18_n_0 ),
        .I3(M0_AXI_RDATA[27]),
        .I4(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_23_n_0 ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [27]));
  LUT5 #(
    .INIT(32'hFF20DF00)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_14 
       (.I0(ri_merge_reg),
        .I1(wma_merge_done),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_18_n_0 ),
        .I3(M0_AXI_RDATA[26]),
        .I4(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_24_n_0 ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [26]));
  LUT5 #(
    .INIT(32'hFF20DF00)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_15 
       (.I0(ri_merge_reg),
        .I1(wma_merge_done),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_18_n_0 ),
        .I3(M0_AXI_RDATA[25]),
        .I4(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_25_n_0 ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [25]));
  LUT5 #(
    .INIT(32'hFF20DF00)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_16 
       (.I0(ri_merge_reg),
        .I1(wma_merge_done),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_18_n_0 ),
        .I3(M0_AXI_RDATA[24]),
        .I4(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_26_n_0 ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [24]));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_18 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_17 ),
        .I1(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_18 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_19 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_20 ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_18_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_19 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_145 ),
        .I1(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_146 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_147 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_148 ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_19_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_20 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_141 ),
        .I1(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_142 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_143 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_144 ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_20_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_21 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_137 ),
        .I1(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_138 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_139 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_140 ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_21_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_22 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_133 ),
        .I1(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_134 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_135 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_136 ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_22_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_23 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_129 ),
        .I1(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_130 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_131 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_132 ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_23_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_24 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_125 ),
        .I1(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_126 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_127 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_128 ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_24_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_25 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_121 ),
        .I1(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_122 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_123 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_124 ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_25_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_26 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_117 ),
        .I1(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_118 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_119 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_120 ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_26_n_0 ));
  LUT5 #(
    .INIT(32'hFF20DF00)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_9 
       (.I0(ri_merge_reg),
        .I1(wma_merge_done),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_18_n_0 ),
        .I3(M0_AXI_RDATA[31]),
        .I4(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_i_19_n_0 ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [31]));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Almost_Empty_Inst_i_1__12_n_0 ),
        .Q(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .R(Q));
  LUT5 #(
    .INIT(32'hFCAF0CA0)) 
    \Use_FPGA.Almost_Empty_Inst_i_1__12 
       (.I0(wma_fifo_empty),
        .I1(\Use_FPGA.Almost_Empty_Inst_i_2__16_n_0 ),
        .I2(wma_word_done_d1),
        .I3(O),
        .I4(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .O(\Use_FPGA.Almost_Empty_Inst_i_1__12_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000002)) 
    \Use_FPGA.Almost_Empty_Inst_i_2__16 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 [0]),
        .I1(\Use_FPGA.Almost_Empty_Inst_i_3_n_0 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(wma_read_fifo_addr[7]),
        .I4(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 [5]),
        .I5(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 [6]),
        .O(\Use_FPGA.Almost_Empty_Inst_i_2__16_n_0 ));
  LUT4 #(
    .INIT(16'hFFFE)) 
    \Use_FPGA.Almost_Empty_Inst_i_3 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 [3]),
        .I1(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 [4]),
        .I2(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 [1]),
        .I3(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 [2]),
        .O(\Use_FPGA.Almost_Empty_Inst_i_3_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(D),
        .Q(queue_almost_full),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair83" *) 
  LUT5 #(
    .INIT(32'hFCAF0CA0)) 
    \Use_FPGA.Almost_Full_Inst_i_1__9 
       (.I0(\Use_FPGA.Almost_Full_Inst_i_2__12_n_0 ),
        .I1(wma_fifo_full),
        .I2(wma_word_done_d1),
        .I3(O),
        .I4(queue_almost_full),
        .O(D));
  LUT6 #(
    .INIT(64'h0010000000000000)) 
    \Use_FPGA.Almost_Full_Inst_i_2__12 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 [1]),
        .I1(\Use_FPGA.Almost_Full_Inst_i_3_n_0 ),
        .I2(wma_read_fifo_addr[7]),
        .I3(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 [0]),
        .I4(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 [4]),
        .I5(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 [5]),
        .O(\Use_FPGA.Almost_Full_Inst_i_2__12_n_0 ));
  LUT6 #(
    .INIT(64'h6555655565666555)) 
    \Use_FPGA.Almost_Full_Inst_i_2__15 
       (.I0(\Use_FPGA.Empty_Inst_0 ),
        .I1(write_data_full),
        .I2(update_evict_valid),
        .I3(update_evict_busy),
        .I4(update_wr_miss_rs_valid),
        .I5(wm_allocate_reg),
        .O(\Use_FPGA.Almost_Full_Inst_1 ));
  LUT4 #(
    .INIT(16'h7FFF)) 
    \Use_FPGA.Almost_Full_Inst_i_3 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 [2]),
        .I1(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 [3]),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 [6]),
        .O(\Use_FPGA.Almost_Full_Inst_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hBFFFBFFFBFBBBFFF)) 
    \Use_FPGA.Almost_Full_Inst_i_3__0 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_0 ),
        .I1(A),
        .I2(update_evict_valid),
        .I3(update_evict_busy),
        .I4(update_wr_miss_rs_valid),
        .I5(wm_allocate_reg),
        .O(\Use_FPGA.Almost_Full_Inst_0 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h9CAF635063506350)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(O),
        .I3(wma_word_done_d1),
        .I4(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 [0]),
        .I5(1'b1),
        .O5(DI),
        .O6(LI));
  (* SOFT_HLUTNM = "soft_lutpair84" *) 
  LUT5 #(
    .INIT(32'h0000F404)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst_i_1__8 
       (.I0(wm_allocate_reg),
        .I1(update_wr_miss_rs_valid),
        .I2(update_evict_busy),
        .I3(update_evict_valid),
        .I4(write_data_full),
        .O(queue_push));
  LUT5 #(
    .INIT(32'hB8000000)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst_i_2__1 
       (.I0(\access_data_info[0,1][Last] ),
        .I1(\wm_port_reg[0] ),
        .I2(\access_data_info[0,0][Last] ),
        .I3(update_wr_miss_rs_valid),
        .I4(wm_allocate_reg),
        .O(queue_push118_out));
  LUT6 #(
    .INIT(64'h2F20000000000000)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst_i_3 
       (.I0(wm_local_wrap_reg),
        .I1(p_20_in),
        .I2(wm_allocate_reg),
        .I3(wm_evict_reg),
        .I4(\Use_Reg_Ctrl.queue_exist_i_reg_2 ),
        .I5(wr_port_data_valid_i_reg),
        .O(update_wr_miss_rs_valid));
  LUT2 #(
    .INIT(4'hE)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst_i_4 
       (.I0(wma_fifo_full),
        .I1(queue_almost_full),
        .O(p_20_in));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_0),
        .Q(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 [0]),
        .S(Q));
  LUT6 #(
    .INIT(64'h000000000000FFD5)) 
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_8 
       (.I0(wm_kind),
        .I1(\wm_offset_reg[0] ),
        .I2(\wm_offset_reg[3] ),
        .I3(wm_local_wrap),
        .I4(queue_almost_full),
        .I5(wma_fifo_full),
        .O(\Use_Reg_Ctrl.queue_exist_i_reg_1 ));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4 
       (.CI(1'b0),
        .CO({carry_4,carry_3,carry_2,CI}),
        .CYINIT(1'b0),
        .DI({cnt_di_3,cnt_di_2,cnt_di_1,DI}),
        .O({read_fifo_addr_next_3,read_fifo_addr_next_2,read_fifo_addr_next_1,read_fifo_addr_next_0}),
        .S({cnt_s_3,cnt_s_2,cnt_s_1,LI}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[1].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(O),
        .I3(wma_word_done_d1),
        .I4(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 [1]),
        .I5(1'b1),
        .O5(cnt_di_1),
        .O6(cnt_s_1));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_1),
        .Q(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 [1]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[2].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(O),
        .I3(wma_word_done_d1),
        .I4(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 [2]),
        .I5(1'b1),
        .O5(cnt_di_2),
        .O6(cnt_s_2));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_2),
        .Q(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 [2]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[3].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(O),
        .I3(wma_word_done_d1),
        .I4(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 [3]),
        .I5(1'b1),
        .O5(cnt_di_3),
        .O6(cnt_s_3));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_3),
        .Q(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 [3]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[4].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(O),
        .I3(wma_word_done_d1),
        .I4(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 [4]),
        .I5(1'b1),
        .O5(cnt_di_4),
        .O6(cnt_s_4));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_4),
        .Q(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 [4]),
        .S(Q));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cnt_Bit_Gen[4].Use_Muxcy.MUXCY_Inst_CARRY4 
       (.CI(carry_4),
        .CO({carry_8,carry_7,carry_6,carry_5}),
        .CYINIT(1'b0),
        .DI({cnt_di_7,cnt_di_6,cnt_di_5,cnt_di_4}),
        .O({read_fifo_addr_next_7,read_fifo_addr_next_6,read_fifo_addr_next_5,read_fifo_addr_next_4}),
        .S({cnt_s_7,cnt_s_6,cnt_s_5,cnt_s_4}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[5].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(O),
        .I3(wma_word_done_d1),
        .I4(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 [5]),
        .I5(1'b1),
        .O5(cnt_di_5),
        .O6(cnt_s_5));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[5].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_5),
        .Q(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 [5]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[6].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(O),
        .I3(wma_word_done_d1),
        .I4(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 [6]),
        .I5(1'b1),
        .O5(cnt_di_6),
        .O6(cnt_s_6));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_6),
        .Q(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 [6]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[7].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(O),
        .I3(wma_word_done_d1),
        .I4(wma_read_fifo_addr[7]),
        .I5(1'b1),
        .O5(cnt_di_7),
        .O6(cnt_s_7));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[7].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_7),
        .Q(wma_read_fifo_addr[7]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[8].Active_Low.Last_Bit.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(O),
        .I3(wma_word_done_d1),
        .I4(wma_read_fifo_addr[8]),
        .I5(1'b1),
        .O(cnt_s_8));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[8].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_8),
        .Q(wma_read_fifo_addr[8]),
        .S(Q));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cnt_Bit_Gen[8].XOR_Inst_CARRY4 
       (.CI(carry_8),
        .CO(\NLW_Use_FPGA.Cnt_Bit_Gen[8].XOR_Inst_CARRY4_CO_UNCONNECTED [3:0]),
        .CYINIT(1'b0),
        .DI(\NLW_Use_FPGA.Cnt_Bit_Gen[8].XOR_Inst_CARRY4_DI_UNCONNECTED [3:0]),
        .O({\NLW_Use_FPGA.Cnt_Bit_Gen[8].XOR_Inst_CARRY4_O_UNCONNECTED [3:1],read_fifo_addr_next_8}),
        .S({\NLW_Use_FPGA.Cnt_Bit_Gen[8].XOR_Inst_CARRY4_S_UNCONNECTED [3:1],cnt_s_8}));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Empty_Inst_i_1__12_n_0 ),
        .Q(wma_fifo_empty),
        .S(Q));
  LUT4 #(
    .INIT(16'hE320)) 
    \Use_FPGA.Empty_Inst_i_1__12 
       (.I0(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .I1(wma_word_done_d1),
        .I2(O),
        .I3(wma_fifo_empty),
        .O(\Use_FPGA.Empty_Inst_i_1__12_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Full_Inst_i_1__9_n_0 ),
        .Q(wma_fifo_full),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair83" *) 
  LUT4 #(
    .INIT(16'hCB08)) 
    \Use_FPGA.Full_Inst_i_1__9 
       (.I0(queue_almost_full),
        .I1(wma_word_done_d1),
        .I2(O),
        .I3(wma_fifo_full),
        .O(\Use_FPGA.Full_Inst_i_1__9_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair84" *) 
  LUT4 #(
    .INIT(16'h88B8)) 
    \Use_FPGA.Full_Inst_i_2 
       (.I0(update_evict_valid),
        .I1(update_evict_busy),
        .I2(update_wr_miss_rs_valid),
        .I3(wm_allocate_reg),
        .O(\write_data_info[0][Valid] ));
  LUT6 #(
    .INIT(64'h00FDFFFF00FD0000)) 
    \Use_Reg_Ctrl.queue_exist_i_i_5 
       (.I0(wm_kind),
        .I1(update_wma_select_port3),
        .I2(wm_local_wrap),
        .I3(p_20_in),
        .I4(wm_allocate_reg),
        .I5(wm_evict_reg),
        .O(\Use_Reg_Ctrl.queue_exist_i_reg ));
  LUT3 #(
    .INIT(8'hFB)) 
    \Using_FPGA.AND2B1L_Inst1_i_1__4 
       (.I0(wma_merge_done),
        .I1(ri_merge_reg),
        .I2(wma_fifo_empty),
        .O(A_N));
  (* SOFT_HLUTNM = "soft_lutpair85" *) 
  LUT3 #(
    .INIT(8'hDF)) 
    \Using_FPGA.AND2B1L_Inst1_i_3 
       (.I0(ri_merge_reg),
        .I1(wma_merge_done),
        .I2(wma_fifo_empty),
        .O(A18_out));
  LUT3 #(
    .INIT(8'hDF)) 
    \Using_FPGA.MUXCY_I_i_1__47 
       (.I0(ri_merge_reg),
        .I1(wma_merge_done),
        .I2(wma_fifo_empty),
        .O(\Use_Reg_Ctrl.queue_exist_i_reg_0 ));
  LUT5 #(
    .INIT(32'h32222222)) 
    update_evict_ongoing_i_4
       (.I0(ri_evicted),
        .I1(update_read_miss_ongoing_reg),
        .I2(ri_merge_reg),
        .I3(wma_fifo_empty),
        .I4(ri_exist),
        .O(update_evict_ongoing_reg));
  (* SOFT_HLUTNM = "soft_lutpair85" *) 
  LUT4 #(
    .INIT(16'h20FF)) 
    update_evict_valid_i_3
       (.I0(wma_fifo_empty),
        .I1(wma_merge_done),
        .I2(ri_merge_reg),
        .I3(ri_exist),
        .O(update_evict_valid_reg));
  LUT5 #(
    .INIT(32'h000000EA)) 
    update_wm_pop_normal_hold_i_1
       (.I0(update_wm_pop_normal_hold_reg_0),
        .I1(update_wr_miss_rs_valid),
        .I2(update_wr_miss_rs_last),
        .I3(queue_pop),
        .I4(Q),
        .O(update_wm_pop_normal_hold_reg));
  LUT5 #(
    .INIT(32'h80888000)) 
    \update_wma_data[15]_i_1 
       (.I0(wma_word_done_d1_reg_0),
        .I1(wm_allow_reg),
        .I2(\wr_port_data_info_reg[0][BE][3] [1]),
        .I3(\wm_port_reg[0] ),
        .I4(\wr_port_data_info_reg[0][BE][3]_0 [1]),
        .O(\update_wma_data_reg[24] [1]));
  LUT5 #(
    .INIT(32'h80888000)) 
    \update_wma_data[23]_i_1 
       (.I0(wma_word_done_d1_reg_0),
        .I1(wm_allow_reg),
        .I2(\wr_port_data_info_reg[0][BE][3] [2]),
        .I3(\wm_port_reg[0] ),
        .I4(\wr_port_data_info_reg[0][BE][3]_0 [2]),
        .O(\update_wma_data_reg[24] [2]));
  LUT5 #(
    .INIT(32'h80888000)) 
    \update_wma_data[31]_i_1 
       (.I0(wma_word_done_d1_reg_0),
        .I1(wm_allow_reg),
        .I2(\wr_port_data_info_reg[0][BE][3] [3]),
        .I3(\wm_port_reg[0] ),
        .I4(\wr_port_data_info_reg[0][BE][3]_0 [3]),
        .O(\update_wma_data_reg[24] [3]));
  LUT5 #(
    .INIT(32'h80888000)) 
    \update_wma_data[7]_i_1 
       (.I0(wma_word_done_d1_reg_0),
        .I1(wm_allow_reg),
        .I2(\wr_port_data_info_reg[0][BE][3] [0]),
        .I3(\wm_port_reg[0] ),
        .I4(\wr_port_data_info_reg[0][BE][3]_0 [0]),
        .O(\update_wma_data_reg[24] [0]));
  LUT5 #(
    .INIT(32'h80BF8080)) 
    \update_wma_strb[0]_i_1 
       (.I0(wm_local_wrap_reg),
        .I1(\wr_port_data_info_reg[0][BE][0] ),
        .I2(wma_word_done_d1_reg_0),
        .I3(wma_word_done_d1),
        .I4(update_wma_strb[0]),
        .O(\update_wma_strb_reg[0] ));
  LUT5 #(
    .INIT(32'h80BF8080)) 
    \update_wma_strb[1]_i_1 
       (.I0(wm_local_wrap_reg),
        .I1(p_1_in3_in),
        .I2(wma_word_done_d1_reg_0),
        .I3(wma_word_done_d1),
        .I4(update_wma_strb[1]),
        .O(\update_wma_strb_reg[1] ));
  LUT5 #(
    .INIT(32'h80BF8080)) 
    \update_wma_strb[2]_i_1 
       (.I0(wm_local_wrap_reg),
        .I1(p_2_in),
        .I2(wma_word_done_d1_reg_0),
        .I3(wma_word_done_d1),
        .I4(update_wma_strb[2]),
        .O(\update_wma_strb_reg[2] ));
  LUT5 #(
    .INIT(32'h80BF8080)) 
    \update_wma_strb[3]_i_1 
       (.I0(wm_local_wrap_reg),
        .I1(p_3_in),
        .I2(wma_word_done_d1_reg_0),
        .I3(wma_word_done_d1),
        .I4(update_wma_strb[3]),
        .O(\update_wma_strb_reg[3] ));
  LUT6 #(
    .INIT(64'hFF02000200000000)) 
    \update_wma_strb[3]_i_3 
       (.I0(wm_exist),
        .I1(queue_almost_full),
        .I2(wma_fifo_full),
        .I3(wm_local_wrap_reg),
        .I4(update_wr_miss_rs_valid),
        .I5(wm_allocate_reg),
        .O(wma_word_done_d1_reg_0));
  LUT6 #(
    .INIT(64'hAAAAAABAAAAAAAAA)) 
    \update_wr_offset_cnt[5]_i_1 
       (.I0(update_wr_miss_rs_valid),
        .I1(wm_local_wrap_reg),
        .I2(wm_exist),
        .I3(queue_almost_full),
        .I4(wma_fifo_full),
        .I5(wm_allocate_reg),
        .O(E));
  LUT6 #(
    .INIT(64'h00000000222EEE2E)) 
    update_write_miss_ongoing_i_1
       (.I0(update_write_miss_ongoing),
        .I1(update_wr_miss_rs_valid),
        .I2(\access_data_info[0,0][Last] ),
        .I3(\wm_port_reg[0] ),
        .I4(\access_data_info[0,1][Last] ),
        .I5(Q),
        .O(update_write_miss_ongoing_reg));
  LUT5 #(
    .INIT(32'h000000EA)) 
    wma_merge_done_i_1
       (.I0(wma_merge_done),
        .I1(wma_merge_done_i_2_n_0),
        .I2(O),
        .I3(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I4(Q),
        .O(wma_merge_done_reg));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    wma_merge_done_i_2
       (.I0(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_1 ),
        .I1(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_2 ),
        .I2(wma_read_fifo_addr[8]),
        .I3(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_3 ),
        .I4(wma_read_fifo_addr[7]),
        .I5(\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_4 ),
        .O(wma_merge_done_i_2_n_0));
  LUT6 #(
    .INIT(64'h00000000FF700000)) 
    wma_word_done_d1_i_1
       (.I0(wm_kind),
        .I1(wm_local_wrap),
        .I2(\wm_remove_unaligned_reg[0] ),
        .I3(update_wr_miss_rs_last),
        .I4(wma_word_done_d1_reg_0),
        .I5(Q),
        .O(wma_word_done_d1_reg));
endmodule

(* ORIG_REF_NAME = "sc_srl_fifo_counter" *) 
module design_1_system_cache_0_0_sc_srl_fifo_counter__parameterized12
   (write_data_almost_full,
    write_data_full,
    A,
    M_AXI_WVALID_I_reg,
    \Use_FPGA.Almost_Full_Inst_0 ,
    SR,
    ACLK,
    queue_push,
    \Use_FPGA.Full_Inst_0 ,
    \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst_0 ,
    M_AXI_WVALID_I_reg_0,
    M0_AXI_WREADY,
    \write_data_info[0][Valid] );
  output write_data_almost_full;
  output write_data_full;
  output [4:0]A;
  output M_AXI_WVALID_I_reg;
  output \Use_FPGA.Almost_Full_Inst_0 ;
  input [0:0]SR;
  input ACLK;
  input queue_push;
  input \Use_FPGA.Full_Inst_0 ;
  input \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst_0 ;
  input M_AXI_WVALID_I_reg_0;
  input M0_AXI_WREADY;
  input \write_data_info[0][Valid] ;

  wire [4:0]A;
  wire ACLK;
  wire CI;
  wire D;
  wire DI;
  wire LI;
  wire M0_AXI_WREADY;
  wire M_AXI_WVALID_I_reg;
  wire M_AXI_WVALID_I_reg_0;
  wire [0:0]SR;
  wire \Use_FPGA.Almost_Empty_Inst_i_1__19_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_i_2__19_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_n_0 ;
  wire \Use_FPGA.Almost_Full_Inst_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst_0 ;
  wire \Use_FPGA.Empty_Inst_i_1__19_n_0 ;
  wire \Use_FPGA.Full_Inst_0 ;
  wire \Use_FPGA.Full_Inst_i_1__15_n_0 ;
  wire carry_2;
  wire carry_3;
  wire carry_4;
  wire cnt_di_1;
  wire cnt_di_2;
  wire cnt_di_3;
  wire cnt_s_1;
  wire cnt_s_2;
  wire cnt_s_3;
  wire cnt_s_4;
  wire queue_push;
  wire read_fifo_addr_next_0;
  wire read_fifo_addr_next_1;
  wire read_fifo_addr_next_2;
  wire read_fifo_addr_next_3;
  wire read_fifo_addr_next_4;
  wire w_fifo_empty;
  wire write_data_almost_full;
  wire write_data_full;
  wire \write_data_info[0][Valid] ;
  wire [3:0]\NLW_Use_FPGA.Cnt_Bit_Gen[4].XOR_Inst_CARRY4_CO_UNCONNECTED ;
  wire [3:0]\NLW_Use_FPGA.Cnt_Bit_Gen[4].XOR_Inst_CARRY4_DI_UNCONNECTED ;
  wire [3:1]\NLW_Use_FPGA.Cnt_Bit_Gen[4].XOR_Inst_CARRY4_O_UNCONNECTED ;
  wire [3:1]\NLW_Use_FPGA.Cnt_Bit_Gen[4].XOR_Inst_CARRY4_S_UNCONNECTED ;

  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT3 #(
    .INIT(8'h45)) 
    M_AXI_WVALID_I_i_1
       (.I0(w_fifo_empty),
        .I1(M0_AXI_WREADY),
        .I2(M_AXI_WVALID_I_reg_0),
        .O(M_AXI_WVALID_I_reg));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Almost_Empty_Inst_i_1__19_n_0 ),
        .Q(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .R(SR));
  LUT6 #(
    .INIT(64'hFFA2AAFBFFA2AA08)) 
    \Use_FPGA.Almost_Empty_Inst_i_1__19 
       (.I0(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .I1(M_AXI_WVALID_I_reg_0),
        .I2(M0_AXI_WREADY),
        .I3(w_fifo_empty),
        .I4(queue_push),
        .I5(\Use_FPGA.Almost_Empty_Inst_i_2__19_n_0 ),
        .O(\Use_FPGA.Almost_Empty_Inst_i_1__19_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT5 #(
    .INIT(32'h00000100)) 
    \Use_FPGA.Almost_Empty_Inst_i_2__19 
       (.I0(A[1]),
        .I1(A[2]),
        .I2(A[4]),
        .I3(A[0]),
        .I4(A[3]),
        .O(\Use_FPGA.Almost_Empty_Inst_i_2__19_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(D),
        .Q(write_data_almost_full),
        .R(SR));
  LUT6 #(
    .INIT(64'hB8B8B8B8B8B8B8BB)) 
    \Use_FPGA.Almost_Full_Inst_i_1__15 
       (.I0(write_data_almost_full),
        .I1(\Use_FPGA.Full_Inst_0 ),
        .I2(write_data_full),
        .I3(\Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst_0 ),
        .I4(A[1]),
        .I5(A[0]),
        .O(D));
  (* SOFT_HLUTNM = "soft_lutpair9" *) 
  LUT2 #(
    .INIT(4'h7)) 
    \Use_FPGA.Almost_Full_Inst_i_4 
       (.I0(A[4]),
        .I1(A[2]),
        .O(\Use_FPGA.Almost_Full_Inst_0 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h9CAF635063506350)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(M_AXI_WVALID_I_reg),
        .I3(queue_push),
        .I4(A[0]),
        .I5(1'b1),
        .O5(DI),
        .O6(LI));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_0),
        .Q(A[0]),
        .S(SR));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4 
       (.CI(1'b0),
        .CO({carry_4,carry_3,carry_2,CI}),
        .CYINIT(1'b0),
        .DI({cnt_di_3,cnt_di_2,cnt_di_1,DI}),
        .O({read_fifo_addr_next_3,read_fifo_addr_next_2,read_fifo_addr_next_1,read_fifo_addr_next_0}),
        .S({cnt_s_3,cnt_s_2,cnt_s_1,LI}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[1].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(M_AXI_WVALID_I_reg),
        .I3(queue_push),
        .I4(A[1]),
        .I5(1'b1),
        .O5(cnt_di_1),
        .O6(cnt_s_1));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_1),
        .Q(A[1]),
        .S(SR));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[2].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(M_AXI_WVALID_I_reg),
        .I3(queue_push),
        .I4(A[2]),
        .I5(1'b1),
        .O5(cnt_di_2),
        .O6(cnt_s_2));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_2),
        .Q(A[2]),
        .S(SR));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[3].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(M_AXI_WVALID_I_reg),
        .I3(queue_push),
        .I4(A[3]),
        .I5(1'b1),
        .O5(cnt_di_3),
        .O6(cnt_s_3));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_3),
        .Q(A[3]),
        .S(SR));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[4].Active_Low.Last_Bit.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(M_AXI_WVALID_I_reg),
        .I3(queue_push),
        .I4(A[4]),
        .I5(1'b1),
        .O(cnt_s_4));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_4),
        .Q(A[4]),
        .S(SR));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cnt_Bit_Gen[4].XOR_Inst_CARRY4 
       (.CI(carry_4),
        .CO(\NLW_Use_FPGA.Cnt_Bit_Gen[4].XOR_Inst_CARRY4_CO_UNCONNECTED [3:0]),
        .CYINIT(1'b0),
        .DI(\NLW_Use_FPGA.Cnt_Bit_Gen[4].XOR_Inst_CARRY4_DI_UNCONNECTED [3:0]),
        .O({\NLW_Use_FPGA.Cnt_Bit_Gen[4].XOR_Inst_CARRY4_O_UNCONNECTED [3:1],read_fifo_addr_next_4}),
        .S({\NLW_Use_FPGA.Cnt_Bit_Gen[4].XOR_Inst_CARRY4_S_UNCONNECTED [3:1],cnt_s_4}));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Empty_Inst_i_1__19_n_0 ),
        .Q(w_fifo_empty),
        .S(SR));
  (* SOFT_HLUTNM = "soft_lutpair8" *) 
  LUT5 #(
    .INIT(32'h55554044)) 
    \Use_FPGA.Empty_Inst_i_1__19 
       (.I0(queue_push),
        .I1(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .I2(M0_AXI_WREADY),
        .I3(M_AXI_WVALID_I_reg_0),
        .I4(w_fifo_empty),
        .O(\Use_FPGA.Empty_Inst_i_1__19_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Full_Inst_i_1__15_n_0 ),
        .Q(write_data_full),
        .R(SR));
  LUT6 #(
    .INIT(64'hF8F8F8F80000F800)) 
    \Use_FPGA.Full_Inst_i_1__15 
       (.I0(write_data_almost_full),
        .I1(\write_data_info[0][Valid] ),
        .I2(write_data_full),
        .I3(M_AXI_WVALID_I_reg_0),
        .I4(M0_AXI_WREADY),
        .I5(w_fifo_empty),
        .O(\Use_FPGA.Full_Inst_i_1__15_n_0 ));
endmodule

(* ORIG_REF_NAME = "sc_srl_fifo_counter" *) 
module design_1_system_cache_0_0_sc_srl_fifo_counter__parameterized14
   (\Use_FPGA.Full_Inst_0 ,
    queue_empty,
    ar_read_fifo_addr,
    A_0,
    need_to_stall_write_reg,
    SR,
    ACLK,
    ar_pop_i,
    queue_push29_out,
    \read_req_info[0][Valid] ,
    ri_fifo_full,
    update_done_ar,
    update_need_ar,
    Q,
    out);
  output \Use_FPGA.Full_Inst_0 ;
  output queue_empty;
  output [3:0]ar_read_fifo_addr;
  output A_0;
  output need_to_stall_write_reg;
  input [0:0]SR;
  input ACLK;
  input ar_pop_i;
  input queue_push29_out;
  input \read_req_info[0][Valid] ;
  input ri_fifo_full;
  input update_done_ar;
  input update_need_ar;
  input [1:0]Q;
  input [1:0]out;

  wire ACLK;
  wire A_0;
  wire CI;
  wire D;
  wire DI;
  wire LI;
  wire [1:0]Q;
  wire [0:0]SR;
  wire \Use_FPGA.Almost_Empty_Inst_i_1__17_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_i_2__18_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_n_0 ;
  wire \Use_FPGA.Almost_Full_Inst_i_2__14_n_0 ;
  wire \Use_FPGA.Almost_Full_Inst_n_0 ;
  wire \Use_FPGA.Empty_Inst_i_1__17_n_0 ;
  wire \Use_FPGA.Full_Inst_0 ;
  wire \Use_FPGA.Full_Inst_i_1__13_n_0 ;
  wire ar_pop_i;
  wire [3:0]ar_read_fifo_addr;
  wire carry_2;
  wire carry_3;
  wire cnt_di_1;
  wire cnt_di_2;
  wire cnt_s_1;
  wire cnt_s_2;
  wire cnt_s_3;
  wire need_to_stall_write_reg;
  wire [1:0]out;
  wire queue_empty;
  wire queue_push29_out;
  wire read_fifo_addr_next_0;
  wire read_fifo_addr_next_1;
  wire read_fifo_addr_next_2;
  wire read_fifo_addr_next_3;
  wire \read_req_info[0][Valid] ;
  wire ri_fifo_full;
  wire update_done_ar;
  wire update_need_ar;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED ;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Almost_Empty_Inst_i_1__17_n_0 ),
        .Q(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .R(SR));
  LUT6 #(
    .INIT(64'hAFAAFCFFA0AA0C00)) 
    \Use_FPGA.Almost_Empty_Inst_i_1__17 
       (.I0(\Use_FPGA.Almost_Empty_Inst_i_2__18_n_0 ),
        .I1(queue_empty),
        .I2(\Use_FPGA.Full_Inst_0 ),
        .I3(\read_req_info[0][Valid] ),
        .I4(ar_pop_i),
        .I5(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .O(\Use_FPGA.Almost_Empty_Inst_i_1__17_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    \Use_FPGA.Almost_Empty_Inst_i_2__18 
       (.I0(ar_read_fifo_addr[1]),
        .I1(ar_read_fifo_addr[0]),
        .I2(ar_read_fifo_addr[3]),
        .I3(ar_read_fifo_addr[2]),
        .O(\Use_FPGA.Almost_Empty_Inst_i_2__18_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(D),
        .Q(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .R(SR));
  LUT5 #(
    .INIT(32'hECBAEC8A)) 
    \Use_FPGA.Almost_Full_Inst_i_1__13 
       (.I0(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .I1(\Use_FPGA.Full_Inst_0 ),
        .I2(\read_req_info[0][Valid] ),
        .I3(ar_pop_i),
        .I4(\Use_FPGA.Almost_Full_Inst_i_2__14_n_0 ),
        .O(D));
  (* SOFT_HLUTNM = "soft_lutpair4" *) 
  LUT4 #(
    .INIT(16'h1000)) 
    \Use_FPGA.Almost_Full_Inst_i_2__14 
       (.I0(ar_read_fifo_addr[1]),
        .I1(ar_read_fifo_addr[0]),
        .I2(ar_read_fifo_addr[3]),
        .I3(ar_read_fifo_addr[2]),
        .O(\Use_FPGA.Almost_Full_Inst_i_2__14_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h9CAF635063506350)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(ar_pop_i),
        .I3(queue_push29_out),
        .I4(ar_read_fifo_addr[0]),
        .I5(1'b1),
        .O5(DI),
        .O6(LI));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_0),
        .Q(ar_read_fifo_addr[0]),
        .S(SR));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4 
       (.CI(1'b0),
        .CO({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED [3],carry_3,carry_2,CI}),
        .CYINIT(1'b0),
        .DI({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED [3],cnt_di_2,cnt_di_1,DI}),
        .O({read_fifo_addr_next_3,read_fifo_addr_next_2,read_fifo_addr_next_1,read_fifo_addr_next_0}),
        .S({cnt_s_3,cnt_s_2,cnt_s_1,LI}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[1].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(ar_pop_i),
        .I3(queue_push29_out),
        .I4(ar_read_fifo_addr[1]),
        .I5(1'b1),
        .O5(cnt_di_1),
        .O6(cnt_s_1));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_1),
        .Q(ar_read_fifo_addr[1]),
        .S(SR));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[2].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(ar_pop_i),
        .I3(queue_push29_out),
        .I4(ar_read_fifo_addr[2]),
        .I5(1'b1),
        .O5(cnt_di_2),
        .O6(cnt_s_2));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_2),
        .Q(ar_read_fifo_addr[2]),
        .S(SR));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[3].Active_Low.Last_Bit.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(ar_pop_i),
        .I3(queue_push29_out),
        .I4(ar_read_fifo_addr[3]),
        .I5(1'b1),
        .O(cnt_s_3));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_3),
        .Q(ar_read_fifo_addr[3]),
        .S(SR));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Empty_Inst_i_1__17_n_0 ),
        .Q(queue_empty),
        .S(SR));
  LUT5 #(
    .INIT(32'hEF8A208A)) 
    \Use_FPGA.Empty_Inst_i_1__17 
       (.I0(queue_empty),
        .I1(\Use_FPGA.Full_Inst_0 ),
        .I2(\read_req_info[0][Valid] ),
        .I3(ar_pop_i),
        .I4(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .O(\Use_FPGA.Empty_Inst_i_1__17_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Full_Inst_i_1__13_n_0 ),
        .Q(\Use_FPGA.Full_Inst_0 ),
        .R(SR));
  LUT6 #(
    .INIT(64'h0000FFFF00000200)) 
    \Use_FPGA.Full_Inst_i_1__13 
       (.I0(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .I1(ri_fifo_full),
        .I2(update_done_ar),
        .I3(update_need_ar),
        .I4(ar_pop_i),
        .I5(\Use_FPGA.Full_Inst_0 ),
        .O(\Use_FPGA.Full_Inst_i_1__13_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.MUXCY_I_i_1__81 
       (.I0(queue_empty),
        .O(A_0));
  LUT5 #(
    .INIT(32'h00004BB4)) 
    need_to_stall_write_i_3
       (.I0(Q[0]),
        .I1(out[0]),
        .I2(out[1]),
        .I3(Q[1]),
        .I4(queue_empty),
        .O(need_to_stall_write_reg));
endmodule

(* ORIG_REF_NAME = "sc_srl_fifo_counter" *) 
module design_1_system_cache_0_0_sc_srl_fifo_counter__parameterized1_8
   (wc_fifo_empty,
    Q,
    ACLK,
    \bs_port_num_reg[0] ,
    queue_push,
    \Use_FPGA.Full_Inst ,
    S0_AXI_WLAST,
    \arbiter_bp_push_i_reg[0][Valid] ,
    queue_pop7_out);
  output wc_fifo_empty;
  input Q;
  input ACLK;
  input \bs_port_num_reg[0] ;
  input queue_push;
  input \Use_FPGA.Full_Inst ;
  input S0_AXI_WLAST;
  input \arbiter_bp_push_i_reg[0][Valid] ;
  input queue_pop7_out;

  wire ACLK;
  wire CI;
  wire DI;
  wire LI;
  wire Q;
  wire S0_AXI_WLAST;
  wire \Use_FPGA.Almost_Empty_Inst_i_1__0_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_i_2__3_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_n_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_n_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst_n_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst_n_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst_n_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_n_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[5].FDS_Inst_n_0 ;
  wire \Use_FPGA.Empty_Inst_i_1__0_n_0 ;
  wire \Use_FPGA.Full_Inst ;
  wire \arbiter_bp_push_i_reg[0][Valid] ;
  wire \bs_port_num_reg[0] ;
  wire carry_2;
  wire carry_3;
  wire carry_4;
  wire carry_5;
  wire cnt_di_1;
  wire cnt_di_2;
  wire cnt_di_3;
  wire cnt_di_4;
  wire cnt_s_1;
  wire cnt_s_2;
  wire cnt_s_3;
  wire cnt_s_4;
  wire cnt_s_5;
  wire queue_pop7_out;
  wire queue_push;
  wire read_fifo_addr_next_0;
  wire read_fifo_addr_next_1;
  wire read_fifo_addr_next_2;
  wire read_fifo_addr_next_3;
  wire read_fifo_addr_next_4;
  wire read_fifo_addr_next_5;
  wire wc_fifo_empty;
  wire [3:1]\NLW_Use_FPGA.Cnt_Bit_Gen[4].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED ;
  wire [3:1]\NLW_Use_FPGA.Cnt_Bit_Gen[4].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED ;
  wire [3:2]\NLW_Use_FPGA.Cnt_Bit_Gen[4].Use_Muxcy.MUXCY_Inst_CARRY4_O_UNCONNECTED ;
  wire [3:2]\NLW_Use_FPGA.Cnt_Bit_Gen[4].Use_Muxcy.MUXCY_Inst_CARRY4_S_UNCONNECTED ;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Almost_Empty_Inst_i_1__0_n_0 ),
        .Q(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .R(Q));
  LUT6 #(
    .INIT(64'hFCCCAFFF0CCCA000)) 
    \Use_FPGA.Almost_Empty_Inst_i_1__0 
       (.I0(wc_fifo_empty),
        .I1(\Use_FPGA.Almost_Empty_Inst_i_2__3_n_0 ),
        .I2(\Use_FPGA.Full_Inst ),
        .I3(S0_AXI_WLAST),
        .I4(\bs_port_num_reg[0] ),
        .I5(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .O(\Use_FPGA.Almost_Empty_Inst_i_1__0_n_0 ));
  LUT6 #(
    .INIT(64'h0000000000000100)) 
    \Use_FPGA.Almost_Empty_Inst_i_2__3 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[5].FDS_Inst_n_0 ),
        .I1(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_n_0 ),
        .I2(\Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst_n_0 ),
        .I3(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_n_0 ),
        .I4(\Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst_n_0 ),
        .I5(\Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst_n_0 ),
        .O(\Use_FPGA.Almost_Empty_Inst_i_2__3_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h9CAF635063506350)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(\bs_port_num_reg[0] ),
        .I3(queue_push),
        .I4(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_n_0 ),
        .I5(1'b1),
        .O5(DI),
        .O6(LI));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_0),
        .Q(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_n_0 ),
        .S(Q));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4 
       (.CI(1'b0),
        .CO({carry_4,carry_3,carry_2,CI}),
        .CYINIT(1'b0),
        .DI({cnt_di_3,cnt_di_2,cnt_di_1,DI}),
        .O({read_fifo_addr_next_3,read_fifo_addr_next_2,read_fifo_addr_next_1,read_fifo_addr_next_0}),
        .S({cnt_s_3,cnt_s_2,cnt_s_1,LI}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[1].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(\bs_port_num_reg[0] ),
        .I3(queue_push),
        .I4(\Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst_n_0 ),
        .I5(1'b1),
        .O5(cnt_di_1),
        .O6(cnt_s_1));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_1),
        .Q(\Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst_n_0 ),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[2].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(\bs_port_num_reg[0] ),
        .I3(queue_push),
        .I4(\Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst_n_0 ),
        .I5(1'b1),
        .O5(cnt_di_2),
        .O6(cnt_s_2));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_2),
        .Q(\Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst_n_0 ),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[3].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(\bs_port_num_reg[0] ),
        .I3(queue_push),
        .I4(\Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst_n_0 ),
        .I5(1'b1),
        .O5(cnt_di_3),
        .O6(cnt_s_3));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_3),
        .Q(\Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst_n_0 ),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[4].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(\bs_port_num_reg[0] ),
        .I3(queue_push),
        .I4(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_n_0 ),
        .I5(1'b1),
        .O5(cnt_di_4),
        .O6(cnt_s_4));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_4),
        .Q(\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_n_0 ),
        .S(Q));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cnt_Bit_Gen[4].Use_Muxcy.MUXCY_Inst_CARRY4 
       (.CI(carry_4),
        .CO({\NLW_Use_FPGA.Cnt_Bit_Gen[4].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED [3:1],carry_5}),
        .CYINIT(1'b0),
        .DI({\NLW_Use_FPGA.Cnt_Bit_Gen[4].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED [3:1],cnt_di_4}),
        .O({\NLW_Use_FPGA.Cnt_Bit_Gen[4].Use_Muxcy.MUXCY_Inst_CARRY4_O_UNCONNECTED [3:2],read_fifo_addr_next_5,read_fifo_addr_next_4}),
        .S({\NLW_Use_FPGA.Cnt_Bit_Gen[4].Use_Muxcy.MUXCY_Inst_CARRY4_S_UNCONNECTED [3:2],cnt_s_5,cnt_s_4}));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[5].Active_Low.Last_Bit.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(\bs_port_num_reg[0] ),
        .I3(queue_push),
        .I4(\Use_FPGA.Cnt_Bit_Gen[5].FDS_Inst_n_0 ),
        .I5(1'b1),
        .O(cnt_s_5));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[5].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_5),
        .Q(\Use_FPGA.Cnt_Bit_Gen[5].FDS_Inst_n_0 ),
        .S(Q));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Empty_Inst_i_1__0_n_0 ),
        .Q(wc_fifo_empty),
        .S(Q));
  LUT6 #(
    .INIT(64'h3FEA3F3F002A0000)) 
    \Use_FPGA.Empty_Inst_i_1__0 
       (.I0(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .I1(\Use_FPGA.Full_Inst ),
        .I2(S0_AXI_WLAST),
        .I3(\arbiter_bp_push_i_reg[0][Valid] ),
        .I4(queue_pop7_out),
        .I5(wc_fifo_empty),
        .O(\Use_FPGA.Empty_Inst_i_1__0_n_0 ));
endmodule

(* ORIG_REF_NAME = "sc_srl_fifo_counter" *) 
module design_1_system_cache_0_0_sc_srl_fifo_counter__parameterized3
   (\Use_FPGA.Almost_Empty_Inst_0 ,
    queue_index,
    ri_exist,
    S,
    Q,
    ACLK,
    rip_pop,
    \lookup_read_data_new[0,1][Valid] ,
    \Use_Reg_Ctrl.queue_exist_i_reg_0 ,
    \lu_mem_info_reg[Port_Num][0] ,
    \read_info_status[0,0][Full] ,
    p_162_in,
    lookup_restart_mem,
    \read_info_status[0,0][Almost_Full] );
  output \Use_FPGA.Almost_Empty_Inst_0 ;
  output [3:0]queue_index;
  output ri_exist;
  output S;
  input Q;
  input ACLK;
  input rip_pop;
  input \lookup_read_data_new[0,1][Valid] ;
  input \Use_Reg_Ctrl.queue_exist_i_reg_0 ;
  input \lu_mem_info_reg[Port_Num][0] ;
  input \read_info_status[0,0][Full] ;
  input p_162_in;
  input lookup_restart_mem;
  input \read_info_status[0,0][Almost_Full] ;

  wire ACLK;
  wire CI;
  wire D;
  wire DI;
  wire LI;
  wire Q;
  wire S;
  wire \Use_FPGA.Almost_Empty_Inst_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_i_1__6_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_i_2__5_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_n_0 ;
  wire \Use_FPGA.Almost_Full_Inst_i_2__5_n_0 ;
  wire \Use_FPGA.Empty_Inst_i_1__6_n_0 ;
  wire \Use_FPGA.Full_Inst_i_1__4_n_0 ;
  wire \Use_Reg_Ctrl.queue_exist_i_i_1__1_n_0 ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg_0 ;
  wire \Using_FPGA.MUXCY_I_i_2__12_n_0 ;
  wire carry_2;
  wire carry_3;
  wire cnt_di_1;
  wire cnt_di_2;
  wire cnt_s_1;
  wire cnt_s_2;
  wire cnt_s_3;
  wire \lookup_read_data_new[0,1][Valid] ;
  wire lookup_restart_mem;
  wire \lu_mem_info_reg[Port_Num][0] ;
  wire p_162_in;
  wire [3:0]queue_index;
  wire read_fifo_addr_next_0;
  wire read_fifo_addr_next_1;
  wire read_fifo_addr_next_2;
  wire read_fifo_addr_next_3;
  wire \read_info_status[0,0][Almost_Full] ;
  wire \read_info_status[0,0][Full] ;
  wire \read_info_status[0,1][Almost_Full] ;
  wire \read_info_status[0,1][Full] ;
  wire ri_exist;
  wire rip_pop;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED ;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Almost_Empty_Inst_i_1__6_n_0 ),
        .Q(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .R(Q));
  LUT6 #(
    .INIT(64'hFEF3FEFEC2C0C2C2)) 
    \Use_FPGA.Almost_Empty_Inst_i_1__6 
       (.I0(\Use_FPGA.Almost_Empty_Inst_i_2__5_n_0 ),
        .I1(\lookup_read_data_new[0,1][Valid] ),
        .I2(\Use_FPGA.Almost_Empty_Inst_0 ),
        .I3(rip_pop),
        .I4(ri_exist),
        .I5(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .O(\Use_FPGA.Almost_Empty_Inst_i_1__6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair154" *) 
  LUT4 #(
    .INIT(16'h0010)) 
    \Use_FPGA.Almost_Empty_Inst_i_2__5 
       (.I0(queue_index[3]),
        .I1(queue_index[2]),
        .I2(queue_index[0]),
        .I3(queue_index[1]),
        .O(\Use_FPGA.Almost_Empty_Inst_i_2__5_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(D),
        .Q(\read_info_status[0,1][Almost_Full] ),
        .R(Q));
  LUT6 #(
    .INIT(64'hAFFCAFAFA00CA0A0)) 
    \Use_FPGA.Almost_Full_Inst_i_1__4 
       (.I0(\Use_FPGA.Almost_Full_Inst_i_2__5_n_0 ),
        .I1(\read_info_status[0,1][Full] ),
        .I2(\lookup_read_data_new[0,1][Valid] ),
        .I3(\Use_FPGA.Almost_Empty_Inst_0 ),
        .I4(\Use_Reg_Ctrl.queue_exist_i_reg_0 ),
        .I5(\read_info_status[0,1][Almost_Full] ),
        .O(D));
  (* SOFT_HLUTNM = "soft_lutpair154" *) 
  LUT4 #(
    .INIT(16'h1000)) 
    \Use_FPGA.Almost_Full_Inst_i_2__5 
       (.I0(queue_index[0]),
        .I1(queue_index[1]),
        .I2(queue_index[3]),
        .I3(queue_index[2]),
        .O(\Use_FPGA.Almost_Full_Inst_i_2__5_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_0),
        .Q(queue_index[0]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h51AEAE51AE51AE51)) 
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst 
       (.I0(\Use_FPGA.Almost_Empty_Inst_0 ),
        .I1(ri_exist),
        .I2(rip_pop),
        .I3(\lookup_read_data_new[0,1][Valid] ),
        .I4(queue_index[0]),
        .I5(1'b1),
        .O5(DI),
        .O6(LI));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4 
       (.CI(1'b0),
        .CO({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED [3],carry_3,carry_2,CI}),
        .CYINIT(1'b0),
        .DI({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED [3],cnt_di_2,cnt_di_1,DI}),
        .O({read_fifo_addr_next_3,read_fifo_addr_next_2,read_fifo_addr_next_1,read_fifo_addr_next_0}),
        .S({cnt_s_3,cnt_s_2,cnt_s_1,LI}));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_1),
        .Q(queue_index[1]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFFAE005100510051)) 
    \Use_FPGA.Cnt_Bit_Gen[1].No_Prot.Other_Bits.LUT_Inst 
       (.I0(\Use_FPGA.Almost_Empty_Inst_0 ),
        .I1(ri_exist),
        .I2(rip_pop),
        .I3(\lookup_read_data_new[0,1][Valid] ),
        .I4(queue_index[1]),
        .I5(1'b1),
        .O5(cnt_di_1),
        .O6(cnt_s_1));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_2),
        .Q(queue_index[2]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFFAE005100510051)) 
    \Use_FPGA.Cnt_Bit_Gen[2].No_Prot.Other_Bits.LUT_Inst 
       (.I0(\Use_FPGA.Almost_Empty_Inst_0 ),
        .I1(ri_exist),
        .I2(rip_pop),
        .I3(\lookup_read_data_new[0,1][Valid] ),
        .I4(queue_index[2]),
        .I5(1'b1),
        .O5(cnt_di_2),
        .O6(cnt_s_2));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_3),
        .Q(queue_index[3]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hFFAE005100510051)) 
    \Use_FPGA.Cnt_Bit_Gen[3].No_Prot.Last_Bit.LUT_Inst 
       (.I0(\Use_FPGA.Almost_Empty_Inst_0 ),
        .I1(ri_exist),
        .I2(rip_pop),
        .I3(\lookup_read_data_new[0,1][Valid] ),
        .I4(queue_index[3]),
        .I5(1'b1),
        .O(cnt_s_3));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Empty_Inst_i_1__6_n_0 ),
        .Q(\Use_FPGA.Almost_Empty_Inst_0 ),
        .S(Q));
  LUT5 #(
    .INIT(32'h32303232)) 
    \Use_FPGA.Empty_Inst_i_1__6 
       (.I0(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .I1(\lookup_read_data_new[0,1][Valid] ),
        .I2(\Use_FPGA.Almost_Empty_Inst_0 ),
        .I3(rip_pop),
        .I4(ri_exist),
        .O(\Use_FPGA.Empty_Inst_i_1__6_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Full_Inst_i_1__4_n_0 ),
        .Q(\read_info_status[0,1][Full] ),
        .R(Q));
  LUT6 #(
    .INIT(64'hBCBBBCBC80888080)) 
    \Use_FPGA.Full_Inst_i_1__4 
       (.I0(\read_info_status[0,1][Almost_Full] ),
        .I1(\lookup_read_data_new[0,1][Valid] ),
        .I2(\Use_FPGA.Almost_Empty_Inst_0 ),
        .I3(rip_pop),
        .I4(ri_exist),
        .I5(\read_info_status[0,1][Full] ),
        .O(\Use_FPGA.Full_Inst_i_1__4_n_0 ));
  LUT3 #(
    .INIT(8'h75)) 
    \Use_Reg_Ctrl.queue_exist_i_i_1__1 
       (.I0(\Use_FPGA.Almost_Empty_Inst_0 ),
        .I1(rip_pop),
        .I2(ri_exist),
        .O(\Use_Reg_Ctrl.queue_exist_i_i_1__1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \Use_Reg_Ctrl.queue_exist_i_reg 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_Reg_Ctrl.queue_exist_i_i_1__1_n_0 ),
        .Q(ri_exist),
        .R(Q));
  LUT6 #(
    .INIT(64'h000000000407FFFF)) 
    \Using_FPGA.MUXCY_I_i_1__63 
       (.I0(\read_info_status[0,1][Full] ),
        .I1(\lu_mem_info_reg[Port_Num][0] ),
        .I2(\Using_FPGA.MUXCY_I_i_2__12_n_0 ),
        .I3(\read_info_status[0,0][Full] ),
        .I4(p_162_in),
        .I5(lookup_restart_mem),
        .O(S));
  LUT3 #(
    .INIT(8'hB8)) 
    \Using_FPGA.MUXCY_I_i_2__12 
       (.I0(\read_info_status[0,1][Almost_Full] ),
        .I1(\lu_mem_info_reg[Port_Num][0] ),
        .I2(\read_info_status[0,0][Almost_Full] ),
        .O(\Using_FPGA.MUXCY_I_i_2__12_n_0 ));
endmodule

(* ORIG_REF_NAME = "sc_srl_fifo_counter" *) 
module design_1_system_cache_0_0_sc_srl_fifo_counter__parameterized3_15
   (\read_info_status[0,0][Almost_Full] ,
    \read_info_status[0,0][Full] ,
    \Use_FPGA.Almost_Empty_Inst_0 ,
    queue_index,
    ri_exist,
    Q,
    ACLK,
    rip_pop,
    \lookup_read_data_new[0,0][Valid] ,
    \Use_Reg_Ctrl.queue_exist_i_reg_0 );
  output \read_info_status[0,0][Almost_Full] ;
  output \read_info_status[0,0][Full] ;
  output \Use_FPGA.Almost_Empty_Inst_0 ;
  output [3:0]queue_index;
  output ri_exist;
  input Q;
  input ACLK;
  input rip_pop;
  input \lookup_read_data_new[0,0][Valid] ;
  input \Use_Reg_Ctrl.queue_exist_i_reg_0 ;

  wire ACLK;
  wire CI;
  wire D;
  wire DI;
  wire LI;
  wire Q;
  wire \Use_FPGA.Almost_Empty_Inst_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_i_1__1_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_i_2__0_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_n_0 ;
  wire \Use_FPGA.Almost_Full_Inst_i_2__2_n_0 ;
  wire \Use_FPGA.Empty_Inst_i_1__1_n_0 ;
  wire \Use_FPGA.Full_Inst_i_1__0_n_0 ;
  wire \Use_Reg_Ctrl.queue_exist_i_i_1_n_0 ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg_0 ;
  wire carry_2;
  wire carry_3;
  wire cnt_di_1;
  wire cnt_di_2;
  wire cnt_s_1;
  wire cnt_s_2;
  wire cnt_s_3;
  wire \lookup_read_data_new[0,0][Valid] ;
  wire [3:0]queue_index;
  wire read_fifo_addr_next_0;
  wire read_fifo_addr_next_1;
  wire read_fifo_addr_next_2;
  wire read_fifo_addr_next_3;
  wire \read_info_status[0,0][Almost_Full] ;
  wire \read_info_status[0,0][Full] ;
  wire ri_exist;
  wire rip_pop;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED ;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Almost_Empty_Inst_i_1__1_n_0 ),
        .Q(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .R(Q));
  LUT6 #(
    .INIT(64'hFEF3FEFEC2C0C2C2)) 
    \Use_FPGA.Almost_Empty_Inst_i_1__1 
       (.I0(\Use_FPGA.Almost_Empty_Inst_i_2__0_n_0 ),
        .I1(\lookup_read_data_new[0,0][Valid] ),
        .I2(\Use_FPGA.Almost_Empty_Inst_0 ),
        .I3(rip_pop),
        .I4(ri_exist),
        .I5(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .O(\Use_FPGA.Almost_Empty_Inst_i_1__1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair128" *) 
  LUT4 #(
    .INIT(16'h0010)) 
    \Use_FPGA.Almost_Empty_Inst_i_2__0 
       (.I0(queue_index[3]),
        .I1(queue_index[2]),
        .I2(queue_index[0]),
        .I3(queue_index[1]),
        .O(\Use_FPGA.Almost_Empty_Inst_i_2__0_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(D),
        .Q(\read_info_status[0,0][Almost_Full] ),
        .R(Q));
  LUT6 #(
    .INIT(64'hAFFCAFAFA00CA0A0)) 
    \Use_FPGA.Almost_Full_Inst_i_1__0 
       (.I0(\Use_FPGA.Almost_Full_Inst_i_2__2_n_0 ),
        .I1(\read_info_status[0,0][Full] ),
        .I2(\lookup_read_data_new[0,0][Valid] ),
        .I3(\Use_FPGA.Almost_Empty_Inst_0 ),
        .I4(\Use_Reg_Ctrl.queue_exist_i_reg_0 ),
        .I5(\read_info_status[0,0][Almost_Full] ),
        .O(D));
  (* SOFT_HLUTNM = "soft_lutpair128" *) 
  LUT4 #(
    .INIT(16'h1000)) 
    \Use_FPGA.Almost_Full_Inst_i_2__2 
       (.I0(queue_index[0]),
        .I1(queue_index[1]),
        .I2(queue_index[3]),
        .I3(queue_index[2]),
        .O(\Use_FPGA.Almost_Full_Inst_i_2__2_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_0),
        .Q(queue_index[0]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h51AEAE51AE51AE51)) 
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst 
       (.I0(\Use_FPGA.Almost_Empty_Inst_0 ),
        .I1(ri_exist),
        .I2(rip_pop),
        .I3(\lookup_read_data_new[0,0][Valid] ),
        .I4(queue_index[0]),
        .I5(1'b1),
        .O5(DI),
        .O6(LI));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4 
       (.CI(1'b0),
        .CO({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED [3],carry_3,carry_2,CI}),
        .CYINIT(1'b0),
        .DI({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED [3],cnt_di_2,cnt_di_1,DI}),
        .O({read_fifo_addr_next_3,read_fifo_addr_next_2,read_fifo_addr_next_1,read_fifo_addr_next_0}),
        .S({cnt_s_3,cnt_s_2,cnt_s_1,LI}));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_1),
        .Q(queue_index[1]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFFAE005100510051)) 
    \Use_FPGA.Cnt_Bit_Gen[1].No_Prot.Other_Bits.LUT_Inst 
       (.I0(\Use_FPGA.Almost_Empty_Inst_0 ),
        .I1(ri_exist),
        .I2(rip_pop),
        .I3(\lookup_read_data_new[0,0][Valid] ),
        .I4(queue_index[1]),
        .I5(1'b1),
        .O5(cnt_di_1),
        .O6(cnt_s_1));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_2),
        .Q(queue_index[2]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFFAE005100510051)) 
    \Use_FPGA.Cnt_Bit_Gen[2].No_Prot.Other_Bits.LUT_Inst 
       (.I0(\Use_FPGA.Almost_Empty_Inst_0 ),
        .I1(ri_exist),
        .I2(rip_pop),
        .I3(\lookup_read_data_new[0,0][Valid] ),
        .I4(queue_index[2]),
        .I5(1'b1),
        .O5(cnt_di_2),
        .O6(cnt_s_2));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_3),
        .Q(queue_index[3]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hFFAE005100510051)) 
    \Use_FPGA.Cnt_Bit_Gen[3].No_Prot.Last_Bit.LUT_Inst 
       (.I0(\Use_FPGA.Almost_Empty_Inst_0 ),
        .I1(ri_exist),
        .I2(rip_pop),
        .I3(\lookup_read_data_new[0,0][Valid] ),
        .I4(queue_index[3]),
        .I5(1'b1),
        .O(cnt_s_3));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Empty_Inst_i_1__1_n_0 ),
        .Q(\Use_FPGA.Almost_Empty_Inst_0 ),
        .S(Q));
  LUT5 #(
    .INIT(32'h32303232)) 
    \Use_FPGA.Empty_Inst_i_1__1 
       (.I0(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .I1(\lookup_read_data_new[0,0][Valid] ),
        .I2(\Use_FPGA.Almost_Empty_Inst_0 ),
        .I3(rip_pop),
        .I4(ri_exist),
        .O(\Use_FPGA.Empty_Inst_i_1__1_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Full_Inst_i_1__0_n_0 ),
        .Q(\read_info_status[0,0][Full] ),
        .R(Q));
  LUT6 #(
    .INIT(64'hBCBBBCBC80888080)) 
    \Use_FPGA.Full_Inst_i_1__0 
       (.I0(\read_info_status[0,0][Almost_Full] ),
        .I1(\lookup_read_data_new[0,0][Valid] ),
        .I2(\Use_FPGA.Almost_Empty_Inst_0 ),
        .I3(rip_pop),
        .I4(ri_exist),
        .I5(\read_info_status[0,0][Full] ),
        .O(\Use_FPGA.Full_Inst_i_1__0_n_0 ));
  LUT3 #(
    .INIT(8'h75)) 
    \Use_Reg_Ctrl.queue_exist_i_i_1 
       (.I0(\Use_FPGA.Almost_Empty_Inst_0 ),
        .I1(rip_pop),
        .I2(ri_exist),
        .O(\Use_Reg_Ctrl.queue_exist_i_i_1_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \Use_Reg_Ctrl.queue_exist_i_reg 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_Reg_Ctrl.queue_exist_i_i_1_n_0 ),
        .Q(ri_exist),
        .R(Q));
endmodule

(* ORIG_REF_NAME = "sc_srl_fifo_counter" *) 
module design_1_system_cache_0_0_sc_srl_fifo_counter__parameterized3_46
   (\bs_fifo_mem_reg[1][Src][1] ,
    bs_read_fifo_addr,
    bs_exist,
    \bs_fifo_mem_reg[1][Src][1]_0 ,
    \Use_Reg_Ctrl.queue_exist_i_reg_0 ,
    update_ext_bresp_any,
    S,
    D,
    queue_pop112_out,
    queue_pop116_out,
    Q,
    ACLK,
    update_done_bs_reg,
    update_need_bs,
    wmad_fifo_empty,
    \bs_src_reg[1] ,
    bp_fifo_empty,
    bs_slv,
    \Use_FPGA.Empty_Inst_0 ,
    \bs_port_num_reg[0] ,
    \Use_FPGA.Empty_Inst_1 ,
    p_107_in,
    \bs_fifo_mem_reg[3][Src][1] ,
    \bs_fifo_mem_reg[2][Src][1] ,
    \bs_fifo_mem_reg[1][Src][1]_1 ,
    \bs_fifo_mem_reg[0][Src][1] ,
    \bs_fifo_mem_reg[7][Src][1] ,
    \bs_fifo_mem_reg[6][Src][1] ,
    \bs_fifo_mem_reg[5][Src][1] ,
    \bs_fifo_mem_reg[4][Src][1] ,
    \bs_fifo_mem_reg[11][Src][1] ,
    \bs_fifo_mem_reg[10][Src][1] ,
    \bs_fifo_mem_reg[9][Src][1] ,
    \bs_fifo_mem_reg[8][Src][1] ,
    \bs_fifo_mem_reg[15][Src][1] ,
    \bs_fifo_mem_reg[14][Src][1] ,
    \bs_fifo_mem_reg[13][Src][1] ,
    \bs_fifo_mem_reg[12][Src][1] );
  output \bs_fifo_mem_reg[1][Src][1] ;
  output [3:0]bs_read_fifo_addr;
  output bs_exist;
  output \bs_fifo_mem_reg[1][Src][1]_0 ;
  output \Use_Reg_Ctrl.queue_exist_i_reg_0 ;
  output update_ext_bresp_any;
  output S;
  output [1:0]D;
  output queue_pop112_out;
  output queue_pop116_out;
  input Q;
  input ACLK;
  input update_done_bs_reg;
  input update_need_bs;
  input wmad_fifo_empty;
  input [1:0]\bs_src_reg[1] ;
  input bp_fifo_empty;
  input bs_slv;
  input \Use_FPGA.Empty_Inst_0 ;
  input \bs_port_num_reg[0] ;
  input \Use_FPGA.Empty_Inst_1 ;
  input p_107_in;
  input [1:0]\bs_fifo_mem_reg[3][Src][1] ;
  input [1:0]\bs_fifo_mem_reg[2][Src][1] ;
  input [1:0]\bs_fifo_mem_reg[1][Src][1]_1 ;
  input [1:0]\bs_fifo_mem_reg[0][Src][1] ;
  input [1:0]\bs_fifo_mem_reg[7][Src][1] ;
  input [1:0]\bs_fifo_mem_reg[6][Src][1] ;
  input [1:0]\bs_fifo_mem_reg[5][Src][1] ;
  input [1:0]\bs_fifo_mem_reg[4][Src][1] ;
  input [1:0]\bs_fifo_mem_reg[11][Src][1] ;
  input [1:0]\bs_fifo_mem_reg[10][Src][1] ;
  input [1:0]\bs_fifo_mem_reg[9][Src][1] ;
  input [1:0]\bs_fifo_mem_reg[8][Src][1] ;
  input [1:0]\bs_fifo_mem_reg[15][Src][1] ;
  input [1:0]\bs_fifo_mem_reg[14][Src][1] ;
  input [1:0]\bs_fifo_mem_reg[13][Src][1] ;
  input [1:0]\bs_fifo_mem_reg[12][Src][1] ;

  wire ACLK;
  wire CI;
  wire [1:0]D;
  wire DI;
  wire D_0;
  wire LI;
  wire Q;
  wire S;
  wire \Use_FPGA.Almost_Empty_Inst_i_1__15_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_i_2__14_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_n_0 ;
  wire \Use_FPGA.Almost_Full_Inst_i_2__10_n_0 ;
  wire \Use_FPGA.Almost_Full_Inst_n_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_1__0_n_0 ;
  wire \Use_FPGA.Empty_Inst_0 ;
  wire \Use_FPGA.Empty_Inst_1 ;
  wire \Use_FPGA.Empty_Inst_i_1__15_n_0 ;
  wire \Use_FPGA.Full_Inst_i_1__11_n_0 ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg_0 ;
  wire bp_fifo_empty;
  wire bs_exist;
  wire bs_fifo_empty;
  wire [1:0]\bs_fifo_mem_reg[0][Src][1] ;
  wire [1:0]\bs_fifo_mem_reg[10][Src][1] ;
  wire [1:0]\bs_fifo_mem_reg[11][Src][1] ;
  wire [1:0]\bs_fifo_mem_reg[12][Src][1] ;
  wire [1:0]\bs_fifo_mem_reg[13][Src][1] ;
  wire [1:0]\bs_fifo_mem_reg[14][Src][1] ;
  wire [1:0]\bs_fifo_mem_reg[15][Src][1] ;
  wire \bs_fifo_mem_reg[1][Src][1] ;
  wire \bs_fifo_mem_reg[1][Src][1]_0 ;
  wire [1:0]\bs_fifo_mem_reg[1][Src][1]_1 ;
  wire [1:0]\bs_fifo_mem_reg[2][Src][1] ;
  wire [1:0]\bs_fifo_mem_reg[3][Src][1] ;
  wire [1:0]\bs_fifo_mem_reg[4][Src][1] ;
  wire [1:0]\bs_fifo_mem_reg[5][Src][1] ;
  wire [1:0]\bs_fifo_mem_reg[6][Src][1] ;
  wire [1:0]\bs_fifo_mem_reg[7][Src][1] ;
  wire [1:0]\bs_fifo_mem_reg[8][Src][1] ;
  wire [1:0]\bs_fifo_mem_reg[9][Src][1] ;
  wire \bs_port_num_reg[0] ;
  wire [3:0]bs_read_fifo_addr;
  wire bs_slv;
  wire \bs_src[0]_i_4_n_0 ;
  wire \bs_src[0]_i_5_n_0 ;
  wire \bs_src[0]_i_6_n_0 ;
  wire \bs_src[0]_i_7_n_0 ;
  wire \bs_src[1]_i_4_n_0 ;
  wire \bs_src[1]_i_5_n_0 ;
  wire \bs_src[1]_i_6_n_0 ;
  wire \bs_src[1]_i_7_n_0 ;
  wire \bs_src_reg[0]_i_2_n_0 ;
  wire \bs_src_reg[0]_i_3_n_0 ;
  wire [1:0]\bs_src_reg[1] ;
  wire \bs_src_reg[1]_i_2_n_0 ;
  wire \bs_src_reg[1]_i_3_n_0 ;
  wire carry_2;
  wire carry_3;
  wire cnt_di_1;
  wire cnt_di_2;
  wire cnt_s_1;
  wire cnt_s_2;
  wire cnt_s_3;
  wire p_107_in;
  wire p_164_in;
  wire queue_pop112_out;
  wire queue_pop116_out;
  wire queue_pop_srl0;
  wire read_fifo_addr_next_0;
  wire read_fifo_addr_next_1;
  wire read_fifo_addr_next_2;
  wire read_fifo_addr_next_3;
  wire update_done_bs_reg;
  wire update_ext_bresp_any;
  wire update_need_bs;
  wire wmad_fifo_empty;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED ;

  LUT6 #(
    .INIT(64'h0000088808880888)) 
    \S_AXI_BID[0]_i_3 
       (.I0(bs_slv),
        .I1(bs_exist),
        .I2(\bs_src_reg[1] [1]),
        .I3(bp_fifo_empty),
        .I4(\bs_src_reg[1] [0]),
        .I5(wmad_fifo_empty),
        .O(update_ext_bresp_any));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Almost_Empty_Inst_i_1__15_n_0 ),
        .Q(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .R(Q));
  LUT5 #(
    .INIT(32'hFEF3C2C0)) 
    \Use_FPGA.Almost_Empty_Inst_i_1__15 
       (.I0(\Use_FPGA.Almost_Empty_Inst_i_2__14_n_0 ),
        .I1(\bs_fifo_mem_reg[1][Src][1]_0 ),
        .I2(bs_fifo_empty),
        .I3(\Use_Reg_Ctrl.queue_exist_i_reg_0 ),
        .I4(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .O(\Use_FPGA.Almost_Empty_Inst_i_1__15_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair73" *) 
  LUT4 #(
    .INIT(16'h0010)) 
    \Use_FPGA.Almost_Empty_Inst_i_2__14 
       (.I0(bs_read_fifo_addr[3]),
        .I1(bs_read_fifo_addr[2]),
        .I2(bs_read_fifo_addr[0]),
        .I3(bs_read_fifo_addr[1]),
        .O(\Use_FPGA.Almost_Empty_Inst_i_2__14_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(D_0),
        .Q(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .R(Q));
  LUT6 #(
    .INIT(64'hAFFCAFAFA00CA0A0)) 
    \Use_FPGA.Almost_Full_Inst_i_1__11 
       (.I0(\Use_FPGA.Almost_Full_Inst_i_2__10_n_0 ),
        .I1(\bs_fifo_mem_reg[1][Src][1] ),
        .I2(\bs_fifo_mem_reg[1][Src][1]_0 ),
        .I3(bs_fifo_empty),
        .I4(\Use_Reg_Ctrl.queue_exist_i_reg_0 ),
        .I5(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .O(D_0));
  (* SOFT_HLUTNM = "soft_lutpair73" *) 
  LUT4 #(
    .INIT(16'h1000)) 
    \Use_FPGA.Almost_Full_Inst_i_2__10 
       (.I0(bs_read_fifo_addr[0]),
        .I1(bs_read_fifo_addr[1]),
        .I2(bs_read_fifo_addr[3]),
        .I3(bs_read_fifo_addr[2]),
        .O(\Use_FPGA.Almost_Full_Inst_i_2__10_n_0 ));
  LUT4 #(
    .INIT(16'h2000)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst_i_1__4 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_1__0_n_0 ),
        .I1(bp_fifo_empty),
        .I2(\bs_src_reg[1] [1]),
        .I3(bs_exist),
        .O(queue_pop112_out));
  LUT4 #(
    .INIT(16'h0080)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst_i_1__5 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_1__0_n_0 ),
        .I1(\bs_src_reg[1] [0]),
        .I2(bs_exist),
        .I3(wmad_fifo_empty),
        .O(queue_pop116_out));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_0),
        .Q(bs_read_fifo_addr[0]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h51AEAE51AE51AE51)) 
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst 
       (.I0(bs_fifo_empty),
        .I1(bs_exist),
        .I2(\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_1__0_n_0 ),
        .I3(\bs_fifo_mem_reg[1][Src][1]_0 ),
        .I4(bs_read_fifo_addr[0]),
        .I5(1'b1),
        .O5(DI),
        .O6(LI));
  LUT6 #(
    .INIT(64'h0700773300000000)) 
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_1__0 
       (.I0(wmad_fifo_empty),
        .I1(\bs_src_reg[1] [0]),
        .I2(bp_fifo_empty),
        .I3(bs_exist),
        .I4(\bs_src_reg[1] [1]),
        .I5(p_164_in),
        .O(\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_1__0_n_0 ));
  LUT3 #(
    .INIT(8'h02)) 
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_2__0 
       (.I0(update_need_bs),
        .I1(update_done_bs_reg),
        .I2(\bs_fifo_mem_reg[1][Src][1] ),
        .O(\bs_fifo_mem_reg[1][Src][1]_0 ));
  LUT6 #(
    .INIT(64'hA2AAA22200000000)) 
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_3__0 
       (.I0(bs_exist),
        .I1(bs_slv),
        .I2(\Use_FPGA.Empty_Inst_0 ),
        .I3(\bs_port_num_reg[0] ),
        .I4(\Use_FPGA.Empty_Inst_1 ),
        .I5(p_107_in),
        .O(p_164_in));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4 
       (.CI(1'b0),
        .CO({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED [3],carry_3,carry_2,CI}),
        .CYINIT(1'b0),
        .DI({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED [3],cnt_di_2,cnt_di_1,DI}),
        .O({read_fifo_addr_next_3,read_fifo_addr_next_2,read_fifo_addr_next_1,read_fifo_addr_next_0}),
        .S({cnt_s_3,cnt_s_2,cnt_s_1,LI}));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_1),
        .Q(bs_read_fifo_addr[1]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFFAE005100510051)) 
    \Use_FPGA.Cnt_Bit_Gen[1].No_Prot.Other_Bits.LUT_Inst 
       (.I0(bs_fifo_empty),
        .I1(bs_exist),
        .I2(\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_1__0_n_0 ),
        .I3(\bs_fifo_mem_reg[1][Src][1]_0 ),
        .I4(bs_read_fifo_addr[1]),
        .I5(1'b1),
        .O5(cnt_di_1),
        .O6(cnt_s_1));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_2),
        .Q(bs_read_fifo_addr[2]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFFAE005100510051)) 
    \Use_FPGA.Cnt_Bit_Gen[2].No_Prot.Other_Bits.LUT_Inst 
       (.I0(bs_fifo_empty),
        .I1(bs_exist),
        .I2(\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_1__0_n_0 ),
        .I3(\bs_fifo_mem_reg[1][Src][1]_0 ),
        .I4(bs_read_fifo_addr[2]),
        .I5(1'b1),
        .O5(cnt_di_2),
        .O6(cnt_s_2));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_3),
        .Q(bs_read_fifo_addr[3]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hFFAE005100510051)) 
    \Use_FPGA.Cnt_Bit_Gen[3].No_Prot.Last_Bit.LUT_Inst 
       (.I0(bs_fifo_empty),
        .I1(bs_exist),
        .I2(\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_1__0_n_0 ),
        .I3(\bs_fifo_mem_reg[1][Src][1]_0 ),
        .I4(bs_read_fifo_addr[3]),
        .I5(1'b1),
        .O(cnt_s_3));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Empty_Inst_i_1__15_n_0 ),
        .Q(bs_fifo_empty),
        .S(Q));
  LUT6 #(
    .INIT(64'hFCFFA8AAFCFF0000)) 
    \Use_FPGA.Empty_Inst_i_1__15 
       (.I0(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .I1(\bs_fifo_mem_reg[1][Src][1] ),
        .I2(update_done_bs_reg),
        .I3(update_need_bs),
        .I4(bs_fifo_empty),
        .I5(\Use_Reg_Ctrl.queue_exist_i_reg_0 ),
        .O(\Use_FPGA.Empty_Inst_i_1__15_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Full_Inst_i_1__11_n_0 ),
        .Q(\bs_fifo_mem_reg[1][Src][1] ),
        .R(Q));
  LUT6 #(
    .INIT(64'hCECC0000CECCCECC)) 
    \Use_FPGA.Full_Inst_i_1__11 
       (.I0(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .I1(\bs_fifo_mem_reg[1][Src][1] ),
        .I2(update_done_bs_reg),
        .I3(update_need_bs),
        .I4(bs_fifo_empty),
        .I5(\Use_Reg_Ctrl.queue_exist_i_reg_0 ),
        .O(\Use_FPGA.Full_Inst_i_1__11_n_0 ));
  LUT2 #(
    .INIT(4'hB)) 
    \Use_Reg_Ctrl.queue_exist_i_i_1__3 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_1__0_n_0 ),
        .I1(bs_exist),
        .O(\Use_Reg_Ctrl.queue_exist_i_reg_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \Use_Reg_Ctrl.queue_exist_i_i_2__1 
       (.I0(bs_fifo_empty),
        .O(queue_pop_srl0));
  FDRE #(
    .INIT(1'b0)) 
    \Use_Reg_Ctrl.queue_exist_i_reg 
       (.C(ACLK),
        .CE(\Use_Reg_Ctrl.queue_exist_i_reg_0 ),
        .D(queue_pop_srl0),
        .Q(bs_exist),
        .R(Q));
  LUT3 #(
    .INIT(8'hBF)) 
    \Using_FPGA.MUXCY_I_i_1__32 
       (.I0(update_done_bs_reg),
        .I1(update_need_bs),
        .I2(\bs_fifo_mem_reg[1][Src][1] ),
        .O(S));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \bs_src[0]_i_4 
       (.I0(\bs_fifo_mem_reg[3][Src][1] [0]),
        .I1(\bs_fifo_mem_reg[2][Src][1] [0]),
        .I2(bs_read_fifo_addr[1]),
        .I3(\bs_fifo_mem_reg[1][Src][1]_1 [0]),
        .I4(bs_read_fifo_addr[0]),
        .I5(\bs_fifo_mem_reg[0][Src][1] [0]),
        .O(\bs_src[0]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \bs_src[0]_i_5 
       (.I0(\bs_fifo_mem_reg[7][Src][1] [0]),
        .I1(\bs_fifo_mem_reg[6][Src][1] [0]),
        .I2(bs_read_fifo_addr[1]),
        .I3(\bs_fifo_mem_reg[5][Src][1] [0]),
        .I4(bs_read_fifo_addr[0]),
        .I5(\bs_fifo_mem_reg[4][Src][1] [0]),
        .O(\bs_src[0]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \bs_src[0]_i_6 
       (.I0(\bs_fifo_mem_reg[11][Src][1] [0]),
        .I1(\bs_fifo_mem_reg[10][Src][1] [0]),
        .I2(bs_read_fifo_addr[1]),
        .I3(\bs_fifo_mem_reg[9][Src][1] [0]),
        .I4(bs_read_fifo_addr[0]),
        .I5(\bs_fifo_mem_reg[8][Src][1] [0]),
        .O(\bs_src[0]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \bs_src[0]_i_7 
       (.I0(\bs_fifo_mem_reg[15][Src][1] [0]),
        .I1(\bs_fifo_mem_reg[14][Src][1] [0]),
        .I2(bs_read_fifo_addr[1]),
        .I3(\bs_fifo_mem_reg[13][Src][1] [0]),
        .I4(bs_read_fifo_addr[0]),
        .I5(\bs_fifo_mem_reg[12][Src][1] [0]),
        .O(\bs_src[0]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \bs_src[1]_i_4 
       (.I0(\bs_fifo_mem_reg[3][Src][1] [1]),
        .I1(\bs_fifo_mem_reg[2][Src][1] [1]),
        .I2(bs_read_fifo_addr[1]),
        .I3(\bs_fifo_mem_reg[1][Src][1]_1 [1]),
        .I4(bs_read_fifo_addr[0]),
        .I5(\bs_fifo_mem_reg[0][Src][1] [1]),
        .O(\bs_src[1]_i_4_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \bs_src[1]_i_5 
       (.I0(\bs_fifo_mem_reg[7][Src][1] [1]),
        .I1(\bs_fifo_mem_reg[6][Src][1] [1]),
        .I2(bs_read_fifo_addr[1]),
        .I3(\bs_fifo_mem_reg[5][Src][1] [1]),
        .I4(bs_read_fifo_addr[0]),
        .I5(\bs_fifo_mem_reg[4][Src][1] [1]),
        .O(\bs_src[1]_i_5_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \bs_src[1]_i_6 
       (.I0(\bs_fifo_mem_reg[11][Src][1] [1]),
        .I1(\bs_fifo_mem_reg[10][Src][1] [1]),
        .I2(bs_read_fifo_addr[1]),
        .I3(\bs_fifo_mem_reg[9][Src][1] [1]),
        .I4(bs_read_fifo_addr[0]),
        .I5(\bs_fifo_mem_reg[8][Src][1] [1]),
        .O(\bs_src[1]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hAFA0CFCFAFA0C0C0)) 
    \bs_src[1]_i_7 
       (.I0(\bs_fifo_mem_reg[15][Src][1] [1]),
        .I1(\bs_fifo_mem_reg[14][Src][1] [1]),
        .I2(bs_read_fifo_addr[1]),
        .I3(\bs_fifo_mem_reg[13][Src][1] [1]),
        .I4(bs_read_fifo_addr[0]),
        .I5(\bs_fifo_mem_reg[12][Src][1] [1]),
        .O(\bs_src[1]_i_7_n_0 ));
  MUXF8 \bs_src_reg[0]_i_1 
       (.I0(\bs_src_reg[0]_i_2_n_0 ),
        .I1(\bs_src_reg[0]_i_3_n_0 ),
        .O(D[0]),
        .S(bs_read_fifo_addr[3]));
  MUXF7 \bs_src_reg[0]_i_2 
       (.I0(\bs_src[0]_i_4_n_0 ),
        .I1(\bs_src[0]_i_5_n_0 ),
        .O(\bs_src_reg[0]_i_2_n_0 ),
        .S(bs_read_fifo_addr[2]));
  MUXF7 \bs_src_reg[0]_i_3 
       (.I0(\bs_src[0]_i_6_n_0 ),
        .I1(\bs_src[0]_i_7_n_0 ),
        .O(\bs_src_reg[0]_i_3_n_0 ),
        .S(bs_read_fifo_addr[2]));
  MUXF8 \bs_src_reg[1]_i_1 
       (.I0(\bs_src_reg[1]_i_2_n_0 ),
        .I1(\bs_src_reg[1]_i_3_n_0 ),
        .O(D[1]),
        .S(bs_read_fifo_addr[3]));
  MUXF7 \bs_src_reg[1]_i_2 
       (.I0(\bs_src[1]_i_4_n_0 ),
        .I1(\bs_src[1]_i_5_n_0 ),
        .O(\bs_src_reg[1]_i_2_n_0 ),
        .S(bs_read_fifo_addr[2]));
  MUXF7 \bs_src_reg[1]_i_3 
       (.I0(\bs_src[1]_i_6_n_0 ),
        .I1(\bs_src[1]_i_7_n_0 ),
        .O(\bs_src_reg[1]_i_3_n_0 ),
        .S(bs_read_fifo_addr[2]));
endmodule

(* ORIG_REF_NAME = "sc_srl_fifo_counter" *) 
module design_1_system_cache_0_0_sc_srl_fifo_counter__parameterized3_49
   (\Use_FPGA.Full_Inst_0 ,
    ri_read_fifo_addr,
    ri_exist,
    \Use_FPGA.Almost_Empty_Inst_0 ,
    A136_out,
    S,
    update_read_miss_start,
    queue_push29_out,
    \Use_Reg_Ctrl.queue_exist_i_reg_0 ,
    Q,
    ACLK,
    queue_pop134_out,
    \Use_Reg_Ctrl.queue_exist_i_reg_1 ,
    update_evict_ongoing_reg,
    ri_allocate_reg,
    update_done_ar_reg,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    queue_full,
    A18_out,
    A17_out,
    M0_AXI_RVALID,
    update_read_miss_ongoing_reg);
  output \Use_FPGA.Full_Inst_0 ;
  output [3:0]ri_read_fifo_addr;
  output ri_exist;
  output \Use_FPGA.Almost_Empty_Inst_0 ;
  output A136_out;
  output S;
  output update_read_miss_start;
  output queue_push29_out;
  output \Use_Reg_Ctrl.queue_exist_i_reg_0 ;
  input Q;
  input ACLK;
  input queue_pop134_out;
  input \Use_Reg_Ctrl.queue_exist_i_reg_1 ;
  input update_evict_ongoing_reg;
  input ri_allocate_reg;
  input update_done_ar_reg;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  input queue_full;
  input A18_out;
  input A17_out;
  input M0_AXI_RVALID;
  input update_read_miss_ongoing_reg;

  wire A136_out;
  wire A17_out;
  wire A18_out;
  wire ACLK;
  wire CI;
  wire D;
  wire DI;
  wire LI;
  wire M0_AXI_RVALID;
  wire Q;
  wire S;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \Use_FPGA.Almost_Empty_Inst_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_i_1__14_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_i_2__13_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_n_0 ;
  wire \Use_FPGA.Almost_Full_Inst_i_2__9_n_0 ;
  wire \Use_FPGA.Almost_Full_Inst_n_0 ;
  wire \Use_FPGA.Empty_Inst_i_1__14_n_0 ;
  wire \Use_FPGA.Full_Inst_0 ;
  wire \Use_FPGA.Full_Inst_i_1__10_n_0 ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg_0 ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg_1 ;
  wire carry_2;
  wire carry_3;
  wire cnt_di_1;
  wire cnt_di_2;
  wire cnt_s_1;
  wire cnt_s_2;
  wire cnt_s_3;
  wire queue_full;
  wire queue_pop134_out;
  wire queue_pop_srl0;
  wire queue_push29_out;
  wire read_fifo_addr_next_0;
  wire read_fifo_addr_next_1;
  wire read_fifo_addr_next_2;
  wire read_fifo_addr_next_3;
  wire ri_allocate_reg;
  wire ri_exist;
  wire ri_fifo_empty;
  wire [3:0]ri_read_fifo_addr;
  wire update_done_ar_reg;
  wire update_evict_ongoing_reg;
  wire update_read_miss_ongoing_reg;
  wire update_read_miss_start;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED ;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Almost_Empty_Inst_i_1__14_n_0 ),
        .Q(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .R(Q));
  LUT5 #(
    .INIT(32'hFEF3C2C0)) 
    \Use_FPGA.Almost_Empty_Inst_i_1__14 
       (.I0(\Use_FPGA.Almost_Empty_Inst_i_2__13_n_0 ),
        .I1(\Use_FPGA.Almost_Empty_Inst_0 ),
        .I2(ri_fifo_empty),
        .I3(\Use_Reg_Ctrl.queue_exist_i_reg_1 ),
        .I4(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .O(\Use_FPGA.Almost_Empty_Inst_i_1__14_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair82" *) 
  LUT4 #(
    .INIT(16'h0010)) 
    \Use_FPGA.Almost_Empty_Inst_i_2__13 
       (.I0(ri_read_fifo_addr[3]),
        .I1(ri_read_fifo_addr[2]),
        .I2(ri_read_fifo_addr[0]),
        .I3(ri_read_fifo_addr[1]),
        .O(\Use_FPGA.Almost_Empty_Inst_i_2__13_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(D),
        .Q(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .R(Q));
  LUT6 #(
    .INIT(64'hAFFCAFAFA00CA0A0)) 
    \Use_FPGA.Almost_Full_Inst_i_1__10 
       (.I0(\Use_FPGA.Almost_Full_Inst_i_2__9_n_0 ),
        .I1(\Use_FPGA.Full_Inst_0 ),
        .I2(\Use_FPGA.Almost_Empty_Inst_0 ),
        .I3(ri_fifo_empty),
        .I4(\Use_Reg_Ctrl.queue_exist_i_reg_1 ),
        .I5(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .O(D));
  (* SOFT_HLUTNM = "soft_lutpair82" *) 
  LUT4 #(
    .INIT(16'h1000)) 
    \Use_FPGA.Almost_Full_Inst_i_2__9 
       (.I0(ri_read_fifo_addr[0]),
        .I1(ri_read_fifo_addr[1]),
        .I2(ri_read_fifo_addr[3]),
        .I3(ri_read_fifo_addr[2]),
        .O(\Use_FPGA.Almost_Full_Inst_i_2__9_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair81" *) 
  LUT4 #(
    .INIT(16'h0010)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst_i_1__6 
       (.I0(\Use_FPGA.Full_Inst_0 ),
        .I1(update_done_ar_reg),
        .I2(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I3(queue_full),
        .O(queue_push29_out));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_0),
        .Q(ri_read_fifo_addr[0]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h51AEAE51AE51AE51)) 
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst 
       (.I0(ri_fifo_empty),
        .I1(ri_exist),
        .I2(queue_pop134_out),
        .I3(\Use_FPGA.Almost_Empty_Inst_0 ),
        .I4(ri_read_fifo_addr[0]),
        .I5(1'b1),
        .O5(DI),
        .O6(LI));
  (* SOFT_HLUTNM = "soft_lutpair81" *) 
  LUT4 #(
    .INIT(16'h0002)) 
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_2 
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I1(update_done_ar_reg),
        .I2(queue_full),
        .I3(\Use_FPGA.Full_Inst_0 ),
        .O(\Use_FPGA.Almost_Empty_Inst_0 ));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4 
       (.CI(1'b0),
        .CO({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED [3],carry_3,carry_2,CI}),
        .CYINIT(1'b0),
        .DI({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED [3],cnt_di_2,cnt_di_1,DI}),
        .O({read_fifo_addr_next_3,read_fifo_addr_next_2,read_fifo_addr_next_1,read_fifo_addr_next_0}),
        .S({cnt_s_3,cnt_s_2,cnt_s_1,LI}));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_1),
        .Q(ri_read_fifo_addr[1]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFFAE005100510051)) 
    \Use_FPGA.Cnt_Bit_Gen[1].No_Prot.Other_Bits.LUT_Inst 
       (.I0(ri_fifo_empty),
        .I1(ri_exist),
        .I2(queue_pop134_out),
        .I3(\Use_FPGA.Almost_Empty_Inst_0 ),
        .I4(ri_read_fifo_addr[1]),
        .I5(1'b1),
        .O5(cnt_di_1),
        .O6(cnt_s_1));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_2),
        .Q(ri_read_fifo_addr[2]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFFAE005100510051)) 
    \Use_FPGA.Cnt_Bit_Gen[2].No_Prot.Other_Bits.LUT_Inst 
       (.I0(ri_fifo_empty),
        .I1(ri_exist),
        .I2(queue_pop134_out),
        .I3(\Use_FPGA.Almost_Empty_Inst_0 ),
        .I4(ri_read_fifo_addr[2]),
        .I5(1'b1),
        .O5(cnt_di_2),
        .O6(cnt_s_2));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_3),
        .Q(ri_read_fifo_addr[3]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hFFAE005100510051)) 
    \Use_FPGA.Cnt_Bit_Gen[3].No_Prot.Last_Bit.LUT_Inst 
       (.I0(ri_fifo_empty),
        .I1(ri_exist),
        .I2(queue_pop134_out),
        .I3(\Use_FPGA.Almost_Empty_Inst_0 ),
        .I4(ri_read_fifo_addr[3]),
        .I5(1'b1),
        .O(cnt_s_3));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Empty_Inst_i_1__14_n_0 ),
        .Q(ri_fifo_empty),
        .S(Q));
  LUT4 #(
    .INIT(16'h3230)) 
    \Use_FPGA.Empty_Inst_i_1__14 
       (.I0(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .I1(\Use_FPGA.Almost_Empty_Inst_0 ),
        .I2(ri_fifo_empty),
        .I3(\Use_Reg_Ctrl.queue_exist_i_reg_1 ),
        .O(\Use_FPGA.Empty_Inst_i_1__14_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Full_Inst_i_1__10_n_0 ),
        .Q(\Use_FPGA.Full_Inst_0 ),
        .R(Q));
  LUT5 #(
    .INIT(32'hBCBB8088)) 
    \Use_FPGA.Full_Inst_i_1__10 
       (.I0(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .I1(\Use_FPGA.Almost_Empty_Inst_0 ),
        .I2(ri_fifo_empty),
        .I3(\Use_Reg_Ctrl.queue_exist_i_reg_1 ),
        .I4(\Use_FPGA.Full_Inst_0 ),
        .O(\Use_FPGA.Full_Inst_i_1__10_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \Use_Reg_Ctrl.queue_exist_i_i_2__0 
       (.I0(ri_fifo_empty),
        .O(queue_pop_srl0));
  FDRE #(
    .INIT(1'b0)) 
    \Use_Reg_Ctrl.queue_exist_i_reg 
       (.C(ACLK),
        .CE(\Use_Reg_Ctrl.queue_exist_i_reg_1 ),
        .D(queue_pop_srl0),
        .Q(ri_exist),
        .R(Q));
  LUT3 #(
    .INIT(8'h45)) 
    \Using_FPGA.MUXCY_I_i_1__156 
       (.I0(update_read_miss_ongoing_reg),
        .I1(ri_allocate_reg),
        .I2(ri_exist),
        .O(\Use_Reg_Ctrl.queue_exist_i_reg_0 ));
  LUT3 #(
    .INIT(8'h40)) 
    \Using_FPGA.MUXCY_I_i_1__22 
       (.I0(update_evict_ongoing_reg),
        .I1(ri_allocate_reg),
        .I2(ri_exist),
        .O(A136_out));
  LUT4 #(
    .INIT(16'hBBBF)) 
    \Using_FPGA.MUXCY_I_i_1__34 
       (.I0(update_done_ar_reg),
        .I1(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I2(queue_full),
        .I3(\Use_FPGA.Full_Inst_0 ),
        .O(S));
  LUT6 #(
    .INIT(64'h0080000000000000)) 
    update_read_miss_ongoing_i_2
       (.I0(ri_exist),
        .I1(A18_out),
        .I2(ri_allocate_reg),
        .I3(update_evict_ongoing_reg),
        .I4(A17_out),
        .I5(M0_AXI_RVALID),
        .O(update_read_miss_start));
endmodule

(* ORIG_REF_NAME = "sc_srl_fifo_counter" *) 
module design_1_system_cache_0_0_sc_srl_fifo_counter__parameterized3_51
   (update_write_miss_full,
    wm_read_fifo_addr,
    wm_exist,
    update_wm_pop_normal,
    \Use_Reg_Ctrl.queue_exist_i_reg_0 ,
    \Use_Reg_Ctrl.queue_exist_i_reg_1 ,
    p_138_in,
    \Use_Reg_Ctrl.queue_exist_i_reg_2 ,
    update_wma_select_port3,
    update_evict_ongoing_reg,
    \update_write_miss_busy_i_reg[1] ,
    \update_write_miss_busy_i_reg[0] ,
    Q,
    ACLK,
    queue_pop,
    lookup_push_write_miss,
    E,
    wr_port_data_valid_i_reg,
    wm_allocate_reg,
    wm_kind_reg,
    update_wr_miss_rs_last,
    update_wm_pop_normal_hold_reg,
    p_20_in,
    wm_local_wrap_reg,
    wm_evict,
    update_wm_pop_evict_hold,
    \wm_use_bits_reg[1] ,
    \wm_use_bits_reg[2] ,
    \wm_use_bits_reg[4] ,
    \wm_use_bits_reg[5] ,
    \wm_use_bits_reg[3] ,
    \update_wr_offset_cnt_reg[3] ,
    update_write_miss_ongoing,
    \wm_offset_reg[3] ,
    e_fifo_empty,
    write_data_full,
    update_evict_busy,
    \lu_check_info_reg[Port_Num][0] ,
    update_write_miss_busy);
  output update_write_miss_full;
  output [3:0]wm_read_fifo_addr;
  output wm_exist;
  output update_wm_pop_normal;
  output \Use_Reg_Ctrl.queue_exist_i_reg_0 ;
  output \Use_Reg_Ctrl.queue_exist_i_reg_1 ;
  output p_138_in;
  output \Use_Reg_Ctrl.queue_exist_i_reg_2 ;
  output update_wma_select_port3;
  output update_evict_ongoing_reg;
  output \update_write_miss_busy_i_reg[1] ;
  output \update_write_miss_busy_i_reg[0] ;
  input Q;
  input ACLK;
  input queue_pop;
  input lookup_push_write_miss;
  input [0:0]E;
  input wr_port_data_valid_i_reg;
  input wm_allocate_reg;
  input wm_kind_reg;
  input update_wr_miss_rs_last;
  input update_wm_pop_normal_hold_reg;
  input p_20_in;
  input wm_local_wrap_reg;
  input wm_evict;
  input update_wm_pop_evict_hold;
  input \wm_use_bits_reg[1] ;
  input \wm_use_bits_reg[2] ;
  input \wm_use_bits_reg[4] ;
  input \wm_use_bits_reg[5] ;
  input [1:0]\wm_use_bits_reg[3] ;
  input [1:0]\update_wr_offset_cnt_reg[3] ;
  input update_write_miss_ongoing;
  input [1:0]\wm_offset_reg[3] ;
  input e_fifo_empty;
  input write_data_full;
  input update_evict_busy;
  input \lu_check_info_reg[Port_Num][0] ;
  input [1:0]update_write_miss_busy;

  wire ACLK;
  wire CI;
  wire D;
  wire DI;
  wire [0:0]E;
  wire LI;
  wire Q;
  wire \Use_FPGA.Almost_Empty_Inst_i_1__11_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_i_2__11_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_n_0 ;
  wire \Use_FPGA.Almost_Full_Inst_i_2__8_n_0 ;
  wire \Use_FPGA.Almost_Full_Inst_n_0 ;
  wire \Use_FPGA.Empty_Inst_i_1__11_n_0 ;
  wire \Use_FPGA.Full_Inst_i_1__8_n_0 ;
  wire \Use_Reg_Ctrl.queue_exist_i_i_8_n_0 ;
  wire \Use_Reg_Ctrl.queue_exist_i_i_9_n_0 ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg_0 ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg_1 ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg_2 ;
  wire carry_2;
  wire carry_3;
  wire cnt_di_1;
  wire cnt_di_2;
  wire cnt_s_1;
  wire cnt_s_2;
  wire cnt_s_3;
  wire e_fifo_empty;
  wire lookup_push_write_miss;
  wire \lu_check_info_reg[Port_Num][0] ;
  wire p_138_in;
  wire p_20_in;
  wire queue_pop;
  wire queue_pop_srl0;
  wire read_fifo_addr_next_0;
  wire read_fifo_addr_next_1;
  wire read_fifo_addr_next_2;
  wire read_fifo_addr_next_3;
  wire update_evict_busy;
  wire update_evict_ongoing_reg;
  wire update_wm_pop_evict_hold;
  wire update_wm_pop_normal;
  wire update_wm_pop_normal_hold_reg;
  wire update_wma_select_port3;
  wire update_wr_miss_rs_last;
  wire [1:0]\update_wr_offset_cnt_reg[3] ;
  wire [1:0]update_write_miss_busy;
  wire \update_write_miss_busy_i_reg[0] ;
  wire \update_write_miss_busy_i_reg[1] ;
  wire update_write_miss_full;
  wire update_write_miss_ongoing;
  wire wm_allocate_reg;
  wire wm_evict;
  wire wm_exist;
  wire wm_fifo_empty;
  wire wm_kind_reg;
  wire wm_local_wrap_reg;
  wire [1:0]\wm_offset_reg[3] ;
  wire [3:0]wm_read_fifo_addr;
  wire \wm_use_bits_reg[1] ;
  wire \wm_use_bits_reg[2] ;
  wire [1:0]\wm_use_bits_reg[3] ;
  wire \wm_use_bits_reg[4] ;
  wire \wm_use_bits_reg[5] ;
  wire wr_port_data_valid_i_reg;
  wire write_data_full;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED ;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Almost_Empty_Inst_i_1__11_n_0 ),
        .Q(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .R(Q));
  LUT6 #(
    .INIT(64'hFEF3FEFEC2C0C2C2)) 
    \Use_FPGA.Almost_Empty_Inst_i_1__11 
       (.I0(\Use_FPGA.Almost_Empty_Inst_i_2__11_n_0 ),
        .I1(lookup_push_write_miss),
        .I2(wm_fifo_empty),
        .I3(queue_pop),
        .I4(wm_exist),
        .I5(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .O(\Use_FPGA.Almost_Empty_Inst_i_1__11_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair86" *) 
  LUT4 #(
    .INIT(16'h0010)) 
    \Use_FPGA.Almost_Empty_Inst_i_2__11 
       (.I0(wm_read_fifo_addr[3]),
        .I1(wm_read_fifo_addr[2]),
        .I2(wm_read_fifo_addr[0]),
        .I3(wm_read_fifo_addr[1]),
        .O(\Use_FPGA.Almost_Empty_Inst_i_2__11_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(D),
        .Q(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .R(Q));
  LUT6 #(
    .INIT(64'hAFFCAFAFA00CA0A0)) 
    \Use_FPGA.Almost_Full_Inst_i_1__8 
       (.I0(\Use_FPGA.Almost_Full_Inst_i_2__8_n_0 ),
        .I1(update_write_miss_full),
        .I2(lookup_push_write_miss),
        .I3(wm_fifo_empty),
        .I4(E),
        .I5(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .O(D));
  (* SOFT_HLUTNM = "soft_lutpair86" *) 
  LUT4 #(
    .INIT(16'h1000)) 
    \Use_FPGA.Almost_Full_Inst_i_2__8 
       (.I0(wm_read_fifo_addr[0]),
        .I1(wm_read_fifo_addr[1]),
        .I2(wm_read_fifo_addr[3]),
        .I3(wm_read_fifo_addr[2]),
        .O(\Use_FPGA.Almost_Full_Inst_i_2__8_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_0),
        .Q(wm_read_fifo_addr[0]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h51AEAE51AE51AE51)) 
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst 
       (.I0(wm_fifo_empty),
        .I1(wm_exist),
        .I2(queue_pop),
        .I3(lookup_push_write_miss),
        .I4(wm_read_fifo_addr[0]),
        .I5(1'b1),
        .O5(DI),
        .O6(LI));
  LUT6 #(
    .INIT(64'h8880008000000000)) 
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_4 
       (.I0(wr_port_data_valid_i_reg),
        .I1(\Use_Reg_Ctrl.queue_exist_i_reg_0 ),
        .I2(\Use_Reg_Ctrl.queue_exist_i_reg_1 ),
        .I3(wm_allocate_reg),
        .I4(wm_kind_reg),
        .I5(update_wr_miss_rs_last),
        .O(update_wm_pop_normal));
  (* SOFT_HLUTNM = "soft_lutpair87" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_6__0 
       (.I0(wm_exist),
        .I1(update_wm_pop_normal_hold_reg),
        .O(\Use_Reg_Ctrl.queue_exist_i_reg_0 ));
  (* SOFT_HLUTNM = "soft_lutpair88" *) 
  LUT3 #(
    .INIT(8'h01)) 
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_7 
       (.I0(wm_evict),
        .I1(write_data_full),
        .I2(update_evict_busy),
        .O(\Use_Reg_Ctrl.queue_exist_i_reg_1 ));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4 
       (.CI(1'b0),
        .CO({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED [3],carry_3,carry_2,CI}),
        .CYINIT(1'b0),
        .DI({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED [3],cnt_di_2,cnt_di_1,DI}),
        .O({read_fifo_addr_next_3,read_fifo_addr_next_2,read_fifo_addr_next_1,read_fifo_addr_next_0}),
        .S({cnt_s_3,cnt_s_2,cnt_s_1,LI}));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_1),
        .Q(wm_read_fifo_addr[1]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFFAE005100510051)) 
    \Use_FPGA.Cnt_Bit_Gen[1].No_Prot.Other_Bits.LUT_Inst 
       (.I0(wm_fifo_empty),
        .I1(wm_exist),
        .I2(queue_pop),
        .I3(lookup_push_write_miss),
        .I4(wm_read_fifo_addr[1]),
        .I5(1'b1),
        .O5(cnt_di_1),
        .O6(cnt_s_1));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_2),
        .Q(wm_read_fifo_addr[2]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hFFAE005100510051)) 
    \Use_FPGA.Cnt_Bit_Gen[2].No_Prot.Other_Bits.LUT_Inst 
       (.I0(wm_fifo_empty),
        .I1(wm_exist),
        .I2(queue_pop),
        .I3(lookup_push_write_miss),
        .I4(wm_read_fifo_addr[2]),
        .I5(1'b1),
        .O5(cnt_di_2),
        .O6(cnt_s_2));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_3),
        .Q(wm_read_fifo_addr[3]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hFFAE005100510051)) 
    \Use_FPGA.Cnt_Bit_Gen[3].No_Prot.Last_Bit.LUT_Inst 
       (.I0(wm_fifo_empty),
        .I1(wm_exist),
        .I2(queue_pop),
        .I3(lookup_push_write_miss),
        .I4(wm_read_fifo_addr[3]),
        .I5(1'b1),
        .O(cnt_s_3));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Empty_Inst_i_1__11_n_0 ),
        .Q(wm_fifo_empty),
        .S(Q));
  LUT5 #(
    .INIT(32'h32303232)) 
    \Use_FPGA.Empty_Inst_i_1__11 
       (.I0(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .I1(lookup_push_write_miss),
        .I2(wm_fifo_empty),
        .I3(queue_pop),
        .I4(wm_exist),
        .O(\Use_FPGA.Empty_Inst_i_1__11_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Full_Inst_i_1__8_n_0 ),
        .Q(update_write_miss_full),
        .R(Q));
  LUT6 #(
    .INIT(64'hBCBBBCBC80888080)) 
    \Use_FPGA.Full_Inst_i_1__8 
       (.I0(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .I1(lookup_push_write_miss),
        .I2(wm_fifo_empty),
        .I3(queue_pop),
        .I4(wm_exist),
        .I5(update_write_miss_full),
        .O(\Use_FPGA.Full_Inst_i_1__8_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \Use_Reg_Ctrl.queue_exist_i_i_2 
       (.I0(wm_fifo_empty),
        .O(queue_pop_srl0));
  (* SOFT_HLUTNM = "soft_lutpair87" *) 
  LUT3 #(
    .INIT(8'hA2)) 
    \Use_Reg_Ctrl.queue_exist_i_i_6 
       (.I0(update_wm_pop_normal_hold_reg),
        .I1(wm_evict),
        .I2(update_wm_pop_evict_hold),
        .O(\Use_Reg_Ctrl.queue_exist_i_reg_2 ));
  LUT6 #(
    .INIT(64'h8000000000000000)) 
    \Use_Reg_Ctrl.queue_exist_i_i_7 
       (.I0(\wm_use_bits_reg[1] ),
        .I1(\wm_use_bits_reg[2] ),
        .I2(\Use_Reg_Ctrl.queue_exist_i_i_8_n_0 ),
        .I3(\wm_use_bits_reg[4] ),
        .I4(\wm_use_bits_reg[5] ),
        .I5(\Use_Reg_Ctrl.queue_exist_i_i_9_n_0 ),
        .O(update_wma_select_port3));
  LUT4 #(
    .INIT(16'hEFBF)) 
    \Use_Reg_Ctrl.queue_exist_i_i_8 
       (.I0(\wm_use_bits_reg[3] [0]),
        .I1(\update_wr_offset_cnt_reg[3] [0]),
        .I2(update_write_miss_ongoing),
        .I3(\wm_offset_reg[3] [0]),
        .O(\Use_Reg_Ctrl.queue_exist_i_i_8_n_0 ));
  LUT4 #(
    .INIT(16'hEFBF)) 
    \Use_Reg_Ctrl.queue_exist_i_i_9 
       (.I0(\wm_use_bits_reg[3] [1]),
        .I1(\update_wr_offset_cnt_reg[3] [1]),
        .I2(update_write_miss_ongoing),
        .I3(\wm_offset_reg[3] [1]),
        .O(\Use_Reg_Ctrl.queue_exist_i_i_9_n_0 ));
  FDRE #(
    .INIT(1'b0)) 
    \Use_Reg_Ctrl.queue_exist_i_reg 
       (.C(ACLK),
        .CE(E),
        .D(queue_pop_srl0),
        .Q(wm_exist),
        .R(Q));
  LUT6 #(
    .INIT(64'h0040444000400040)) 
    \Using_FPGA.MUXCY_I_i_3__0 
       (.I0(update_wm_pop_normal_hold_reg),
        .I1(wm_exist),
        .I2(\Use_Reg_Ctrl.queue_exist_i_reg_1 ),
        .I3(wm_allocate_reg),
        .I4(p_20_in),
        .I5(wm_local_wrap_reg),
        .O(p_138_in));
  (* SOFT_HLUTNM = "soft_lutpair88" *) 
  LUT3 #(
    .INIT(8'h08)) 
    update_evict_ongoing_i_5
       (.I0(wm_evict),
        .I1(wm_exist),
        .I2(e_fifo_empty),
        .O(update_evict_ongoing_reg));
  LUT6 #(
    .INIT(64'h4FFFFFFF44444444)) 
    \update_write_miss_busy_i[0]_i_1 
       (.I0(\lu_check_info_reg[Port_Num][0] ),
        .I1(lookup_push_write_miss),
        .I2(wm_exist),
        .I3(queue_pop),
        .I4(wm_fifo_empty),
        .I5(update_write_miss_busy[0]),
        .O(\update_write_miss_busy_i_reg[0] ));
  LUT6 #(
    .INIT(64'h8FFFFFFF88888888)) 
    \update_write_miss_busy_i[1]_i_1 
       (.I0(lookup_push_write_miss),
        .I1(\lu_check_info_reg[Port_Num][0] ),
        .I2(wm_exist),
        .I3(queue_pop),
        .I4(wm_fifo_empty),
        .I5(update_write_miss_busy[1]),
        .O(\update_write_miss_busy_i_reg[1] ));
endmodule

(* ORIG_REF_NAME = "sc_srl_fifo_counter" *) 
module design_1_system_cache_0_0_sc_srl_fifo_counter__parameterized5
   (rip_refresh_reg,
    rip_read_fifo_addr,
    \Use_FPGA.Use_Normal_Line.Line_Fit_Inst_0 ,
    \Use_FPGA.Almost_Full_Inst_0 ,
    S1_AXI_ARREADY,
    \rd_port_access[1][Valid] ,
    \r_hit_write_fifo_addr_reg[3] ,
    rip_pop,
    Q,
    ACLK,
    rd_port_ready,
    S1_AXI_ARVALID,
    ri_exist);
  output rip_refresh_reg;
  output [3:0]rip_read_fifo_addr;
  output \Use_FPGA.Use_Normal_Line.Line_Fit_Inst_0 ;
  output \Use_FPGA.Almost_Full_Inst_0 ;
  output S1_AXI_ARREADY;
  output \rd_port_access[1][Valid] ;
  output \r_hit_write_fifo_addr_reg[3] ;
  input rip_pop;
  input Q;
  input ACLK;
  input rd_port_ready;
  input S1_AXI_ARVALID;
  input ri_exist;

  wire ACLK;
  wire CI;
  wire D;
  wire DI;
  wire LI;
  wire Q;
  wire S1_AXI_ARREADY;
  wire S1_AXI_ARVALID;
  wire \Use_FPGA.Almost_Empty_Inst_i_2__6_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_n_0 ;
  wire \Use_FPGA.Almost_Full_Inst_0 ;
  wire \Use_FPGA.Almost_Full_Inst_i_2__0_n_0 ;
  wire \Use_FPGA.Almost_Full_Inst_n_0 ;
  wire \Use_FPGA.Empty_Inst_n_0 ;
  wire \Use_FPGA.Full_Inst_n_0 ;
  wire \Use_FPGA.Use_Normal_Line.Line_Fit_Inst_0 ;
  wire \Use_FPGA.Use_Normal_Line.Line_Fit_Inst_i_2__0_n_0 ;
  wire \Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1_n_1 ;
  wire \Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1_n_2 ;
  wire \Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1_n_3 ;
  wire \Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1_n_4 ;
  wire \Use_Reg_Ctrl.Use_Pop_Carry.SRL_Or_Inst1_n_1 ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg_n_0 ;
  wire carry_2;
  wire carry_3;
  wire cnt_di_1;
  wire cnt_di_2;
  wire cnt_s_1;
  wire cnt_s_2;
  wire cnt_s_3;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire queue_pop_srl;
  wire \r_hit_write_fifo_addr_reg[3] ;
  wire \rd_port_access[1][Valid] ;
  wire rd_port_ready;
  wire read_fifo_addr_next_0;
  wire read_fifo_addr_next_1;
  wire read_fifo_addr_next_2;
  wire read_fifo_addr_next_3;
  wire read_req_valid;
  wire ri_exist;
  wire rip_pop;
  wire [3:0]rip_read_fifo_addr;
  wire rip_refresh_reg;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED ;

  (* SOFT_HLUTNM = "soft_lutpair153" *) 
  LUT2 #(
    .INIT(4'h8)) 
    S1_AXI_ARREADY_INST_0
       (.I0(\Use_FPGA.Use_Normal_Line.Line_Fit_Inst_0 ),
        .I1(rd_port_ready),
        .O(S1_AXI_ARREADY));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1_n_3 ),
        .Q(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .R(Q));
  LUT4 #(
    .INIT(16'h0010)) 
    \Use_FPGA.Almost_Empty_Inst_i_2__6 
       (.I0(rip_read_fifo_addr[3]),
        .I1(rip_read_fifo_addr[2]),
        .I2(rip_read_fifo_addr[0]),
        .I3(rip_read_fifo_addr[1]),
        .O(\Use_FPGA.Almost_Empty_Inst_i_2__6_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(D),
        .Q(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair151" *) 
  LUT4 #(
    .INIT(16'h1000)) 
    \Use_FPGA.Almost_Full_Inst_i_2__0 
       (.I0(rip_read_fifo_addr[0]),
        .I1(rip_read_fifo_addr[1]),
        .I2(rip_read_fifo_addr[3]),
        .I3(rip_read_fifo_addr[2]),
        .O(\Use_FPGA.Almost_Full_Inst_i_2__0_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h9CAF635063506350)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst 
       (.I0(\Use_FPGA.Empty_Inst_n_0 ),
        .I1(\Use_FPGA.Full_Inst_n_0 ),
        .I2(queue_pop_srl),
        .I3(read_req_valid),
        .I4(rip_read_fifo_addr[0]),
        .I5(1'b1),
        .O5(DI),
        .O6(LI));
  (* SOFT_HLUTNM = "soft_lutpair152" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst_i_1__2 
       (.I0(S1_AXI_ARVALID),
        .I1(\Use_FPGA.Use_Normal_Line.Line_Fit_Inst_0 ),
        .I2(rd_port_ready),
        .O(read_req_valid));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_0),
        .Q(rip_read_fifo_addr[0]),
        .S(Q));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4 
       (.CI(1'b0),
        .CO({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED [3],carry_3,carry_2,CI}),
        .CYINIT(1'b0),
        .DI({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED [3],cnt_di_2,cnt_di_1,DI}),
        .O({read_fifo_addr_next_3,read_fifo_addr_next_2,read_fifo_addr_next_1,read_fifo_addr_next_0}),
        .S({cnt_s_3,cnt_s_2,cnt_s_1,LI}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[1].Active_Low.Other_Bits.LUT_Inst 
       (.I0(\Use_FPGA.Empty_Inst_n_0 ),
        .I1(\Use_FPGA.Full_Inst_n_0 ),
        .I2(queue_pop_srl),
        .I3(read_req_valid),
        .I4(rip_read_fifo_addr[1]),
        .I5(1'b1),
        .O5(cnt_di_1),
        .O6(cnt_s_1));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_1),
        .Q(rip_read_fifo_addr[1]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[2].Active_Low.Other_Bits.LUT_Inst 
       (.I0(\Use_FPGA.Empty_Inst_n_0 ),
        .I1(\Use_FPGA.Full_Inst_n_0 ),
        .I2(queue_pop_srl),
        .I3(read_req_valid),
        .I4(rip_read_fifo_addr[2]),
        .I5(1'b1),
        .O5(cnt_di_2),
        .O6(cnt_s_2));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_2),
        .Q(rip_read_fifo_addr[2]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[3].Active_Low.Last_Bit.LUT_Inst 
       (.I0(\Use_FPGA.Empty_Inst_n_0 ),
        .I1(\Use_FPGA.Full_Inst_n_0 ),
        .I2(queue_pop_srl),
        .I3(read_req_valid),
        .I4(rip_read_fifo_addr[3]),
        .I5(1'b1),
        .O(cnt_s_3));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_3),
        .Q(rip_read_fifo_addr[3]),
        .S(Q));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1_n_2 ),
        .Q(\Use_FPGA.Empty_Inst_n_0 ),
        .S(Q));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1_n_4 ),
        .Q(\Use_FPGA.Full_Inst_n_0 ),
        .R(Q));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Use_Normal_Line.Line_Fit_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1_n_1 ),
        .Q(\Use_FPGA.Use_Normal_Line.Line_Fit_Inst_0 ),
        .S(Q));
  (* SOFT_HLUTNM = "soft_lutpair151" *) 
  LUT5 #(
    .INIT(32'h81FF7FFF)) 
    \Use_FPGA.Use_Normal_Line.Line_Fit_Inst_i_2__0 
       (.I0(\Use_FPGA.Almost_Full_Inst_0 ),
        .I1(rip_read_fifo_addr[1]),
        .I2(rip_read_fifo_addr[0]),
        .I3(rip_read_fifo_addr[3]),
        .I4(rip_read_fifo_addr[2]),
        .O(\Use_FPGA.Use_Normal_Line.Line_Fit_Inst_i_2__0_n_0 ));
  design_1_system_cache_0_0_carry_and_n_4 \Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1 
       (.D(D),
        .\Gen_Port_Ready[1].Use_Slow_Port.Rd_FF_Inst (\Use_FPGA.Almost_Full_Inst_0 ),
        .\Use_FPGA.Almost_Empty_Inst (\Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1_n_3 ),
        .\Use_FPGA.Almost_Empty_Inst_0 (\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .\Use_FPGA.Almost_Full_Inst (\Use_FPGA.Almost_Full_Inst_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst (\Use_FPGA.Almost_Full_Inst_i_2__0_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst (\Use_FPGA.Use_Normal_Line.Line_Fit_Inst_i_2__0_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst (\Use_FPGA.Almost_Empty_Inst_i_2__6_n_0 ),
        .\Use_FPGA.Empty_Inst (\Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1_n_2 ),
        .\Use_FPGA.Empty_Inst_0 (\Use_FPGA.Empty_Inst_n_0 ),
        .\Use_FPGA.Full_Inst (\Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1_n_4 ),
        .\Use_FPGA.Full_Inst_0 (\Use_FPGA.Full_Inst_n_0 ),
        .\Use_FPGA.Use_Normal_Line.Line_Fit_Inst (\Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1_n_1 ),
        .\Use_FPGA.Use_Normal_Line.Line_Fit_Inst_0 (\Use_FPGA.Use_Normal_Line.Line_Fit_Inst_0 ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .queue_pop_srl(queue_pop_srl),
        .rip_refresh_reg(rip_refresh_reg));
  design_1_system_cache_0_0_carry_or_n_5 \Use_Reg_Ctrl.Use_Pop_Carry.SRL_Or_Inst1 
       (.\Use_FPGA.Empty_Inst (\Use_FPGA.Empty_Inst_n_0 ),
        .\Use_Reg_Ctrl.queue_exist_i_reg (\Use_Reg_Ctrl.Use_Pop_Carry.SRL_Or_Inst1_n_1 ),
        .\Use_Reg_Ctrl.queue_exist_i_reg_0 (\Use_Reg_Ctrl.queue_exist_i_reg_n_0 ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .rip_pop(rip_pop),
        .rip_refresh_reg(rip_refresh_reg));
  FDRE #(
    .INIT(1'b0)) 
    \Use_Reg_Ctrl.queue_exist_i_reg 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_Reg_Ctrl.Use_Pop_Carry.SRL_Or_Inst1_n_1 ),
        .Q(\Use_Reg_Ctrl.queue_exist_i_reg_n_0 ),
        .R(Q));
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.MUXCY_I_i_1__155 
       (.I0(\Use_Reg_Ctrl.queue_exist_i_reg_n_0 ),
        .I1(ri_exist),
        .O(\r_hit_write_fifo_addr_reg[3] ));
  (* SOFT_HLUTNM = "soft_lutpair153" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.MUXCY_I_i_3 
       (.I0(\Use_FPGA.Use_Normal_Line.Line_Fit_Inst_0 ),
        .I1(S1_AXI_ARVALID),
        .O(\rd_port_access[1][Valid] ));
  (* SOFT_HLUTNM = "soft_lutpair152" *) 
  LUT4 #(
    .INIT(16'h0080)) 
    \rip_fifo_mem_reg[15][ID][0]_srl16_i_1__0 
       (.I0(rd_port_ready),
        .I1(\Use_FPGA.Use_Normal_Line.Line_Fit_Inst_0 ),
        .I2(S1_AXI_ARVALID),
        .I3(\Use_FPGA.Full_Inst_n_0 ),
        .O(\Use_FPGA.Almost_Full_Inst_0 ));
endmodule

(* ORIG_REF_NAME = "sc_srl_fifo_counter" *) 
module design_1_system_cache_0_0_sc_srl_fifo_counter__parameterized5_14
   (rip_refresh_reg,
    rip_read_fifo_addr,
    \Use_FPGA.Use_Normal_Line.Line_Fit_Inst_0 ,
    \Use_FPGA.Almost_Full_Inst_0 ,
    S0_AXI_ARREADY,
    \rd_port_access[0][Valid] ,
    \r_hit_write_fifo_addr_reg[3] ,
    rip_pop,
    Q,
    ACLK,
    \Gen_Port_Ready[0].Use_Slow_Port.Rd_FF_Inst ,
    S0_AXI_ARVALID,
    ri_exist);
  output rip_refresh_reg;
  output [3:0]rip_read_fifo_addr;
  output \Use_FPGA.Use_Normal_Line.Line_Fit_Inst_0 ;
  output \Use_FPGA.Almost_Full_Inst_0 ;
  output S0_AXI_ARREADY;
  output \rd_port_access[0][Valid] ;
  output \r_hit_write_fifo_addr_reg[3] ;
  input rip_pop;
  input Q;
  input ACLK;
  input \Gen_Port_Ready[0].Use_Slow_Port.Rd_FF_Inst ;
  input S0_AXI_ARVALID;
  input ri_exist;

  wire ACLK;
  wire CI;
  wire D;
  wire DI;
  wire \Gen_Port_Ready[0].Use_Slow_Port.Rd_FF_Inst ;
  wire LI;
  wire Q;
  wire S0_AXI_ARREADY;
  wire S0_AXI_ARVALID;
  wire \Use_FPGA.Almost_Empty_Inst_i_2__1_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_n_0 ;
  wire \Use_FPGA.Almost_Full_Inst_0 ;
  wire \Use_FPGA.Almost_Full_Inst_i_2_n_0 ;
  wire \Use_FPGA.Almost_Full_Inst_n_0 ;
  wire \Use_FPGA.Empty_Inst_n_0 ;
  wire \Use_FPGA.Full_Inst_n_0 ;
  wire \Use_FPGA.Use_Normal_Line.Line_Fit_Inst_0 ;
  wire \Use_FPGA.Use_Normal_Line.Line_Fit_Inst_i_2_n_0 ;
  wire \Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1_n_1 ;
  wire \Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1_n_2 ;
  wire \Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1_n_3 ;
  wire \Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1_n_4 ;
  wire \Use_Reg_Ctrl.Use_Pop_Carry.SRL_Or_Inst1_n_1 ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg_n_0 ;
  wire carry_2;
  wire carry_3;
  wire cnt_di_1;
  wire cnt_di_2;
  wire cnt_s_1;
  wire cnt_s_2;
  wire cnt_s_3;
  wire lopt;
  wire lopt_1;
  wire lopt_2;
  wire queue_pop_srl;
  wire \r_hit_write_fifo_addr_reg[3] ;
  wire \rd_port_access[0][Valid] ;
  wire read_fifo_addr_next_0;
  wire read_fifo_addr_next_1;
  wire read_fifo_addr_next_2;
  wire read_fifo_addr_next_3;
  wire read_req_valid;
  wire ri_exist;
  wire rip_pop;
  wire [3:0]rip_read_fifo_addr;
  wire rip_refresh_reg;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED ;

  (* SOFT_HLUTNM = "soft_lutpair127" *) 
  LUT2 #(
    .INIT(4'h8)) 
    S0_AXI_ARREADY_INST_0
       (.I0(\Use_FPGA.Use_Normal_Line.Line_Fit_Inst_0 ),
        .I1(\Gen_Port_Ready[0].Use_Slow_Port.Rd_FF_Inst ),
        .O(S0_AXI_ARREADY));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1_n_3 ),
        .Q(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .R(Q));
  LUT4 #(
    .INIT(16'h0010)) 
    \Use_FPGA.Almost_Empty_Inst_i_2__1 
       (.I0(rip_read_fifo_addr[3]),
        .I1(rip_read_fifo_addr[2]),
        .I2(rip_read_fifo_addr[0]),
        .I3(rip_read_fifo_addr[1]),
        .O(\Use_FPGA.Almost_Empty_Inst_i_2__1_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(D),
        .Q(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair125" *) 
  LUT4 #(
    .INIT(16'h1000)) 
    \Use_FPGA.Almost_Full_Inst_i_2 
       (.I0(rip_read_fifo_addr[0]),
        .I1(rip_read_fifo_addr[1]),
        .I2(rip_read_fifo_addr[3]),
        .I3(rip_read_fifo_addr[2]),
        .O(\Use_FPGA.Almost_Full_Inst_i_2_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h9CAF635063506350)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst 
       (.I0(\Use_FPGA.Empty_Inst_n_0 ),
        .I1(\Use_FPGA.Full_Inst_n_0 ),
        .I2(queue_pop_srl),
        .I3(read_req_valid),
        .I4(rip_read_fifo_addr[0]),
        .I5(1'b1),
        .O5(DI),
        .O6(LI));
  (* SOFT_HLUTNM = "soft_lutpair126" *) 
  LUT3 #(
    .INIT(8'h80)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst_i_1__0 
       (.I0(S0_AXI_ARVALID),
        .I1(\Use_FPGA.Use_Normal_Line.Line_Fit_Inst_0 ),
        .I2(\Gen_Port_Ready[0].Use_Slow_Port.Rd_FF_Inst ),
        .O(read_req_valid));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_0),
        .Q(rip_read_fifo_addr[0]),
        .S(Q));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4 
       (.CI(1'b0),
        .CO({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED [3],carry_3,carry_2,CI}),
        .CYINIT(1'b0),
        .DI({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED [3],cnt_di_2,cnt_di_1,DI}),
        .O({read_fifo_addr_next_3,read_fifo_addr_next_2,read_fifo_addr_next_1,read_fifo_addr_next_0}),
        .S({cnt_s_3,cnt_s_2,cnt_s_1,LI}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[1].Active_Low.Other_Bits.LUT_Inst 
       (.I0(\Use_FPGA.Empty_Inst_n_0 ),
        .I1(\Use_FPGA.Full_Inst_n_0 ),
        .I2(queue_pop_srl),
        .I3(read_req_valid),
        .I4(rip_read_fifo_addr[1]),
        .I5(1'b1),
        .O5(cnt_di_1),
        .O6(cnt_s_1));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_1),
        .Q(rip_read_fifo_addr[1]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[2].Active_Low.Other_Bits.LUT_Inst 
       (.I0(\Use_FPGA.Empty_Inst_n_0 ),
        .I1(\Use_FPGA.Full_Inst_n_0 ),
        .I2(queue_pop_srl),
        .I3(read_req_valid),
        .I4(rip_read_fifo_addr[2]),
        .I5(1'b1),
        .O5(cnt_di_2),
        .O6(cnt_s_2));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_2),
        .Q(rip_read_fifo_addr[2]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[3].Active_Low.Last_Bit.LUT_Inst 
       (.I0(\Use_FPGA.Empty_Inst_n_0 ),
        .I1(\Use_FPGA.Full_Inst_n_0 ),
        .I2(queue_pop_srl),
        .I3(read_req_valid),
        .I4(rip_read_fifo_addr[3]),
        .I5(1'b1),
        .O(cnt_s_3));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_3),
        .Q(rip_read_fifo_addr[3]),
        .S(Q));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1_n_2 ),
        .Q(\Use_FPGA.Empty_Inst_n_0 ),
        .S(Q));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1_n_4 ),
        .Q(\Use_FPGA.Full_Inst_n_0 ),
        .R(Q));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Use_Normal_Line.Line_Fit_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1_n_1 ),
        .Q(\Use_FPGA.Use_Normal_Line.Line_Fit_Inst_0 ),
        .S(Q));
  (* SOFT_HLUTNM = "soft_lutpair125" *) 
  LUT5 #(
    .INIT(32'h81FF7FFF)) 
    \Use_FPGA.Use_Normal_Line.Line_Fit_Inst_i_2 
       (.I0(\Use_FPGA.Almost_Full_Inst_0 ),
        .I1(rip_read_fifo_addr[1]),
        .I2(rip_read_fifo_addr[0]),
        .I3(rip_read_fifo_addr[3]),
        .I4(rip_read_fifo_addr[2]),
        .O(\Use_FPGA.Use_Normal_Line.Line_Fit_Inst_i_2_n_0 ));
  design_1_system_cache_0_0_carry_and_n_21 \Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1 
       (.D(D),
        .\Gen_Port_Ready[0].Use_Slow_Port.Rd_FF_Inst (\Use_FPGA.Almost_Full_Inst_0 ),
        .\Use_FPGA.Almost_Empty_Inst (\Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1_n_3 ),
        .\Use_FPGA.Almost_Empty_Inst_0 (\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .\Use_FPGA.Almost_Full_Inst (\Use_FPGA.Almost_Full_Inst_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst (\Use_FPGA.Almost_Full_Inst_i_2_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst (\Use_FPGA.Use_Normal_Line.Line_Fit_Inst_i_2_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst (\Use_FPGA.Almost_Empty_Inst_i_2__1_n_0 ),
        .\Use_FPGA.Empty_Inst (\Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1_n_2 ),
        .\Use_FPGA.Empty_Inst_0 (\Use_FPGA.Empty_Inst_n_0 ),
        .\Use_FPGA.Full_Inst (\Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1_n_4 ),
        .\Use_FPGA.Full_Inst_0 (\Use_FPGA.Full_Inst_n_0 ),
        .\Use_FPGA.Use_Normal_Line.Line_Fit_Inst (\Use_Reg_Ctrl.Use_Pop_Carry.SRL_And_Inst1_n_1 ),
        .\Use_FPGA.Use_Normal_Line.Line_Fit_Inst_0 (\Use_FPGA.Use_Normal_Line.Line_Fit_Inst_0 ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .queue_pop_srl(queue_pop_srl),
        .rip_refresh_reg(rip_refresh_reg));
  design_1_system_cache_0_0_carry_or_n_22 \Use_Reg_Ctrl.Use_Pop_Carry.SRL_Or_Inst1 
       (.\Use_FPGA.Empty_Inst (\Use_FPGA.Empty_Inst_n_0 ),
        .\Use_Reg_Ctrl.queue_exist_i_reg (\Use_Reg_Ctrl.Use_Pop_Carry.SRL_Or_Inst1_n_1 ),
        .\Use_Reg_Ctrl.queue_exist_i_reg_0 (\Use_Reg_Ctrl.queue_exist_i_reg_n_0 ),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .rip_pop(rip_pop),
        .rip_refresh_reg(rip_refresh_reg));
  FDRE #(
    .INIT(1'b0)) 
    \Use_Reg_Ctrl.queue_exist_i_reg 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_Reg_Ctrl.Use_Pop_Carry.SRL_Or_Inst1_n_1 ),
        .Q(\Use_Reg_Ctrl.queue_exist_i_reg_n_0 ),
        .R(Q));
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.MUXCY_I_i_1__154 
       (.I0(\Use_Reg_Ctrl.queue_exist_i_reg_n_0 ),
        .I1(ri_exist),
        .O(\r_hit_write_fifo_addr_reg[3] ));
  (* SOFT_HLUTNM = "soft_lutpair127" *) 
  LUT2 #(
    .INIT(4'h8)) 
    \Using_FPGA.MUXCY_I_i_2__0 
       (.I0(\Use_FPGA.Use_Normal_Line.Line_Fit_Inst_0 ),
        .I1(S0_AXI_ARVALID),
        .O(\rd_port_access[0][Valid] ));
  (* SOFT_HLUTNM = "soft_lutpair126" *) 
  LUT4 #(
    .INIT(16'h0080)) 
    \rip_fifo_mem_reg[15][ID][0]_srl16_i_1 
       (.I0(\Gen_Port_Ready[0].Use_Slow_Port.Rd_FF_Inst ),
        .I1(\Use_FPGA.Use_Normal_Line.Line_Fit_Inst_0 ),
        .I2(S0_AXI_ARVALID),
        .I3(\Use_FPGA.Full_Inst_n_0 ),
        .O(\Use_FPGA.Almost_Full_Inst_0 ));
endmodule

(* ORIG_REF_NAME = "sc_srl_fifo_counter" *) 
module design_1_system_cache_0_0_sc_srl_fifo_counter__parameterized7
   (\Use_FPGA.Almost_Full_Inst_0 ,
    bip_read_fifo_addr,
    dvm_2nd_part_reg,
    Q,
    ACLK,
    queue_pop7_out,
    queue_push9_out,
    S1_AXI_AWVALID,
    wr_port_ready);
  output \Use_FPGA.Almost_Full_Inst_0 ;
  output [3:0]bip_read_fifo_addr;
  output dvm_2nd_part_reg;
  input Q;
  input ACLK;
  input queue_pop7_out;
  input queue_push9_out;
  input S1_AXI_AWVALID;
  input wr_port_ready;

  wire ACLK;
  wire CI;
  wire D;
  wire DI;
  wire LI;
  wire Q;
  wire S1_AXI_AWVALID;
  wire \Use_FPGA.Almost_Full_Inst_0 ;
  wire \Use_FPGA.Almost_Full_Inst_i_2__6_n_0 ;
  wire \Use_FPGA.Almost_Full_Inst_n_0 ;
  wire \Use_FPGA.Full_Inst_i_1__6_n_0 ;
  wire [3:0]bip_read_fifo_addr;
  wire carry_2;
  wire carry_3;
  wire cnt_di_1;
  wire cnt_di_2;
  wire cnt_s_1;
  wire cnt_s_2;
  wire cnt_s_3;
  wire dvm_2nd_part_reg;
  wire queue_pop7_out;
  wire queue_push9_out;
  wire read_fifo_addr_next_0;
  wire read_fifo_addr_next_1;
  wire read_fifo_addr_next_2;
  wire read_fifo_addr_next_3;
  wire wr_port_ready;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED ;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(D),
        .Q(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .R(Q));
  LUT6 #(
    .INIT(64'hFCF0FBFFF0F00800)) 
    \Use_FPGA.Almost_Full_Inst_i_1__6 
       (.I0(\Use_FPGA.Almost_Full_Inst_i_2__6_n_0 ),
        .I1(S1_AXI_AWVALID),
        .I2(\Use_FPGA.Almost_Full_Inst_0 ),
        .I3(wr_port_ready),
        .I4(queue_pop7_out),
        .I5(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .O(D));
  LUT4 #(
    .INIT(16'h1000)) 
    \Use_FPGA.Almost_Full_Inst_i_2__6 
       (.I0(bip_read_fifo_addr[0]),
        .I1(bip_read_fifo_addr[1]),
        .I2(bip_read_fifo_addr[3]),
        .I3(bip_read_fifo_addr[2]),
        .O(\Use_FPGA.Almost_Full_Inst_i_2__6_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h9CAF635063506350)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop7_out),
        .I3(queue_push9_out),
        .I4(bip_read_fifo_addr[0]),
        .I5(1'b1),
        .O5(DI),
        .O6(LI));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_0),
        .Q(bip_read_fifo_addr[0]),
        .S(Q));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4 
       (.CI(1'b0),
        .CO({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED [3],carry_3,carry_2,CI}),
        .CYINIT(1'b0),
        .DI({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED [3],cnt_di_2,cnt_di_1,DI}),
        .O({read_fifo_addr_next_3,read_fifo_addr_next_2,read_fifo_addr_next_1,read_fifo_addr_next_0}),
        .S({cnt_s_3,cnt_s_2,cnt_s_1,LI}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[1].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop7_out),
        .I3(queue_push9_out),
        .I4(bip_read_fifo_addr[1]),
        .I5(1'b1),
        .O5(cnt_di_1),
        .O6(cnt_s_1));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_1),
        .Q(bip_read_fifo_addr[1]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[2].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop7_out),
        .I3(queue_push9_out),
        .I4(bip_read_fifo_addr[2]),
        .I5(1'b1),
        .O5(cnt_di_2),
        .O6(cnt_s_2));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_2),
        .Q(bip_read_fifo_addr[2]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[3].Active_Low.Last_Bit.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop7_out),
        .I3(queue_push9_out),
        .I4(bip_read_fifo_addr[3]),
        .I5(1'b1),
        .O(cnt_s_3));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_3),
        .Q(bip_read_fifo_addr[3]),
        .S(Q));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Full_Inst_i_1__6_n_0 ),
        .Q(\Use_FPGA.Almost_Full_Inst_0 ),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair145" *) 
  LUT5 #(
    .INIT(32'h0000F8F0)) 
    \Use_FPGA.Full_Inst_i_1__6 
       (.I0(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .I1(S1_AXI_AWVALID),
        .I2(\Use_FPGA.Almost_Full_Inst_0 ),
        .I3(wr_port_ready),
        .I4(queue_pop7_out),
        .O(\Use_FPGA.Full_Inst_i_1__6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair145" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.MUXCY_I_i_2__26 
       (.I0(S1_AXI_AWVALID),
        .I1(\Use_FPGA.Almost_Full_Inst_0 ),
        .O(dvm_2nd_part_reg));
endmodule

(* ORIG_REF_NAME = "sc_srl_fifo_counter" *) 
module design_1_system_cache_0_0_sc_srl_fifo_counter__parameterized7_0
   (bp_read_fifo_addr,
    queue_pop7_out,
    S_AXI_BVALID_I_reg,
    \Use_FPGA.Almost_Empty_Inst_0 ,
    \Use_Reg_Ctrl.queue_exist_i_reg ,
    \S_AXI_BRESP_reg[1] ,
    \S_AXI_BRESP_reg[0] ,
    Q,
    ACLK,
    \arbiter_bp_push_prt[1][Valid] ,
    update_ext_bresp_any,
    \bs_port_num_reg[0] ,
    \arbiter_bp_push_i_reg[1][Valid] ,
    wc_fifo_empty,
    \arbiter_bp_push_i_reg[1][Valid]_0 ,
    S_AXI_BVALID_I_reg_0,
    S1_AXI_BREADY,
    S1_AXI_BRESP,
    \bs_src_reg[0] ,
    \bs_src_reg[0]_0 );
  output [3:0]bp_read_fifo_addr;
  output queue_pop7_out;
  output S_AXI_BVALID_I_reg;
  output \Use_FPGA.Almost_Empty_Inst_0 ;
  output \Use_Reg_Ctrl.queue_exist_i_reg ;
  output \S_AXI_BRESP_reg[1] ;
  output \S_AXI_BRESP_reg[0] ;
  input Q;
  input ACLK;
  input \arbiter_bp_push_prt[1][Valid] ;
  input update_ext_bresp_any;
  input \bs_port_num_reg[0] ;
  input \arbiter_bp_push_i_reg[1][Valid] ;
  input wc_fifo_empty;
  input \arbiter_bp_push_i_reg[1][Valid]_0 ;
  input S_AXI_BVALID_I_reg_0;
  input S1_AXI_BREADY;
  input [1:0]S1_AXI_BRESP;
  input \bs_src_reg[0] ;
  input \bs_src_reg[0]_0 ;

  wire ACLK;
  wire CI;
  wire DI;
  wire LI;
  wire Q;
  wire S1_AXI_BREADY;
  wire [1:0]S1_AXI_BRESP;
  wire \S_AXI_BID[0]_i_2__0_n_0 ;
  wire \S_AXI_BRESP_reg[0] ;
  wire \S_AXI_BRESP_reg[1] ;
  wire S_AXI_BVALID_I_reg;
  wire S_AXI_BVALID_I_reg_0;
  wire \Use_FPGA.Almost_Empty_Inst_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_i_1__8_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_n_0 ;
  wire \Use_FPGA.Empty_Inst_i_1__8_n_0 ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg ;
  wire \arbiter_bp_push_i_reg[1][Valid] ;
  wire \arbiter_bp_push_i_reg[1][Valid]_0 ;
  wire \arbiter_bp_push_prt[1][Valid] ;
  wire bp_fifo_empty;
  wire [3:0]bp_read_fifo_addr;
  wire \bs_port_num_reg[0] ;
  wire \bs_src_reg[0] ;
  wire \bs_src_reg[0]_0 ;
  wire carry_2;
  wire carry_3;
  wire cnt_di_1;
  wire cnt_di_2;
  wire cnt_s_1;
  wire cnt_s_2;
  wire cnt_s_3;
  wire queue_almost_empty_next__10;
  wire queue_pop7_out;
  wire read_fifo_addr_next_0;
  wire read_fifo_addr_next_1;
  wire read_fifo_addr_next_2;
  wire read_fifo_addr_next_3;
  wire update_ext_bresp_any;
  wire wc_fifo_empty;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED ;

  LUT6 #(
    .INIT(64'hAA80AA800080AA80)) 
    \S_AXI_BID[0]_i_1__0 
       (.I0(\S_AXI_BID[0]_i_2__0_n_0 ),
        .I1(update_ext_bresp_any),
        .I2(\bs_port_num_reg[0] ),
        .I3(\arbiter_bp_push_i_reg[1][Valid] ),
        .I4(wc_fifo_empty),
        .I5(\arbiter_bp_push_i_reg[1][Valid]_0 ),
        .O(queue_pop7_out));
  (* SOFT_HLUTNM = "soft_lutpair147" *) 
  LUT3 #(
    .INIT(8'h0D)) 
    \S_AXI_BID[0]_i_2__0 
       (.I0(S_AXI_BVALID_I_reg_0),
        .I1(S1_AXI_BREADY),
        .I2(bp_fifo_empty),
        .O(\S_AXI_BID[0]_i_2__0_n_0 ));
  LUT5 #(
    .INIT(32'h00000ACA)) 
    \S_AXI_BRESP[0]_i_1__0 
       (.I0(S1_AXI_BRESP[0]),
        .I1(\bs_src_reg[0]_0 ),
        .I2(queue_pop7_out),
        .I3(\arbiter_bp_push_i_reg[1][Valid] ),
        .I4(Q),
        .O(\S_AXI_BRESP_reg[0] ));
  LUT5 #(
    .INIT(32'h00000ACA)) 
    \S_AXI_BRESP[1]_i_1__0 
       (.I0(S1_AXI_BRESP[1]),
        .I1(\bs_src_reg[0] ),
        .I2(queue_pop7_out),
        .I3(\arbiter_bp_push_i_reg[1][Valid] ),
        .I4(Q),
        .O(\S_AXI_BRESP_reg[1] ));
  LUT3 #(
    .INIT(8'hAE)) 
    S_AXI_BVALID_I_i_1__0
       (.I0(queue_pop7_out),
        .I1(S_AXI_BVALID_I_reg_0),
        .I2(S1_AXI_BREADY),
        .O(S_AXI_BVALID_I_reg));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Almost_Empty_Inst_i_1__8_n_0 ),
        .Q(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair146" *) 
  LUT4 #(
    .INIT(16'hEB28)) 
    \Use_FPGA.Almost_Empty_Inst_i_1__8 
       (.I0(queue_almost_empty_next__10),
        .I1(\arbiter_bp_push_prt[1][Valid] ),
        .I2(queue_pop7_out),
        .I3(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .O(\Use_FPGA.Almost_Empty_Inst_i_1__8_n_0 ));
  LUT6 #(
    .INIT(64'h88888888888B8888)) 
    \Use_FPGA.Almost_Empty_Inst_i_2__7 
       (.I0(bp_fifo_empty),
        .I1(\arbiter_bp_push_prt[1][Valid] ),
        .I2(bp_read_fifo_addr[3]),
        .I3(bp_read_fifo_addr[2]),
        .I4(bp_read_fifo_addr[0]),
        .I5(bp_read_fifo_addr[1]),
        .O(queue_almost_empty_next__10));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h9CAF635063506350)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop7_out),
        .I3(\arbiter_bp_push_prt[1][Valid] ),
        .I4(bp_read_fifo_addr[0]),
        .I5(1'b1),
        .O5(DI),
        .O6(LI));
  (* SOFT_HLUTNM = "soft_lutpair146" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst_i_1__10 
       (.I0(queue_pop7_out),
        .I1(\arbiter_bp_push_i_reg[1][Valid]_0 ),
        .O(\Use_FPGA.Almost_Empty_Inst_0 ));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_0),
        .Q(bp_read_fifo_addr[0]),
        .S(Q));
  (* SOFT_HLUTNM = "soft_lutpair147" *) 
  LUT4 #(
    .INIT(16'h0045)) 
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_4__0 
       (.I0(bp_fifo_empty),
        .I1(S1_AXI_BREADY),
        .I2(S_AXI_BVALID_I_reg_0),
        .I3(\arbiter_bp_push_i_reg[1][Valid] ),
        .O(\Use_Reg_Ctrl.queue_exist_i_reg ));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4 
       (.CI(1'b0),
        .CO({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED [3],carry_3,carry_2,CI}),
        .CYINIT(1'b0),
        .DI({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED [3],cnt_di_2,cnt_di_1,DI}),
        .O({read_fifo_addr_next_3,read_fifo_addr_next_2,read_fifo_addr_next_1,read_fifo_addr_next_0}),
        .S({cnt_s_3,cnt_s_2,cnt_s_1,LI}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[1].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop7_out),
        .I3(\arbiter_bp_push_prt[1][Valid] ),
        .I4(bp_read_fifo_addr[1]),
        .I5(1'b1),
        .O5(cnt_di_1),
        .O6(cnt_s_1));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_1),
        .Q(bp_read_fifo_addr[1]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[2].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop7_out),
        .I3(\arbiter_bp_push_prt[1][Valid] ),
        .I4(bp_read_fifo_addr[2]),
        .I5(1'b1),
        .O5(cnt_di_2),
        .O6(cnt_s_2));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_2),
        .Q(bp_read_fifo_addr[2]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[3].Active_Low.Last_Bit.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop7_out),
        .I3(\arbiter_bp_push_prt[1][Valid] ),
        .I4(bp_read_fifo_addr[3]),
        .I5(1'b1),
        .O(cnt_s_3));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_3),
        .Q(bp_read_fifo_addr[3]),
        .S(Q));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Empty_Inst_i_1__8_n_0 ),
        .Q(bp_fifo_empty),
        .S(Q));
  LUT4 #(
    .INIT(16'hE320)) 
    \Use_FPGA.Empty_Inst_i_1__8 
       (.I0(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .I1(\arbiter_bp_push_prt[1][Valid] ),
        .I2(queue_pop7_out),
        .I3(bp_fifo_empty),
        .O(\Use_FPGA.Empty_Inst_i_1__8_n_0 ));
endmodule

(* ORIG_REF_NAME = "sc_srl_fifo_counter" *) 
module design_1_system_cache_0_0_sc_srl_fifo_counter__parameterized7_276
   (\write_seq_id_reg[6] ,
    \Use_FPGA.Full_Inst_0 ,
    queue_index,
    queue_push26_out,
    update_done_aw_reg,
    D,
    need_to_stall_write_reg,
    pending_write_is_1_reg,
    Q,
    ACLK,
    M_AXI_AWVALID_I,
    need_to_stall_write_reg_0,
    update_need_aw,
    update_done_aw,
    \pending_write_reg[4] ,
    \pending_write_reg[2] ,
    \Use_FPGA.Full_Inst_1 ,
    \write_seq_id_reg[5] ,
    M0_AXI_AWREADY,
    M_AXI_AWVALID_I_reg,
    \pending_write_reg[2]_0 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    pending_write_is_1);
  output \write_seq_id_reg[6] ;
  output \Use_FPGA.Full_Inst_0 ;
  output [3:0]queue_index;
  output queue_push26_out;
  output update_done_aw_reg;
  output [3:0]D;
  output need_to_stall_write_reg;
  output pending_write_is_1_reg;
  input Q;
  input ACLK;
  input M_AXI_AWVALID_I;
  input need_to_stall_write_reg_0;
  input update_need_aw;
  input update_done_aw;
  input [4:0]\pending_write_reg[4] ;
  input \pending_write_reg[2] ;
  input \Use_FPGA.Full_Inst_1 ;
  input \write_seq_id_reg[5] ;
  input M0_AXI_AWREADY;
  input M_AXI_AWVALID_I_reg;
  input \pending_write_reg[2]_0 ;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  input pending_write_is_1;

  wire ACLK;
  wire CI;
  wire [3:0]D;
  wire DI;
  wire D_0;
  wire LI;
  wire M0_AXI_AWREADY;
  wire M_AXI_AWVALID_I;
  wire M_AXI_AWVALID_I_reg;
  wire Q;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \Use_FPGA.Almost_Empty_Inst_i_1__18_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_i_2__17_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_n_0 ;
  wire \Use_FPGA.Almost_Full_Inst_i_2__13_n_0 ;
  wire \Use_FPGA.Almost_Full_Inst_n_0 ;
  wire \Use_FPGA.Empty_Inst_i_1__18_n_0 ;
  wire \Use_FPGA.Full_Inst_0 ;
  wire \Use_FPGA.Full_Inst_1 ;
  wire \Use_FPGA.Full_Inst_i_1__14_n_0 ;
  wire carry_2;
  wire carry_3;
  wire cnt_di_1;
  wire cnt_di_2;
  wire cnt_s_1;
  wire cnt_s_2;
  wire cnt_s_3;
  wire need_to_stall_write_reg;
  wire need_to_stall_write_reg_0;
  wire pending_write_is_1;
  wire pending_write_is_1_i_2_n_0;
  wire pending_write_is_1_reg;
  wire \pending_write_reg[2] ;
  wire \pending_write_reg[2]_0 ;
  wire [4:0]\pending_write_reg[4] ;
  wire [3:0]queue_index;
  wire queue_push26_out;
  wire read_fifo_addr_next_0;
  wire read_fifo_addr_next_1;
  wire read_fifo_addr_next_2;
  wire read_fifo_addr_next_3;
  wire update_done_aw;
  wire update_done_aw_reg;
  wire update_need_aw;
  wire \write_seq_id_reg[5] ;
  wire \write_seq_id_reg[6] ;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED ;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Almost_Empty_Inst_i_1__18_n_0 ),
        .Q(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .R(Q));
  LUT6 #(
    .INIT(64'hFFCFEEFECCCC2202)) 
    \Use_FPGA.Almost_Empty_Inst_i_1__18 
       (.I0(\Use_FPGA.Almost_Empty_Inst_i_2__17_n_0 ),
        .I1(\Use_FPGA.Full_Inst_0 ),
        .I2(M_AXI_AWVALID_I_reg),
        .I3(M0_AXI_AWREADY),
        .I4(queue_push26_out),
        .I5(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .O(\Use_FPGA.Almost_Empty_Inst_i_1__18_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT4 #(
    .INIT(16'h0004)) 
    \Use_FPGA.Almost_Empty_Inst_i_2__17 
       (.I0(queue_index[1]),
        .I1(queue_index[0]),
        .I2(queue_index[3]),
        .I3(queue_index[2]),
        .O(\Use_FPGA.Almost_Empty_Inst_i_2__17_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(D_0),
        .Q(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .R(Q));
  LUT5 #(
    .INIT(32'hFEAF0EA0)) 
    \Use_FPGA.Almost_Full_Inst_i_1__14 
       (.I0(\write_seq_id_reg[6] ),
        .I1(\Use_FPGA.Almost_Full_Inst_i_2__13_n_0 ),
        .I2(M_AXI_AWVALID_I),
        .I3(queue_push26_out),
        .I4(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .O(D_0));
  (* SOFT_HLUTNM = "soft_lutpair7" *) 
  LUT4 #(
    .INIT(16'h1000)) 
    \Use_FPGA.Almost_Full_Inst_i_2__13 
       (.I0(queue_index[1]),
        .I1(queue_index[0]),
        .I2(queue_index[3]),
        .I3(queue_index[2]),
        .O(\Use_FPGA.Almost_Full_Inst_i_2__13_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h9CAF635063506350)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(M_AXI_AWVALID_I),
        .I3(queue_push26_out),
        .I4(queue_index[0]),
        .I5(1'b1),
        .O5(DI),
        .O6(LI));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT4 #(
    .INIT(16'h0100)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst_i_1__7 
       (.I0(need_to_stall_write_reg_0),
        .I1(\write_seq_id_reg[6] ),
        .I2(update_done_aw),
        .I3(update_need_aw),
        .O(queue_push26_out));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_0),
        .Q(queue_index[0]),
        .S(Q));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4 
       (.CI(1'b0),
        .CO({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED [3],carry_3,carry_2,CI}),
        .CYINIT(1'b0),
        .DI({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED [3],cnt_di_2,cnt_di_1,DI}),
        .O({read_fifo_addr_next_3,read_fifo_addr_next_2,read_fifo_addr_next_1,read_fifo_addr_next_0}),
        .S({cnt_s_3,cnt_s_2,cnt_s_1,LI}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[1].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(M_AXI_AWVALID_I),
        .I3(queue_push26_out),
        .I4(queue_index[1]),
        .I5(1'b1),
        .O5(cnt_di_1),
        .O6(cnt_s_1));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_1),
        .Q(queue_index[1]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[2].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(M_AXI_AWVALID_I),
        .I3(queue_push26_out),
        .I4(queue_index[2]),
        .I5(1'b1),
        .O5(cnt_di_2),
        .O6(cnt_s_2));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_2),
        .Q(queue_index[2]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[3].Active_Low.Last_Bit.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(M_AXI_AWVALID_I),
        .I3(queue_push26_out),
        .I4(queue_index[3]),
        .I5(1'b1),
        .O(cnt_s_3));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_3),
        .Q(queue_index[3]),
        .S(Q));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Empty_Inst_i_1__18_n_0 ),
        .Q(\Use_FPGA.Full_Inst_0 ),
        .S(Q));
  LUT5 #(
    .INIT(32'h00FF008A)) 
    \Use_FPGA.Empty_Inst_i_1__18 
       (.I0(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .I1(M0_AXI_AWREADY),
        .I2(M_AXI_AWVALID_I_reg),
        .I3(queue_push26_out),
        .I4(\Use_FPGA.Full_Inst_0 ),
        .O(\Use_FPGA.Empty_Inst_i_1__18_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Full_Inst_i_1__14_n_0 ),
        .Q(\write_seq_id_reg[6] ),
        .R(Q));
  LUT6 #(
    .INIT(64'hFFFF0F0088880800)) 
    \Use_FPGA.Full_Inst_i_1__14 
       (.I0(queue_push26_out),
        .I1(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .I2(M0_AXI_AWREADY),
        .I3(M_AXI_AWVALID_I_reg),
        .I4(\Use_FPGA.Full_Inst_0 ),
        .I5(\write_seq_id_reg[6] ),
        .O(\Use_FPGA.Full_Inst_i_1__14_n_0 ));
  LUT6 #(
    .INIT(64'h4455004444500044)) 
    need_to_stall_write_i_1
       (.I0(Q),
        .I1(need_to_stall_write_reg_0),
        .I2(\pending_write_reg[2] ),
        .I3(\Use_FPGA.Full_Inst_1 ),
        .I4(queue_push26_out),
        .I5(\write_seq_id_reg[5] ),
        .O(need_to_stall_write_reg));
  LUT6 #(
    .INIT(64'hFEFF01000100FEFF)) 
    \pending_write[1]_i_1 
       (.I0(need_to_stall_write_reg_0),
        .I1(\write_seq_id_reg[6] ),
        .I2(update_done_aw),
        .I3(update_need_aw),
        .I4(\pending_write_reg[4] [1]),
        .I5(\pending_write_reg[4] [0]),
        .O(D[0]));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT4 #(
    .INIT(16'h7E81)) 
    \pending_write[2]_i_1 
       (.I0(\pending_write_reg[4] [1]),
        .I1(\pending_write_reg[4] [0]),
        .I2(queue_push26_out),
        .I3(\pending_write_reg[4] [2]),
        .O(D[1]));
  (* SOFT_HLUTNM = "soft_lutpair5" *) 
  LUT5 #(
    .INIT(32'h7F80FE01)) 
    \pending_write[3]_i_1 
       (.I0(queue_push26_out),
        .I1(\pending_write_reg[4] [0]),
        .I2(\pending_write_reg[4] [1]),
        .I3(\pending_write_reg[4] [3]),
        .I4(\pending_write_reg[4] [2]),
        .O(D[2]));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAA9)) 
    \pending_write[4]_i_2 
       (.I0(\pending_write_reg[4] [4]),
        .I1(\pending_write_reg[4] [3]),
        .I2(queue_push26_out),
        .I3(\pending_write_reg[4] [0]),
        .I4(\pending_write_reg[4] [1]),
        .I5(\pending_write_reg[4] [2]),
        .O(D[3]));
  LUT6 #(
    .INIT(64'h00FF000200000002)) 
    pending_write_is_1_i_1
       (.I0(pending_write_is_1_i_2_n_0),
        .I1(\pending_write_reg[4] [0]),
        .I2(\pending_write_reg[2]_0 ),
        .I3(Q),
        .I4(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I5(pending_write_is_1),
        .O(pending_write_is_1_reg));
  (* SOFT_HLUTNM = "soft_lutpair6" *) 
  LUT5 #(
    .INIT(32'hAAAAAAA6)) 
    pending_write_is_1_i_2
       (.I0(\pending_write_reg[4] [1]),
        .I1(update_need_aw),
        .I2(update_done_aw),
        .I3(\write_seq_id_reg[6] ),
        .I4(need_to_stall_write_reg_0),
        .O(pending_write_is_1_i_2_n_0));
  LUT4 #(
    .INIT(16'hFF10)) 
    update_done_aw_i_1
       (.I0(need_to_stall_write_reg_0),
        .I1(\write_seq_id_reg[6] ),
        .I2(update_need_aw),
        .I3(update_done_aw),
        .O(update_done_aw_reg));
endmodule

(* ORIG_REF_NAME = "sc_srl_fifo_counter" *) 
module design_1_system_cache_0_0_sc_srl_fifo_counter__parameterized7_45
   (bp_fifo_empty,
    bp_read_fifo_addr,
    need_to_stall_write_reg,
    M0_AXI_BREADY,
    E,
    pending_write_is_1_reg,
    S_1,
    M_AXI_ARVALID_I_reg,
    Q,
    ACLK,
    queue_pop112_out,
    M0_AXI_BVALID,
    need_to_stall_write_reg_0,
    aw_fifo_full,
    update_done_aw_reg,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    pending_write_is_1);
  output bp_fifo_empty;
  output [3:0]bp_read_fifo_addr;
  output need_to_stall_write_reg;
  output M0_AXI_BREADY;
  output [0:0]E;
  output pending_write_is_1_reg;
  output S_1;
  output M_AXI_ARVALID_I_reg;
  input Q;
  input ACLK;
  input queue_pop112_out;
  input M0_AXI_BVALID;
  input need_to_stall_write_reg_0;
  input aw_fifo_full;
  input update_done_aw_reg;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  input pending_write_is_1;

  wire ACLK;
  wire CI;
  wire D;
  wire DI;
  wire [0:0]E;
  wire LI;
  wire M0_AXI_BREADY;
  wire M0_AXI_BVALID;
  wire M_AXI_ARVALID_I_reg;
  wire Q;
  wire S_1;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \Use_FPGA.Almost_Empty_Inst_i_1__16_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_i_2__15_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_n_0 ;
  wire \Use_FPGA.Almost_Full_Inst_n_0 ;
  wire \Use_FPGA.Empty_Inst_i_1__16_n_0 ;
  wire \Use_FPGA.Full_Inst_i_1__12_n_0 ;
  wire aw_fifo_full;
  wire bp_fifo_empty;
  wire bp_fifo_full;
  wire [3:0]bp_read_fifo_addr;
  wire carry_2;
  wire carry_3;
  wire cnt_di_1;
  wire cnt_di_2;
  wire cnt_s_1;
  wire cnt_s_2;
  wire cnt_s_3;
  wire need_to_stall_write_reg;
  wire need_to_stall_write_reg_0;
  wire pending_write_is_1;
  wire pending_write_is_1_reg;
  wire queue_almost_full_next__3;
  wire queue_pop112_out;
  wire read_fifo_addr_next_0;
  wire read_fifo_addr_next_1;
  wire read_fifo_addr_next_2;
  wire read_fifo_addr_next_3;
  wire update_done_aw_reg;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED ;

  LUT1 #(
    .INIT(2'h1)) 
    M0_AXI_BREADY_INST_0
       (.I0(bp_fifo_full),
        .O(M0_AXI_BREADY));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Almost_Empty_Inst_i_1__16_n_0 ),
        .Q(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .R(Q));
  LUT6 #(
    .INIT(64'hCFCCFAFFC0CC0A00)) 
    \Use_FPGA.Almost_Empty_Inst_i_1__16 
       (.I0(bp_fifo_empty),
        .I1(\Use_FPGA.Almost_Empty_Inst_i_2__15_n_0 ),
        .I2(bp_fifo_full),
        .I3(M0_AXI_BVALID),
        .I4(queue_pop112_out),
        .I5(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .O(\Use_FPGA.Almost_Empty_Inst_i_1__16_n_0 ));
  LUT4 #(
    .INIT(16'h0010)) 
    \Use_FPGA.Almost_Empty_Inst_i_2__15 
       (.I0(bp_read_fifo_addr[3]),
        .I1(bp_read_fifo_addr[2]),
        .I2(bp_read_fifo_addr[0]),
        .I3(bp_read_fifo_addr[1]),
        .O(\Use_FPGA.Almost_Empty_Inst_i_2__15_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(D),
        .Q(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair71" *) 
  LUT5 #(
    .INIT(32'hBAEF8A20)) 
    \Use_FPGA.Almost_Full_Inst_i_1__12 
       (.I0(queue_almost_full_next__3),
        .I1(bp_fifo_full),
        .I2(M0_AXI_BVALID),
        .I3(queue_pop112_out),
        .I4(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .O(D));
  LUT6 #(
    .INIT(64'hFFFFFFFF10000000)) 
    \Use_FPGA.Almost_Full_Inst_i_2__11 
       (.I0(bp_read_fifo_addr[0]),
        .I1(bp_read_fifo_addr[1]),
        .I2(bp_read_fifo_addr[3]),
        .I3(bp_read_fifo_addr[2]),
        .I4(M0_AXI_BVALID),
        .I5(bp_fifo_full),
        .O(queue_almost_full_next__3));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h9CAF635063506350)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop112_out),
        .I3(need_to_stall_write_reg),
        .I4(bp_read_fifo_addr[0]),
        .I5(1'b1),
        .O5(DI),
        .O6(LI));
  (* SOFT_HLUTNM = "soft_lutpair72" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst_i_2__4 
       (.I0(M0_AXI_BVALID),
        .I1(bp_fifo_full),
        .O(need_to_stall_write_reg));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_0),
        .Q(bp_read_fifo_addr[0]),
        .S(Q));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4 
       (.CI(1'b0),
        .CO({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED [3],carry_3,carry_2,CI}),
        .CYINIT(1'b0),
        .DI({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED [3],cnt_di_2,cnt_di_1,DI}),
        .O({read_fifo_addr_next_3,read_fifo_addr_next_2,read_fifo_addr_next_1,read_fifo_addr_next_0}),
        .S({cnt_s_3,cnt_s_2,cnt_s_1,LI}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[1].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop112_out),
        .I3(need_to_stall_write_reg),
        .I4(bp_read_fifo_addr[1]),
        .I5(1'b1),
        .O5(cnt_di_1),
        .O6(cnt_s_1));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_1),
        .Q(bp_read_fifo_addr[1]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[2].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop112_out),
        .I3(need_to_stall_write_reg),
        .I4(bp_read_fifo_addr[2]),
        .I5(1'b1),
        .O5(cnt_di_2),
        .O6(cnt_s_2));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_2),
        .Q(bp_read_fifo_addr[2]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[3].Active_Low.Last_Bit.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop112_out),
        .I3(need_to_stall_write_reg),
        .I4(bp_read_fifo_addr[3]),
        .I5(1'b1),
        .O(cnt_s_3));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_3),
        .Q(bp_read_fifo_addr[3]),
        .S(Q));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Empty_Inst_i_1__16_n_0 ),
        .Q(bp_fifo_empty),
        .S(Q));
  (* SOFT_HLUTNM = "soft_lutpair72" *) 
  LUT5 #(
    .INIT(32'hBACF8A00)) 
    \Use_FPGA.Empty_Inst_i_1__16 
       (.I0(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .I1(bp_fifo_full),
        .I2(M0_AXI_BVALID),
        .I3(queue_pop112_out),
        .I4(bp_fifo_empty),
        .O(\Use_FPGA.Empty_Inst_i_1__16_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Full_Inst_i_1__12_n_0 ),
        .Q(bp_fifo_full),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair71" *) 
  LUT4 #(
    .INIT(16'h00EC)) 
    \Use_FPGA.Full_Inst_i_1__12 
       (.I0(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .I1(bp_fifo_full),
        .I2(M0_AXI_BVALID),
        .I3(queue_pop112_out),
        .O(\Use_FPGA.Full_Inst_i_1__12_n_0 ));
  LUT3 #(
    .INIT(8'hDF)) 
    \Using_FPGA.MUXCY_I_i_1__105 
       (.I0(M0_AXI_BVALID),
        .I1(bp_fifo_full),
        .I2(pending_write_is_1),
        .O(S_1));
  LUT2 #(
    .INIT(4'hB)) 
    \Using_FPGA.MUXCY_I_i_1__158 
       (.I0(bp_fifo_full),
        .I1(M0_AXI_BVALID),
        .O(M_AXI_ARVALID_I_reg));
  LUT6 #(
    .INIT(64'h4444444B44444444)) 
    \pending_write[4]_i_1 
       (.I0(bp_fifo_full),
        .I1(M0_AXI_BVALID),
        .I2(need_to_stall_write_reg_0),
        .I3(aw_fifo_full),
        .I4(update_done_aw_reg),
        .I5(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .O(E));
  LUT6 #(
    .INIT(64'hFFFDFFFD0002FFFD)) 
    pending_write_is_1_i_4
       (.I0(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .I1(update_done_aw_reg),
        .I2(aw_fifo_full),
        .I3(need_to_stall_write_reg_0),
        .I4(M0_AXI_BVALID),
        .I5(bp_fifo_full),
        .O(pending_write_is_1_reg));
endmodule

(* ORIG_REF_NAME = "sc_srl_fifo_counter" *) 
module design_1_system_cache_0_0_sc_srl_fifo_counter__parameterized7_47
   (update_read_resize_selected_reg,
    update_evict_busy_reg,
    SS,
    queue_pop,
    update_evict_ongoing_reg,
    p_155_in,
    S,
    p_154_in,
    \Use_FPGA.Empty_Inst_0 ,
    update_read_resize_finish_reg,
    E,
    \update_read_data_info[0,1][Valid] ,
    \update_read_data_info[0,0][Valid] ,
    A17_out,
    D,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_0 ,
    ADDRBWRADDR,
    \Use_Reg_Ctrl.queue_exist_i_reg ,
    \update_rd_len_cnt_reg[0] ,
    A_N,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_1 ,
    \Use_Reg_Ctrl.queue_exist_i_reg_0 ,
    update_wm_pop_evict_hold_reg,
    Q,
    ACLK,
    queue_pop129_out,
    update_read_resize_selected_reg_0,
    \update_read_data_info[0,0][Last] ,
    ri_kind,
    update_read_resize_selected0,
    update_evict_busy,
    update_evict_last,
    ri_evicted,
    queue_pop134_out,
    \lu_check_info_reg[Kind] ,
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_0 ,
    wm_exist,
    update_wm_pop_normal,
    update_wm_pop_evict_hold,
    wm_evict,
    update_wm_pop_normal_hold_reg,
    wm_allocate_reg,
    wr_port_data_valid_i_reg,
    \Use_Reg_Ctrl.queue_exist_i_reg_1 ,
    wm_kind_reg,
    update_wr_miss_rs_last,
    update_wm_pop_normal_hold_reg_0,
    update_evict_ongoing_reg_0,
    Carry_IN,
    ri_evicted_reg,
    update_read_miss_ongoing_reg,
    M0_AXI_RVALID,
    ri_allocate_reg,
    wm_evict_reg,
    wm_will_use,
    update_word_cnt_last_reg,
    update_read_miss_ongoing_reg_0,
    \Use_FPGA.Empty_Inst_1 ,
    write_data_full,
    write_data_almost_full,
    write_data_full_d1,
    update_read_resize_finish_reg_0,
    ri_kind_reg,
    M0_AXI_RLAST,
    ri_port,
    ri_hot_port,
    ri_merge_reg,
    update_rm_alloc_ongoing_reg,
    \ri_addr_reg[13] ,
    update_word_cnt_first,
    \update_word_cnt_next_reg[5] ,
    A18_out,
    e_fifo_empty,
    \lud_reg_valid_one_hot_reg[1] ,
    \lud_reg_valid_one_hot_reg[0] ,
    out,
    \ri_way_reg[0] ,
    \update_way_reg[0] );
  output update_read_resize_selected_reg;
  output update_evict_busy_reg;
  output [0:0]SS;
  output queue_pop;
  output update_evict_ongoing_reg;
  output p_155_in;
  output S;
  output p_154_in;
  output \Use_FPGA.Empty_Inst_0 ;
  output update_read_resize_finish_reg;
  output [0:0]E;
  output \update_read_data_info[0,1][Valid] ;
  output \update_read_data_info[0,0][Valid] ;
  output A17_out;
  output [3:0]D;
  output \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 ;
  output \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_0 ;
  output [9:0]ADDRBWRADDR;
  output \Use_Reg_Ctrl.queue_exist_i_reg ;
  output [0:0]\update_rd_len_cnt_reg[0] ;
  output A_N;
  output \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_1 ;
  output [0:0]\Use_Reg_Ctrl.queue_exist_i_reg_0 ;
  output update_wm_pop_evict_hold_reg;
  input Q;
  input ACLK;
  input queue_pop129_out;
  input update_read_resize_selected_reg_0;
  input \update_read_data_info[0,0][Last] ;
  input ri_kind;
  input update_read_resize_selected0;
  input update_evict_busy;
  input update_evict_last;
  input ri_evicted;
  input queue_pop134_out;
  input \lu_check_info_reg[Kind] ;
  input \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_0 ;
  input wm_exist;
  input update_wm_pop_normal;
  input update_wm_pop_evict_hold;
  input wm_evict;
  input update_wm_pop_normal_hold_reg;
  input wm_allocate_reg;
  input wr_port_data_valid_i_reg;
  input \Use_Reg_Ctrl.queue_exist_i_reg_1 ;
  input wm_kind_reg;
  input update_wr_miss_rs_last;
  input update_wm_pop_normal_hold_reg_0;
  input update_evict_ongoing_reg_0;
  input Carry_IN;
  input ri_evicted_reg;
  input update_read_miss_ongoing_reg;
  input M0_AXI_RVALID;
  input ri_allocate_reg;
  input wm_evict_reg;
  input wm_will_use;
  input update_word_cnt_last_reg;
  input update_read_miss_ongoing_reg_0;
  input \Use_FPGA.Empty_Inst_1 ;
  input write_data_full;
  input write_data_almost_full;
  input write_data_full_d1;
  input update_read_resize_finish_reg_0;
  input ri_kind_reg;
  input M0_AXI_RLAST;
  input ri_port;
  input [0:0]ri_hot_port;
  input ri_merge_reg;
  input update_rm_alloc_ongoing_reg;
  input [11:0]\ri_addr_reg[13] ;
  input update_word_cnt_first;
  input [3:0]\update_word_cnt_next_reg[5] ;
  input A18_out;
  input e_fifo_empty;
  input \lud_reg_valid_one_hot_reg[1] ;
  input \lud_reg_valid_one_hot_reg[0] ;
  input [7:0]out;
  input \ri_way_reg[0] ;
  input \update_way_reg[0] ;

  wire A17_out;
  wire A18_out;
  wire ACLK;
  wire [9:0]ADDRBWRADDR;
  wire A_N;
  wire CI;
  wire Carry_IN;
  wire [3:0]D;
  wire DI;
  wire [0:0]E;
  wire LI;
  wire M0_AXI_RLAST;
  wire M0_AXI_RVALID;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_0 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_1 ;
  wire Q;
  wire S;
  wire [0:0]SS;
  wire \Use_FPGA.Almost_Empty_Inst_i_1__10_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_i_2__10_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_n_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_n_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst_n_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst_n_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst_n_0 ;
  wire \Use_FPGA.Empty_Inst_0 ;
  wire \Use_FPGA.Empty_Inst_1 ;
  wire \Use_FPGA.Empty_Inst_i_1__10_n_0 ;
  wire \Use_Reg_Ctrl.queue_exist_i_i_3_n_0 ;
  wire \Use_Reg_Ctrl.queue_exist_i_i_4_n_0 ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg ;
  wire [0:0]\Use_Reg_Ctrl.queue_exist_i_reg_0 ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg_1 ;
  wire \Using_FPGA.AND2B1L_Inst1_i_2_n_0 ;
  wire carry_2;
  wire carry_3;
  wire cnt_di_1;
  wire cnt_di_2;
  wire cnt_s_1;
  wire cnt_s_2;
  wire cnt_s_3;
  wire e_fifo_empty;
  wire ed_fifo_empty;
  wire \lu_check_info_reg[Kind] ;
  wire \lud_reg_valid_one_hot_reg[0] ;
  wire \lud_reg_valid_one_hot_reg[1] ;
  wire [7:0]out;
  wire p_108_in;
  wire p_154_in;
  wire p_155_in;
  wire queue_pop;
  wire queue_pop129_out;
  wire queue_pop134_out;
  wire queue_push131_out;
  wire read_fifo_addr_next_0;
  wire read_fifo_addr_next_1;
  wire read_fifo_addr_next_2;
  wire read_fifo_addr_next_3;
  wire [11:0]\ri_addr_reg[13] ;
  wire ri_allocate_reg;
  wire ri_evicted;
  wire ri_evicted_reg;
  wire [0:0]ri_hot_port;
  wire ri_kind;
  wire ri_kind_reg;
  wire ri_merge_reg;
  wire ri_port;
  wire \ri_way_reg[0] ;
  wire update_evict_busy;
  wire update_evict_busy_reg;
  wire update_evict_last;
  wire update_evict_ongoing88_out;
  wire update_evict_ongoing_i_3_n_0;
  wire update_evict_ongoing_reg;
  wire update_evict_ongoing_reg_0;
  wire update_evict_valid_i_4_n_0;
  wire update_evict_valid_i_5_n_0;
  wire [0:0]\update_rd_len_cnt_reg[0] ;
  wire \update_read_data_info[0,0][Last] ;
  wire \update_read_data_info[0,0][Valid] ;
  wire \update_read_data_info[0,1][Valid] ;
  wire update_read_miss_ongoing_reg;
  wire update_read_miss_ongoing_reg_0;
  wire update_read_resize_finish_reg;
  wire update_read_resize_finish_reg_0;
  wire update_read_resize_selected0;
  wire update_read_resize_selected1;
  wire update_read_resize_selected_i_4_n_0;
  wire update_read_resize_selected_reg;
  wire update_read_resize_selected_reg_0;
  wire update_rm_alloc_ongoing_reg;
  wire \update_way_reg[0] ;
  wire update_wm_pop_evict;
  wire update_wm_pop_evict_hold;
  wire update_wm_pop_evict_hold_reg;
  wire update_wm_pop_normal;
  wire update_wm_pop_normal_hold_reg;
  wire update_wm_pop_normal_hold_reg_0;
  wire update_word_cnt_first;
  wire update_word_cnt_last_reg;
  wire [3:0]\update_word_cnt_next_reg[5] ;
  wire update_wr_miss_rs_last;
  wire wm_allocate_reg;
  wire wm_evict;
  wire wm_evict_reg;
  wire wm_exist;
  wire wm_kind_reg;
  wire wm_will_use;
  wire wr_port_data_valid_i_reg;
  wire write_data_almost_full;
  wire write_data_full;
  wire write_data_full_d1;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED ;

  LUT4 #(
    .INIT(16'hFD20)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_13__0 
       (.I0(\Using_FPGA.AND2B1L_Inst1_i_2_n_0 ),
        .I1(update_evict_ongoing_reg_0),
        .I2(\ri_addr_reg[13] [11]),
        .I3(out[7]),
        .O(ADDRBWRADDR[9]));
  LUT4 #(
    .INIT(16'hFD20)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_14__0 
       (.I0(\Using_FPGA.AND2B1L_Inst1_i_2_n_0 ),
        .I1(update_evict_ongoing_reg_0),
        .I2(\ri_addr_reg[13] [10]),
        .I3(out[6]),
        .O(ADDRBWRADDR[8]));
  LUT4 #(
    .INIT(16'hFD20)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_15__0 
       (.I0(\Using_FPGA.AND2B1L_Inst1_i_2_n_0 ),
        .I1(update_evict_ongoing_reg_0),
        .I2(\ri_addr_reg[13] [9]),
        .I3(out[5]),
        .O(ADDRBWRADDR[7]));
  LUT4 #(
    .INIT(16'hFD20)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_16__0 
       (.I0(\Using_FPGA.AND2B1L_Inst1_i_2_n_0 ),
        .I1(update_evict_ongoing_reg_0),
        .I2(\ri_addr_reg[13] [8]),
        .I3(out[4]),
        .O(ADDRBWRADDR[6]));
  LUT4 #(
    .INIT(16'hFD20)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_17__0 
       (.I0(\Using_FPGA.AND2B1L_Inst1_i_2_n_0 ),
        .I1(update_evict_ongoing_reg_0),
        .I2(\ri_addr_reg[13] [7]),
        .I3(out[3]),
        .O(ADDRBWRADDR[5]));
  LUT4 #(
    .INIT(16'hFD20)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_18__0 
       (.I0(\Using_FPGA.AND2B1L_Inst1_i_2_n_0 ),
        .I1(update_evict_ongoing_reg_0),
        .I2(\ri_addr_reg[13] [6]),
        .I3(out[2]),
        .O(ADDRBWRADDR[4]));
  LUT4 #(
    .INIT(16'hFD20)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_19__0 
       (.I0(\Using_FPGA.AND2B1L_Inst1_i_2_n_0 ),
        .I1(update_evict_ongoing_reg_0),
        .I2(\ri_addr_reg[13] [5]),
        .I3(out[1]),
        .O(ADDRBWRADDR[3]));
  LUT4 #(
    .INIT(16'hFD20)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_20__0 
       (.I0(\Using_FPGA.AND2B1L_Inst1_i_2_n_0 ),
        .I1(update_evict_ongoing_reg_0),
        .I2(\ri_addr_reg[13] [4]),
        .I3(out[0]),
        .O(ADDRBWRADDR[2]));
  LUT4 #(
    .INIT(16'h8F80)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_21 
       (.I0(\Using_FPGA.AND2B1L_Inst1_i_2_n_0 ),
        .I1(\ri_addr_reg[13] [3]),
        .I2(update_word_cnt_first),
        .I3(\update_word_cnt_next_reg[5] [3]),
        .O(ADDRBWRADDR[1]));
  LUT4 #(
    .INIT(16'h8F80)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_22 
       (.I0(\Using_FPGA.AND2B1L_Inst1_i_2_n_0 ),
        .I1(\ri_addr_reg[13] [2]),
        .I2(update_word_cnt_first),
        .I3(\update_word_cnt_next_reg[5] [2]),
        .O(ADDRBWRADDR[0]));
  LUT4 #(
    .INIT(16'h8F80)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_23 
       (.I0(\Using_FPGA.AND2B1L_Inst1_i_2_n_0 ),
        .I1(\ri_addr_reg[13] [1]),
        .I2(update_word_cnt_first),
        .I3(\update_word_cnt_next_reg[5] [1]),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_0 ));
  LUT4 #(
    .INIT(16'h8F80)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_24 
       (.I0(\Using_FPGA.AND2B1L_Inst1_i_2_n_0 ),
        .I1(\ri_addr_reg[13] [0]),
        .I2(update_word_cnt_first),
        .I3(\update_word_cnt_next_reg[5] [0]),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Almost_Empty_Inst_i_1__10_n_0 ),
        .Q(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .R(Q));
  LUT6 #(
    .INIT(64'hFCAFAFAF0CA0A0A0)) 
    \Use_FPGA.Almost_Empty_Inst_i_1__10 
       (.I0(ed_fifo_empty),
        .I1(\Use_FPGA.Almost_Empty_Inst_i_2__10_n_0 ),
        .I2(queue_push131_out),
        .I3(ri_evicted),
        .I4(queue_pop134_out),
        .I5(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .O(\Use_FPGA.Almost_Empty_Inst_i_1__10_n_0 ));
  LUT4 #(
    .INIT(16'h0010)) 
    \Use_FPGA.Almost_Empty_Inst_i_2__10 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst_n_0 ),
        .I1(\Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst_n_0 ),
        .I2(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_n_0 ),
        .I3(\Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst_n_0 ),
        .O(\Use_FPGA.Almost_Empty_Inst_i_2__10_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h9CAF635063506350)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop129_out),
        .I3(queue_push131_out),
        .I4(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_n_0 ),
        .I5(1'b1),
        .O5(DI),
        .O6(LI));
  LUT2 #(
    .INIT(4'h2)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst_i_1__11 
       (.I0(p_155_in),
        .I1(e_fifo_empty),
        .O(\Use_FPGA.Empty_Inst_0 ));
  LUT3 #(
    .INIT(8'h80)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst_i_2__2 
       (.I0(wm_will_use),
        .I1(wm_evict),
        .I2(\Use_FPGA.Empty_Inst_0 ),
        .O(queue_push131_out));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_0),
        .Q(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_n_0 ),
        .S(Q));
  LUT6 #(
    .INIT(64'hFAFFC8CCFEFFEEEE)) 
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_1 
       (.I0(update_wm_pop_evict),
        .I1(update_wm_pop_normal),
        .I2(update_wm_pop_evict_hold),
        .I3(wm_evict),
        .I4(update_wm_pop_normal_hold_reg),
        .I5(wm_allocate_reg),
        .O(queue_pop));
  (* SOFT_HLUTNM = "soft_lutpair74" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_3 
       (.I0(update_word_cnt_last_reg),
        .I1(update_evict_ongoing_reg_0),
        .I2(p_154_in),
        .I3(wm_exist),
        .O(update_wm_pop_evict));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4 
       (.CI(1'b0),
        .CO({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED [3],carry_3,carry_2,CI}),
        .CYINIT(1'b0),
        .DI({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED [3],cnt_di_2,cnt_di_1,DI}),
        .O({read_fifo_addr_next_3,read_fifo_addr_next_2,read_fifo_addr_next_1,read_fifo_addr_next_0}),
        .S({cnt_s_3,cnt_s_2,cnt_s_1,LI}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[1].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop129_out),
        .I3(queue_push131_out),
        .I4(\Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst_n_0 ),
        .I5(1'b1),
        .O5(cnt_di_1),
        .O6(cnt_s_1));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_1),
        .Q(\Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst_n_0 ),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[2].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop129_out),
        .I3(queue_push131_out),
        .I4(\Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst_n_0 ),
        .I5(1'b1),
        .O5(cnt_di_2),
        .O6(cnt_s_2));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_2),
        .Q(\Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst_n_0 ),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[3].Active_Low.Last_Bit.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop129_out),
        .I3(queue_push131_out),
        .I4(\Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst_n_0 ),
        .I5(1'b1),
        .O(cnt_s_3));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_3),
        .Q(\Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst_n_0 ),
        .S(Q));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Empty_Inst_i_1__10_n_0 ),
        .Q(ed_fifo_empty),
        .S(Q));
  LUT5 #(
    .INIT(32'hE3332000)) 
    \Use_FPGA.Empty_Inst_i_1__10 
       (.I0(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .I1(queue_push131_out),
        .I2(ri_evicted),
        .I3(queue_pop134_out),
        .I4(ed_fifo_empty),
        .O(\Use_FPGA.Empty_Inst_i_1__10_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair77" *) 
  LUT4 #(
    .INIT(16'h4000)) 
    \Use_FPGA_1.LUT_Refresh_Inst_i_1 
       (.I0(update_read_resize_finish_reg_0),
        .I1(update_read_resize_selected_reg_0),
        .I2(p_108_in),
        .I3(ri_port),
        .O(\update_read_data_info[0,1][Valid] ));
  (* SOFT_HLUTNM = "soft_lutpair77" *) 
  LUT4 #(
    .INIT(16'h4000)) 
    \Use_FPGA_1.LUT_Refresh_Inst_i_1__0 
       (.I0(update_read_resize_finish_reg_0),
        .I1(update_read_resize_selected_reg_0),
        .I2(p_108_in),
        .I3(ri_hot_port),
        .O(\update_read_data_info[0,0][Valid] ));
  LUT6 #(
    .INIT(64'h0444000000000000)) 
    \Use_FPGA_1.LUT_Refresh_Inst_i_2 
       (.I0(ri_merge_reg),
        .I1(M0_AXI_RVALID),
        .I2(ri_allocate_reg),
        .I3(update_evict_ongoing_reg_0),
        .I4(update_rm_alloc_ongoing_reg),
        .I5(A17_out),
        .O(p_108_in));
  LUT3 #(
    .INIT(8'hBF)) 
    \Use_FPGA_1.LUT_Refresh_Inst_i_4 
       (.I0(update_read_miss_ongoing_reg),
        .I1(ri_evicted),
        .I2(ed_fifo_empty),
        .O(A17_out));
  LUT6 #(
    .INIT(64'hF000B000FFFFFFFF)) 
    \Use_Reg_Ctrl.queue_exist_i_i_1__5 
       (.I0(update_wm_pop_normal_hold_reg),
        .I1(wm_allocate_reg),
        .I2(\Use_Reg_Ctrl.queue_exist_i_i_3_n_0 ),
        .I3(\Use_Reg_Ctrl.queue_exist_i_i_4_n_0 ),
        .I4(update_wm_pop_normal),
        .I5(wm_exist),
        .O(\Use_Reg_Ctrl.queue_exist_i_reg_0 ));
  LUT5 #(
    .INIT(32'hFFDFDFDF)) 
    \Use_Reg_Ctrl.queue_exist_i_i_3 
       (.I0(wm_evict),
        .I1(update_wm_pop_evict_hold),
        .I2(wm_allocate_reg),
        .I3(p_155_in),
        .I4(wm_exist),
        .O(\Use_Reg_Ctrl.queue_exist_i_i_3_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFFEAAAAAAA)) 
    \Use_Reg_Ctrl.queue_exist_i_i_4 
       (.I0(update_wm_pop_evict),
        .I1(wr_port_data_valid_i_reg),
        .I2(\Use_Reg_Ctrl.queue_exist_i_reg_1 ),
        .I3(wm_kind_reg),
        .I4(update_wr_miss_rs_last),
        .I5(update_wm_pop_normal_hold_reg_0),
        .O(\Use_Reg_Ctrl.queue_exist_i_i_4_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair75" *) 
  LUT4 #(
    .INIT(16'hFD20)) 
    \Using_FPGA.AND2B1L_Inst1_i_1__8 
       (.I0(\Using_FPGA.AND2B1L_Inst1_i_2_n_0 ),
        .I1(update_evict_ongoing_reg_0),
        .I2(\ri_way_reg[0] ),
        .I3(\update_way_reg[0] ),
        .O(A_N));
  (* SOFT_HLUTNM = "soft_lutpair75" *) 
  LUT4 #(
    .INIT(16'h0D2F)) 
    \Using_FPGA.AND2B1L_Inst1_i_1__9 
       (.I0(\Using_FPGA.AND2B1L_Inst1_i_2_n_0 ),
        .I1(update_evict_ongoing_reg_0),
        .I2(\update_way_reg[0] ),
        .I3(\ri_way_reg[0] ),
        .O(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_1 ));
  LUT6 #(
    .INIT(64'hF700000000000000)) 
    \Using_FPGA.AND2B1L_Inst1_i_2 
       (.I0(ed_fifo_empty),
        .I1(ri_evicted),
        .I2(update_read_miss_ongoing_reg),
        .I3(M0_AXI_RVALID),
        .I4(ri_allocate_reg),
        .I5(A18_out),
        .O(\Using_FPGA.AND2B1L_Inst1_i_2_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \Using_FPGA.MUXCY_I_i_1__20 
       (.I0(p_154_in),
        .O(S));
  LUT3 #(
    .INIT(8'hBF)) 
    \Using_FPGA.MUXCY_I_i_1__48 
       (.I0(update_read_miss_ongoing_reg),
        .I1(ri_evicted),
        .I2(ed_fifo_empty),
        .O(\Use_Reg_Ctrl.queue_exist_i_reg ));
  LUT4 #(
    .INIT(16'hF0F2)) 
    update_evict_busy_i_1
       (.I0(update_evict_busy),
        .I1(Q),
        .I2(update_evict_ongoing88_out),
        .I3(update_evict_last),
        .O(update_evict_busy_reg));
  (* SOFT_HLUTNM = "soft_lutpair74" *) 
  LUT3 #(
    .INIT(8'h80)) 
    update_evict_last_i_1
       (.I0(p_154_in),
        .I1(update_evict_ongoing_reg_0),
        .I2(update_word_cnt_last_reg),
        .O(p_155_in));
  LUT5 #(
    .INIT(32'h00000EEE)) 
    update_evict_ongoing_i_1
       (.I0(update_evict_ongoing_reg_0),
        .I1(update_evict_ongoing88_out),
        .I2(Carry_IN),
        .I3(p_155_in),
        .I4(Q),
        .O(update_evict_ongoing_reg));
  LUT5 #(
    .INIT(32'h888AAAAA)) 
    update_evict_ongoing_i_2
       (.I0(update_evict_ongoing_i_3_n_0),
        .I1(ri_evicted_reg),
        .I2(update_read_miss_ongoing_reg),
        .I3(M0_AXI_RVALID),
        .I4(ri_allocate_reg),
        .O(update_evict_ongoing88_out));
  LUT6 #(
    .INIT(64'h4555000000000000)) 
    update_evict_ongoing_i_3
       (.I0(update_wm_pop_evict_hold),
        .I1(ed_fifo_empty),
        .I2(ri_evicted),
        .I3(M0_AXI_RVALID),
        .I4(Carry_IN),
        .I5(wm_evict_reg),
        .O(update_evict_ongoing_i_3_n_0));
  LUT6 #(
    .INIT(64'h0000000000000054)) 
    update_evict_valid_i_1
       (.I0(update_read_miss_ongoing_reg_0),
        .I1(\Use_FPGA.Empty_Inst_1 ),
        .I2(update_evict_valid_i_4_n_0),
        .I3(update_evict_valid_i_5_n_0),
        .I4(update_wm_pop_evict_hold),
        .I5(write_data_full),
        .O(p_154_in));
  LUT6 #(
    .INIT(64'hFFFF7555FFFFFFFF)) 
    update_evict_valid_i_4
       (.I0(M0_AXI_RVALID),
        .I1(update_read_miss_ongoing_reg),
        .I2(ri_evicted),
        .I3(ed_fifo_empty),
        .I4(update_evict_ongoing_reg_0),
        .I5(ri_allocate_reg),
        .O(update_evict_valid_i_4_n_0));
  LUT6 #(
    .INIT(64'h222222222F222222)) 
    update_evict_valid_i_5
       (.I0(write_data_almost_full),
        .I1(write_data_full_d1),
        .I2(ed_fifo_empty),
        .I3(ri_evicted),
        .I4(M0_AXI_RVALID),
        .I5(update_evict_ongoing_reg_0),
        .O(update_evict_valid_i_5_n_0));
  LUT6 #(
    .INIT(64'hA8AAA88800000000)) 
    \update_rd_len_cnt[7]_i_1 
       (.I0(update_read_resize_selected_reg_0),
        .I1(update_read_resize_finish_reg_0),
        .I2(\lud_reg_valid_one_hot_reg[1] ),
        .I3(ri_port),
        .I4(\lud_reg_valid_one_hot_reg[0] ),
        .I5(p_108_in),
        .O(\update_rd_len_cnt_reg[0] ));
  LUT5 #(
    .INIT(32'h00000AEA)) 
    update_read_resize_finish_i_1
       (.I0(update_read_resize_finish_reg_0),
        .I1(ri_kind_reg),
        .I2(E),
        .I3(M0_AXI_RLAST),
        .I4(Q),
        .O(update_read_resize_finish_reg));
  LUT6 #(
    .INIT(64'hFDFFFDDD00000000)) 
    update_read_resize_first_i_1
       (.I0(update_read_resize_selected_reg_0),
        .I1(update_read_resize_finish_reg_0),
        .I2(\lud_reg_valid_one_hot_reg[1] ),
        .I3(ri_port),
        .I4(\lud_reg_valid_one_hot_reg[0] ),
        .I5(p_108_in),
        .O(E));
  LUT6 #(
    .INIT(64'hFFFFFFFFEE2A222A)) 
    update_read_resize_selected_i_1
       (.I0(update_read_resize_selected_reg_0),
        .I1(update_read_resize_selected1),
        .I2(\update_read_data_info[0,0][Last] ),
        .I3(ri_kind),
        .I4(update_read_resize_selected0),
        .I5(update_read_resize_selected_i_4_n_0),
        .O(update_read_resize_selected_reg));
  LUT6 #(
    .INIT(64'hFDFFFDDD00000000)) 
    update_read_resize_selected_i_2
       (.I0(update_read_resize_selected_reg_0),
        .I1(update_read_resize_finish_reg_0),
        .I2(\lud_reg_valid_one_hot_reg[1] ),
        .I3(ri_port),
        .I4(\lud_reg_valid_one_hot_reg[0] ),
        .I5(p_108_in),
        .O(update_read_resize_selected1));
  LUT4 #(
    .INIT(16'hAEAA)) 
    update_read_resize_selected_i_4
       (.I0(Q),
        .I1(M0_AXI_RLAST),
        .I2(ri_kind),
        .I3(update_read_resize_selected1),
        .O(update_read_resize_selected_i_4_n_0));
  LUT5 #(
    .INIT(32'h000000EA)) 
    update_wm_pop_evict_hold_i_1
       (.I0(update_wm_pop_evict_hold),
        .I1(p_155_in),
        .I2(wm_exist),
        .I3(queue_pop),
        .I4(Q),
        .O(update_wm_pop_evict_hold_reg));
  (* SOFT_HLUTNM = "soft_lutpair78" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \update_word_cnt_next[2]_i_1 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 ),
        .O(D[0]));
  (* SOFT_HLUTNM = "soft_lutpair78" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \update_word_cnt_next[3]_i_1 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_0 ),
        .O(D[1]));
  (* SOFT_HLUTNM = "soft_lutpair76" *) 
  LUT3 #(
    .INIT(8'h78)) 
    \update_word_cnt_next[4]_i_1 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_0 ),
        .I2(ADDRBWRADDR[0]),
        .O(D[2]));
  (* SOFT_HLUTNM = "soft_lutpair76" *) 
  LUT4 #(
    .INIT(16'h7F80)) 
    \update_word_cnt_next[5]_i_1 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_0 ),
        .I1(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 ),
        .I2(ADDRBWRADDR[0]),
        .I3(ADDRBWRADDR[1]),
        .O(D[3]));
  LUT5 #(
    .INIT(32'hEFAAEFEF)) 
    \wm_remove_unaligned[5]_i_1 
       (.I0(Q),
        .I1(\lu_check_info_reg[Kind] ),
        .I2(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_0 ),
        .I3(queue_pop),
        .I4(wm_exist),
        .O(SS));
endmodule

(* ORIG_REF_NAME = "sc_srl_fifo_counter" *) 
module design_1_system_cache_0_0_sc_srl_fifo_counter__parameterized7_48
   (\Use_FPGA.Almost_Full_Inst_0 ,
    e_fifo_empty,
    e_read_fifo_addr,
    queue_push125_out,
    S,
    update_evict_valid_reg,
    Q,
    ACLK,
    \Use_FPGA.Empty_Inst_0 ,
    update_done_evict_reg,
    \write_req_info[0][Internal] ,
    update_read_miss_ongoing_reg,
    wm_exist,
    wm_evict);
  output \Use_FPGA.Almost_Full_Inst_0 ;
  output e_fifo_empty;
  output [3:0]e_read_fifo_addr;
  output queue_push125_out;
  output S;
  output update_evict_valid_reg;
  input Q;
  input ACLK;
  input \Use_FPGA.Empty_Inst_0 ;
  input update_done_evict_reg;
  input \write_req_info[0][Internal] ;
  input update_read_miss_ongoing_reg;
  input wm_exist;
  input wm_evict;

  wire ACLK;
  wire CI;
  wire D;
  wire DI;
  wire LI;
  wire Q;
  wire S;
  wire \Use_FPGA.Almost_Empty_Inst_i_1__9_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_i_2__9_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_n_0 ;
  wire \Use_FPGA.Almost_Full_Inst_0 ;
  wire \Use_FPGA.Almost_Full_Inst_i_2__7_n_0 ;
  wire \Use_FPGA.Almost_Full_Inst_n_0 ;
  wire \Use_FPGA.Empty_Inst_0 ;
  wire \Use_FPGA.Empty_Inst_i_1__9_n_0 ;
  wire \Use_FPGA.Full_Inst_i_1__7_n_0 ;
  wire carry_2;
  wire carry_3;
  wire cnt_di_1;
  wire cnt_di_2;
  wire cnt_s_1;
  wire cnt_s_2;
  wire cnt_s_3;
  wire e_fifo_empty;
  wire [3:0]e_read_fifo_addr;
  wire queue_push125_out;
  wire read_fifo_addr_next_0;
  wire read_fifo_addr_next_1;
  wire read_fifo_addr_next_2;
  wire read_fifo_addr_next_3;
  wire update_done_evict_reg;
  wire update_evict_valid_reg;
  wire update_read_miss_ongoing_reg;
  wire wm_evict;
  wire wm_exist;
  wire \write_req_info[0][Internal] ;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED ;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Almost_Empty_Inst_i_1__9_n_0 ),
        .Q(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .R(Q));
  LUT5 #(
    .INIT(32'hFCAF0CA0)) 
    \Use_FPGA.Almost_Empty_Inst_i_1__9 
       (.I0(e_fifo_empty),
        .I1(\Use_FPGA.Almost_Empty_Inst_i_2__9_n_0 ),
        .I2(queue_push125_out),
        .I3(\Use_FPGA.Empty_Inst_0 ),
        .I4(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .O(\Use_FPGA.Almost_Empty_Inst_i_1__9_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair80" *) 
  LUT4 #(
    .INIT(16'h0010)) 
    \Use_FPGA.Almost_Empty_Inst_i_2__9 
       (.I0(e_read_fifo_addr[3]),
        .I1(e_read_fifo_addr[2]),
        .I2(e_read_fifo_addr[0]),
        .I3(e_read_fifo_addr[1]),
        .O(\Use_FPGA.Almost_Empty_Inst_i_2__9_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(D),
        .Q(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .R(Q));
  LUT6 #(
    .INIT(64'hF3F0FEFFF0F00200)) 
    \Use_FPGA.Almost_Full_Inst_i_1__7 
       (.I0(\Use_FPGA.Almost_Full_Inst_i_2__7_n_0 ),
        .I1(update_done_evict_reg),
        .I2(\Use_FPGA.Almost_Full_Inst_0 ),
        .I3(\write_req_info[0][Internal] ),
        .I4(\Use_FPGA.Empty_Inst_0 ),
        .I5(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .O(D));
  (* SOFT_HLUTNM = "soft_lutpair80" *) 
  LUT4 #(
    .INIT(16'h1000)) 
    \Use_FPGA.Almost_Full_Inst_i_2__7 
       (.I0(e_read_fifo_addr[0]),
        .I1(e_read_fifo_addr[1]),
        .I2(e_read_fifo_addr[3]),
        .I3(e_read_fifo_addr[2]),
        .O(\Use_FPGA.Almost_Full_Inst_i_2__7_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h9CAF635063506350)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(\Use_FPGA.Empty_Inst_0 ),
        .I3(queue_push125_out),
        .I4(e_read_fifo_addr[0]),
        .I5(1'b1),
        .O5(DI),
        .O6(LI));
  (* SOFT_HLUTNM = "soft_lutpair79" *) 
  LUT3 #(
    .INIT(8'h02)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst_i_2__3 
       (.I0(\write_req_info[0][Internal] ),
        .I1(\Use_FPGA.Almost_Full_Inst_0 ),
        .I2(update_done_evict_reg),
        .O(queue_push125_out));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_0),
        .Q(e_read_fifo_addr[0]),
        .S(Q));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4 
       (.CI(1'b0),
        .CO({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED [3],carry_3,carry_2,CI}),
        .CYINIT(1'b0),
        .DI({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED [3],cnt_di_2,cnt_di_1,DI}),
        .O({read_fifo_addr_next_3,read_fifo_addr_next_2,read_fifo_addr_next_1,read_fifo_addr_next_0}),
        .S({cnt_s_3,cnt_s_2,cnt_s_1,LI}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[1].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(\Use_FPGA.Empty_Inst_0 ),
        .I3(queue_push125_out),
        .I4(e_read_fifo_addr[1]),
        .I5(1'b1),
        .O5(cnt_di_1),
        .O6(cnt_s_1));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_1),
        .Q(e_read_fifo_addr[1]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[2].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(\Use_FPGA.Empty_Inst_0 ),
        .I3(queue_push125_out),
        .I4(e_read_fifo_addr[2]),
        .I5(1'b1),
        .O5(cnt_di_2),
        .O6(cnt_s_2));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_2),
        .Q(e_read_fifo_addr[2]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[3].Active_Low.Last_Bit.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(\Use_FPGA.Empty_Inst_0 ),
        .I3(queue_push125_out),
        .I4(e_read_fifo_addr[3]),
        .I5(1'b1),
        .O(cnt_s_3));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_3),
        .Q(e_read_fifo_addr[3]),
        .S(Q));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Empty_Inst_i_1__9_n_0 ),
        .Q(e_fifo_empty),
        .S(Q));
  LUT6 #(
    .INIT(64'hABAAFCFFA8AA0000)) 
    \Use_FPGA.Empty_Inst_i_1__9 
       (.I0(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .I1(update_done_evict_reg),
        .I2(\Use_FPGA.Almost_Full_Inst_0 ),
        .I3(\write_req_info[0][Internal] ),
        .I4(\Use_FPGA.Empty_Inst_0 ),
        .I5(e_fifo_empty),
        .O(\Use_FPGA.Empty_Inst_i_1__9_n_0 ));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Full_Inst_i_1__7_n_0 ),
        .Q(\Use_FPGA.Almost_Full_Inst_0 ),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair79" *) 
  LUT5 #(
    .INIT(32'h0000F2F0)) 
    \Use_FPGA.Full_Inst_i_1__7 
       (.I0(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .I1(update_done_evict_reg),
        .I2(\Use_FPGA.Almost_Full_Inst_0 ),
        .I3(\write_req_info[0][Internal] ),
        .I4(\Use_FPGA.Empty_Inst_0 ),
        .O(\Use_FPGA.Full_Inst_i_1__7_n_0 ));
  LUT3 #(
    .INIT(8'hBF)) 
    \Using_FPGA.MUXCY_I_i_1__31 
       (.I0(update_done_evict_reg),
        .I1(\write_req_info[0][Internal] ),
        .I2(\Use_FPGA.Almost_Full_Inst_0 ),
        .O(S));
  LUT4 #(
    .INIT(16'hEFFF)) 
    update_evict_valid_i_2
       (.I0(update_read_miss_ongoing_reg),
        .I1(e_fifo_empty),
        .I2(wm_exist),
        .I3(wm_evict),
        .O(update_evict_valid_reg));
endmodule

(* ORIG_REF_NAME = "sc_srl_fifo_counter" *) 
module design_1_system_cache_0_0_sc_srl_fifo_counter__parameterized7_50
   (wmad_fifo_empty,
    p_107_in,
    \update_wr_offset_cnt_reg[0] ,
    \update_wr_offset_cnt_reg[0]_0 ,
    \update_wr_offset_cnt_reg[0]_1 ,
    \update_wr_offset_cnt_reg[0]_2 ,
    \update_wr_offset_cnt_reg[0]_3 ,
    \update_wr_offset_cnt_reg[0]_4 ,
    \update_wr_offset_cnt_reg[0]_5 ,
    Q,
    ACLK,
    queue_pop116_out,
    queue_push118_out,
    \bs_src_reg[1] ,
    bp_fifo_empty,
    bs_exist,
    \wm_offset_reg[5] ,
    update_write_miss_ongoing,
    \update_wr_offset_cnt_reg[5] ,
    \wm_use_bits_reg[5] ,
    wm_local_wrap,
    wm_kind);
  output wmad_fifo_empty;
  output p_107_in;
  output \update_wr_offset_cnt_reg[0] ;
  output \update_wr_offset_cnt_reg[0]_0 ;
  output \update_wr_offset_cnt_reg[0]_1 ;
  output \update_wr_offset_cnt_reg[0]_2 ;
  output \update_wr_offset_cnt_reg[0]_3 ;
  output \update_wr_offset_cnt_reg[0]_4 ;
  output \update_wr_offset_cnt_reg[0]_5 ;
  input Q;
  input ACLK;
  input queue_pop116_out;
  input queue_push118_out;
  input [1:0]\bs_src_reg[1] ;
  input bp_fifo_empty;
  input bs_exist;
  input [5:0]\wm_offset_reg[5] ;
  input update_write_miss_ongoing;
  input [5:0]\update_wr_offset_cnt_reg[5] ;
  input [5:0]\wm_use_bits_reg[5] ;
  input wm_local_wrap;
  input wm_kind;

  wire ACLK;
  wire CI;
  wire DI;
  wire LI;
  wire Q;
  wire \Use_FPGA.Almost_Empty_Inst_i_1__13_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_i_2__12_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_n_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_n_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst_n_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst_n_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst_n_0 ;
  wire \Use_FPGA.Empty_Inst_i_1__13_n_0 ;
  wire bp_fifo_empty;
  wire bs_exist;
  wire [1:0]\bs_src_reg[1] ;
  wire carry_2;
  wire carry_3;
  wire cnt_di_1;
  wire cnt_di_2;
  wire cnt_s_1;
  wire cnt_s_2;
  wire cnt_s_3;
  wire p_107_in;
  wire queue_pop116_out;
  wire queue_push118_out;
  wire read_fifo_addr_next_0;
  wire read_fifo_addr_next_1;
  wire read_fifo_addr_next_2;
  wire read_fifo_addr_next_3;
  wire \update_wr_offset_cnt_reg[0] ;
  wire \update_wr_offset_cnt_reg[0]_0 ;
  wire \update_wr_offset_cnt_reg[0]_1 ;
  wire \update_wr_offset_cnt_reg[0]_2 ;
  wire \update_wr_offset_cnt_reg[0]_3 ;
  wire \update_wr_offset_cnt_reg[0]_4 ;
  wire \update_wr_offset_cnt_reg[0]_5 ;
  wire [5:0]\update_wr_offset_cnt_reg[5] ;
  wire update_write_miss_ongoing;
  wire wm_kind;
  wire wm_local_wrap;
  wire [5:0]\wm_offset_reg[5] ;
  wire [5:0]\wm_use_bits_reg[5] ;
  wire wmad_fifo_empty;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED ;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Almost_Empty_Inst_i_1__13_n_0 ),
        .Q(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .R(Q));
  LUT5 #(
    .INIT(32'hFCAF0CA0)) 
    \Use_FPGA.Almost_Empty_Inst_i_1__13 
       (.I0(wmad_fifo_empty),
        .I1(\Use_FPGA.Almost_Empty_Inst_i_2__12_n_0 ),
        .I2(queue_push118_out),
        .I3(queue_pop116_out),
        .I4(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .O(\Use_FPGA.Almost_Empty_Inst_i_1__13_n_0 ));
  LUT4 #(
    .INIT(16'h0010)) 
    \Use_FPGA.Almost_Empty_Inst_i_2__12 
       (.I0(\Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst_n_0 ),
        .I1(\Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst_n_0 ),
        .I2(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_n_0 ),
        .I3(\Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst_n_0 ),
        .O(\Use_FPGA.Almost_Empty_Inst_i_2__12_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h9CAF635063506350)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop116_out),
        .I3(queue_push118_out),
        .I4(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_n_0 ),
        .I5(1'b1),
        .O5(DI),
        .O6(LI));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_0),
        .Q(\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_n_0 ),
        .S(Q));
  LUT5 #(
    .INIT(32'h07770000)) 
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_6 
       (.I0(wmad_fifo_empty),
        .I1(\bs_src_reg[1] [0]),
        .I2(bp_fifo_empty),
        .I3(\bs_src_reg[1] [1]),
        .I4(bs_exist),
        .O(p_107_in));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4 
       (.CI(1'b0),
        .CO({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED [3],carry_3,carry_2,CI}),
        .CYINIT(1'b0),
        .DI({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED [3],cnt_di_2,cnt_di_1,DI}),
        .O({read_fifo_addr_next_3,read_fifo_addr_next_2,read_fifo_addr_next_1,read_fifo_addr_next_0}),
        .S({cnt_s_3,cnt_s_2,cnt_s_1,LI}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[1].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop116_out),
        .I3(queue_push118_out),
        .I4(\Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst_n_0 ),
        .I5(1'b1),
        .O5(cnt_di_1),
        .O6(cnt_s_1));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_1),
        .Q(\Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst_n_0 ),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[2].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop116_out),
        .I3(queue_push118_out),
        .I4(\Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst_n_0 ),
        .I5(1'b1),
        .O5(cnt_di_2),
        .O6(cnt_s_2));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_2),
        .Q(\Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst_n_0 ),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[3].Active_Low.Last_Bit.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop116_out),
        .I3(queue_push118_out),
        .I4(\Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst_n_0 ),
        .I5(1'b1),
        .O(cnt_s_3));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_3),
        .Q(\Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst_n_0 ),
        .S(Q));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Empty_Inst_i_1__13_n_0 ),
        .Q(wmad_fifo_empty),
        .S(Q));
  LUT4 #(
    .INIT(16'hE320)) 
    \Use_FPGA.Empty_Inst_i_1__13 
       (.I0(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .I1(queue_push118_out),
        .I2(queue_pop116_out),
        .I3(wmad_fifo_empty),
        .O(\Use_FPGA.Empty_Inst_i_1__13_n_0 ));
  LUT4 #(
    .INIT(16'hEFBF)) 
    \update_wr_offset_cnt[5]_i_10 
       (.I0(\wm_use_bits_reg[5] [4]),
        .I1(\update_wr_offset_cnt_reg[5] [4]),
        .I2(update_write_miss_ongoing),
        .I3(\wm_offset_reg[5] [4]),
        .O(\update_wr_offset_cnt_reg[0]_4 ));
  LUT4 #(
    .INIT(16'hEFBF)) 
    \update_wr_offset_cnt[5]_i_11 
       (.I0(\wm_use_bits_reg[5] [2]),
        .I1(\update_wr_offset_cnt_reg[5] [2]),
        .I2(update_write_miss_ongoing),
        .I3(\wm_offset_reg[5] [2]),
        .O(\update_wr_offset_cnt_reg[0]_0 ));
  LUT4 #(
    .INIT(16'hEFBF)) 
    \update_wr_offset_cnt[5]_i_12 
       (.I0(\wm_use_bits_reg[5] [1]),
        .I1(\update_wr_offset_cnt_reg[5] [1]),
        .I2(update_write_miss_ongoing),
        .I3(\wm_offset_reg[5] [1]),
        .O(\update_wr_offset_cnt_reg[0]_1 ));
  LUT4 #(
    .INIT(16'hEAFF)) 
    \update_wr_offset_cnt[5]_i_3 
       (.I0(wm_local_wrap),
        .I1(\update_wr_offset_cnt_reg[0]_2 ),
        .I2(\update_wr_offset_cnt_reg[0] ),
        .I3(wm_kind),
        .O(\update_wr_offset_cnt_reg[0]_5 ));
  LUT6 #(
    .INIT(64'hFFB7000000000000)) 
    \update_wr_offset_cnt[5]_i_5 
       (.I0(\wm_offset_reg[5] [3]),
        .I1(update_write_miss_ongoing),
        .I2(\update_wr_offset_cnt_reg[5] [3]),
        .I3(\wm_use_bits_reg[5] [3]),
        .I4(\update_wr_offset_cnt_reg[0]_3 ),
        .I5(\update_wr_offset_cnt_reg[0]_4 ),
        .O(\update_wr_offset_cnt_reg[0]_2 ));
  LUT6 #(
    .INIT(64'hFFB7000000000000)) 
    \update_wr_offset_cnt[5]_i_6 
       (.I0(\wm_offset_reg[5] [0]),
        .I1(update_write_miss_ongoing),
        .I2(\update_wr_offset_cnt_reg[5] [0]),
        .I3(\wm_use_bits_reg[5] [0]),
        .I4(\update_wr_offset_cnt_reg[0]_0 ),
        .I5(\update_wr_offset_cnt_reg[0]_1 ),
        .O(\update_wr_offset_cnt_reg[0] ));
  LUT4 #(
    .INIT(16'hEFBF)) 
    \update_wr_offset_cnt[5]_i_9 
       (.I0(\wm_use_bits_reg[5] [5]),
        .I1(\update_wr_offset_cnt_reg[5] [5]),
        .I2(update_write_miss_ongoing),
        .I3(\wm_offset_reg[5] [5]),
        .O(\update_wr_offset_cnt_reg[0]_3 ));
endmodule

(* ORIG_REF_NAME = "sc_srl_fifo_counter" *) 
module design_1_system_cache_0_0_sc_srl_fifo_counter__parameterized7_6
   (queue_full,
    bip_read_fifo_addr,
    Q,
    ACLK,
    queue_pop7_out,
    queue_push9_out,
    S0_AXI_AWVALID,
    \Gen_Port_Ready[0].Use_Slow_Port.Wr_FF_Inst );
  output queue_full;
  output [3:0]bip_read_fifo_addr;
  input Q;
  input ACLK;
  input queue_pop7_out;
  input queue_push9_out;
  input S0_AXI_AWVALID;
  input \Gen_Port_Ready[0].Use_Slow_Port.Wr_FF_Inst ;

  wire ACLK;
  wire CI;
  wire D;
  wire DI;
  wire \Gen_Port_Ready[0].Use_Slow_Port.Wr_FF_Inst ;
  wire LI;
  wire Q;
  wire S0_AXI_AWVALID;
  wire \Use_FPGA.Almost_Full_Inst_i_2__3_n_0 ;
  wire \Use_FPGA.Almost_Full_Inst_n_0 ;
  wire \Use_FPGA.Full_Inst_i_1__2_n_0 ;
  wire [3:0]bip_read_fifo_addr;
  wire carry_2;
  wire carry_3;
  wire cnt_di_1;
  wire cnt_di_2;
  wire cnt_s_1;
  wire cnt_s_2;
  wire cnt_s_3;
  wire queue_full;
  wire queue_pop7_out;
  wire queue_push9_out;
  wire read_fifo_addr_next_0;
  wire read_fifo_addr_next_1;
  wire read_fifo_addr_next_2;
  wire read_fifo_addr_next_3;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED ;

  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(D),
        .Q(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .R(Q));
  LUT6 #(
    .INIT(64'hFCF0FBFFF0F00800)) 
    \Use_FPGA.Almost_Full_Inst_i_1__2 
       (.I0(\Use_FPGA.Almost_Full_Inst_i_2__3_n_0 ),
        .I1(S0_AXI_AWVALID),
        .I2(queue_full),
        .I3(\Gen_Port_Ready[0].Use_Slow_Port.Wr_FF_Inst ),
        .I4(queue_pop7_out),
        .I5(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .O(D));
  LUT4 #(
    .INIT(16'h1000)) 
    \Use_FPGA.Almost_Full_Inst_i_2__3 
       (.I0(bip_read_fifo_addr[0]),
        .I1(bip_read_fifo_addr[1]),
        .I2(bip_read_fifo_addr[3]),
        .I3(bip_read_fifo_addr[2]),
        .O(\Use_FPGA.Almost_Full_Inst_i_2__3_n_0 ));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h9CAF635063506350)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop7_out),
        .I3(queue_push9_out),
        .I4(bip_read_fifo_addr[0]),
        .I5(1'b1),
        .O5(DI),
        .O6(LI));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_0),
        .Q(bip_read_fifo_addr[0]),
        .S(Q));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4 
       (.CI(1'b0),
        .CO({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED [3],carry_3,carry_2,CI}),
        .CYINIT(1'b0),
        .DI({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED [3],cnt_di_2,cnt_di_1,DI}),
        .O({read_fifo_addr_next_3,read_fifo_addr_next_2,read_fifo_addr_next_1,read_fifo_addr_next_0}),
        .S({cnt_s_3,cnt_s_2,cnt_s_1,LI}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[1].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop7_out),
        .I3(queue_push9_out),
        .I4(bip_read_fifo_addr[1]),
        .I5(1'b1),
        .O5(cnt_di_1),
        .O6(cnt_s_1));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_1),
        .Q(bip_read_fifo_addr[1]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[2].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop7_out),
        .I3(queue_push9_out),
        .I4(bip_read_fifo_addr[2]),
        .I5(1'b1),
        .O5(cnt_di_2),
        .O6(cnt_s_2));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_2),
        .Q(bip_read_fifo_addr[2]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[3].Active_Low.Last_Bit.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop7_out),
        .I3(queue_push9_out),
        .I4(bip_read_fifo_addr[3]),
        .I5(1'b1),
        .O(cnt_s_3));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_3),
        .Q(bip_read_fifo_addr[3]),
        .S(Q));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Full_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Full_Inst_i_1__2_n_0 ),
        .Q(queue_full),
        .R(Q));
  LUT5 #(
    .INIT(32'h0000F8F0)) 
    \Use_FPGA.Full_Inst_i_1__2 
       (.I0(\Use_FPGA.Almost_Full_Inst_n_0 ),
        .I1(S0_AXI_AWVALID),
        .I2(queue_full),
        .I3(\Gen_Port_Ready[0].Use_Slow_Port.Wr_FF_Inst ),
        .I4(queue_pop7_out),
        .O(\Use_FPGA.Full_Inst_i_1__2_n_0 ));
endmodule

(* ORIG_REF_NAME = "sc_srl_fifo_counter" *) 
module design_1_system_cache_0_0_sc_srl_fifo_counter__parameterized7_7
   (bp_read_fifo_addr,
    queue_pop7_out,
    S_AXI_BVALID_I_reg,
    \Use_FPGA.Almost_Empty_Inst_0 ,
    \Use_Reg_Ctrl.queue_exist_i_reg ,
    \S_AXI_BRESP_reg[1] ,
    \S_AXI_BRESP_reg[0] ,
    Q,
    ACLK,
    \arbiter_bp_push_prt[0][Valid] ,
    \bs_port_num_reg[0] ,
    update_ext_bresp_any,
    \arbiter_bp_push_i_reg[0][Valid] ,
    wc_fifo_empty,
    \arbiter_bp_push_i_reg[0][Valid]_0 ,
    S_AXI_BVALID_I_reg_0,
    S0_AXI_BREADY,
    S0_AXI_BRESP,
    \bs_src_reg[0] ,
    \bs_src_reg[0]_0 );
  output [3:0]bp_read_fifo_addr;
  output queue_pop7_out;
  output S_AXI_BVALID_I_reg;
  output \Use_FPGA.Almost_Empty_Inst_0 ;
  output \Use_Reg_Ctrl.queue_exist_i_reg ;
  output \S_AXI_BRESP_reg[1] ;
  output \S_AXI_BRESP_reg[0] ;
  input Q;
  input ACLK;
  input \arbiter_bp_push_prt[0][Valid] ;
  input \bs_port_num_reg[0] ;
  input update_ext_bresp_any;
  input \arbiter_bp_push_i_reg[0][Valid] ;
  input wc_fifo_empty;
  input \arbiter_bp_push_i_reg[0][Valid]_0 ;
  input S_AXI_BVALID_I_reg_0;
  input S0_AXI_BREADY;
  input [1:0]S0_AXI_BRESP;
  input \bs_src_reg[0] ;
  input \bs_src_reg[0]_0 ;

  wire ACLK;
  wire CI;
  wire DI;
  wire LI;
  wire Q;
  wire S0_AXI_BREADY;
  wire [1:0]S0_AXI_BRESP;
  wire \S_AXI_BID[0]_i_2_n_0 ;
  wire \S_AXI_BRESP_reg[0] ;
  wire \S_AXI_BRESP_reg[1] ;
  wire S_AXI_BVALID_I_reg;
  wire S_AXI_BVALID_I_reg_0;
  wire \Use_FPGA.Almost_Empty_Inst_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_i_1__3_n_0 ;
  wire \Use_FPGA.Almost_Empty_Inst_n_0 ;
  wire \Use_FPGA.Empty_Inst_i_1__3_n_0 ;
  wire \Use_Reg_Ctrl.queue_exist_i_reg ;
  wire \arbiter_bp_push_i_reg[0][Valid] ;
  wire \arbiter_bp_push_i_reg[0][Valid]_0 ;
  wire \arbiter_bp_push_prt[0][Valid] ;
  wire bp_fifo_empty;
  wire [3:0]bp_read_fifo_addr;
  wire \bs_port_num_reg[0] ;
  wire \bs_src_reg[0] ;
  wire \bs_src_reg[0]_0 ;
  wire carry_2;
  wire carry_3;
  wire cnt_di_1;
  wire cnt_di_2;
  wire cnt_s_1;
  wire cnt_s_2;
  wire cnt_s_3;
  wire queue_almost_empty_next__4;
  wire queue_pop7_out;
  wire read_fifo_addr_next_0;
  wire read_fifo_addr_next_1;
  wire read_fifo_addr_next_2;
  wire read_fifo_addr_next_3;
  wire update_ext_bresp_any;
  wire wc_fifo_empty;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED ;
  wire [3:3]\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED ;

  LUT6 #(
    .INIT(64'hAA20AA200020AA20)) 
    \S_AXI_BID[0]_i_1 
       (.I0(\S_AXI_BID[0]_i_2_n_0 ),
        .I1(\bs_port_num_reg[0] ),
        .I2(update_ext_bresp_any),
        .I3(\arbiter_bp_push_i_reg[0][Valid] ),
        .I4(wc_fifo_empty),
        .I5(\arbiter_bp_push_i_reg[0][Valid]_0 ),
        .O(queue_pop7_out));
  (* SOFT_HLUTNM = "soft_lutpair121" *) 
  LUT3 #(
    .INIT(8'h0D)) 
    \S_AXI_BID[0]_i_2 
       (.I0(S_AXI_BVALID_I_reg_0),
        .I1(S0_AXI_BREADY),
        .I2(bp_fifo_empty),
        .O(\S_AXI_BID[0]_i_2_n_0 ));
  LUT5 #(
    .INIT(32'h00000ACA)) 
    \S_AXI_BRESP[0]_i_1 
       (.I0(S0_AXI_BRESP[0]),
        .I1(\bs_src_reg[0]_0 ),
        .I2(queue_pop7_out),
        .I3(\arbiter_bp_push_i_reg[0][Valid] ),
        .I4(Q),
        .O(\S_AXI_BRESP_reg[0] ));
  LUT5 #(
    .INIT(32'h00000ACA)) 
    \S_AXI_BRESP[1]_i_1 
       (.I0(S0_AXI_BRESP[1]),
        .I1(\bs_src_reg[0] ),
        .I2(queue_pop7_out),
        .I3(\arbiter_bp_push_i_reg[0][Valid] ),
        .I4(Q),
        .O(\S_AXI_BRESP_reg[1] ));
  LUT3 #(
    .INIT(8'hAE)) 
    S_AXI_BVALID_I_i_1
       (.I0(queue_pop7_out),
        .I1(S_AXI_BVALID_I_reg_0),
        .I2(S0_AXI_BREADY),
        .O(S_AXI_BVALID_I_reg));
  (* XILINX_LEGACY_PRIM = "FDR" *) 
  (* box_type = "PRIMITIVE" *) 
  FDRE #(
    .INIT(1'b0)) 
    \Use_FPGA.Almost_Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Almost_Empty_Inst_i_1__3_n_0 ),
        .Q(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair120" *) 
  LUT4 #(
    .INIT(16'hEB28)) 
    \Use_FPGA.Almost_Empty_Inst_i_1__3 
       (.I0(queue_almost_empty_next__4),
        .I1(\arbiter_bp_push_prt[0][Valid] ),
        .I2(queue_pop7_out),
        .I3(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .O(\Use_FPGA.Almost_Empty_Inst_i_1__3_n_0 ));
  LUT6 #(
    .INIT(64'h88888888888B8888)) 
    \Use_FPGA.Almost_Empty_Inst_i_2__2 
       (.I0(bp_fifo_empty),
        .I1(\arbiter_bp_push_prt[0][Valid] ),
        .I2(bp_read_fifo_addr[3]),
        .I3(bp_read_fifo_addr[2]),
        .I4(bp_read_fifo_addr[0]),
        .I5(bp_read_fifo_addr[1]),
        .O(queue_almost_empty_next__4));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'h9CAF635063506350)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop7_out),
        .I3(\arbiter_bp_push_prt[0][Valid] ),
        .I4(bp_read_fifo_addr[0]),
        .I5(1'b1),
        .O5(DI),
        .O6(LI));
  (* SOFT_HLUTNM = "soft_lutpair120" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \Use_FPGA.Cnt_Bit_Gen[0].Active_Low.First_Bit.LUT_Inst_i_1__9 
       (.I0(queue_pop7_out),
        .I1(\arbiter_bp_push_i_reg[0][Valid]_0 ),
        .O(\Use_FPGA.Almost_Empty_Inst_0 ));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_0),
        .Q(bp_read_fifo_addr[0]),
        .S(Q));
  (* SOFT_HLUTNM = "soft_lutpair121" *) 
  LUT4 #(
    .INIT(16'h0045)) 
    \Use_FPGA.Cnt_Bit_Gen[0].No_Prot.First_Bit.LUT_Inst_i_5__0 
       (.I0(bp_fifo_empty),
        .I1(S0_AXI_BREADY),
        .I2(S_AXI_BVALID_I_reg_0),
        .I3(\arbiter_bp_push_i_reg[0][Valid] ),
        .O(\Use_Reg_Ctrl.queue_exist_i_reg ));
  (* XILINX_LEGACY_PRIM = "(MUXCY,XORCY)" *) 
  (* XILINX_TRANSFORM_PINMAP = "LO:O" *) 
  (* box_type = "PRIMITIVE" *) 
  CARRY4 \Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4 
       (.CI(1'b0),
        .CO({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_CO_UNCONNECTED [3],carry_3,carry_2,CI}),
        .CYINIT(1'b0),
        .DI({\NLW_Use_FPGA.Cnt_Bit_Gen[0].Use_Muxcy.MUXCY_Inst_CARRY4_DI_UNCONNECTED [3],cnt_di_2,cnt_di_1,DI}),
        .O({read_fifo_addr_next_3,read_fifo_addr_next_2,read_fifo_addr_next_1,read_fifo_addr_next_0}),
        .S({cnt_s_3,cnt_s_2,cnt_s_1,LI}));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[1].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop7_out),
        .I3(\arbiter_bp_push_prt[0][Valid] ),
        .I4(bp_read_fifo_addr[1]),
        .I5(1'b1),
        .O5(cnt_di_1),
        .O6(cnt_s_1));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[1].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_1),
        .Q(bp_read_fifo_addr[1]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6_2 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[2].Active_Low.Other_Bits.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop7_out),
        .I3(\arbiter_bp_push_prt[0][Valid] ),
        .I4(bp_read_fifo_addr[2]),
        .I5(1'b1),
        .O5(cnt_di_2),
        .O6(cnt_s_2));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[2].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_2),
        .Q(bp_read_fifo_addr[2]),
        .S(Q));
  (* box_type = "PRIMITIVE" *) 
  LUT6 #(
    .INIT(64'hBFAF405040504050)) 
    \Use_FPGA.Cnt_Bit_Gen[3].Active_Low.Last_Bit.LUT_Inst 
       (.I0(1'b0),
        .I1(1'b0),
        .I2(queue_pop7_out),
        .I3(\arbiter_bp_push_prt[0][Valid] ),
        .I4(bp_read_fifo_addr[3]),
        .I5(1'b1),
        .O(cnt_s_3));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(read_fifo_addr_next_3),
        .Q(bp_read_fifo_addr[3]),
        .S(Q));
  (* XILINX_LEGACY_PRIM = "FDS" *) 
  (* box_type = "PRIMITIVE" *) 
  FDSE #(
    .INIT(1'b1)) 
    \Use_FPGA.Empty_Inst 
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Empty_Inst_i_1__3_n_0 ),
        .Q(bp_fifo_empty),
        .S(Q));
  LUT4 #(
    .INIT(16'hE320)) 
    \Use_FPGA.Empty_Inst_i_1__3 
       (.I0(\Use_FPGA.Almost_Empty_Inst_n_0 ),
        .I1(\arbiter_bp_push_prt[0][Valid] ),
        .I2(queue_pop7_out),
        .I3(bp_fifo_empty),
        .O(\Use_FPGA.Empty_Inst_i_1__3_n_0 ));
endmodule

(* ORIG_REF_NAME = "sc_transaction_ordering" *) 
module design_1_system_cache_0_0_sc_transaction_ordering
   (\write_seq_id_reg[6]_0 ,
    \Use_FPGA.Full_Inst ,
    write_data_almost_full,
    write_data_full,
    A,
    M_AXI_WVALID_I_reg,
    \Use_FPGA.Full_Inst_0 ,
    \read_req_ordered_info[0][Kind] ,
    \read_req_ordered_info[0][Prot] ,
    \write_req_ordered_info[0][Kind] ,
    \write_req_ordered_info[0][Prot] ,
    \write_data_ordered_info[0][Last] ,
    \write_seq_id_reg[6]_1 ,
    pending_write_is_1,
    update_done_aw_reg,
    M_AXI_ARVALID_I,
    \Use_FPGA.Almost_Full_Inst ,
    out,
    \M_AXI_ARLEN_reg[7] ,
    \M_AXI_ARSIZE_reg[2] ,
    \M_AXI_AWADDR_reg[31] ,
    \M_AXI_AWLEN_reg[7] ,
    \M_AXI_AWSIZE_reg[1] ,
    \M_AXI_WSTRB_reg[3] ,
    \M_AXI_WDATA_reg[31] ,
    ACLK,
    ARESET,
    M_AXI_AWVALID_I,
    queue_push,
    M_AXI_ARVALID_I_reg,
    queue_push29_out,
    \Use_FPGA.Full_Inst_1 ,
    S,
    \read_req_info[0][Kind] ,
    \update_info_reg[Kind] ,
    \write_data_info[0][Last] ,
    \write_req_info[0][Line_Only] ,
    update_need_aw,
    update_done_aw,
    \read_req_info[0][Valid] ,
    ri_fifo_full,
    update_done_ar,
    update_need_ar,
    \Use_FPGA.Full_Inst_2 ,
    M0_AXI_AWREADY,
    M_AXI_AWVALID_I_reg,
    M_AXI_ARVALID_I_reg_0,
    M0_AXI_ARREADY,
    \Use_FPGA.Full_Inst_3 ,
    \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst ,
    M_AXI_WVALID_I_reg_0,
    M0_AXI_WREADY,
    \write_data_info[0][Valid] ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    in,
    \update_info_reg[Len][7] ,
    \update_info_reg[Size][2] ,
    \update_info_reg[Evict] ,
    \update_info_reg[Len][7]_0 ,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    update_evict_busy_reg,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 ,
    E);
  output \write_seq_id_reg[6]_0 ;
  output \Use_FPGA.Full_Inst ;
  output write_data_almost_full;
  output write_data_full;
  output [0:0]A;
  output M_AXI_WVALID_I_reg;
  output \Use_FPGA.Full_Inst_0 ;
  output \read_req_ordered_info[0][Kind] ;
  output [0:0]\read_req_ordered_info[0][Prot] ;
  output \write_req_ordered_info[0][Kind] ;
  output [0:0]\write_req_ordered_info[0][Prot] ;
  output \write_data_ordered_info[0][Last] ;
  output \write_seq_id_reg[6]_1 ;
  output pending_write_is_1;
  output update_done_aw_reg;
  output M_AXI_ARVALID_I;
  output \Use_FPGA.Almost_Full_Inst ;
  output [31:0]out;
  output [7:0]\M_AXI_ARLEN_reg[7] ;
  output [2:0]\M_AXI_ARSIZE_reg[2] ;
  output [31:0]\M_AXI_AWADDR_reg[31] ;
  output [7:0]\M_AXI_AWLEN_reg[7] ;
  output [1:0]\M_AXI_AWSIZE_reg[1] ;
  output [3:0]\M_AXI_WSTRB_reg[3] ;
  output [31:0]\M_AXI_WDATA_reg[31] ;
  input ACLK;
  input ARESET;
  input M_AXI_AWVALID_I;
  input queue_push;
  input M_AXI_ARVALID_I_reg;
  input queue_push29_out;
  input \Use_FPGA.Full_Inst_1 ;
  input S;
  input \read_req_info[0][Kind] ;
  input \update_info_reg[Kind] ;
  input \write_data_info[0][Last] ;
  input \write_req_info[0][Line_Only] ;
  input update_need_aw;
  input update_done_aw;
  input \read_req_info[0][Valid] ;
  input ri_fifo_full;
  input update_done_ar;
  input update_need_ar;
  input \Use_FPGA.Full_Inst_2 ;
  input M0_AXI_AWREADY;
  input M_AXI_AWVALID_I_reg;
  input M_AXI_ARVALID_I_reg_0;
  input M0_AXI_ARREADY;
  input \Use_FPGA.Full_Inst_3 ;
  input \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst ;
  input M_AXI_WVALID_I_reg_0;
  input M0_AXI_WREADY;
  input \write_data_info[0][Valid] ;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  input [31:0]in;
  input [7:0]\update_info_reg[Len][7] ;
  input [2:0]\update_info_reg[Size][2] ;
  input [23:0]\update_info_reg[Evict] ;
  input [7:0]\update_info_reg[Len][7]_0 ;
  input [1:0]\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input [3:0]update_evict_busy_reg;
  input [31:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 ;
  input [0:0]E;

  wire [0:0]A;
  wire ACLK;
  wire ARESET;
  wire ARESET_I;
  wire A_0;
  wire [0:0]E;
  wire FIFO_AR_Pointer_n_7;
  wire FIFO_AW_Pointer_n_10;
  wire FIFO_AW_Pointer_n_11;
  wire FIFO_AW_Pointer_n_12;
  wire FIFO_AW_Pointer_n_13;
  wire FIFO_AW_Pointer_n_8;
  wire FIFO_AW_Pointer_n_9;
  wire M0_AXI_ARREADY;
  wire M0_AXI_AWREADY;
  wire M0_AXI_WREADY;
  wire [7:0]\M_AXI_ARLEN_reg[7] ;
  wire [2:0]\M_AXI_ARSIZE_reg[2] ;
  wire M_AXI_ARVALID_I;
  wire M_AXI_ARVALID_I_reg;
  wire M_AXI_ARVALID_I_reg_0;
  wire [31:0]\M_AXI_AWADDR_reg[31] ;
  wire [7:0]\M_AXI_AWLEN_reg[7] ;
  wire [1:0]\M_AXI_AWSIZE_reg[1] ;
  wire M_AXI_AWVALID_I;
  wire M_AXI_AWVALID_I_reg;
  wire [31:0]\M_AXI_WDATA_reg[31] ;
  wire [3:0]\M_AXI_WSTRB_reg[3] ;
  wire M_AXI_WVALID_I_reg;
  wire M_AXI_WVALID_I_reg_0;
  wire [31:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 ;
  wire \Order_Optimization_4.BE_Block_Or_Inst2_n_1 ;
  wire \Order_Optimization_4.buffer_addr[4]_i_4_n_0 ;
  wire \Order_Optimization_4.buffer_addr[4]_i_6_n_0 ;
  wire \Order_Optimization_4.buffer_addr[4]_i_7_n_0 ;
  wire \Order_Optimization_4.buffer_addr[4]_i_8_n_0 ;
  wire \Order_Optimization_4.buffer_addr[4]_i_9_n_0 ;
  wire [4:0]\Order_Optimization_4.buffer_addr_reg__0 ;
  wire \Order_Optimization_4.hist_fifo_mem_reg[31][Line_Only][-1111111111]_srl32_n_0 ;
  wire \Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][0]_srl32_n_0 ;
  wire \Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][1]_srl32_n_0 ;
  wire \Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][2]_srl32_n_0 ;
  wire \Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][3]_srl32_n_0 ;
  wire \Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][4]_srl32_n_0 ;
  wire \Order_Optimization_4.search_count[0]_i_1_n_0 ;
  wire [4:0]\Order_Optimization_4.search_count_reg__0 ;
  wire S;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire [1:0]\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \Use_FPGA.Almost_Full_Inst ;
  wire \Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst ;
  wire \Use_FPGA.Full_Inst ;
  wire \Use_FPGA.Full_Inst_0 ;
  wire \Use_FPGA.Full_Inst_1 ;
  wire \Use_FPGA.Full_Inst_2 ;
  wire \Use_FPGA.Full_Inst_3 ;
  wire \ar_id_fifo_mem_reg[15][0]_srl16_n_0 ;
  wire \ar_id_fifo_mem_reg[15][1]_srl16_n_0 ;
  wire \ar_id_fifo_mem_reg[15][2]_srl16_n_0 ;
  wire \ar_id_fifo_mem_reg[15][3]_srl16_n_0 ;
  wire \ar_id_fifo_mem_reg[15][4]_srl16_n_0 ;
  wire ar_pop_i;
  wire ar_pop_or_reset;
  wire [3:0]ar_read_fifo_addr;
  wire [6:5]ar_seq_block;
  wire be_no_block_1to2;
  wire be_no_block_1to2_part;
  wire be_no_block_1to3;
  wire be_no_block_1to4;
  wire [31:0]in;
  wire lopt;
  wire lopt_1;
  wire lopt_10;
  wire lopt_11;
  wire lopt_12;
  wire lopt_13;
  wire lopt_14;
  wire lopt_15;
  wire lopt_16;
  wire lopt_17;
  wire lopt_18;
  wire lopt_19;
  wire lopt_2;
  wire lopt_20;
  wire lopt_3;
  wire lopt_4;
  wire lopt_5;
  wire lopt_6;
  wire lopt_7;
  wire lopt_8;
  wire lopt_9;
  wire need_to_stall_write_i_2_n_0;
  wire no_write_blocking_read;
  wire [31:0]out;
  wire [4:1]p_0_in;
  wire p_20_out;
  wire \pending_write[0]_i_1_n_0 ;
  wire pending_write_is_1;
  wire pending_write_is_1_i_3_n_0;
  wire [4:0]pending_write_reg__0;
  wire [4:0]plusOp;
  wire [6:0]plusOp__0;
  wire [31:6]protected_read_addr;
  wire protected_read_hit_high_n;
  wire protected_read_hit_n;
  wire protected_read_hit_other_n;
  wire [6:5]protected_seq_block;
  wire queue_empty;
  wire [3:0]queue_index;
  wire queue_push;
  wire queue_push26_out;
  wire queue_push29_out;
  wire \read_req_info[0][Kind] ;
  wire \read_req_info[0][Valid] ;
  wire \read_req_ordered_info[0][Kind] ;
  wire [0:0]\read_req_ordered_info[0][Prot] ;
  wire \read_req_ordered_info[0][Valid] ;
  wire ri_fifo_full;
  wire update_done_ar;
  wire update_done_aw;
  wire update_done_aw_reg;
  wire [3:0]update_evict_busy_reg;
  wire [23:0]\update_info_reg[Evict] ;
  wire \update_info_reg[Kind] ;
  wire [7:0]\update_info_reg[Len][7] ;
  wire [7:0]\update_info_reg[Len][7]_0 ;
  wire [2:0]\update_info_reg[Size][2] ;
  wire update_need_ar;
  wire update_need_aw;
  wire [4:0]w_read_fifo_addr;
  wire write_data_almost_full;
  wire write_data_full;
  wire \write_data_info[0][Last] ;
  wire \write_data_info[0][Valid] ;
  wire \write_data_ordered_info[0][Last] ;
  wire \write_req_info[0][Line_Only] ;
  wire \write_req_ordered_info[0][Kind] ;
  wire [0:0]\write_req_ordered_info[0][Prot] ;
  wire \write_seq_id[6]_i_2_n_0 ;
  wire \write_seq_id_reg[6]_0 ;
  wire \write_seq_id_reg[6]_1 ;
  wire [6:0]write_seq_id_reg__0;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][10]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][11]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][12]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][13]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][14]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][15]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][16]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][17]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][18]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][19]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][20]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][21]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][22]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][23]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][24]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][25]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][26]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][27]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][28]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][29]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][30]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][31]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][6]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][7]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][8]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][9]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Line_Only][-1111111111]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][0]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][1]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][2]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][3]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][4]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][5]_srl32_Q31_UNCONNECTED ;
  wire \NLW_Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][6]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][BE][0]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][BE][1]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][BE][2]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][BE][3]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][0]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][10]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][11]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][12]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][13]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][14]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][15]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][16]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][17]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][18]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][19]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][1]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][20]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][21]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][22]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][23]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][24]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][25]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][26]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][27]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][28]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][29]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][2]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][30]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][31]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][3]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][4]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][5]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][6]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][7]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][8]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Data][9]_srl32_Q31_UNCONNECTED ;
  wire \NLW_w_fifo_mem_reg[31][Last][-1111111111]_srl32_Q31_UNCONNECTED ;

  design_1_system_cache_0_0_carry_and_274 BE_Valid_And_Inst1
       (.A_0(A_0),
        .M0_AXI_ARREADY(M0_AXI_ARREADY),
        .M_AXI_ARVALID_I(M_AXI_ARVALID_I),
        .M_AXI_ARVALID_I_reg(M_AXI_ARVALID_I_reg_0),
        .lopt(lopt_19),
        .lopt_1(lopt_20),
        .lopt_2(M_AXI_ARVALID_I_reg),
        .no_write_blocking_read(no_write_blocking_read),
        .\read_req_ordered_info[0][Valid] (\read_req_ordered_info[0][Valid] ));
  design_1_system_cache_0_0_carry_and_275 BE_Valid_And_Inst2
       (.M_AXI_ARVALID_I_reg(M_AXI_ARVALID_I_reg),
        .ar_pop_i(ar_pop_i),
        .lopt(lopt_19),
        .lopt_1(lopt_20),
        .\read_req_ordered_info[0][Valid] (\read_req_ordered_info[0][Valid] ));
  design_1_system_cache_0_0_sc_srl_fifo_counter__parameterized14 FIFO_AR_Pointer
       (.ACLK(ACLK),
        .A_0(A_0),
        .Q(write_seq_id_reg__0[6:5]),
        .SR(ARESET_I),
        .\Use_FPGA.Full_Inst_0 (\Use_FPGA.Full_Inst_0 ),
        .ar_pop_i(ar_pop_i),
        .ar_read_fifo_addr(ar_read_fifo_addr),
        .need_to_stall_write_reg(FIFO_AR_Pointer_n_7),
        .out(ar_seq_block),
        .queue_empty(queue_empty),
        .queue_push29_out(queue_push29_out),
        .\read_req_info[0][Valid] (\read_req_info[0][Valid] ),
        .ri_fifo_full(ri_fifo_full),
        .update_done_ar(update_done_ar),
        .update_need_ar(update_need_ar));
  design_1_system_cache_0_0_sc_srl_fifo_counter__parameterized7_276 FIFO_AW_Pointer
       (.ACLK(ACLK),
        .D({FIFO_AW_Pointer_n_8,FIFO_AW_Pointer_n_9,FIFO_AW_Pointer_n_10,FIFO_AW_Pointer_n_11}),
        .M0_AXI_AWREADY(M0_AXI_AWREADY),
        .M_AXI_AWVALID_I(M_AXI_AWVALID_I),
        .M_AXI_AWVALID_I_reg(M_AXI_AWVALID_I_reg),
        .Q(ARESET_I),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .\Use_FPGA.Full_Inst_0 (\Use_FPGA.Full_Inst ),
        .\Use_FPGA.Full_Inst_1 (\Use_FPGA.Full_Inst_2 ),
        .need_to_stall_write_reg(FIFO_AW_Pointer_n_12),
        .need_to_stall_write_reg_0(\write_seq_id_reg[6]_1 ),
        .pending_write_is_1(pending_write_is_1),
        .pending_write_is_1_reg(FIFO_AW_Pointer_n_13),
        .\pending_write_reg[2] (need_to_stall_write_i_2_n_0),
        .\pending_write_reg[2]_0 (pending_write_is_1_i_3_n_0),
        .\pending_write_reg[4] (pending_write_reg__0),
        .queue_index(queue_index),
        .queue_push26_out(queue_push26_out),
        .update_done_aw(update_done_aw),
        .update_done_aw_reg(update_done_aw_reg),
        .update_need_aw(update_need_aw),
        .\write_seq_id_reg[5] (FIFO_AR_Pointer_n_7),
        .\write_seq_id_reg[6] (\write_seq_id_reg[6]_0 ));
  design_1_system_cache_0_0_sc_srl_fifo_counter__parameterized12 FIFO_W_Pointer
       (.A({w_read_fifo_addr[4],A,w_read_fifo_addr[2:0]}),
        .ACLK(ACLK),
        .M0_AXI_WREADY(M0_AXI_WREADY),
        .M_AXI_WVALID_I_reg(M_AXI_WVALID_I_reg),
        .M_AXI_WVALID_I_reg_0(M_AXI_WVALID_I_reg_0),
        .SR(ARESET_I),
        .\Use_FPGA.Almost_Full_Inst_0 (\Use_FPGA.Almost_Full_Inst ),
        .\Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst_0 (\Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst ),
        .\Use_FPGA.Full_Inst_0 (\Use_FPGA.Full_Inst_3 ),
        .queue_push(queue_push),
        .write_data_almost_full(write_data_almost_full),
        .write_data_full(write_data_full),
        .\write_data_info[0][Valid] (\write_data_info[0][Valid] ));
  design_1_system_cache_0_0_carry_latch_or_277 LU_Mem_PR_Latch_Inst1
       (.Q(ARESET_I),
        .SR(ar_pop_or_reset),
        .ar_pop_i(ar_pop_i));
  design_1_system_cache_0_0_carry_or_278 \Order_Optimization_4.BE_Block_Or_Inst1 
       (.Carry_OUT(protected_read_hit_n),
        .\Use_FPGA.Full_Inst (\Use_FPGA.Full_Inst_1 ),
        .be_no_block_1to2_part(be_no_block_1to2_part),
        .lopt(lopt_6),
        .lopt_1(lopt_7));
  design_1_system_cache_0_0_carry_or_279 \Order_Optimization_4.BE_Block_Or_Inst2 
       (.\Order_Optimization_4.search_count_reg[0] (\Order_Optimization_4.BE_Block_Or_Inst2_n_1 ),
        .\Order_Optimization_4.search_count_reg[4] (\Order_Optimization_4.search_count_reg__0 ),
        .Q(pending_write_reg__0),
        .be_no_block_1to2(be_no_block_1to2),
        .be_no_block_1to3(be_no_block_1to3),
        .lopt(lopt_11),
        .lopt_1(lopt_12),
        .lopt_2(lopt_13));
  design_1_system_cache_0_0_carry_or_280 \Order_Optimization_4.BE_Block_Or_Inst3 
       (.S(S),
        .be_no_block_1to3(be_no_block_1to3),
        .be_no_block_1to4(be_no_block_1to4),
        .lopt(lopt_14),
        .lopt_1(lopt_15));
  design_1_system_cache_0_0_carry_or_281 \Order_Optimization_4.BE_Block_Or_Inst4 
       (.Q(pending_write_reg__0),
        .be_no_block_1to4(be_no_block_1to4),
        .lopt(lopt_16),
        .lopt_1(lopt_17),
        .lopt_2(lopt_18),
        .no_write_blocking_read(no_write_blocking_read));
  design_1_system_cache_0_0_comparator__parameterized3 \Order_Optimization_4.Pos_Inst 
       (.Q(\Order_Optimization_4.search_count_reg__0 ),
        .be_no_block_1to2(be_no_block_1to2),
        .be_no_block_1to2_part(be_no_block_1to2_part),
        .lopt(lopt_8),
        .lopt_1(lopt_9),
        .lopt_10(lopt_17),
        .lopt_11(lopt_18),
        .lopt_2(lopt_10),
        .lopt_3(lopt_11),
        .lopt_4(lopt_12),
        .lopt_5(lopt_13),
        .lopt_6(lopt_14),
        .lopt_7(lopt_15),
        .lopt_8(S),
        .lopt_9(lopt_16),
        .\pending_write_reg[4] (pending_write_reg__0));
  design_1_system_cache_0_0_comparator \Order_Optimization_4.Prot_Inst_High 
       (.Carry_OUT(protected_read_hit_high_n),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .lopt_3(lopt_3),
        .lopt_4(lopt_4),
        .lopt_5(lopt_5),
        .out(protected_read_addr[31:14]),
        .\update_info_reg[Addr][31] (out[31:14]));
  design_1_system_cache_0_0_comparator__parameterized1 \Order_Optimization_4.Prot_Inst_Low 
       (.Carry_IN(protected_read_hit_other_n),
        .Carry_OUT(protected_read_hit_n),
        .E(p_20_out),
        .\Order_Optimization_4.search_count_reg[3] (\Order_Optimization_4.buffer_addr[4]_i_4_n_0 ),
        .Q(\Order_Optimization_4.search_count_reg__0 [4]),
        .lopt(lopt_3),
        .lopt_1(lopt_4),
        .lopt_2(lopt_5),
        .lopt_3(lopt_6),
        .lopt_4(lopt_7),
        .lopt_5(\Use_FPGA.Full_Inst_1 ),
        .lopt_6(lopt_8),
        .lopt_7(lopt_9),
        .lopt_8(lopt_10),
        .need_to_stall_write_reg(queue_push26_out),
        .out(ar_seq_block[5]),
        .\pending_write_reg[3] (\Order_Optimization_4.BE_Block_Or_Inst2_n_1 ),
        .\pending_write_reg[4] (pending_write_reg__0[4]),
        .queue_empty(queue_empty),
        .\update_info_reg[Addr][13] (protected_read_addr[13:6]),
        .\update_info_reg[Addr][13]_0 (out[13:6]),
        .\write_seq_id_reg[4] (\Order_Optimization_4.buffer_addr[4]_i_7_n_0 ),
        .\write_seq_id_reg[5] (protected_seq_block[5]),
        .\write_seq_id_reg[6] (\Order_Optimization_4.buffer_addr[4]_i_6_n_0 ));
  design_1_system_cache_0_0_carry_and_n_282 \Order_Optimization_4.Prot_Inst_Select 
       (.Carry_IN(protected_read_hit_other_n),
        .Carry_OUT(protected_read_hit_high_n),
        .lopt(lopt),
        .lopt_1(lopt_1),
        .lopt_2(lopt_2),
        .\update_info_reg[Evict] (\Order_Optimization_4.hist_fifo_mem_reg[31][Line_Only][-1111111111]_srl32_n_0 ));
  LUT1 #(
    .INIT(2'h1)) 
    \Order_Optimization_4.buffer_addr[0]_i_1 
       (.I0(\Order_Optimization_4.buffer_addr_reg__0 [0]),
        .O(plusOp[0]));
  (* SOFT_HLUTNM = "soft_lutpair16" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \Order_Optimization_4.buffer_addr[1]_i_1 
       (.I0(\Order_Optimization_4.buffer_addr_reg__0 [0]),
        .I1(\Order_Optimization_4.buffer_addr_reg__0 [1]),
        .O(plusOp[1]));
  (* SOFT_HLUTNM = "soft_lutpair16" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \Order_Optimization_4.buffer_addr[2]_i_1 
       (.I0(\Order_Optimization_4.buffer_addr_reg__0 [2]),
        .I1(\Order_Optimization_4.buffer_addr_reg__0 [1]),
        .I2(\Order_Optimization_4.buffer_addr_reg__0 [0]),
        .O(plusOp[2]));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \Order_Optimization_4.buffer_addr[3]_i_1 
       (.I0(\Order_Optimization_4.buffer_addr_reg__0 [3]),
        .I1(\Order_Optimization_4.buffer_addr_reg__0 [0]),
        .I2(\Order_Optimization_4.buffer_addr_reg__0 [1]),
        .I3(\Order_Optimization_4.buffer_addr_reg__0 [2]),
        .O(plusOp[3]));
  (* SOFT_HLUTNM = "soft_lutpair12" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \Order_Optimization_4.buffer_addr[4]_i_2 
       (.I0(\Order_Optimization_4.buffer_addr_reg__0 [4]),
        .I1(\Order_Optimization_4.buffer_addr_reg__0 [2]),
        .I2(\Order_Optimization_4.buffer_addr_reg__0 [1]),
        .I3(\Order_Optimization_4.buffer_addr_reg__0 [0]),
        .I4(\Order_Optimization_4.buffer_addr_reg__0 [3]),
        .O(plusOp[4]));
  (* SOFT_HLUTNM = "soft_lutpair11" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    \Order_Optimization_4.buffer_addr[4]_i_4 
       (.I0(\Order_Optimization_4.search_count_reg__0 [3]),
        .I1(\Order_Optimization_4.search_count_reg__0 [1]),
        .I2(\Order_Optimization_4.search_count_reg__0 [0]),
        .I3(\Order_Optimization_4.search_count_reg__0 [2]),
        .O(\Order_Optimization_4.buffer_addr[4]_i_4_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \Order_Optimization_4.buffer_addr[4]_i_6 
       (.I0(ar_seq_block[6]),
        .I1(protected_seq_block[6]),
        .O(\Order_Optimization_4.buffer_addr[4]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hB2BBB2BBB2BB2222)) 
    \Order_Optimization_4.buffer_addr[4]_i_7 
       (.I0(\ar_id_fifo_mem_reg[15][4]_srl16_n_0 ),
        .I1(\Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][4]_srl32_n_0 ),
        .I2(\ar_id_fifo_mem_reg[15][3]_srl16_n_0 ),
        .I3(\Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][3]_srl32_n_0 ),
        .I4(\Order_Optimization_4.buffer_addr[4]_i_8_n_0 ),
        .I5(\Order_Optimization_4.buffer_addr[4]_i_9_n_0 ),
        .O(\Order_Optimization_4.buffer_addr[4]_i_7_n_0 ));
  LUT6 #(
    .INIT(64'h20220000F0FF2022)) 
    \Order_Optimization_4.buffer_addr[4]_i_8 
       (.I0(\ar_id_fifo_mem_reg[15][0]_srl16_n_0 ),
        .I1(\Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][0]_srl32_n_0 ),
        .I2(\ar_id_fifo_mem_reg[15][2]_srl16_n_0 ),
        .I3(\Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][2]_srl32_n_0 ),
        .I4(\ar_id_fifo_mem_reg[15][1]_srl16_n_0 ),
        .I5(\Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][1]_srl32_n_0 ),
        .O(\Order_Optimization_4.buffer_addr[4]_i_8_n_0 ));
  LUT4 #(
    .INIT(16'h4F44)) 
    \Order_Optimization_4.buffer_addr[4]_i_9 
       (.I0(\Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][2]_srl32_n_0 ),
        .I1(\ar_id_fifo_mem_reg[15][2]_srl16_n_0 ),
        .I2(\Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][3]_srl32_n_0 ),
        .I3(\ar_id_fifo_mem_reg[15][3]_srl16_n_0 ),
        .O(\Order_Optimization_4.buffer_addr[4]_i_9_n_0 ));
  FDRE \Order_Optimization_4.buffer_addr_reg[0] 
       (.C(ACLK),
        .CE(p_20_out),
        .D(plusOp[0]),
        .Q(\Order_Optimization_4.buffer_addr_reg__0 [0]),
        .R(ar_pop_or_reset));
  FDRE \Order_Optimization_4.buffer_addr_reg[1] 
       (.C(ACLK),
        .CE(p_20_out),
        .D(plusOp[1]),
        .Q(\Order_Optimization_4.buffer_addr_reg__0 [1]),
        .R(ar_pop_or_reset));
  FDRE \Order_Optimization_4.buffer_addr_reg[2] 
       (.C(ACLK),
        .CE(p_20_out),
        .D(plusOp[2]),
        .Q(\Order_Optimization_4.buffer_addr_reg__0 [2]),
        .R(ar_pop_or_reset));
  FDRE \Order_Optimization_4.buffer_addr_reg[3] 
       (.C(ACLK),
        .CE(p_20_out),
        .D(plusOp[3]),
        .Q(\Order_Optimization_4.buffer_addr_reg__0 [3]),
        .R(ar_pop_or_reset));
  FDRE \Order_Optimization_4.buffer_addr_reg[4] 
       (.C(ACLK),
        .CE(p_20_out),
        .D(plusOp[4]),
        .Q(\Order_Optimization_4.buffer_addr_reg__0 [4]),
        .R(ar_pop_or_reset));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr][10]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][Addr][10]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg__0 ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(in[10]),
        .Q(protected_read_addr[10]),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][10]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr][11]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][Addr][11]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg__0 ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(in[11]),
        .Q(protected_read_addr[11]),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][11]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr][12]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][Addr][12]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg__0 ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(in[12]),
        .Q(protected_read_addr[12]),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][12]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr][13]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][Addr][13]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg__0 ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(in[13]),
        .Q(protected_read_addr[13]),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][13]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr][14]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][Addr][14]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg__0 ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\update_info_reg[Evict] [6]),
        .Q(protected_read_addr[14]),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][14]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr][15]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][Addr][15]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg__0 ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\update_info_reg[Evict] [7]),
        .Q(protected_read_addr[15]),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][15]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr][16]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][Addr][16]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg__0 ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\update_info_reg[Evict] [8]),
        .Q(protected_read_addr[16]),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][16]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr][17]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][Addr][17]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg__0 ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\update_info_reg[Evict] [9]),
        .Q(protected_read_addr[17]),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][17]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr][18]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][Addr][18]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg__0 ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\update_info_reg[Evict] [10]),
        .Q(protected_read_addr[18]),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][18]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr][19]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][Addr][19]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg__0 ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\update_info_reg[Evict] [11]),
        .Q(protected_read_addr[19]),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][19]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr][20]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][Addr][20]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg__0 ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\update_info_reg[Evict] [12]),
        .Q(protected_read_addr[20]),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][20]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr][21]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][Addr][21]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg__0 ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\update_info_reg[Evict] [13]),
        .Q(protected_read_addr[21]),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][21]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr][22]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][Addr][22]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg__0 ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\update_info_reg[Evict] [14]),
        .Q(protected_read_addr[22]),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][22]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr][23]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][Addr][23]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg__0 ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\update_info_reg[Evict] [15]),
        .Q(protected_read_addr[23]),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][23]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr][24]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][Addr][24]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg__0 ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\update_info_reg[Evict] [16]),
        .Q(protected_read_addr[24]),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][24]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr][25]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][Addr][25]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg__0 ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\update_info_reg[Evict] [17]),
        .Q(protected_read_addr[25]),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][25]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr][26]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][Addr][26]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg__0 ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\update_info_reg[Evict] [18]),
        .Q(protected_read_addr[26]),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][26]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr][27]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][Addr][27]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg__0 ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\update_info_reg[Evict] [19]),
        .Q(protected_read_addr[27]),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][27]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr][28]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][Addr][28]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg__0 ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\update_info_reg[Evict] [20]),
        .Q(protected_read_addr[28]),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][28]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr][29]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][Addr][29]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg__0 ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\update_info_reg[Evict] [21]),
        .Q(protected_read_addr[29]),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][29]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr][30]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][Addr][30]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg__0 ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\update_info_reg[Evict] [22]),
        .Q(protected_read_addr[30]),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][30]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr][31]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][Addr][31]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg__0 ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\update_info_reg[Evict] [23]),
        .Q(protected_read_addr[31]),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][31]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr][6]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][Addr][6]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg__0 ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(in[6]),
        .Q(protected_read_addr[6]),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][6]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr][7]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][Addr][7]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg__0 ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(in[7]),
        .Q(protected_read_addr[7]),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][7]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr][8]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][Addr][8]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg__0 ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(in[8]),
        .Q(protected_read_addr[8]),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][8]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Addr][9]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][Addr][9]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg__0 ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(in[9]),
        .Q(protected_read_addr[9]),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Addr][9]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Line_Only] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][Line_Only][-1111111111]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][Line_Only][-1111111111]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg__0 ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\write_req_info[0][Line_Only] ),
        .Q(\Order_Optimization_4.hist_fifo_mem_reg[31][Line_Only][-1111111111]_srl32_n_0 ),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][Line_Only][-1111111111]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][SeqId] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][0]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][0]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg__0 ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(write_seq_id_reg__0[0]),
        .Q(\Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][0]_srl32_n_0 ),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][0]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][SeqId] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][1]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][1]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg__0 ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(write_seq_id_reg__0[1]),
        .Q(\Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][1]_srl32_n_0 ),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][1]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][SeqId] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][2]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][2]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg__0 ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(write_seq_id_reg__0[2]),
        .Q(\Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][2]_srl32_n_0 ),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][2]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][SeqId] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][3]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][3]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg__0 ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(write_seq_id_reg__0[3]),
        .Q(\Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][3]_srl32_n_0 ),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][3]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][SeqId] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][4]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][4]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg__0 ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(write_seq_id_reg__0[4]),
        .Q(\Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][4]_srl32_n_0 ),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][4]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][SeqId] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][5]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][5]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg__0 ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(write_seq_id_reg__0[5]),
        .Q(protected_seq_block[5]),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][5]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][SeqId] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][6]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][6]_srl32 
       (.A(\Order_Optimization_4.buffer_addr_reg__0 ),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(write_seq_id_reg__0[6]),
        .Q(protected_seq_block[6]),
        .Q31(\NLW_Order_Optimization_4.hist_fifo_mem_reg[31][SeqId][6]_srl32_Q31_UNCONNECTED ));
  LUT1 #(
    .INIT(2'h1)) 
    \Order_Optimization_4.search_count[0]_i_1 
       (.I0(\Order_Optimization_4.search_count_reg__0 [0]),
        .O(\Order_Optimization_4.search_count[0]_i_1_n_0 ));
  LUT2 #(
    .INIT(4'h6)) 
    \Order_Optimization_4.search_count[1]_i_1 
       (.I0(\Order_Optimization_4.search_count_reg__0 [1]),
        .I1(\Order_Optimization_4.search_count_reg__0 [0]),
        .O(p_0_in[1]));
  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \Order_Optimization_4.search_count[2]_i_1 
       (.I0(\Order_Optimization_4.search_count_reg__0 [2]),
        .I1(\Order_Optimization_4.search_count_reg__0 [0]),
        .I2(\Order_Optimization_4.search_count_reg__0 [1]),
        .O(p_0_in[2]));
  (* SOFT_HLUTNM = "soft_lutpair15" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \Order_Optimization_4.search_count[3]_i_1 
       (.I0(\Order_Optimization_4.search_count_reg__0 [3]),
        .I1(\Order_Optimization_4.search_count_reg__0 [1]),
        .I2(\Order_Optimization_4.search_count_reg__0 [0]),
        .I3(\Order_Optimization_4.search_count_reg__0 [2]),
        .O(p_0_in[3]));
  (* SOFT_HLUTNM = "soft_lutpair11" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \Order_Optimization_4.search_count[4]_i_1 
       (.I0(\Order_Optimization_4.search_count_reg__0 [4]),
        .I1(\Order_Optimization_4.search_count_reg__0 [2]),
        .I2(\Order_Optimization_4.search_count_reg__0 [0]),
        .I3(\Order_Optimization_4.search_count_reg__0 [1]),
        .I4(\Order_Optimization_4.search_count_reg__0 [3]),
        .O(p_0_in[4]));
  FDSE \Order_Optimization_4.search_count_reg[0] 
       (.C(ACLK),
        .CE(p_20_out),
        .D(\Order_Optimization_4.search_count[0]_i_1_n_0 ),
        .Q(\Order_Optimization_4.search_count_reg__0 [0]),
        .S(ar_pop_or_reset));
  FDRE \Order_Optimization_4.search_count_reg[1] 
       (.C(ACLK),
        .CE(p_20_out),
        .D(p_0_in[1]),
        .Q(\Order_Optimization_4.search_count_reg__0 [1]),
        .R(ar_pop_or_reset));
  FDRE \Order_Optimization_4.search_count_reg[2] 
       (.C(ACLK),
        .CE(p_20_out),
        .D(p_0_in[2]),
        .Q(\Order_Optimization_4.search_count_reg__0 [2]),
        .R(ar_pop_or_reset));
  FDRE \Order_Optimization_4.search_count_reg[3] 
       (.C(ACLK),
        .CE(p_20_out),
        .D(p_0_in[3]),
        .Q(\Order_Optimization_4.search_count_reg__0 [3]),
        .R(ar_pop_or_reset));
  FDRE \Order_Optimization_4.search_count_reg[4] 
       (.C(ACLK),
        .CE(p_20_out),
        .D(p_0_in[4]),
        .Q(\Order_Optimization_4.search_count_reg__0 [4]),
        .R(ar_pop_or_reset));
  (* C_CE_LOW = "1'b0" *) 
  (* C_IS_SET = "1'b0" *) 
  (* C_NUM_CE = "1" *) 
  (* C_TARGET = "3" *) 
  (* DONT_TOUCH *) 
  design_1_system_cache_0_0_bit_reg_ce__15 Reset_Inst
       (.CE(1'b1),
        .CLK(ACLK),
        .D(ARESET),
        .Q(ARESET_I),
        .SR(1'b0));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Addr][0]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(queue_push29_out),
        .CLK(ACLK),
        .D(in[0]),
        .Q(out[0]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr][10]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Addr][10]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(queue_push29_out),
        .CLK(ACLK),
        .D(in[10]),
        .Q(out[10]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr][11]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Addr][11]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(queue_push29_out),
        .CLK(ACLK),
        .D(in[11]),
        .Q(out[11]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr][12]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Addr][12]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(queue_push29_out),
        .CLK(ACLK),
        .D(in[12]),
        .Q(out[12]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr][13]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Addr][13]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(queue_push29_out),
        .CLK(ACLK),
        .D(in[13]),
        .Q(out[13]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr][14]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Addr][14]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(queue_push29_out),
        .CLK(ACLK),
        .D(in[14]),
        .Q(out[14]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr][15]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Addr][15]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(queue_push29_out),
        .CLK(ACLK),
        .D(in[15]),
        .Q(out[15]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr][16]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Addr][16]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(queue_push29_out),
        .CLK(ACLK),
        .D(in[16]),
        .Q(out[16]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr][17]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Addr][17]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(queue_push29_out),
        .CLK(ACLK),
        .D(in[17]),
        .Q(out[17]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr][18]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Addr][18]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(queue_push29_out),
        .CLK(ACLK),
        .D(in[18]),
        .Q(out[18]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr][19]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Addr][19]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(queue_push29_out),
        .CLK(ACLK),
        .D(in[19]),
        .Q(out[19]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr][1]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Addr][1]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(queue_push29_out),
        .CLK(ACLK),
        .D(in[1]),
        .Q(out[1]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr][20]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Addr][20]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(queue_push29_out),
        .CLK(ACLK),
        .D(in[20]),
        .Q(out[20]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr][21]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Addr][21]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(queue_push29_out),
        .CLK(ACLK),
        .D(in[21]),
        .Q(out[21]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr][22]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Addr][22]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(queue_push29_out),
        .CLK(ACLK),
        .D(in[22]),
        .Q(out[22]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr][23]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Addr][23]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(queue_push29_out),
        .CLK(ACLK),
        .D(in[23]),
        .Q(out[23]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr][24]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Addr][24]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(queue_push29_out),
        .CLK(ACLK),
        .D(in[24]),
        .Q(out[24]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr][25]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Addr][25]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(queue_push29_out),
        .CLK(ACLK),
        .D(in[25]),
        .Q(out[25]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr][26]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Addr][26]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(queue_push29_out),
        .CLK(ACLK),
        .D(in[26]),
        .Q(out[26]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr][27]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Addr][27]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(queue_push29_out),
        .CLK(ACLK),
        .D(in[27]),
        .Q(out[27]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr][28]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Addr][28]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(queue_push29_out),
        .CLK(ACLK),
        .D(in[28]),
        .Q(out[28]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr][29]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Addr][29]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(queue_push29_out),
        .CLK(ACLK),
        .D(in[29]),
        .Q(out[29]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr][2]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Addr][2]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(queue_push29_out),
        .CLK(ACLK),
        .D(in[2]),
        .Q(out[2]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr][30]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Addr][30]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(queue_push29_out),
        .CLK(ACLK),
        .D(in[30]),
        .Q(out[30]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr][31]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Addr][31]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(queue_push29_out),
        .CLK(ACLK),
        .D(in[31]),
        .Q(out[31]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr][3]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Addr][3]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(queue_push29_out),
        .CLK(ACLK),
        .D(in[3]),
        .Q(out[3]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr][4]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Addr][4]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(queue_push29_out),
        .CLK(ACLK),
        .D(in[4]),
        .Q(out[4]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr][5]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Addr][5]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(queue_push29_out),
        .CLK(ACLK),
        .D(in[5]),
        .Q(out[5]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr][6]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Addr][6]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(queue_push29_out),
        .CLK(ACLK),
        .D(in[6]),
        .Q(out[6]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr][7]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Addr][7]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(queue_push29_out),
        .CLK(ACLK),
        .D(in[7]),
        .Q(out[7]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr][8]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Addr][8]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(queue_push29_out),
        .CLK(ACLK),
        .D(in[8]),
        .Q(out[8]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Addr][9]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Addr][9]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(queue_push29_out),
        .CLK(ACLK),
        .D(in[9]),
        .Q(out[9]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Kind] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Kind][-1111111111]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Kind][-1111111111]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(queue_push29_out),
        .CLK(ACLK),
        .D(\read_req_info[0][Kind] ),
        .Q(\read_req_ordered_info[0][Kind] ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Len][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Len][0]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(queue_push29_out),
        .CLK(ACLK),
        .D(\update_info_reg[Len][7] [0]),
        .Q(\M_AXI_ARLEN_reg[7] [0]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Len][1]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Len][1]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(queue_push29_out),
        .CLK(ACLK),
        .D(\update_info_reg[Len][7] [1]),
        .Q(\M_AXI_ARLEN_reg[7] [1]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Len][2]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Len][2]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(queue_push29_out),
        .CLK(ACLK),
        .D(\update_info_reg[Len][7] [2]),
        .Q(\M_AXI_ARLEN_reg[7] [2]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Len][3]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Len][3]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(queue_push29_out),
        .CLK(ACLK),
        .D(\update_info_reg[Len][7] [3]),
        .Q(\M_AXI_ARLEN_reg[7] [3]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Len][4]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Len][4]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(queue_push29_out),
        .CLK(ACLK),
        .D(\update_info_reg[Len][7] [4]),
        .Q(\M_AXI_ARLEN_reg[7] [4]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Len][5]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Len][5]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(queue_push29_out),
        .CLK(ACLK),
        .D(\update_info_reg[Len][7] [5]),
        .Q(\M_AXI_ARLEN_reg[7] [5]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Len][6]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Len][6]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(queue_push29_out),
        .CLK(ACLK),
        .D(\update_info_reg[Len][7] [6]),
        .Q(\M_AXI_ARLEN_reg[7] [6]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Len][7]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Len][7]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(queue_push29_out),
        .CLK(ACLK),
        .D(\update_info_reg[Len][7] [7]),
        .Q(\M_AXI_ARLEN_reg[7] [7]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Prot] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Prot][1]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Prot][1]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(queue_push29_out),
        .CLK(ACLK),
        .D(1'b1),
        .Q(\read_req_ordered_info[0][Prot] ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Size] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Size][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Size][0]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(queue_push29_out),
        .CLK(ACLK),
        .D(\update_info_reg[Size][2] [0]),
        .Q(\M_AXI_ARSIZE_reg[2] [0]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Size] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Size][1]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Size][1]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(queue_push29_out),
        .CLK(ACLK),
        .D(\update_info_reg[Size][2] [1]),
        .Q(\M_AXI_ARSIZE_reg[2] [1]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Size] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_fifo_mem_reg[15][Size][2]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_fifo_mem_reg[15][Size][2]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(queue_push29_out),
        .CLK(ACLK),
        .D(\update_info_reg[Size][2] [2]),
        .Q(\M_AXI_ARSIZE_reg[2] [2]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_id_fifo_mem_reg[15] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_id_fifo_mem_reg[15][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_id_fifo_mem_reg[15][0]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(queue_push29_out),
        .CLK(ACLK),
        .D(write_seq_id_reg__0[0]),
        .Q(\ar_id_fifo_mem_reg[15][0]_srl16_n_0 ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_id_fifo_mem_reg[15] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_id_fifo_mem_reg[15][1]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_id_fifo_mem_reg[15][1]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(queue_push29_out),
        .CLK(ACLK),
        .D(write_seq_id_reg__0[1]),
        .Q(\ar_id_fifo_mem_reg[15][1]_srl16_n_0 ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_id_fifo_mem_reg[15] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_id_fifo_mem_reg[15][2]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_id_fifo_mem_reg[15][2]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(queue_push29_out),
        .CLK(ACLK),
        .D(write_seq_id_reg__0[2]),
        .Q(\ar_id_fifo_mem_reg[15][2]_srl16_n_0 ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_id_fifo_mem_reg[15] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_id_fifo_mem_reg[15][3]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_id_fifo_mem_reg[15][3]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(queue_push29_out),
        .CLK(ACLK),
        .D(write_seq_id_reg__0[3]),
        .Q(\ar_id_fifo_mem_reg[15][3]_srl16_n_0 ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_id_fifo_mem_reg[15] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_id_fifo_mem_reg[15][4]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_id_fifo_mem_reg[15][4]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(queue_push29_out),
        .CLK(ACLK),
        .D(write_seq_id_reg__0[4]),
        .Q(\ar_id_fifo_mem_reg[15][4]_srl16_n_0 ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_id_fifo_mem_reg[15] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_id_fifo_mem_reg[15][5]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_id_fifo_mem_reg[15][5]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(queue_push29_out),
        .CLK(ACLK),
        .D(write_seq_id_reg__0[5]),
        .Q(ar_seq_block[5]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_id_fifo_mem_reg[15] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/ar_id_fifo_mem_reg[15][6]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ar_id_fifo_mem_reg[15][6]_srl16 
       (.A0(ar_read_fifo_addr[0]),
        .A1(ar_read_fifo_addr[1]),
        .A2(ar_read_fifo_addr[2]),
        .A3(ar_read_fifo_addr[3]),
        .CE(queue_push29_out),
        .CLK(ACLK),
        .D(write_seq_id_reg__0[6]),
        .Q(ar_seq_block[6]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Addr][0]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\update_info_reg[Evict] [0]),
        .Q(\M_AXI_AWADDR_reg[31] [0]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr][10]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Addr][10]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(in[10]),
        .Q(\M_AXI_AWADDR_reg[31] [10]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr][11]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Addr][11]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(in[11]),
        .Q(\M_AXI_AWADDR_reg[31] [11]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr][12]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Addr][12]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(in[12]),
        .Q(\M_AXI_AWADDR_reg[31] [12]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr][13]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Addr][13]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(in[13]),
        .Q(\M_AXI_AWADDR_reg[31] [13]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr][14]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Addr][14]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\update_info_reg[Evict] [6]),
        .Q(\M_AXI_AWADDR_reg[31] [14]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr][15]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Addr][15]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\update_info_reg[Evict] [7]),
        .Q(\M_AXI_AWADDR_reg[31] [15]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr][16]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Addr][16]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\update_info_reg[Evict] [8]),
        .Q(\M_AXI_AWADDR_reg[31] [16]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr][17]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Addr][17]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\update_info_reg[Evict] [9]),
        .Q(\M_AXI_AWADDR_reg[31] [17]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr][18]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Addr][18]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\update_info_reg[Evict] [10]),
        .Q(\M_AXI_AWADDR_reg[31] [18]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr][19]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Addr][19]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\update_info_reg[Evict] [11]),
        .Q(\M_AXI_AWADDR_reg[31] [19]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr][1]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Addr][1]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\update_info_reg[Evict] [1]),
        .Q(\M_AXI_AWADDR_reg[31] [1]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr][20]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Addr][20]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\update_info_reg[Evict] [12]),
        .Q(\M_AXI_AWADDR_reg[31] [20]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr][21]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Addr][21]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\update_info_reg[Evict] [13]),
        .Q(\M_AXI_AWADDR_reg[31] [21]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr][22]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Addr][22]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\update_info_reg[Evict] [14]),
        .Q(\M_AXI_AWADDR_reg[31] [22]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr][23]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Addr][23]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\update_info_reg[Evict] [15]),
        .Q(\M_AXI_AWADDR_reg[31] [23]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr][24]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Addr][24]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\update_info_reg[Evict] [16]),
        .Q(\M_AXI_AWADDR_reg[31] [24]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr][25]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Addr][25]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\update_info_reg[Evict] [17]),
        .Q(\M_AXI_AWADDR_reg[31] [25]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr][26]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Addr][26]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\update_info_reg[Evict] [18]),
        .Q(\M_AXI_AWADDR_reg[31] [26]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr][27]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Addr][27]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\update_info_reg[Evict] [19]),
        .Q(\M_AXI_AWADDR_reg[31] [27]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr][28]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Addr][28]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\update_info_reg[Evict] [20]),
        .Q(\M_AXI_AWADDR_reg[31] [28]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr][29]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Addr][29]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\update_info_reg[Evict] [21]),
        .Q(\M_AXI_AWADDR_reg[31] [29]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr][2]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Addr][2]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\update_info_reg[Evict] [2]),
        .Q(\M_AXI_AWADDR_reg[31] [2]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr][30]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Addr][30]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\update_info_reg[Evict] [22]),
        .Q(\M_AXI_AWADDR_reg[31] [30]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr][31]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Addr][31]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\update_info_reg[Evict] [23]),
        .Q(\M_AXI_AWADDR_reg[31] [31]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr][3]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Addr][3]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\update_info_reg[Evict] [3]),
        .Q(\M_AXI_AWADDR_reg[31] [3]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr][4]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Addr][4]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\update_info_reg[Evict] [4]),
        .Q(\M_AXI_AWADDR_reg[31] [4]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr][5]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Addr][5]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\update_info_reg[Evict] [5]),
        .Q(\M_AXI_AWADDR_reg[31] [5]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr][6]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Addr][6]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(in[6]),
        .Q(\M_AXI_AWADDR_reg[31] [6]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr][7]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Addr][7]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(in[7]),
        .Q(\M_AXI_AWADDR_reg[31] [7]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr][8]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Addr][8]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(in[8]),
        .Q(\M_AXI_AWADDR_reg[31] [8]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Addr][9]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Addr][9]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(in[9]),
        .Q(\M_AXI_AWADDR_reg[31] [9]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Kind] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Kind][-1111111111]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Kind][-1111111111]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\update_info_reg[Kind] ),
        .Q(\write_req_ordered_info[0][Kind] ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Len][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Len][0]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\update_info_reg[Len][7]_0 [0]),
        .Q(\M_AXI_AWLEN_reg[7] [0]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Len][1]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Len][1]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\update_info_reg[Len][7]_0 [1]),
        .Q(\M_AXI_AWLEN_reg[7] [1]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Len][2]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Len][2]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\update_info_reg[Len][7]_0 [2]),
        .Q(\M_AXI_AWLEN_reg[7] [2]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Len][3]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Len][3]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\update_info_reg[Len][7]_0 [3]),
        .Q(\M_AXI_AWLEN_reg[7] [3]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Len][4]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Len][4]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\update_info_reg[Len][7]_0 [4]),
        .Q(\M_AXI_AWLEN_reg[7] [4]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Len][5]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Len][5]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\update_info_reg[Len][7]_0 [5]),
        .Q(\M_AXI_AWLEN_reg[7] [5]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Len][6]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Len][6]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\update_info_reg[Len][7]_0 [6]),
        .Q(\M_AXI_AWLEN_reg[7] [6]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Len][7]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Len][7]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\update_info_reg[Len][7]_0 [7]),
        .Q(\M_AXI_AWLEN_reg[7] [7]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Prot] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Prot][1]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Prot][1]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(1'b1),
        .Q(\write_req_ordered_info[0][Prot] ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Size] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Size][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Size][0]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 [0]),
        .Q(\M_AXI_AWSIZE_reg[1] [0]));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Size] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/aw_fifo_mem_reg[15][Size][1]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \aw_fifo_mem_reg[15][Size][1]_srl16 
       (.A0(queue_index[0]),
        .A1(queue_index[1]),
        .A2(queue_index[2]),
        .A3(queue_index[3]),
        .CE(queue_push26_out),
        .CLK(ACLK),
        .D(\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 [1]),
        .Q(\M_AXI_AWSIZE_reg[1] [1]));
  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT4 #(
    .INIT(16'h8000)) 
    need_to_stall_write_i_2
       (.I0(pending_write_reg__0[2]),
        .I1(pending_write_reg__0[1]),
        .I2(pending_write_reg__0[4]),
        .I3(pending_write_reg__0[3]),
        .O(need_to_stall_write_i_2_n_0));
  FDRE need_to_stall_write_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(FIFO_AW_Pointer_n_12),
        .Q(\write_seq_id_reg[6]_1 ),
        .R(1'b0));
  LUT1 #(
    .INIT(2'h1)) 
    \pending_write[0]_i_1 
       (.I0(pending_write_reg__0[0]),
        .O(\pending_write[0]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair13" *) 
  LUT3 #(
    .INIT(8'hFE)) 
    pending_write_is_1_i_3
       (.I0(pending_write_reg__0[2]),
        .I1(pending_write_reg__0[3]),
        .I2(pending_write_reg__0[4]),
        .O(pending_write_is_1_i_3_n_0));
  FDRE pending_write_is_1_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(FIFO_AW_Pointer_n_13),
        .Q(pending_write_is_1),
        .R(1'b0));
  FDRE \pending_write_reg[0] 
       (.C(ACLK),
        .CE(E),
        .D(\pending_write[0]_i_1_n_0 ),
        .Q(pending_write_reg__0[0]),
        .R(ARESET_I));
  FDRE \pending_write_reg[1] 
       (.C(ACLK),
        .CE(E),
        .D(FIFO_AW_Pointer_n_11),
        .Q(pending_write_reg__0[1]),
        .R(ARESET_I));
  FDRE \pending_write_reg[2] 
       (.C(ACLK),
        .CE(E),
        .D(FIFO_AW_Pointer_n_10),
        .Q(pending_write_reg__0[2]),
        .R(ARESET_I));
  FDRE \pending_write_reg[3] 
       (.C(ACLK),
        .CE(E),
        .D(FIFO_AW_Pointer_n_9),
        .Q(pending_write_reg__0[3]),
        .R(ARESET_I));
  FDRE \pending_write_reg[4] 
       (.C(ACLK),
        .CE(E),
        .D(FIFO_AW_Pointer_n_8),
        .Q(pending_write_reg__0[4]),
        .R(ARESET_I));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][BE] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][BE][0]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][BE][0]_srl32 
       (.A({w_read_fifo_addr[4],A,w_read_fifo_addr[2:0]}),
        .CE(queue_push),
        .CLK(ACLK),
        .D(update_evict_busy_reg[0]),
        .Q(\M_AXI_WSTRB_reg[3] [0]),
        .Q31(\NLW_w_fifo_mem_reg[31][BE][0]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][BE] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][BE][1]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][BE][1]_srl32 
       (.A({w_read_fifo_addr[4],A,w_read_fifo_addr[2:0]}),
        .CE(queue_push),
        .CLK(ACLK),
        .D(update_evict_busy_reg[1]),
        .Q(\M_AXI_WSTRB_reg[3] [1]),
        .Q31(\NLW_w_fifo_mem_reg[31][BE][1]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][BE] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][BE][2]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][BE][2]_srl32 
       (.A({w_read_fifo_addr[4],A,w_read_fifo_addr[2:0]}),
        .CE(queue_push),
        .CLK(ACLK),
        .D(update_evict_busy_reg[2]),
        .Q(\M_AXI_WSTRB_reg[3] [2]),
        .Q31(\NLW_w_fifo_mem_reg[31][BE][2]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][BE] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][BE][3]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][BE][3]_srl32 
       (.A({w_read_fifo_addr[4],A,w_read_fifo_addr[2:0]}),
        .CE(queue_push),
        .CLK(ACLK),
        .D(update_evict_busy_reg[3]),
        .Q(\M_AXI_WSTRB_reg[3] [3]),
        .Q31(\NLW_w_fifo_mem_reg[31][BE][3]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][0]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][0]_srl32 
       (.A({w_read_fifo_addr[4],A,w_read_fifo_addr[2:0]}),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [0]),
        .Q(\M_AXI_WDATA_reg[31] [0]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][0]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][10]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][10]_srl32 
       (.A({w_read_fifo_addr[4],A,w_read_fifo_addr[2:0]}),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [10]),
        .Q(\M_AXI_WDATA_reg[31] [10]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][10]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][11]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][11]_srl32 
       (.A({w_read_fifo_addr[4],A,w_read_fifo_addr[2:0]}),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [11]),
        .Q(\M_AXI_WDATA_reg[31] [11]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][11]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][12]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][12]_srl32 
       (.A({w_read_fifo_addr[4],A,w_read_fifo_addr[2:0]}),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [12]),
        .Q(\M_AXI_WDATA_reg[31] [12]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][12]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][13]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][13]_srl32 
       (.A({w_read_fifo_addr[4],A,w_read_fifo_addr[2:0]}),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [13]),
        .Q(\M_AXI_WDATA_reg[31] [13]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][13]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][14]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][14]_srl32 
       (.A({w_read_fifo_addr[4],A,w_read_fifo_addr[2:0]}),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [14]),
        .Q(\M_AXI_WDATA_reg[31] [14]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][14]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][15]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][15]_srl32 
       (.A({w_read_fifo_addr[4],A,w_read_fifo_addr[2:0]}),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [15]),
        .Q(\M_AXI_WDATA_reg[31] [15]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][15]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][16]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][16]_srl32 
       (.A({w_read_fifo_addr[4],A,w_read_fifo_addr[2:0]}),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [16]),
        .Q(\M_AXI_WDATA_reg[31] [16]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][16]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][17]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][17]_srl32 
       (.A({w_read_fifo_addr[4],A,w_read_fifo_addr[2:0]}),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [17]),
        .Q(\M_AXI_WDATA_reg[31] [17]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][17]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][18]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][18]_srl32 
       (.A({w_read_fifo_addr[4],A,w_read_fifo_addr[2:0]}),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [18]),
        .Q(\M_AXI_WDATA_reg[31] [18]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][18]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][19]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][19]_srl32 
       (.A({w_read_fifo_addr[4],A,w_read_fifo_addr[2:0]}),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [19]),
        .Q(\M_AXI_WDATA_reg[31] [19]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][19]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][1]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][1]_srl32 
       (.A({w_read_fifo_addr[4],A,w_read_fifo_addr[2:0]}),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [1]),
        .Q(\M_AXI_WDATA_reg[31] [1]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][1]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][20]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][20]_srl32 
       (.A({w_read_fifo_addr[4],A,w_read_fifo_addr[2:0]}),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [20]),
        .Q(\M_AXI_WDATA_reg[31] [20]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][20]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][21]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][21]_srl32 
       (.A({w_read_fifo_addr[4],A,w_read_fifo_addr[2:0]}),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [21]),
        .Q(\M_AXI_WDATA_reg[31] [21]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][21]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][22]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][22]_srl32 
       (.A({w_read_fifo_addr[4],A,w_read_fifo_addr[2:0]}),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [22]),
        .Q(\M_AXI_WDATA_reg[31] [22]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][22]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][23]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][23]_srl32 
       (.A({w_read_fifo_addr[4],A,w_read_fifo_addr[2:0]}),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [23]),
        .Q(\M_AXI_WDATA_reg[31] [23]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][23]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][24]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][24]_srl32 
       (.A({w_read_fifo_addr[4],A,w_read_fifo_addr[2:0]}),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [24]),
        .Q(\M_AXI_WDATA_reg[31] [24]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][24]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][25]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][25]_srl32 
       (.A({w_read_fifo_addr[4],A,w_read_fifo_addr[2:0]}),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [25]),
        .Q(\M_AXI_WDATA_reg[31] [25]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][25]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][26]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][26]_srl32 
       (.A({w_read_fifo_addr[4],A,w_read_fifo_addr[2:0]}),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [26]),
        .Q(\M_AXI_WDATA_reg[31] [26]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][26]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][27]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][27]_srl32 
       (.A({w_read_fifo_addr[4],A,w_read_fifo_addr[2:0]}),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [27]),
        .Q(\M_AXI_WDATA_reg[31] [27]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][27]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][28]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][28]_srl32 
       (.A({w_read_fifo_addr[4],A,w_read_fifo_addr[2:0]}),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [28]),
        .Q(\M_AXI_WDATA_reg[31] [28]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][28]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][29]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][29]_srl32 
       (.A({w_read_fifo_addr[4],A,w_read_fifo_addr[2:0]}),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [29]),
        .Q(\M_AXI_WDATA_reg[31] [29]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][29]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][2]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][2]_srl32 
       (.A({w_read_fifo_addr[4],A,w_read_fifo_addr[2:0]}),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [2]),
        .Q(\M_AXI_WDATA_reg[31] [2]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][2]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][30]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][30]_srl32 
       (.A({w_read_fifo_addr[4],A,w_read_fifo_addr[2:0]}),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [30]),
        .Q(\M_AXI_WDATA_reg[31] [30]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][30]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][31]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][31]_srl32 
       (.A({w_read_fifo_addr[4],A,w_read_fifo_addr[2:0]}),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [31]),
        .Q(\M_AXI_WDATA_reg[31] [31]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][31]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][3]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][3]_srl32 
       (.A({w_read_fifo_addr[4],A,w_read_fifo_addr[2:0]}),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [3]),
        .Q(\M_AXI_WDATA_reg[31] [3]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][3]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][4]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][4]_srl32 
       (.A({w_read_fifo_addr[4],A,w_read_fifo_addr[2:0]}),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [4]),
        .Q(\M_AXI_WDATA_reg[31] [4]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][4]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][5]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][5]_srl32 
       (.A({w_read_fifo_addr[4],A,w_read_fifo_addr[2:0]}),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [5]),
        .Q(\M_AXI_WDATA_reg[31] [5]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][5]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][6]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][6]_srl32 
       (.A({w_read_fifo_addr[4],A,w_read_fifo_addr[2:0]}),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [6]),
        .Q(\M_AXI_WDATA_reg[31] [6]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][6]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][7]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][7]_srl32 
       (.A({w_read_fifo_addr[4],A,w_read_fifo_addr[2:0]}),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [7]),
        .Q(\M_AXI_WDATA_reg[31] [7]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][7]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][8]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][8]_srl32 
       (.A({w_read_fifo_addr[4],A,w_read_fifo_addr[2:0]}),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [8]),
        .Q(\M_AXI_WDATA_reg[31] [8]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][8]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Data][9]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Data][9]_srl32 
       (.A({w_read_fifo_addr[4],A,w_read_fifo_addr[2:0]}),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 [9]),
        .Q(\M_AXI_WDATA_reg[31] [9]),
        .Q31(\NLW_w_fifo_mem_reg[31][Data][9]_srl32_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Last] " *) 
  (* srl_name = "U0/\BE/CB/Gen_Master_Ports[0].TransOrd/w_fifo_mem_reg[31][Last][-1111111111]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \w_fifo_mem_reg[31][Last][-1111111111]_srl32 
       (.A({w_read_fifo_addr[4],A,w_read_fifo_addr[2:0]}),
        .CE(queue_push),
        .CLK(ACLK),
        .D(\write_data_info[0][Last] ),
        .Q(\write_data_ordered_info[0][Last] ),
        .Q31(\NLW_w_fifo_mem_reg[31][Last][-1111111111]_srl32_Q31_UNCONNECTED ));
  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \write_seq_id[0]_i_1 
       (.I0(write_seq_id_reg__0[0]),
        .O(plusOp__0[0]));
  (* SOFT_HLUTNM = "soft_lutpair17" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \write_seq_id[1]_i_1 
       (.I0(write_seq_id_reg__0[0]),
        .I1(write_seq_id_reg__0[1]),
        .O(plusOp__0[1]));
  (* SOFT_HLUTNM = "soft_lutpair14" *) 
  LUT3 #(
    .INIT(8'h6A)) 
    \write_seq_id[2]_i_1 
       (.I0(write_seq_id_reg__0[2]),
        .I1(write_seq_id_reg__0[1]),
        .I2(write_seq_id_reg__0[0]),
        .O(plusOp__0[2]));
  (* SOFT_HLUTNM = "soft_lutpair14" *) 
  LUT4 #(
    .INIT(16'h6AAA)) 
    \write_seq_id[3]_i_1 
       (.I0(write_seq_id_reg__0[3]),
        .I1(write_seq_id_reg__0[0]),
        .I2(write_seq_id_reg__0[1]),
        .I3(write_seq_id_reg__0[2]),
        .O(plusOp__0[3]));
  (* SOFT_HLUTNM = "soft_lutpair10" *) 
  LUT5 #(
    .INIT(32'h6AAAAAAA)) 
    \write_seq_id[4]_i_1 
       (.I0(write_seq_id_reg__0[4]),
        .I1(write_seq_id_reg__0[2]),
        .I2(write_seq_id_reg__0[1]),
        .I3(write_seq_id_reg__0[0]),
        .I4(write_seq_id_reg__0[3]),
        .O(plusOp__0[4]));
  LUT6 #(
    .INIT(64'h6AAAAAAAAAAAAAAA)) 
    \write_seq_id[5]_i_1 
       (.I0(write_seq_id_reg__0[5]),
        .I1(write_seq_id_reg__0[3]),
        .I2(write_seq_id_reg__0[0]),
        .I3(write_seq_id_reg__0[1]),
        .I4(write_seq_id_reg__0[2]),
        .I5(write_seq_id_reg__0[4]),
        .O(plusOp__0[5]));
  LUT3 #(
    .INIT(8'h6A)) 
    \write_seq_id[6]_i_1 
       (.I0(write_seq_id_reg__0[6]),
        .I1(\write_seq_id[6]_i_2_n_0 ),
        .I2(write_seq_id_reg__0[5]),
        .O(plusOp__0[6]));
  (* SOFT_HLUTNM = "soft_lutpair10" *) 
  LUT5 #(
    .INIT(32'h80000000)) 
    \write_seq_id[6]_i_2 
       (.I0(write_seq_id_reg__0[4]),
        .I1(write_seq_id_reg__0[2]),
        .I2(write_seq_id_reg__0[1]),
        .I3(write_seq_id_reg__0[0]),
        .I4(write_seq_id_reg__0[3]),
        .O(\write_seq_id[6]_i_2_n_0 ));
  FDRE \write_seq_id_reg[0] 
       (.C(ACLK),
        .CE(queue_push26_out),
        .D(plusOp__0[0]),
        .Q(write_seq_id_reg__0[0]),
        .R(ARESET_I));
  FDRE \write_seq_id_reg[1] 
       (.C(ACLK),
        .CE(queue_push26_out),
        .D(plusOp__0[1]),
        .Q(write_seq_id_reg__0[1]),
        .R(ARESET_I));
  FDRE \write_seq_id_reg[2] 
       (.C(ACLK),
        .CE(queue_push26_out),
        .D(plusOp__0[2]),
        .Q(write_seq_id_reg__0[2]),
        .R(ARESET_I));
  FDRE \write_seq_id_reg[3] 
       (.C(ACLK),
        .CE(queue_push26_out),
        .D(plusOp__0[3]),
        .Q(write_seq_id_reg__0[3]),
        .R(ARESET_I));
  FDRE \write_seq_id_reg[4] 
       (.C(ACLK),
        .CE(queue_push26_out),
        .D(plusOp__0[4]),
        .Q(write_seq_id_reg__0[4]),
        .R(ARESET_I));
  FDRE \write_seq_id_reg[5] 
       (.C(ACLK),
        .CE(queue_push26_out),
        .D(plusOp__0[5]),
        .Q(write_seq_id_reg__0[5]),
        .R(ARESET_I));
  FDRE \write_seq_id_reg[6] 
       (.C(ACLK),
        .CE(queue_push26_out),
        .D(plusOp__0[6]),
        .Q(write_seq_id_reg__0[6]),
        .R(ARESET_I));
endmodule

(* ORIG_REF_NAME = "sc_update" *) 
module design_1_system_cache_0_0_sc_update
   (Q,
    update_tag_conflict,
    update_piperun,
    e_fifo_full,
    M0_AXI_RREADY,
    update_data_we,
    update_word_cnt_en,
    update_write_miss_full,
    \Use_FPGA.Full_Inst ,
    \Use_FPGA.Almost_Empty_Inst ,
    backend_rd_data_pop,
    bs_fifo_full,
    queue_push120_out,
    sel,
    ri_allocate,
    update_readback_available,
    WEB,
    update_cur_tag_rd_way,
    \ri_port_reg[0]_0 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 ,
    update_write_miss_ongoing_reg_0,
    update_word_cnt_last,
    ri_way,
    update_lock_release,
    \update_release_tag[Valid] ,
    \S_AXI_BID_reg[0] ,
    \update_wma_data_reg[24]_0 ,
    \pending_write_reg[4] ,
    update_done_ar_reg_0,
    \Long_External_Burst.update_rb_pos_phase_reg_0 ,
    in,
    \Long_External_Burst.update_rb_pos_phase_reg_1 ,
    update_done_evict,
    update_done_bs,
    update_rm_alloc_ongoing_reg_0,
    D,
    \update_read_data_info[0,0][Last] ,
    \write_data_info[0][Valid] ,
    \update_wr_offset_cnt_reg[0]_0 ,
    update_wma_data_valid,
    p_138_in,
    \write_data_info[0][Last] ,
    update_rm_alloc_ongoing,
    ADDRB,
    update_done_tag_write_reg_0,
    \update_read_data_info[0,1][Valid] ,
    \update_read_data_info[0,0][Valid] ,
    update_ext_bresp_any,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ,
    ADDRBWRADDR,
    M0_AXI_BREADY,
    update_readback_possible,
    update_read_miss_start,
    ENB,
    DATA_INB,
    \M_AXI_WSTRB_reg[3] ,
    \M_AXI_WDATA_reg[31] ,
    queue_push29_out,
    E,
    pending_write_is_1_reg,
    \lu_check_valid_bits_reg[1] ,
    lu_mem_releasing_lock,
    \lu_check_valid_bits_reg[1]_0 ,
    \lu_check_valid_bits_reg[1]_1 ,
    S_1,
    \lu_check_tag_hit_reg[0] ,
    \lu_check_tag_hit_reg[1] ,
    queue_push,
    \Use_FPGA.Almost_Full_Inst ,
    \Use_FPGA.Almost_Full_Inst_0 ,
    \S_AXI_BRESP_reg[0] ,
    \S_AXI_BRESP_reg[1] ,
    M_AXI_ARVALID_I_reg,
    \lookup_offset_len_cnt_reg[3] ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_0 ,
    O,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_1 ,
    update_write_miss_busy,
    ACLK,
    ARESET,
    \The_Compare[0].sel_reg ,
    A_0,
    \The_Compare[2].sel_reg ,
    access_valid,
    ud_new_tag_valid2,
    update_read_miss,
    S,
    S_2,
    \update_info_reg[Allocate] ,
    update_valid,
    lookup_push_write_miss,
    M0_AXI_RVALID,
    \The_Compare[0].sel_reg_3 ,
    A_4,
    \The_Compare[2].sel_reg_5 ,
    \The_Compare[3].sel_reg ,
    \The_Compare[4].sel_reg ,
    \The_Compare[5].sel_reg ,
    \The_Compare[0].sel_reg_6 ,
    A_7,
    \The_Compare[2].sel_reg_8 ,
    \The_Compare[3].sel_reg_9 ,
    \The_Compare[4].sel_reg_10 ,
    \The_Compare[5].sel_reg_11 ,
    \update_info[Allocate] ,
    \update_info[Wr] ,
    \lu_check_info_reg[Port_Num][0] ,
    lookup_wm_allocate,
    \write_req_info[0][Internal] ,
    lookup_wm_evict,
    \lu_check_info_reg[Kind] ,
    update_way,
    \write_req_info[0][Port_Num] ,
    \update_info[Kind] ,
    \update_info[Early] ,
    \update_info[Internal_Cmd] ,
    lookup_wm_allow_write,
    lookup_wm_will_use,
    write_data_full,
    \update_info_reg[Port_Num][0] ,
    need_to_stall_write_reg,
    update_done_tag_write_reg_1,
    \Use_FPGA.Full_Inst_0 ,
    update_read_miss_ongoing_reg_0,
    wr_port_data_last_i_reg,
    \ri_way_reg[0]_0 ,
    \Use_FPGA.Full_Inst_1 ,
    \Use_FPGA.Full_Inst_2 ,
    update_rm_alloc_ongoing_reg_1,
    \bs_fifo_mem_reg[0][Src][1]_0 ,
    \bs_fifo_mem_reg[0][Src][0]_0 ,
    update_need_bs,
    M0_AXI_BVALID,
    r_miss_fifo_full,
    \read_data_status[0,0][Hit_Full] ,
    \lookup_read_data_info[0,0][Valid] ,
    \access_data_info[0,1][Last] ,
    \access_data_info[0,0][Last] ,
    wr_port_data_valid_i_reg,
    update_wr_miss_rs_last,
    write_data_almost_full,
    update_need_tag_write,
    \update_info_reg[Addr][31] ,
    M0_AXI_RLAST,
    \Use_FPGA.Empty_Inst ,
    \Use_FPGA.Empty_Inst_0 ,
    DATA_OUTB,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ,
    aw_fifo_full,
    need_to_stall_write_reg_0,
    \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ,
    queue_full,
    update_miss,
    \wr_port_data_info_reg[0][BE][3] ,
    \wr_port_data_info_reg[0][BE][3]_0 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 ,
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_3 ,
    \wr_port_data_info_reg[0][Data][31] ,
    lu_mem_removed_way_hold,
    lud_mem_conflict,
    DATA_OUTA,
    \lu_mem_info_reg[Addr][11] ,
    B_Vec,
    \lu_mem_info_reg[Addr][10] ,
    pending_write_is_1,
    \Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst ,
    A,
    \Use_FPGA.Empty_Inst_1 ,
    r_miss_fifo_full_8,
    \read_data_status[0,1][Hit_Full] ,
    \lookup_read_data_info[0,1][Valid] ,
    \lud_reg_valid_one_hot_reg[1] ,
    \lud_reg_valid_one_hot_reg[0] ,
    lud_mem_waiting_for_pipe_reg,
    lookup_offset_first,
    M0_AXI_RDATA,
    \lu_check_info_reg[Addr_Use][5] ,
    \lu_check_info_reg[Addr][5] ,
    \lu_check_info_reg[Addr_Stp][5] ,
    \update_info_reg[Len][7] ,
    \update_info_reg[Addr_Use][5] ,
    \update_info_reg[Addr_Stp][5] ,
    M0_AXI_BRESP,
    p_3_in,
    p_2_in,
    p_1_in3_in,
    \wr_port_data_info_reg[0][BE][0] ,
    lopt,
    lopt_1,
    lopt_2,
    lopt_3,
    lopt_4);
  output Q;
  output update_tag_conflict;
  output update_piperun;
  output e_fifo_full;
  output M0_AXI_RREADY;
  output update_data_we;
  output update_word_cnt_en;
  output update_write_miss_full;
  output \Use_FPGA.Full_Inst ;
  output \Use_FPGA.Almost_Empty_Inst ;
  output backend_rd_data_pop;
  output bs_fifo_full;
  output queue_push120_out;
  output sel;
  output ri_allocate;
  output update_readback_available;
  output [1:0]WEB;
  output update_cur_tag_rd_way;
  output \ri_port_reg[0]_0 ;
  output \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 ;
  output update_write_miss_ongoing_reg_0;
  output update_word_cnt_last;
  output ri_way;
  output update_lock_release;
  output \update_release_tag[Valid] ;
  output \S_AXI_BID_reg[0] ;
  output \update_wma_data_reg[24]_0 ;
  output \pending_write_reg[4] ;
  output update_done_ar_reg_0;
  output \Long_External_Burst.update_rb_pos_phase_reg_0 ;
  output in;
  output \Long_External_Burst.update_rb_pos_phase_reg_1 ;
  output update_done_evict;
  output update_done_bs;
  output update_rm_alloc_ongoing_reg_0;
  output [1:0]D;
  output \update_read_data_info[0,0][Last] ;
  output \write_data_info[0][Valid] ;
  output \update_wr_offset_cnt_reg[0]_0 ;
  output update_wma_data_valid;
  output p_138_in;
  output \write_data_info[0][Last] ;
  output update_rm_alloc_ongoing;
  output [7:0]ADDRB;
  output update_done_tag_write_reg_0;
  output \update_read_data_info[0,1][Valid] ;
  output \update_read_data_info[0,0][Valid] ;
  output update_ext_bresp_any;
  output [17:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ;
  output [11:0]ADDRBWRADDR;
  output M0_AXI_BREADY;
  output update_readback_possible;
  output update_read_miss_start;
  output ENB;
  output [18:0]DATA_INB;
  output [3:0]\M_AXI_WSTRB_reg[3] ;
  output [31:0]\M_AXI_WDATA_reg[31] ;
  output queue_push29_out;
  output [0:0]E;
  output pending_write_is_1_reg;
  output [1:0]\lu_check_valid_bits_reg[1] ;
  output [1:0]lu_mem_releasing_lock;
  output \lu_check_valid_bits_reg[1]_0 ;
  output [1:0]\lu_check_valid_bits_reg[1]_1 ;
  output S_1;
  output \lu_check_tag_hit_reg[0] ;
  output \lu_check_tag_hit_reg[1] ;
  output queue_push;
  output \Use_FPGA.Almost_Full_Inst ;
  output \Use_FPGA.Almost_Full_Inst_0 ;
  output \S_AXI_BRESP_reg[0] ;
  output \S_AXI_BRESP_reg[1] ;
  output M_AXI_ARVALID_I_reg;
  output \lookup_offset_len_cnt_reg[3] ;
  output [31:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_0 ;
  output O;
  output \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_1 ;
  output [1:0]update_write_miss_busy;
  input ACLK;
  input ARESET;
  input \The_Compare[0].sel_reg ;
  input A_0;
  input \The_Compare[2].sel_reg ;
  input access_valid;
  input ud_new_tag_valid2;
  input update_read_miss;
  input S;
  input S_2;
  input \update_info_reg[Allocate] ;
  input update_valid;
  input lookup_push_write_miss;
  input M0_AXI_RVALID;
  input \The_Compare[0].sel_reg_3 ;
  input A_4;
  input \The_Compare[2].sel_reg_5 ;
  input \The_Compare[3].sel_reg ;
  input \The_Compare[4].sel_reg ;
  input \The_Compare[5].sel_reg ;
  input \The_Compare[0].sel_reg_6 ;
  input A_7;
  input \The_Compare[2].sel_reg_8 ;
  input \The_Compare[3].sel_reg_9 ;
  input \The_Compare[4].sel_reg_10 ;
  input \The_Compare[5].sel_reg_11 ;
  input \update_info[Allocate] ;
  input \update_info[Wr] ;
  input \lu_check_info_reg[Port_Num][0] ;
  input lookup_wm_allocate;
  input \write_req_info[0][Internal] ;
  input lookup_wm_evict;
  input \lu_check_info_reg[Kind] ;
  input update_way;
  input [0:0]\write_req_info[0][Port_Num] ;
  input \update_info[Kind] ;
  input \update_info[Early] ;
  input \update_info[Internal_Cmd] ;
  input lookup_wm_allow_write;
  input lookup_wm_will_use;
  input write_data_full;
  input \update_info_reg[Port_Num][0] ;
  input need_to_stall_write_reg;
  input update_done_tag_write_reg_1;
  input \Use_FPGA.Full_Inst_0 ;
  input update_read_miss_ongoing_reg_0;
  input wr_port_data_last_i_reg;
  input \ri_way_reg[0]_0 ;
  input \Use_FPGA.Full_Inst_1 ;
  input \Use_FPGA.Full_Inst_2 ;
  input update_rm_alloc_ongoing_reg_1;
  input \bs_fifo_mem_reg[0][Src][1]_0 ;
  input \bs_fifo_mem_reg[0][Src][0]_0 ;
  input update_need_bs;
  input M0_AXI_BVALID;
  input r_miss_fifo_full;
  input \read_data_status[0,0][Hit_Full] ;
  input \lookup_read_data_info[0,0][Valid] ;
  input \access_data_info[0,1][Last] ;
  input \access_data_info[0,0][Last] ;
  input wr_port_data_valid_i_reg;
  input update_wr_miss_rs_last;
  input write_data_almost_full;
  input update_need_tag_write;
  input [31:0]\update_info_reg[Addr][31] ;
  input M0_AXI_RLAST;
  input \Use_FPGA.Empty_Inst ;
  input \Use_FPGA.Empty_Inst_0 ;
  input [35:0]DATA_OUTB;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  input aw_fifo_full;
  input need_to_stall_write_reg_0;
  input \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  input queue_full;
  input update_miss;
  input [3:0]\wr_port_data_info_reg[0][BE][3] ;
  input [3:0]\wr_port_data_info_reg[0][BE][3]_0 ;
  input [31:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 ;
  input [31:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_3 ;
  input [31:0]\wr_port_data_info_reg[0][Data][31] ;
  input [1:0]lu_mem_removed_way_hold;
  input lud_mem_conflict;
  input [1:0]DATA_OUTA;
  input [3:0]\lu_mem_info_reg[Addr][11] ;
  input [1:0]B_Vec;
  input \lu_mem_info_reg[Addr][10] ;
  input pending_write_is_1;
  input \Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst ;
  input [0:0]A;
  input \Use_FPGA.Empty_Inst_1 ;
  input r_miss_fifo_full_8;
  input \read_data_status[0,1][Hit_Full] ;
  input \lookup_read_data_info[0,1][Valid] ;
  input \lud_reg_valid_one_hot_reg[1] ;
  input \lud_reg_valid_one_hot_reg[0] ;
  input lud_mem_waiting_for_pipe_reg;
  input lookup_offset_first;
  input [31:0]M0_AXI_RDATA;
  input [5:0]\lu_check_info_reg[Addr_Use][5] ;
  input [5:0]\lu_check_info_reg[Addr][5] ;
  input [5:0]\lu_check_info_reg[Addr_Stp][5] ;
  input [7:0]\update_info_reg[Len][7] ;
  input [5:0]\update_info_reg[Addr_Use][5] ;
  input [5:0]\update_info_reg[Addr_Stp][5] ;
  input [1:0]M0_AXI_BRESP;
  input p_3_in;
  input p_2_in;
  input p_1_in3_in;
  input \wr_port_data_info_reg[0][BE][0] ;
  output lopt;
  input lopt_1;
  output lopt_2;
  input lopt_3;
  input lopt_4;

  wire [0:0]A;
  wire A136_out;
  wire A17_out;
  wire A18_out;
  wire ACLK;
  wire [7:0]ADDRB;
  wire [11:0]ADDRBWRADDR;
  wire ARESET;
  wire A_0;
  wire A_4;
  wire A_7;
  wire A_N;
  wire [1:0]B_Vec;
  wire [1:0]D;
  wire [18:0]DATA_INB;
  wire [1:0]DATA_OUTA;
  wire [35:0]DATA_OUTB;
  wire [0:0]E;
  wire ENB;
  wire FIFO_BS_Pointer_n_7;
  wire FIFO_ED_Pointer_n_0;
  wire FIFO_ED_Pointer_n_1;
  wire FIFO_ED_Pointer_n_2;
  wire FIFO_ED_Pointer_n_30;
  wire FIFO_ED_Pointer_n_34;
  wire FIFO_ED_Pointer_n_35;
  wire FIFO_ED_Pointer_n_4;
  wire FIFO_ED_Pointer_n_8;
  wire FIFO_ED_Pointer_n_9;
  wire FIFO_E_Pointer_n_8;
  wire FIFO_RI_Pointer_n_11;
  wire FIFO_WMAD_Pointer_n_2;
  wire FIFO_WMAD_Pointer_n_3;
  wire FIFO_WMAD_Pointer_n_4;
  wire FIFO_WMAD_Pointer_n_5;
  wire FIFO_WMAD_Pointer_n_6;
  wire FIFO_WMAD_Pointer_n_7;
  wire FIFO_WMA_Pointer_n_11;
  wire FIFO_WMA_Pointer_n_12;
  wire FIFO_WMA_Pointer_n_15;
  wire FIFO_WMA_Pointer_n_16;
  wire FIFO_WMA_Pointer_n_17;
  wire FIFO_WMA_Pointer_n_19;
  wire FIFO_WMA_Pointer_n_20;
  wire FIFO_WMA_Pointer_n_24;
  wire FIFO_WMA_Pointer_n_25;
  wire FIFO_WMA_Pointer_n_26;
  wire FIFO_WMA_Pointer_n_27;
  wire FIFO_WMA_Pointer_n_28;
  wire FIFO_WMA_Pointer_n_61;
  wire FIFO_WMA_Pointer_n_62;
  wire FIFO_WMA_Pointer_n_63;
  wire FIFO_WMA_Pointer_n_64;
  wire FIFO_WMA_Pointer_n_65;
  wire FIFO_WMA_Pointer_n_7;
  wire FIFO_WM_Pointer_n_10;
  wire FIFO_WM_Pointer_n_12;
  wire FIFO_WM_Pointer_n_13;
  wire FIFO_WM_Pointer_n_14;
  wire FIFO_WM_Pointer_n_7;
  wire FIFO_WM_Pointer_n_8;
  wire \Long_External_Burst.update_rb_pos_phase_reg_0 ;
  wire \Long_External_Burst.update_rb_pos_phase_reg_1 ;
  wire M0_AXI_BREADY;
  wire [1:0]M0_AXI_BRESP;
  wire M0_AXI_BVALID;
  wire [31:0]M0_AXI_RDATA;
  wire M0_AXI_RLAST;
  wire M0_AXI_RREADY;
  wire M0_AXI_RVALID;
  wire M_AXI_ARVALID_I_reg;
  wire [31:0]\M_AXI_WDATA_reg[31] ;
  wire [3:0]\M_AXI_WSTRB_reg[3] ;
  wire [17:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 ;
  wire [31:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_0 ;
  wire \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_1 ;
  wire [31:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 ;
  wire [31:0]\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_3 ;
  wire O;
  wire Q;
  wire S;
  wire S_0;
  wire S_1;
  wire S_2;
  wire S_3;
  wire S_4;
  wire S_5;
  wire \S_AXI_BID_reg[0] ;
  wire \S_AXI_BRESP_reg[0] ;
  wire \S_AXI_BRESP_reg[1] ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ;
  wire \The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ;
  wire \The_Compare[0].sel_reg ;
  wire \The_Compare[0].sel_reg_3 ;
  wire \The_Compare[0].sel_reg_6 ;
  wire \The_Compare[2].sel_reg ;
  wire \The_Compare[2].sel_reg_5 ;
  wire \The_Compare[2].sel_reg_8 ;
  wire \The_Compare[3].sel_reg ;
  wire \The_Compare[3].sel_reg_9 ;
  wire \The_Compare[4].sel_reg ;
  wire \The_Compare[4].sel_reg_10 ;
  wire \The_Compare[5].sel_reg ;
  wire \The_Compare[5].sel_reg_11 ;
  wire UD_RD_And_Inst7_n_3;
  wire UD_RD_Or_Inst3_n_1;
  wire \Use_FPGA.Almost_Empty_Inst ;
  wire \Use_FPGA.Almost_Full_Inst ;
  wire \Use_FPGA.Almost_Full_Inst_0 ;
  wire \Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst ;
  wire \Use_FPGA.Empty_Inst ;
  wire \Use_FPGA.Empty_Inst_0 ;
  wire \Use_FPGA.Empty_Inst_1 ;
  wire \Use_FPGA.Full_Inst ;
  wire \Use_FPGA.Full_Inst_0 ;
  wire \Use_FPGA.Full_Inst_1 ;
  wire \Use_FPGA.Full_Inst_2 ;
  wire \Use_FPGA_1.LUT_Refresh_Inst_i_3_n_0 ;
  wire \Using_FPGA.MUXCY_I_i_8_n_0 ;
  wire \Using_FPGA.MUXCY_I_i_9_n_0 ;
  wire [1:0]WEB;
  wire \access_data_info[0,0][Last] ;
  wire \access_data_info[0,1][Last] ;
  wire access_valid;
  wire aw_fifo_full;
  wire backend_rd_data_pop;
  wire backend_rd_data_use;
  wire backend_rd_data_use_ii;
  wire bp_fifo_empty;
  wire \bp_fifo_mem_reg[15][BRESP][0]_srl16_n_0 ;
  wire \bp_fifo_mem_reg[15][BRESP][1]_srl16_n_0 ;
  wire [3:0]bp_read_fifo_addr;
  wire bs_exist;
  wire bs_fifo_full;
  wire [1:0]\bs_fifo_mem[15][Src] ;
  wire \bs_fifo_mem_reg[0][Src][0]_0 ;
  wire \bs_fifo_mem_reg[0][Src][1]_0 ;
  wire [1:0]\bs_fifo_mem_reg[10][Src]__0 ;
  wire [1:0]\bs_fifo_mem_reg[11][Src]__0 ;
  wire [1:0]\bs_fifo_mem_reg[12][Src]__0 ;
  wire [1:0]\bs_fifo_mem_reg[13][Src]__0 ;
  wire [1:0]\bs_fifo_mem_reg[14][Src]__0 ;
  wire \bs_fifo_mem_reg[15][Port_Num][0]_srl16_n_0 ;
  wire \bs_fifo_mem_reg[15][Slv][-1111111111]_srl16_n_0 ;
  wire [1:0]\bs_fifo_mem_reg[15][Src]__0 ;
  wire [1:0]\bs_fifo_mem_reg[1][Src]__0 ;
  wire [1:0]\bs_fifo_mem_reg[2][Src]__0 ;
  wire [1:0]\bs_fifo_mem_reg[3][Src]__0 ;
  wire [1:0]\bs_fifo_mem_reg[4][Src]__0 ;
  wire [1:0]\bs_fifo_mem_reg[5][Src]__0 ;
  wire [1:0]\bs_fifo_mem_reg[6][Src]__0 ;
  wire [1:0]\bs_fifo_mem_reg[7][Src]__0 ;
  wire [1:0]\bs_fifo_mem_reg[8][Src]__0 ;
  wire [1:0]\bs_fifo_mem_reg[9][Src]__0 ;
  wire [3:0]bs_read_fifo_addr;
  wire bs_slv;
  wire [1:0]bs_src;
  wire e_fifo_empty;
  wire e_fifo_full;
  wire \e_fifo_mem_reg[15][Offset][10]_srl16_n_0 ;
  wire \e_fifo_mem_reg[15][Offset][11]_srl16_n_0 ;
  wire \e_fifo_mem_reg[15][Offset][12]_srl16_n_0 ;
  wire \e_fifo_mem_reg[15][Offset][13]_srl16_n_0 ;
  wire \e_fifo_mem_reg[15][Offset][6]_srl16_n_0 ;
  wire \e_fifo_mem_reg[15][Offset][7]_srl16_n_0 ;
  wire \e_fifo_mem_reg[15][Offset][8]_srl16_n_0 ;
  wire \e_fifo_mem_reg[15][Offset][9]_srl16_n_0 ;
  wire \e_fifo_mem_reg[15][Way][0]_srl16_n_0 ;
  wire [3:0]e_read_fifo_addr;
  wire in;
  wire lookup_next_is_last_beat_i_10_n_0;
  wire lookup_next_is_last_beat_i_11_n_0;
  wire lookup_offset_first;
  wire \lookup_offset_len_cnt_reg[3] ;
  wire lookup_push_write_miss;
  wire \lookup_read_data_info[0,0][Valid] ;
  wire \lookup_read_data_info[0,1][Valid] ;
  wire lookup_wm_allocate;
  wire lookup_wm_allow_write;
  wire lookup_wm_evict;
  wire lookup_wm_will_use;
  wire \^lopt ;
  wire \^lopt_1 ;
  wire lopt_10;
  wire lopt_11;
  wire lopt_12;
  wire lopt_13;
  wire lopt_14;
  wire lopt_15;
  wire lopt_16;
  wire lopt_17;
  wire lopt_18;
  wire lopt_19;
  wire \^lopt_2 ;
  wire lopt_20;
  wire lopt_21;
  wire lopt_22;
  wire lopt_23;
  wire lopt_24;
  wire lopt_25;
  wire lopt_26;
  wire lopt_27;
  wire lopt_28;
  wire lopt_29;
  wire \^lopt_3 ;
  wire lopt_30;
  wire lopt_31;
  wire lopt_32;
  wire lopt_33;
  wire lopt_34;
  wire lopt_35;
  wire lopt_36;
  wire lopt_37;
  wire lopt_38;
  wire lopt_39;
  wire \^lopt_4 ;
  wire lopt_40;
  wire lopt_41;
  wire lopt_42;
  wire lopt_43;
  wire lopt_44;
  wire lopt_45;
  wire lopt_46;
  wire lopt_47;
  wire lopt_48;
  wire lopt_49;
  wire lopt_5;
  wire lopt_50;
  wire lopt_51;
  wire lopt_52;
  wire lopt_53;
  wire lopt_54;
  wire lopt_55;
  wire lopt_56;
  wire lopt_57;
  wire lopt_58;
  wire lopt_59;
  wire lopt_6;
  wire lopt_60;
  wire lopt_61;
  wire lopt_62;
  wire lopt_63;
  wire lopt_64;
  wire lopt_65;
  wire lopt_66;
  wire lopt_67;
  wire lopt_68;
  wire lopt_69;
  wire lopt_7;
  wire lopt_70;
  wire lopt_71;
  wire lopt_72;
  wire lopt_73;
  wire lopt_74;
  wire lopt_75;
  wire lopt_76;
  wire lopt_77;
  wire lopt_78;
  wire lopt_79;
  wire lopt_8;
  wire lopt_80;
  wire lopt_9;
  wire [5:0]\lu_check_info_reg[Addr][5] ;
  wire [5:0]\lu_check_info_reg[Addr_Stp][5] ;
  wire [5:0]\lu_check_info_reg[Addr_Use][5] ;
  wire \lu_check_info_reg[Kind] ;
  wire \lu_check_info_reg[Port_Num][0] ;
  wire \lu_check_tag_hit_reg[0] ;
  wire \lu_check_tag_hit_reg[1] ;
  wire [1:0]\lu_check_valid_bits_reg[1] ;
  wire \lu_check_valid_bits_reg[1]_0 ;
  wire [1:0]\lu_check_valid_bits_reg[1]_1 ;
  wire \lu_mem_info_reg[Addr][10] ;
  wire [3:0]\lu_mem_info_reg[Addr][11] ;
  wire [1:0]lu_mem_releasing_lock;
  wire [1:0]lu_mem_removed_way_hold;
  wire lud_mem_conflict;
  wire lud_mem_waiting_for_pipe_reg;
  wire \lud_reg_valid_one_hot_reg[0] ;
  wire \lud_reg_valid_one_hot_reg[1] ;
  wire [0:0]minusOp;
  wire [0:0]minusOp__0;
  wire need_to_stall_write_reg;
  wire need_to_stall_write_reg_0;
  wire p_0_in40_in;
  wire p_0_in45_in;
  wire p_0_in50_in;
  wire p_0_in55_in;
  wire p_0_in60_in;
  wire p_107_in;
  wire p_138_in;
  wire p_154_in;
  wire p_155_in;
  wire [5:0]p_1_in;
  wire p_1_in3_in;
  wire p_20_in;
  wire p_2_in;
  wire p_3_in;
  wire pending_write_is_1;
  wire pending_write_is_1_reg;
  wire \pending_write_reg[4] ;
  wire [3:0]plusOp;
  wire queue_full;
  wire queue_pop;
  wire queue_pop112_out;
  wire queue_pop116_out;
  wire queue_pop129_out;
  wire queue_pop134_out;
  wire queue_push;
  wire queue_push118_out;
  wire queue_push120_out;
  wire queue_push125_out;
  wire queue_push29_out;
  wire r_miss_fifo_full;
  wire r_miss_fifo_full_8;
  wire \read_data_status[0,0][Hit_Full] ;
  wire \read_data_status[0,1][Hit_Full] ;
  wire \ri_addr_reg_n_0_[0] ;
  wire \ri_addr_reg_n_0_[1] ;
  wire \ri_addr_reg_n_0_[2] ;
  wire \ri_addr_reg_n_0_[3] ;
  wire \ri_addr_reg_n_0_[4] ;
  wire \ri_addr_reg_n_0_[5] ;
  wire ri_allocate;
  wire ri_evicted;
  wire ri_exist;
  wire \ri_fifo_mem_reg[15][Addr][0]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Addr][10]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Addr][11]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Addr][12]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Addr][13]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Addr][14]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Addr][15]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Addr][16]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Addr][17]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Addr][18]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Addr][19]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Addr][1]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Addr][20]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Addr][21]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Addr][22]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Addr][23]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Addr][24]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Addr][25]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Addr][26]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Addr][27]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Addr][28]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Addr][29]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Addr][2]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Addr][30]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Addr][31]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Addr][3]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Addr][4]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Addr][5]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Addr][6]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Addr][7]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Addr][8]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Addr][9]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Allocate][-1111111111]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Evicted_Line][-1111111111]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Kind][-1111111111]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Len][0]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Len][1]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Len][2]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Len][3]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Len][4]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Len][5]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Len][6]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Len][7]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Stp_Bits][0]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Stp_Bits][1]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Stp_Bits][2]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Stp_Bits][3]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Stp_Bits][4]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Stp_Bits][5]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Use_Bits][0]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Use_Bits][1]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Use_Bits][2]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Use_Bits][3]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Use_Bits][4]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Use_Bits][5]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Way][0]_srl16_n_0 ;
  wire \ri_fifo_mem_reg[15][Write_Merge][-1111111111]_srl16_n_0 ;
  wire [0:0]ri_hot_port;
  wire ri_kind;
  wire [7:0]ri_len;
  wire ri_port;
  wire \ri_port_reg[0]_0 ;
  wire [3:0]ri_read_fifo_addr;
  wire [5:0]ri_stp;
  wire [5:0]ri_use;
  wire ri_way;
  wire \ri_way_reg[0]_0 ;
  wire rl_fifo_mem_reg_r1_0_15_0_0_i_3_n_0;
  wire rl_fifo_mem_reg_r1_0_15_0_0_i_4_n_0;
  wire rl_fifo_mem_reg_r1_0_15_0_0_i_5_n_0;
  wire rl_fifo_mem_reg_r1_0_15_0_0_i_6_n_0;
  wire s2b_n_0;
  wire sel;
  wire ud_new_tag_valid2;
  wire ud_rm_available;
  wire ud_rm_use_and_lock_safe;
  wire ud_rm_use_pre_safe;
  wire ud_rm_use_resize_part_ok;
  wire ud_rm_use_safe;
  wire update_cur_data_way;
  wire update_cur_evict_way_d1;
  wire update_cur_tag_rd_way;
  wire update_data_en_ii_1;
  wire update_data_we;
  wire update_done_ar_reg_0;
  wire update_done_bs;
  wire update_done_evict;
  wire update_done_tag_write;
  wire update_done_tag_write_i_2_n_0;
  wire update_done_tag_write_reg_0;
  wire update_done_tag_write_reg_1;
  wire update_evict_busy;
  wire update_evict_last;
  wire update_evict_ongoing_reg_n_0;
  wire update_evict_valid;
  wire update_ext_bresp_any;
  wire \update_info[Allocate] ;
  wire \update_info[Early] ;
  wire \update_info[Internal_Cmd] ;
  wire \update_info[Kind] ;
  wire \update_info[Wr] ;
  wire [31:0]\update_info_reg[Addr][31] ;
  wire [5:0]\update_info_reg[Addr_Stp][5] ;
  wire [5:0]\update_info_reg[Addr_Use][5] ;
  wire \update_info_reg[Allocate] ;
  wire [7:0]\update_info_reg[Len][7] ;
  wire \update_info_reg[Port_Num][0] ;
  wire update_lock_release;
  wire update_lock_release_i_10_n_0;
  wire update_lock_release_i_11_n_0;
  wire update_lock_release_i_12_n_0;
  wire update_lock_release_i_13_n_0;
  wire update_lock_release_i_14_n_0;
  wire update_lock_release_i_15_n_0;
  wire update_lock_release_i_16_n_0;
  wire update_lock_release_i_17_n_0;
  wire update_lock_release_i_18_n_0;
  wire update_lock_release_i_19_n_0;
  wire update_lock_release_i_20_n_0;
  wire update_lock_release_i_21_n_0;
  wire update_lock_release_i_4_n_0;
  wire update_lock_release_i_5_n_0;
  wire update_lock_release_i_6_n_0;
  wire update_lock_release_i_7_n_0;
  wire update_lock_release_i_8_n_0;
  wire update_lock_release_i_9_n_0;
  wire update_lock_release_reg_i_2_n_3;
  wire update_lock_release_reg_i_3_n_0;
  wire update_lock_release_reg_i_3_n_1;
  wire update_lock_release_reg_i_3_n_2;
  wire update_lock_release_reg_i_3_n_3;
  wire update_lock_way;
  wire update_locked_tag_is_dead0;
  wire update_match_addr;
  wire update_miss;
  wire update_need_bs;
  wire update_need_tag_write;
  wire update_need_tag_write_carry;
  wire update_need_tag_write_pre1;
  wire update_need_tag_write_pre2;
  wire update_need_tag_write_pre3;
  wire update_need_tag_write_pre4;
  wire update_need_tag_write_pre5;
  wire update_piperun;
  wire update_piperun_pre1;
  wire update_piperun_pre2;
  wire update_piperun_pre3;
  wire update_piperun_pre4;
  wire update_piperun_pre5;
  wire [0:0]update_rd_len;
  wire \update_rd_len_cnt[1]_i_1_n_0 ;
  wire \update_rd_len_cnt[2]_i_1_n_0 ;
  wire \update_rd_len_cnt[3]_i_1_n_0 ;
  wire \update_rd_len_cnt[3]_i_2_n_0 ;
  wire \update_rd_len_cnt[4]_i_1_n_0 ;
  wire \update_rd_len_cnt[4]_i_2_n_0 ;
  wire \update_rd_len_cnt[5]_i_1_n_0 ;
  wire \update_rd_len_cnt[5]_i_2_n_0 ;
  wire \update_rd_len_cnt[6]_i_1_n_0 ;
  wire \update_rd_len_cnt[6]_i_2_n_0 ;
  wire \update_rd_len_cnt[7]_i_2_n_0 ;
  wire \update_rd_len_cnt[7]_i_3_n_0 ;
  wire [7:0]update_rd_len_cnt_reg__0;
  wire [5:0]update_rd_offset_cnt;
  wire update_rd_offset_cnt0;
  wire update_rd_offset_cnt1;
  wire \update_rd_offset_cnt[3]_i_3_n_0 ;
  wire \update_rd_offset_cnt[3]_i_4_n_0 ;
  wire \update_rd_offset_cnt[3]_i_5_n_0 ;
  wire \update_rd_offset_cnt[3]_i_6_n_0 ;
  wire \update_rd_offset_cnt[5]_i_3_n_0 ;
  wire \update_rd_offset_cnt[5]_i_4_n_0 ;
  wire [5:0]update_rd_offset_cnt_next;
  wire \update_rd_offset_cnt_reg[3]_i_2_n_0 ;
  wire \update_rd_offset_cnt_reg[3]_i_2_n_1 ;
  wire \update_rd_offset_cnt_reg[3]_i_2_n_2 ;
  wire \update_rd_offset_cnt_reg[3]_i_2_n_3 ;
  wire \update_rd_offset_cnt_reg[3]_i_2_n_4 ;
  wire \update_rd_offset_cnt_reg[3]_i_2_n_5 ;
  wire \update_rd_offset_cnt_reg[3]_i_2_n_6 ;
  wire \update_rd_offset_cnt_reg[3]_i_2_n_7 ;
  wire \update_rd_offset_cnt_reg[5]_i_2_n_3 ;
  wire \update_rd_offset_cnt_reg[5]_i_2_n_6 ;
  wire \update_rd_offset_cnt_reg[5]_i_2_n_7 ;
  wire \update_read_data_info[0,0][Last] ;
  wire \update_read_data_info[0,0][Valid] ;
  wire \update_read_data_info[0,1][Valid] ;
  wire update_read_miss;
  wire update_read_miss_ongoing_reg_0;
  wire update_read_miss_resize_ok;
  wire update_read_miss_start;
  wire update_read_miss_use_ok;
  wire update_read_resize_finish_i_2_n_0;
  wire update_read_resize_finish_reg_n_0;
  wire update_read_resize_first;
  wire update_read_resize_first0;
  wire update_read_resize_selected0;
  wire update_read_resize_selected_i_10_n_0;
  wire update_read_resize_selected_i_11_n_0;
  wire update_read_resize_selected_i_5_n_0;
  wire update_read_resize_selected_i_6_n_0;
  wire update_read_resize_selected_i_7_n_0;
  wire update_read_resize_selected_i_8_n_0;
  wire update_read_resize_selected_i_9_n_0;
  wire update_read_resize_selected_reg_n_0;
  wire update_readback_available;
  wire update_readback_possible;
  wire [13:6]\update_release_tag[Addr] ;
  wire \update_release_tag[Valid] ;
  wire update_remove_locked;
  wire update_remove_locked_safe3;
  wire update_rm_alloc_ongoing;
  wire update_rm_alloc_ongoing_reg_0;
  wire update_rm_alloc_ongoing_reg_1;
  wire update_sel_readback_tag_0;
  wire update_sel_readback_tag_1;
  wire update_tag_conflict;
  wire update_tag_is_alive_0;
  wire update_tag_is_alive_1;
  wire update_tag_match_pre_0;
  wire update_tag_match_pre_1;
  wire update_tag_remove_lock_0;
  wire update_tag_remove_lock_1;
  wire [13:6]update_tag_unlock_addr;
  wire update_valid;
  wire update_way;
  wire update_wm_pop_evict_hold;
  wire update_wm_pop_normal;
  wire update_wm_pop_normal_hold_reg_n_0;
  wire [31:0]update_wma_data;
  wire \update_wma_data_reg[24]_0 ;
  wire update_wma_data_valid;
  wire update_wma_select_port3;
  wire [3:0]update_wma_strb;
  wire update_word_cnt_almost_last;
  wire update_word_cnt_almost_last_i_1_n_0;
  wire update_word_cnt_en;
  wire update_word_cnt_first;
  wire update_word_cnt_last;
  wire update_word_cnt_last_i_1_n_0;
  wire \update_word_cnt_len[3]_i_1_n_0 ;
  wire \update_word_cnt_len[4]_i_1_n_0 ;
  wire \update_word_cnt_len[5]_i_1_n_0 ;
  wire [5:2]update_word_cnt_len_reg__0;
  wire [5:2]update_word_cnt_next_reg__0;
  wire update_wr_miss_rs_last;
  wire [5:0]update_wr_offset_cnt;
  wire update_wr_offset_cnt0;
  wire \update_wr_offset_cnt[3]_i_3_n_0 ;
  wire \update_wr_offset_cnt[3]_i_4_n_0 ;
  wire \update_wr_offset_cnt[3]_i_5_n_0 ;
  wire \update_wr_offset_cnt[3]_i_6_n_0 ;
  wire \update_wr_offset_cnt[5]_i_7_n_0 ;
  wire \update_wr_offset_cnt[5]_i_8_n_0 ;
  wire [5:0]update_wr_offset_cnt_cmb;
  wire \update_wr_offset_cnt_reg[0]_0 ;
  wire \update_wr_offset_cnt_reg[3]_i_2_n_0 ;
  wire \update_wr_offset_cnt_reg[3]_i_2_n_1 ;
  wire \update_wr_offset_cnt_reg[3]_i_2_n_2 ;
  wire \update_wr_offset_cnt_reg[3]_i_2_n_3 ;
  wire \update_wr_offset_cnt_reg[5]_i_4_n_3 ;
  wire [1:0]update_write_miss_busy;
  wire update_write_miss_full;
  wire update_write_miss_ongoing;
  wire update_write_miss_ongoing_reg_0;
  wire wm_allocate_reg_n_0;
  wire wm_evict;
  wire wm_exist;
  wire \wm_fifo_mem_reg[15][Allocate][-1111111111]_srl16_n_0 ;
  wire \wm_fifo_mem_reg[15][Allow][-1111111111]_srl16_n_0 ;
  wire \wm_fifo_mem_reg[15][Evict][-1111111111]_srl16_n_0 ;
  wire \wm_fifo_mem_reg[15][Kind][-1111111111]_srl16_n_0 ;
  wire \wm_fifo_mem_reg[15][Offset][0]_srl16_n_0 ;
  wire \wm_fifo_mem_reg[15][Offset][1]_srl16_n_0 ;
  wire \wm_fifo_mem_reg[15][Offset][2]_srl16_n_0 ;
  wire \wm_fifo_mem_reg[15][Offset][3]_srl16_n_0 ;
  wire \wm_fifo_mem_reg[15][Offset][4]_srl16_n_0 ;
  wire \wm_fifo_mem_reg[15][Offset][5]_srl16_n_0 ;
  wire \wm_fifo_mem_reg[15][Port_Num][0]_srl16_n_0 ;
  wire \wm_fifo_mem_reg[15][Stp_Bits][0]_srl16_n_0 ;
  wire \wm_fifo_mem_reg[15][Stp_Bits][1]_srl16_n_0 ;
  wire \wm_fifo_mem_reg[15][Stp_Bits][2]_srl16_n_0 ;
  wire \wm_fifo_mem_reg[15][Stp_Bits][3]_srl16_n_0 ;
  wire \wm_fifo_mem_reg[15][Stp_Bits][4]_srl16_n_0 ;
  wire \wm_fifo_mem_reg[15][Stp_Bits][5]_srl16_n_0 ;
  wire \wm_fifo_mem_reg[15][Use_Bits][0]_srl16_n_0 ;
  wire \wm_fifo_mem_reg[15][Use_Bits][1]_srl16_n_0 ;
  wire \wm_fifo_mem_reg[15][Use_Bits][2]_srl16_n_0 ;
  wire \wm_fifo_mem_reg[15][Use_Bits][3]_srl16_n_0 ;
  wire \wm_fifo_mem_reg[15][Use_Bits][4]_srl16_n_0 ;
  wire \wm_fifo_mem_reg[15][Use_Bits][5]_srl16_n_0 ;
  wire \wm_fifo_mem_reg[15][Will_Use][-1111111111]_srl16_n_0 ;
  wire wm_kind;
  wire wm_local_wrap;
  wire wm_local_wrap0_n_0;
  wire [5:0]wm_offset;
  wire [3:0]wm_read_fifo_addr;
  wire \wm_remove_unaligned[1]_i_1_n_0 ;
  wire \wm_remove_unaligned[2]_i_1_n_0 ;
  wire \wm_remove_unaligned[3]_i_1_n_0 ;
  wire \wm_remove_unaligned[4]_i_1_n_0 ;
  wire \wm_remove_unaligned[5]_i_2_n_0 ;
  wire \wm_remove_unaligned_reg_n_0_[0] ;
  wire [5:0]wm_stp_bits;
  wire [5:0]wm_use_bits;
  wire wm_will_use;
  wire \wma_fifo_mem_reg[511][Data][0]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][0]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][0]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][0]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][0]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][0]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][0]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][0]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][0]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][0]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][0]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][0]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][0]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][10]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][10]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][10]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][10]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][10]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][10]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][10]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][10]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][10]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][10]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][10]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][10]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][10]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][11]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][11]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][11]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][11]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][11]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][11]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][11]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][11]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][11]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][11]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][11]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][11]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][11]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][12]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][12]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][12]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][12]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][12]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][12]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][12]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][12]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][12]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][12]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][12]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][12]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][12]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][13]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][13]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][13]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][13]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][13]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][13]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][13]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][13]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][13]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][13]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][13]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][13]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][13]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][14]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][14]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][14]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][14]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][14]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][14]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][14]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][14]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][14]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][14]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][14]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][14]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][14]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][15]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][15]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][15]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][15]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][15]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][15]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][15]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][15]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][15]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][15]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][15]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][15]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][15]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][16]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][16]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][16]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][16]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][16]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][16]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][16]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][16]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][16]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][16]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][16]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][16]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][16]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][17]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][17]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][17]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][17]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][17]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][17]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][17]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][17]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][17]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][17]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][17]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][17]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][17]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][18]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][18]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][18]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][18]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][18]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][18]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][18]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][18]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][18]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][18]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][18]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][18]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][18]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][19]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][19]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][19]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][19]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][19]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][19]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][19]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][19]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][19]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][19]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][19]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][19]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][19]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][1]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][1]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][1]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][1]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][1]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][1]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][1]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][1]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][1]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][1]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][1]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][1]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][1]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][20]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][20]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][20]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][20]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][20]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][20]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][20]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][20]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][20]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][20]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][20]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][20]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][20]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][21]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][21]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][21]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][21]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][21]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][21]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][21]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][21]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][21]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][21]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][21]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][21]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][21]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][22]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][22]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][22]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][22]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][22]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][22]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][22]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][22]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][22]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][22]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][22]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][22]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][22]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][23]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][23]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][23]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][23]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][23]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][23]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][23]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][23]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][23]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][23]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][23]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][23]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][23]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][24]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][24]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][24]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][24]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][24]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][24]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][24]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][24]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][24]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][24]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][24]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][24]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][24]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][25]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][25]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][25]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][25]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][25]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][25]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][25]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][25]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][25]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][25]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][25]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][25]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][25]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][26]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][26]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][26]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][26]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][26]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][26]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][26]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][26]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][26]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][26]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][26]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][26]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][26]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][27]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][27]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][27]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][27]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][27]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][27]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][27]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][27]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][27]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][27]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][27]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][27]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][27]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][28]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][28]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][28]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][28]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][28]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][28]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][28]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][28]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][28]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][28]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][28]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][28]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][28]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][29]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][29]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][29]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][29]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][29]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][29]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][29]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][29]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][29]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][29]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][29]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][29]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][29]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][2]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][2]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][2]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][2]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][2]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][2]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][2]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][2]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][2]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][2]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][2]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][2]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][2]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][30]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][30]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][30]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][30]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][30]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][30]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][30]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][30]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][30]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][30]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][30]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][30]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][30]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][31]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][31]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][31]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][31]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][31]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][31]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][31]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][31]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][31]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][31]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][31]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][31]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][31]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][3]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][3]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][3]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][3]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][3]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][3]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][3]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][3]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][3]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][3]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][3]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][3]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][3]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][4]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][4]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][4]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][4]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][4]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][4]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][4]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][4]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][4]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][4]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][4]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][4]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][4]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][5]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][5]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][5]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][5]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][5]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][5]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][5]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][5]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][5]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][5]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][5]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][5]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][5]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][6]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][6]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][6]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][6]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][6]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][6]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][6]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][6]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][6]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][6]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][6]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][6]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][6]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][7]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][7]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][7]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][7]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][7]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][7]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][7]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][7]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][7]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][7]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][7]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][7]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][7]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][8]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][8]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][8]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][8]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][8]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][8]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][8]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][8]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][8]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][8]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][8]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][8]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][8]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][9]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][9]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][9]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][9]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][9]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][9]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][9]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][9]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][9]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][9]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][9]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][9]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Data][9]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Last][0]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Last][0]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Last][0]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Last][0]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Last][0]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Last][0]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Last][0]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Last][0]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Last][0]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Last][0]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Last][0]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Last][0]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Last][0]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][0]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][1]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][2]_srl32_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_mux__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_mux__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_mux__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_mux__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_mux__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_mux__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_mux__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_mux__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_mux__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_mux__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_mux__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_mux_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__0_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__0_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__10_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__10_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__11_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__11_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__12_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__12_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__13_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__13_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__14_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__1_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__1_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__2_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__2_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__3_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__3_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__4_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__4_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__5_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__5_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__6_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__6_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__7_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__7_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__8_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__8_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__9_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32__9_n_1 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32_n_0 ;
  wire \wma_fifo_mem_reg[511][Strb][3]_srl32_n_1 ;
  wire wma_merge_done;
  wire wma_pop;
  wire [6:0]wma_read_fifo_addr;
  wire wma_word_done_d1;
  wire wma_word_done_d1_i_2_n_0;
  wire wma_word_done_d1_i_3_n_0;
  wire wmad_fifo_empty;
  wire \wr_port_data_info_reg[0][BE][0] ;
  wire [3:0]\wr_port_data_info_reg[0][BE][3] ;
  wire [3:0]\wr_port_data_info_reg[0][BE][3]_0 ;
  wire [31:0]\wr_port_data_info_reg[0][Data][31] ;
  wire wr_port_data_last_i_reg;
  wire wr_port_data_valid_i_reg;
  wire write_data_almost_full;
  wire write_data_full;
  wire write_data_full_d1;
  wire \write_data_info[0][Last] ;
  wire \write_data_info[0][Valid] ;
  wire \write_req_info[0][Internal] ;
  wire [0:0]\write_req_info[0][Port_Num] ;
  wire [3:2]NLW_update_lock_release_reg_i_2_CO_UNCONNECTED;
  wire [3:0]NLW_update_lock_release_reg_i_2_O_UNCONNECTED;
  wire [3:0]NLW_update_lock_release_reg_i_3_O_UNCONNECTED;
  wire [3:1]\NLW_update_rd_offset_cnt_reg[5]_i_2_CO_UNCONNECTED ;
  wire [3:2]\NLW_update_rd_offset_cnt_reg[5]_i_2_O_UNCONNECTED ;
  wire [3:1]\NLW_update_wr_offset_cnt_reg[5]_i_4_CO_UNCONNECTED ;
  wire [3:2]\NLW_update_wr_offset_cnt_reg[5]_i_4_O_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][0]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][10]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][11]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][12]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][13]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][14]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][15]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][16]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][17]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][18]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][19]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][1]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][20]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][21]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][22]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][23]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][24]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][25]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][26]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][27]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][28]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][29]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][2]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][30]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][31]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][3]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][4]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][5]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][6]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][7]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][8]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Data][9]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Last][0]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Strb][0]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Strb][1]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Strb][2]_srl32__14_Q31_UNCONNECTED ;
  wire \NLW_wma_fifo_mem_reg[511][Strb][3]_srl32__14_Q31_UNCONNECTED ;

  assign lopt = lopt_10;
  assign lopt_11 = lopt_1;
  assign lopt_13 = lopt_3;
  assign lopt_14 = lopt_4;
  assign lopt_2 = lopt_12;
  design_1_system_cache_0_0_sc_srl_fifo_counter__parameterized7_45 FIFO_BP_Pointer
       (.ACLK(ACLK),
        .E(E),
        .M0_AXI_BREADY(M0_AXI_BREADY),
        .M0_AXI_BVALID(M0_AXI_BVALID),
        .M_AXI_ARVALID_I_reg(M_AXI_ARVALID_I_reg),
        .Q(Q),
        .S_1(S_1),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .aw_fifo_full(aw_fifo_full),
        .bp_fifo_empty(bp_fifo_empty),
        .bp_read_fifo_addr(bp_read_fifo_addr),
        .need_to_stall_write_reg(sel),
        .need_to_stall_write_reg_0(need_to_stall_write_reg_0),
        .pending_write_is_1(pending_write_is_1),
        .pending_write_is_1_reg(pending_write_is_1_reg),
        .queue_pop112_out(queue_pop112_out),
        .update_done_aw_reg(\pending_write_reg[4] ));
  design_1_system_cache_0_0_sc_srl_fifo_counter__parameterized3_46 FIFO_BS_Pointer
       (.ACLK(ACLK),
        .D(\bs_fifo_mem[15][Src] ),
        .Q(Q),
        .S(S_0),
        .\Use_FPGA.Empty_Inst_0 (\Use_FPGA.Empty_Inst ),
        .\Use_FPGA.Empty_Inst_1 (\Use_FPGA.Empty_Inst_0 ),
        .\Use_Reg_Ctrl.queue_exist_i_reg_0 (FIFO_BS_Pointer_n_7),
        .bp_fifo_empty(bp_fifo_empty),
        .bs_exist(bs_exist),
        .\bs_fifo_mem_reg[0][Src][1] (D),
        .\bs_fifo_mem_reg[10][Src][1] (\bs_fifo_mem_reg[10][Src]__0 ),
        .\bs_fifo_mem_reg[11][Src][1] (\bs_fifo_mem_reg[11][Src]__0 ),
        .\bs_fifo_mem_reg[12][Src][1] (\bs_fifo_mem_reg[12][Src]__0 ),
        .\bs_fifo_mem_reg[13][Src][1] (\bs_fifo_mem_reg[13][Src]__0 ),
        .\bs_fifo_mem_reg[14][Src][1] (\bs_fifo_mem_reg[14][Src]__0 ),
        .\bs_fifo_mem_reg[15][Src][1] (\bs_fifo_mem_reg[15][Src]__0 ),
        .\bs_fifo_mem_reg[1][Src][1] (bs_fifo_full),
        .\bs_fifo_mem_reg[1][Src][1]_0 (queue_push120_out),
        .\bs_fifo_mem_reg[1][Src][1]_1 (\bs_fifo_mem_reg[1][Src]__0 ),
        .\bs_fifo_mem_reg[2][Src][1] (\bs_fifo_mem_reg[2][Src]__0 ),
        .\bs_fifo_mem_reg[3][Src][1] (\bs_fifo_mem_reg[3][Src]__0 ),
        .\bs_fifo_mem_reg[4][Src][1] (\bs_fifo_mem_reg[4][Src]__0 ),
        .\bs_fifo_mem_reg[5][Src][1] (\bs_fifo_mem_reg[5][Src]__0 ),
        .\bs_fifo_mem_reg[6][Src][1] (\bs_fifo_mem_reg[6][Src]__0 ),
        .\bs_fifo_mem_reg[7][Src][1] (\bs_fifo_mem_reg[7][Src]__0 ),
        .\bs_fifo_mem_reg[8][Src][1] (\bs_fifo_mem_reg[8][Src]__0 ),
        .\bs_fifo_mem_reg[9][Src][1] (\bs_fifo_mem_reg[9][Src]__0 ),
        .\bs_port_num_reg[0] (\S_AXI_BID_reg[0] ),
        .bs_read_fifo_addr(bs_read_fifo_addr),
        .bs_slv(bs_slv),
        .\bs_src_reg[1] (bs_src),
        .p_107_in(p_107_in),
        .queue_pop112_out(queue_pop112_out),
        .queue_pop116_out(queue_pop116_out),
        .update_done_bs_reg(update_done_bs),
        .update_ext_bresp_any(update_ext_bresp_any),
        .update_need_bs(update_need_bs),
        .wmad_fifo_empty(wmad_fifo_empty));
  design_1_system_cache_0_0_sc_srl_fifo_counter__parameterized7_47 FIFO_ED_Pointer
       (.A17_out(A17_out),
        .A18_out(A18_out),
        .ACLK(ACLK),
        .ADDRBWRADDR(ADDRBWRADDR[11:2]),
        .A_N(update_cur_data_way),
        .Carry_IN(update_word_cnt_en),
        .D(plusOp),
        .E(update_rd_offset_cnt0),
        .M0_AXI_RLAST(M0_AXI_RLAST),
        .M0_AXI_RVALID(M0_AXI_RVALID),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 (ADDRBWRADDR[0]),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_0 (ADDRBWRADDR[1]),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_1 (A_N),
        .Q(Q),
        .S(S_3),
        .SS(FIFO_ED_Pointer_n_2),
        .\Use_FPGA.Cnt_Bit_Gen[0].FDS_Inst_0 (\wm_fifo_mem_reg[15][Allocate][-1111111111]_srl16_n_0 ),
        .\Use_FPGA.Empty_Inst_0 (FIFO_ED_Pointer_n_8),
        .\Use_FPGA.Empty_Inst_1 (FIFO_WMA_Pointer_n_17),
        .\Use_Reg_Ctrl.queue_exist_i_reg (FIFO_ED_Pointer_n_30),
        .\Use_Reg_Ctrl.queue_exist_i_reg_0 (FIFO_ED_Pointer_n_34),
        .\Use_Reg_Ctrl.queue_exist_i_reg_1 (FIFO_WM_Pointer_n_7),
        .e_fifo_empty(e_fifo_empty),
        .\lu_check_info_reg[Kind] (\wm_fifo_mem_reg[15][Kind][-1111111111]_srl16_n_0 ),
        .\lud_reg_valid_one_hot_reg[0] (\lud_reg_valid_one_hot_reg[0] ),
        .\lud_reg_valid_one_hot_reg[1] (\lud_reg_valid_one_hot_reg[1] ),
        .out({\e_fifo_mem_reg[15][Offset][13]_srl16_n_0 ,\e_fifo_mem_reg[15][Offset][12]_srl16_n_0 ,\e_fifo_mem_reg[15][Offset][11]_srl16_n_0 ,\e_fifo_mem_reg[15][Offset][10]_srl16_n_0 ,\e_fifo_mem_reg[15][Offset][9]_srl16_n_0 ,\e_fifo_mem_reg[15][Offset][8]_srl16_n_0 ,\e_fifo_mem_reg[15][Offset][7]_srl16_n_0 ,\e_fifo_mem_reg[15][Offset][6]_srl16_n_0 }),
        .p_154_in(p_154_in),
        .p_155_in(p_155_in),
        .queue_pop(queue_pop),
        .queue_pop129_out(queue_pop129_out),
        .queue_pop134_out(queue_pop134_out),
        .\ri_addr_reg[13] ({update_tag_unlock_addr,\ri_addr_reg_n_0_[5] ,\ri_addr_reg_n_0_[4] ,\ri_addr_reg_n_0_[3] ,\ri_addr_reg_n_0_[2] }),
        .ri_allocate_reg(ri_allocate),
        .ri_evicted(ri_evicted),
        .ri_evicted_reg(FIFO_WMA_Pointer_n_16),
        .ri_hot_port(ri_hot_port),
        .ri_kind(ri_kind),
        .ri_kind_reg(update_read_resize_finish_i_2_n_0),
        .ri_merge_reg(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 ),
        .ri_port(ri_port),
        .\ri_way_reg[0] (ri_way),
        .update_evict_busy(update_evict_busy),
        .update_evict_busy_reg(FIFO_ED_Pointer_n_1),
        .update_evict_last(update_evict_last),
        .update_evict_ongoing_reg(FIFO_ED_Pointer_n_4),
        .update_evict_ongoing_reg_0(update_evict_ongoing_reg_n_0),
        .\update_rd_len_cnt_reg[0] (update_rd_offset_cnt1),
        .\update_read_data_info[0,0][Last] (\update_read_data_info[0,0][Last] ),
        .\update_read_data_info[0,0][Valid] (\update_read_data_info[0,0][Valid] ),
        .\update_read_data_info[0,1][Valid] (\update_read_data_info[0,1][Valid] ),
        .update_read_miss_ongoing_reg(\Long_External_Burst.update_rb_pos_phase_reg_0 ),
        .update_read_miss_ongoing_reg_0(FIFO_E_Pointer_n_8),
        .update_read_resize_finish_reg(FIFO_ED_Pointer_n_9),
        .update_read_resize_finish_reg_0(update_read_resize_finish_reg_n_0),
        .update_read_resize_selected0(update_read_resize_selected0),
        .update_read_resize_selected_reg(FIFO_ED_Pointer_n_0),
        .update_read_resize_selected_reg_0(update_read_resize_selected_reg_n_0),
        .update_rm_alloc_ongoing_reg(\Use_FPGA_1.LUT_Refresh_Inst_i_3_n_0 ),
        .\update_way_reg[0] (\e_fifo_mem_reg[15][Way][0]_srl16_n_0 ),
        .update_wm_pop_evict_hold(update_wm_pop_evict_hold),
        .update_wm_pop_evict_hold_reg(FIFO_ED_Pointer_n_35),
        .update_wm_pop_normal(update_wm_pop_normal),
        .update_wm_pop_normal_hold_reg(update_wm_pop_normal_hold_reg_n_0),
        .update_wm_pop_normal_hold_reg_0(FIFO_WM_Pointer_n_10),
        .update_word_cnt_first(update_word_cnt_first),
        .update_word_cnt_last_reg(update_word_cnt_last),
        .\update_word_cnt_next_reg[5] (update_word_cnt_next_reg__0),
        .update_wr_miss_rs_last(update_wr_miss_rs_last),
        .wm_allocate_reg(wm_allocate_reg_n_0),
        .wm_evict(wm_evict),
        .wm_evict_reg(FIFO_WM_Pointer_n_12),
        .wm_exist(wm_exist),
        .wm_kind_reg(FIFO_WMA_Pointer_n_15),
        .wm_will_use(wm_will_use),
        .wr_port_data_valid_i_reg(wr_port_data_valid_i_reg),
        .write_data_almost_full(write_data_almost_full),
        .write_data_full(write_data_full),
        .write_data_full_d1(write_data_full_d1));
  design_1_system_cache_0_0_sc_srl_fifo_counter__parameterized7_48 FIFO_E_Pointer
       (.ACLK(ACLK),
        .Q(Q),
        .S(S_4),
        .\Use_FPGA.Almost_Full_Inst_0 (e_fifo_full),
        .\Use_FPGA.Empty_Inst_0 (FIFO_ED_Pointer_n_8),
        .e_fifo_empty(e_fifo_empty),
        .e_read_fifo_addr(e_read_fifo_addr),
        .queue_push125_out(queue_push125_out),
        .update_done_evict_reg(update_done_evict),
        .update_evict_valid_reg(FIFO_E_Pointer_n_8),
        .update_read_miss_ongoing_reg(\Long_External_Burst.update_rb_pos_phase_reg_0 ),
        .wm_evict(wm_evict),
        .wm_exist(wm_exist),
        .\write_req_info[0][Internal] (\write_req_info[0][Internal] ));
  design_1_system_cache_0_0_sc_srl_fifo_counter__parameterized3_49 FIFO_RI_Pointer
       (.A136_out(A136_out),
        .A17_out(A17_out),
        .A18_out(A18_out),
        .ACLK(ACLK),
        .M0_AXI_RVALID(M0_AXI_RVALID),
        .Q(Q),
        .S(S_5),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ),
        .\Use_FPGA.Almost_Empty_Inst_0 (\Use_FPGA.Almost_Empty_Inst ),
        .\Use_FPGA.Full_Inst_0 (\Use_FPGA.Full_Inst ),
        .\Use_Reg_Ctrl.queue_exist_i_reg_0 (FIFO_RI_Pointer_n_11),
        .\Use_Reg_Ctrl.queue_exist_i_reg_1 (UD_RD_And_Inst7_n_3),
        .queue_full(queue_full),
        .queue_pop134_out(queue_pop134_out),
        .queue_push29_out(queue_push29_out),
        .ri_allocate_reg(ri_allocate),
        .ri_exist(ri_exist),
        .ri_read_fifo_addr(ri_read_fifo_addr),
        .update_done_ar_reg(update_done_ar_reg_0),
        .update_evict_ongoing_reg(update_evict_ongoing_reg_n_0),
        .update_read_miss_ongoing_reg(\Long_External_Burst.update_rb_pos_phase_reg_0 ),
        .update_read_miss_start(update_read_miss_start));
  design_1_system_cache_0_0_sc_srl_fifo_counter__parameterized7_50 FIFO_WMAD_Pointer
       (.ACLK(ACLK),
        .Q(Q),
        .bp_fifo_empty(bp_fifo_empty),
        .bs_exist(bs_exist),
        .\bs_src_reg[1] (bs_src),
        .p_107_in(p_107_in),
        .queue_pop116_out(queue_pop116_out),
        .queue_push118_out(queue_push118_out),
        .\update_wr_offset_cnt_reg[0] (FIFO_WMAD_Pointer_n_2),
        .\update_wr_offset_cnt_reg[0]_0 (FIFO_WMAD_Pointer_n_3),
        .\update_wr_offset_cnt_reg[0]_1 (FIFO_WMAD_Pointer_n_4),
        .\update_wr_offset_cnt_reg[0]_2 (FIFO_WMAD_Pointer_n_5),
        .\update_wr_offset_cnt_reg[0]_3 (FIFO_WMAD_Pointer_n_6),
        .\update_wr_offset_cnt_reg[0]_4 (FIFO_WMAD_Pointer_n_7),
        .\update_wr_offset_cnt_reg[0]_5 (\update_wr_offset_cnt_reg[0]_0 ),
        .\update_wr_offset_cnt_reg[5] (update_wr_offset_cnt),
        .update_write_miss_ongoing(update_write_miss_ongoing),
        .wm_kind(wm_kind),
        .wm_local_wrap(wm_local_wrap),
        .\wm_offset_reg[5] (wm_offset),
        .\wm_use_bits_reg[5] (wm_use_bits),
        .wmad_fifo_empty(wmad_fifo_empty));
  design_1_system_cache_0_0_sc_srl_fifo_counter__parameterized10 FIFO_WMA_Pointer
       (.A(A),
        .A18_out(A18_out),
        .ACLK(ACLK),
        .A_N(FIFO_WMA_Pointer_n_19),
        .E(update_wr_offset_cnt0),
        .M0_AXI_RDATA(M0_AXI_RDATA),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 (\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_0 ),
        .O(wma_pop),
        .Q(Q),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (backend_rd_data_pop),
        .\Use_FPGA.Almost_Full_Inst_0 (\Use_FPGA.Almost_Full_Inst ),
        .\Use_FPGA.Almost_Full_Inst_1 (\Use_FPGA.Almost_Full_Inst_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst_0 (\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_0 (wma_read_fifo_addr),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_1 (\wma_fifo_mem_reg[511][Last][0]_mux__10_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_10 (\wma_fifo_mem_reg[511][Strb][1]_mux__9_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_100 (\wma_fifo_mem_reg[511][Data][19]_mux__7_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_101 (\wma_fifo_mem_reg[511][Data][20]_mux__10_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_102 (\wma_fifo_mem_reg[511][Data][20]_mux__9_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_103 (\wma_fifo_mem_reg[511][Data][20]_mux__8_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_104 (\wma_fifo_mem_reg[511][Data][20]_mux__7_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_105 (\wma_fifo_mem_reg[511][Data][21]_mux__10_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_106 (\wma_fifo_mem_reg[511][Data][21]_mux__9_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_107 (\wma_fifo_mem_reg[511][Data][21]_mux__8_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_108 (\wma_fifo_mem_reg[511][Data][21]_mux__7_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_109 (\wma_fifo_mem_reg[511][Data][22]_mux__10_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_11 (\wma_fifo_mem_reg[511][Strb][1]_mux__8_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_110 (\wma_fifo_mem_reg[511][Data][22]_mux__9_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_111 (\wma_fifo_mem_reg[511][Data][22]_mux__8_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_112 (\wma_fifo_mem_reg[511][Data][22]_mux__7_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_113 (\wma_fifo_mem_reg[511][Data][23]_mux__10_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_114 (\wma_fifo_mem_reg[511][Data][23]_mux__9_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_115 (\wma_fifo_mem_reg[511][Data][23]_mux__8_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_116 (\wma_fifo_mem_reg[511][Data][23]_mux__7_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_117 (\wma_fifo_mem_reg[511][Data][24]_mux__10_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_118 (\wma_fifo_mem_reg[511][Data][24]_mux__9_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_119 (\wma_fifo_mem_reg[511][Data][24]_mux__8_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_12 (\wma_fifo_mem_reg[511][Strb][1]_mux__7_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_120 (\wma_fifo_mem_reg[511][Data][24]_mux__7_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_121 (\wma_fifo_mem_reg[511][Data][25]_mux__10_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_122 (\wma_fifo_mem_reg[511][Data][25]_mux__9_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_123 (\wma_fifo_mem_reg[511][Data][25]_mux__8_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_124 (\wma_fifo_mem_reg[511][Data][25]_mux__7_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_125 (\wma_fifo_mem_reg[511][Data][26]_mux__10_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_126 (\wma_fifo_mem_reg[511][Data][26]_mux__9_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_127 (\wma_fifo_mem_reg[511][Data][26]_mux__8_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_128 (\wma_fifo_mem_reg[511][Data][26]_mux__7_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_129 (\wma_fifo_mem_reg[511][Data][27]_mux__10_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_13 (\wma_fifo_mem_reg[511][Strb][2]_mux__10_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_130 (\wma_fifo_mem_reg[511][Data][27]_mux__9_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_131 (\wma_fifo_mem_reg[511][Data][27]_mux__8_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_132 (\wma_fifo_mem_reg[511][Data][27]_mux__7_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_133 (\wma_fifo_mem_reg[511][Data][28]_mux__10_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_134 (\wma_fifo_mem_reg[511][Data][28]_mux__9_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_135 (\wma_fifo_mem_reg[511][Data][28]_mux__8_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_136 (\wma_fifo_mem_reg[511][Data][28]_mux__7_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_137 (\wma_fifo_mem_reg[511][Data][29]_mux__10_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_138 (\wma_fifo_mem_reg[511][Data][29]_mux__9_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_139 (\wma_fifo_mem_reg[511][Data][29]_mux__8_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_14 (\wma_fifo_mem_reg[511][Strb][2]_mux__9_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_140 (\wma_fifo_mem_reg[511][Data][29]_mux__7_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_141 (\wma_fifo_mem_reg[511][Data][30]_mux__10_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_142 (\wma_fifo_mem_reg[511][Data][30]_mux__9_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_143 (\wma_fifo_mem_reg[511][Data][30]_mux__8_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_144 (\wma_fifo_mem_reg[511][Data][30]_mux__7_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_145 (\wma_fifo_mem_reg[511][Data][31]_mux__10_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_146 (\wma_fifo_mem_reg[511][Data][31]_mux__9_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_147 (\wma_fifo_mem_reg[511][Data][31]_mux__8_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_148 (\wma_fifo_mem_reg[511][Data][31]_mux__7_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_15 (\wma_fifo_mem_reg[511][Strb][2]_mux__8_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_16 (\wma_fifo_mem_reg[511][Strb][2]_mux__7_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_17 (\wma_fifo_mem_reg[511][Strb][3]_mux__10_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_18 (\wma_fifo_mem_reg[511][Strb][3]_mux__9_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_19 (\wma_fifo_mem_reg[511][Strb][3]_mux__8_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_2 (\wma_fifo_mem_reg[511][Last][0]_mux__9_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_20 (\wma_fifo_mem_reg[511][Strb][3]_mux__7_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_21 (\wma_fifo_mem_reg[511][Data][0]_mux__10_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_22 (\wma_fifo_mem_reg[511][Data][0]_mux__9_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_23 (\wma_fifo_mem_reg[511][Data][0]_mux__8_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_24 (\wma_fifo_mem_reg[511][Data][0]_mux__7_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_25 (\wma_fifo_mem_reg[511][Data][1]_mux__10_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_26 (\wma_fifo_mem_reg[511][Data][1]_mux__9_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_27 (\wma_fifo_mem_reg[511][Data][1]_mux__8_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_28 (\wma_fifo_mem_reg[511][Data][1]_mux__7_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_29 (\wma_fifo_mem_reg[511][Data][2]_mux__10_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_3 (\wma_fifo_mem_reg[511][Last][0]_mux__8_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_30 (\wma_fifo_mem_reg[511][Data][2]_mux__9_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_31 (\wma_fifo_mem_reg[511][Data][2]_mux__8_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_32 (\wma_fifo_mem_reg[511][Data][2]_mux__7_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_33 (\wma_fifo_mem_reg[511][Data][3]_mux__10_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_34 (\wma_fifo_mem_reg[511][Data][3]_mux__9_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_35 (\wma_fifo_mem_reg[511][Data][3]_mux__8_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_36 (\wma_fifo_mem_reg[511][Data][3]_mux__7_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_37 (\wma_fifo_mem_reg[511][Data][4]_mux__10_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_38 (\wma_fifo_mem_reg[511][Data][4]_mux__9_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_39 (\wma_fifo_mem_reg[511][Data][4]_mux__8_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_4 (\wma_fifo_mem_reg[511][Last][0]_mux__7_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_40 (\wma_fifo_mem_reg[511][Data][4]_mux__7_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_41 (\wma_fifo_mem_reg[511][Data][5]_mux__10_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_42 (\wma_fifo_mem_reg[511][Data][5]_mux__9_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_43 (\wma_fifo_mem_reg[511][Data][5]_mux__8_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_44 (\wma_fifo_mem_reg[511][Data][5]_mux__7_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_45 (\wma_fifo_mem_reg[511][Data][6]_mux__10_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_46 (\wma_fifo_mem_reg[511][Data][6]_mux__9_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_47 (\wma_fifo_mem_reg[511][Data][6]_mux__8_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_48 (\wma_fifo_mem_reg[511][Data][6]_mux__7_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_49 (\wma_fifo_mem_reg[511][Data][7]_mux__10_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_5 (\wma_fifo_mem_reg[511][Strb][0]_mux__10_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_50 (\wma_fifo_mem_reg[511][Data][7]_mux__9_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_51 (\wma_fifo_mem_reg[511][Data][7]_mux__8_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_52 (\wma_fifo_mem_reg[511][Data][7]_mux__7_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_53 (\wma_fifo_mem_reg[511][Data][8]_mux__10_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_54 (\wma_fifo_mem_reg[511][Data][8]_mux__9_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_55 (\wma_fifo_mem_reg[511][Data][8]_mux__8_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_56 (\wma_fifo_mem_reg[511][Data][8]_mux__7_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_57 (\wma_fifo_mem_reg[511][Data][9]_mux__10_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_58 (\wma_fifo_mem_reg[511][Data][9]_mux__9_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_59 (\wma_fifo_mem_reg[511][Data][9]_mux__8_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_6 (\wma_fifo_mem_reg[511][Strb][0]_mux__9_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_60 (\wma_fifo_mem_reg[511][Data][9]_mux__7_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_61 (\wma_fifo_mem_reg[511][Data][10]_mux__10_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_62 (\wma_fifo_mem_reg[511][Data][10]_mux__9_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_63 (\wma_fifo_mem_reg[511][Data][10]_mux__8_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_64 (\wma_fifo_mem_reg[511][Data][10]_mux__7_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_65 (\wma_fifo_mem_reg[511][Data][11]_mux__10_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_66 (\wma_fifo_mem_reg[511][Data][11]_mux__9_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_67 (\wma_fifo_mem_reg[511][Data][11]_mux__8_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_68 (\wma_fifo_mem_reg[511][Data][11]_mux__7_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_69 (\wma_fifo_mem_reg[511][Data][12]_mux__10_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_7 (\wma_fifo_mem_reg[511][Strb][0]_mux__8_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_70 (\wma_fifo_mem_reg[511][Data][12]_mux__9_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_71 (\wma_fifo_mem_reg[511][Data][12]_mux__8_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_72 (\wma_fifo_mem_reg[511][Data][12]_mux__7_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_73 (\wma_fifo_mem_reg[511][Data][13]_mux__10_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_74 (\wma_fifo_mem_reg[511][Data][13]_mux__9_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_75 (\wma_fifo_mem_reg[511][Data][13]_mux__8_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_76 (\wma_fifo_mem_reg[511][Data][13]_mux__7_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_77 (\wma_fifo_mem_reg[511][Data][14]_mux__10_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_78 (\wma_fifo_mem_reg[511][Data][14]_mux__9_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_79 (\wma_fifo_mem_reg[511][Data][14]_mux__8_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_8 (\wma_fifo_mem_reg[511][Strb][0]_mux__7_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_80 (\wma_fifo_mem_reg[511][Data][14]_mux__7_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_81 (\wma_fifo_mem_reg[511][Data][15]_mux__10_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_82 (\wma_fifo_mem_reg[511][Data][15]_mux__9_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_83 (\wma_fifo_mem_reg[511][Data][15]_mux__8_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_84 (\wma_fifo_mem_reg[511][Data][15]_mux__7_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_85 (\wma_fifo_mem_reg[511][Data][16]_mux__10_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_86 (\wma_fifo_mem_reg[511][Data][16]_mux__9_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_87 (\wma_fifo_mem_reg[511][Data][16]_mux__8_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_88 (\wma_fifo_mem_reg[511][Data][16]_mux__7_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_89 (\wma_fifo_mem_reg[511][Data][17]_mux__10_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_9 (\wma_fifo_mem_reg[511][Strb][1]_mux__10_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_90 (\wma_fifo_mem_reg[511][Data][17]_mux__9_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_91 (\wma_fifo_mem_reg[511][Data][17]_mux__8_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_92 (\wma_fifo_mem_reg[511][Data][17]_mux__7_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_93 (\wma_fifo_mem_reg[511][Data][18]_mux__10_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_94 (\wma_fifo_mem_reg[511][Data][18]_mux__9_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_95 (\wma_fifo_mem_reg[511][Data][18]_mux__8_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_96 (\wma_fifo_mem_reg[511][Data][18]_mux__7_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_97 (\wma_fifo_mem_reg[511][Data][19]_mux__10_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_98 (\wma_fifo_mem_reg[511][Data][19]_mux__9_n_0 ),
        .\Use_FPGA.Cnt_Bit_Gen[6].FDS_Inst_99 (\wma_fifo_mem_reg[511][Data][19]_mux__8_n_0 ),
        .\Use_FPGA.Empty_Inst_0 (\Use_FPGA.Empty_Inst_1 ),
        .\Use_Reg_Ctrl.queue_exist_i_reg (FIFO_WMA_Pointer_n_15),
        .\Use_Reg_Ctrl.queue_exist_i_reg_0 (FIFO_WMA_Pointer_n_20),
        .\Use_Reg_Ctrl.queue_exist_i_reg_1 (FIFO_WMA_Pointer_n_28),
        .\Use_Reg_Ctrl.queue_exist_i_reg_2 (FIFO_WM_Pointer_n_7),
        .\access_data_info[0,0][Last] (\access_data_info[0,0][Last] ),
        .\access_data_info[0,1][Last] (\access_data_info[0,1][Last] ),
        .p_1_in3_in(p_1_in3_in),
        .p_20_in(p_20_in),
        .p_2_in(p_2_in),
        .p_3_in(p_3_in),
        .queue_pop(queue_pop),
        .queue_push(queue_push),
        .queue_push118_out(queue_push118_out),
        .ri_evicted(ri_evicted),
        .ri_exist(ri_exist),
        .ri_merge_reg(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 ),
        .update_evict_busy(update_evict_busy),
        .update_evict_ongoing_reg(FIFO_WMA_Pointer_n_16),
        .update_evict_valid(update_evict_valid),
        .update_evict_valid_reg(FIFO_WMA_Pointer_n_17),
        .update_read_miss_ongoing_reg(\Long_External_Burst.update_rb_pos_phase_reg_0 ),
        .update_wm_pop_normal_hold_reg(FIFO_WMA_Pointer_n_61),
        .update_wm_pop_normal_hold_reg_0(update_wm_pop_normal_hold_reg_n_0),
        .\update_wma_data_reg[24] ({FIFO_WMA_Pointer_n_24,FIFO_WMA_Pointer_n_25,FIFO_WMA_Pointer_n_26,FIFO_WMA_Pointer_n_27}),
        .update_wma_select_port3(update_wma_select_port3),
        .update_wma_strb(update_wma_strb),
        .\update_wma_strb_reg[0] (FIFO_WMA_Pointer_n_65),
        .\update_wma_strb_reg[1] (FIFO_WMA_Pointer_n_64),
        .\update_wma_strb_reg[2] (FIFO_WMA_Pointer_n_63),
        .\update_wma_strb_reg[3] (FIFO_WMA_Pointer_n_62),
        .update_wr_miss_rs_last(update_wr_miss_rs_last),
        .update_write_miss_ongoing(update_write_miss_ongoing),
        .update_write_miss_ongoing_reg(FIFO_WMA_Pointer_n_11),
        .wm_allocate_reg(wm_allocate_reg_n_0),
        .wm_allow_reg(\update_wma_data_reg[24]_0 ),
        .wm_evict_reg(FIFO_WM_Pointer_n_8),
        .wm_exist(wm_exist),
        .wm_kind(wm_kind),
        .wm_local_wrap(wm_local_wrap),
        .wm_local_wrap_reg(\update_wr_offset_cnt_reg[0]_0 ),
        .\wm_offset_reg[0] (FIFO_WMAD_Pointer_n_2),
        .\wm_offset_reg[3] (FIFO_WMAD_Pointer_n_5),
        .\wm_port_reg[0] (update_write_miss_ongoing_reg_0),
        .\wm_remove_unaligned_reg[0] (wma_word_done_d1_i_2_n_0),
        .wma_merge_done(wma_merge_done),
        .wma_merge_done_reg(FIFO_WMA_Pointer_n_7),
        .wma_word_done_d1(wma_word_done_d1),
        .wma_word_done_d1_reg(FIFO_WMA_Pointer_n_12),
        .wma_word_done_d1_reg_0(update_wma_data_valid),
        .\wr_port_data_info_reg[0][BE][0] (\wr_port_data_info_reg[0][BE][0] ),
        .\wr_port_data_info_reg[0][BE][3] (\wr_port_data_info_reg[0][BE][3]_0 ),
        .\wr_port_data_info_reg[0][BE][3]_0 (\wr_port_data_info_reg[0][BE][3] ),
        .wr_port_data_valid_i_reg(wr_port_data_valid_i_reg),
        .write_data_full(write_data_full),
        .\write_data_info[0][Valid] (\write_data_info[0][Valid] ));
  design_1_system_cache_0_0_sc_srl_fifo_counter__parameterized3_51 FIFO_WM_Pointer
       (.ACLK(ACLK),
        .E(FIFO_ED_Pointer_n_34),
        .Q(Q),
        .\Use_Reg_Ctrl.queue_exist_i_reg_0 (FIFO_WM_Pointer_n_7),
        .\Use_Reg_Ctrl.queue_exist_i_reg_1 (FIFO_WM_Pointer_n_8),
        .\Use_Reg_Ctrl.queue_exist_i_reg_2 (FIFO_WM_Pointer_n_10),
        .e_fifo_empty(e_fifo_empty),
        .lookup_push_write_miss(lookup_push_write_miss),
        .\lu_check_info_reg[Port_Num][0] (\lu_check_info_reg[Port_Num][0] ),
        .p_138_in(p_138_in),
        .p_20_in(p_20_in),
        .queue_pop(queue_pop),
        .update_evict_busy(update_evict_busy),
        .update_evict_ongoing_reg(FIFO_WM_Pointer_n_12),
        .update_wm_pop_evict_hold(update_wm_pop_evict_hold),
        .update_wm_pop_normal(update_wm_pop_normal),
        .update_wm_pop_normal_hold_reg(update_wm_pop_normal_hold_reg_n_0),
        .update_wma_select_port3(update_wma_select_port3),
        .update_wr_miss_rs_last(update_wr_miss_rs_last),
        .\update_wr_offset_cnt_reg[3] ({update_wr_offset_cnt[3],update_wr_offset_cnt[0]}),
        .update_write_miss_busy(update_write_miss_busy),
        .\update_write_miss_busy_i_reg[0] (FIFO_WM_Pointer_n_14),
        .\update_write_miss_busy_i_reg[1] (FIFO_WM_Pointer_n_13),
        .update_write_miss_full(update_write_miss_full),
        .update_write_miss_ongoing(update_write_miss_ongoing),
        .wm_allocate_reg(wm_allocate_reg_n_0),
        .wm_evict(wm_evict),
        .wm_exist(wm_exist),
        .wm_kind_reg(FIFO_WMA_Pointer_n_28),
        .wm_local_wrap_reg(\update_wr_offset_cnt_reg[0]_0 ),
        .\wm_offset_reg[3] ({wm_offset[3],wm_offset[0]}),
        .wm_read_fifo_addr(wm_read_fifo_addr),
        .\wm_use_bits_reg[1] (FIFO_WMAD_Pointer_n_4),
        .\wm_use_bits_reg[2] (FIFO_WMAD_Pointer_n_3),
        .\wm_use_bits_reg[3] ({wm_use_bits[3],wm_use_bits[0]}),
        .\wm_use_bits_reg[4] (FIFO_WMAD_Pointer_n_7),
        .\wm_use_bits_reg[5] (FIFO_WMAD_Pointer_n_6),
        .wr_port_data_valid_i_reg(wr_port_data_valid_i_reg),
        .write_data_full(write_data_full));
  design_1_system_cache_0_0_carry_latch_and_n \Gen_Set_Data_En[0].UD_RD_And_Inst10 
       (.A_N(update_cur_data_way),
        .Carry_IN(update_word_cnt_en),
        .Carry_OUT(update_data_en_ii_1),
        .O(O),
        .lopt(lopt_41),
        .lopt_1(lopt_42),
        .lopt_2(lopt_43),
        .lopt_3(lopt_44));
  design_1_system_cache_0_0_carry_latch_and_n__parameterized1 \Gen_Set_Data_En[1].UD_RD_And_Inst10 
       (.A_N(A_N),
        .Carry_IN(update_data_en_ii_1),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 (\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_1 ),
        .lopt(lopt_41),
        .lopt_1(lopt_42),
        .lopt_2(lopt_43),
        .lopt_3(lopt_44));
  design_1_system_cache_0_0_carry_and_52 \Gen_Set_Tag[0].UD_Tag_And_Inst1 
       (.lopt(lopt_45),
        .lopt_1(lopt_46),
        .lopt_2(\The_Compare[0].sel_reg_3 ),
        .lopt_3(lopt_47),
        .lopt_4(lopt_48),
        .lopt_5(A_4),
        .lopt_6(lopt_49),
        .lopt_7(lopt_50),
        .lopt_8(\The_Compare[2].sel_reg_5 ),
        .ri_allocate_reg(ri_allocate),
        .\update_cur_tag_rd_way_reg[0] (update_cur_tag_rd_way),
        .update_sel_readback_tag_0(update_sel_readback_tag_0));
  design_1_system_cache_0_0_carry_and_53 \Gen_Set_Tag[0].UD_Tag_And_Inst2 
       (.lopt(lopt_51),
        .lopt_1(lopt_52),
        .update_readback_available_reg(update_readback_available),
        .update_tag_is_alive_0(update_tag_is_alive_0),
        .update_tag_match_pre_0(update_tag_match_pre_0));
  design_1_system_cache_0_0_carry_and_54 \Gen_Set_Tag[0].UD_Tag_And_Inst3 
       (.\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (backend_rd_data_pop),
        .lopt(lopt_53),
        .lopt_1(lopt_54),
        .lopt_2(lopt_55),
        .update_tag_is_alive_0(update_tag_is_alive_0),
        .update_tag_remove_lock_0(update_tag_remove_lock_0));
  design_1_system_cache_0_0_carry_compare__parameterized2 \Gen_Set_Tag[0].UD_Tag_Compare_Inst1 
       (.A_4(A_4),
        .\The_Compare[0].sel_reg_3 (\The_Compare[0].sel_reg_3 ),
        .\The_Compare[2].sel_reg_5 (\The_Compare[2].sel_reg_5 ),
        .\The_Compare[3].sel_reg (\The_Compare[3].sel_reg ),
        .\The_Compare[4].sel_reg (\The_Compare[4].sel_reg ),
        .\The_Compare[5].sel_reg (\The_Compare[5].sel_reg ),
        .lopt(lopt_45),
        .lopt_1(lopt_46),
        .lopt_2(lopt_47),
        .lopt_3(lopt_48),
        .lopt_4(lopt_49),
        .lopt_5(lopt_50),
        .lopt_6(lopt_51),
        .lopt_7(lopt_52),
        .lopt_8(update_readback_available),
        .update_sel_readback_tag_0(update_sel_readback_tag_0),
        .update_tag_match_pre_0(update_tag_match_pre_0));
  design_1_system_cache_0_0_carry_or_55 \Gen_Set_Tag[0].UD_Tag_Or_Inst1 
       (.WEB(WEB[0]),
        .lopt(lopt_53),
        .lopt_1(lopt_54),
        .lopt_2(lopt_55),
        .\ri_way_reg[0] (ri_way),
        .update_done_tag_write_reg(update_done_tag_write_reg_0),
        .update_need_tag_write(update_need_tag_write),
        .update_readback_available_reg(update_readback_available),
        .update_remove_locked_safe3(update_remove_locked_safe3),
        .update_tag_remove_lock_0(update_tag_remove_lock_0),
        .update_way(update_way));
  design_1_system_cache_0_0_carry_and_56 \Gen_Set_Tag[1].UD_Tag_And_Inst1 
       (.lopt(lopt_56),
        .lopt_1(lopt_57),
        .lopt_2(\The_Compare[0].sel_reg_6 ),
        .lopt_3(lopt_58),
        .lopt_4(lopt_59),
        .lopt_5(A_7),
        .lopt_6(lopt_60),
        .lopt_7(lopt_61),
        .lopt_8(\The_Compare[2].sel_reg_8 ),
        .ri_allocate_reg(ri_allocate),
        .\update_cur_tag_rd_way_reg[0] (update_cur_tag_rd_way),
        .update_sel_readback_tag_1(update_sel_readback_tag_1));
  design_1_system_cache_0_0_carry_and_57 \Gen_Set_Tag[1].UD_Tag_And_Inst2 
       (.lopt(lopt_62),
        .lopt_1(lopt_63),
        .update_readback_available_reg(update_readback_available),
        .update_tag_is_alive_1(update_tag_is_alive_1),
        .update_tag_match_pre_1(update_tag_match_pre_1));
  design_1_system_cache_0_0_carry_and_58 \Gen_Set_Tag[1].UD_Tag_And_Inst3 
       (.\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (backend_rd_data_pop),
        .lopt(lopt_64),
        .lopt_1(lopt_65),
        .lopt_2(lopt_66),
        .update_tag_is_alive_1(update_tag_is_alive_1),
        .update_tag_remove_lock_1(update_tag_remove_lock_1));
  design_1_system_cache_0_0_carry_compare__parameterized2_59 \Gen_Set_Tag[1].UD_Tag_Compare_Inst1 
       (.A_7(A_7),
        .\The_Compare[0].sel_reg_6 (\The_Compare[0].sel_reg_6 ),
        .\The_Compare[2].sel_reg_8 (\The_Compare[2].sel_reg_8 ),
        .\The_Compare[3].sel_reg_9 (\The_Compare[3].sel_reg_9 ),
        .\The_Compare[4].sel_reg_10 (\The_Compare[4].sel_reg_10 ),
        .\The_Compare[5].sel_reg_11 (\The_Compare[5].sel_reg_11 ),
        .lopt(lopt_56),
        .lopt_1(lopt_57),
        .lopt_2(lopt_58),
        .lopt_3(lopt_59),
        .lopt_4(lopt_60),
        .lopt_5(lopt_61),
        .lopt_6(lopt_62),
        .lopt_7(lopt_63),
        .lopt_8(update_readback_available),
        .update_sel_readback_tag_1(update_sel_readback_tag_1),
        .update_tag_match_pre_1(update_tag_match_pre_1));
  design_1_system_cache_0_0_carry_or_60 \Gen_Set_Tag[1].UD_Tag_Or_Inst1 
       (.WEB(WEB[1]),
        .lopt(lopt_64),
        .lopt_1(lopt_65),
        .lopt_2(lopt_66),
        .\ri_way_reg[0] (ri_way),
        .update_done_tag_write_reg(update_done_tag_write_reg_0),
        .update_need_tag_write(update_need_tag_write),
        .update_readback_available_reg(update_readback_available),
        .update_remove_locked_safe3(update_remove_locked_safe3),
        .update_tag_remove_lock_1(update_tag_remove_lock_1),
        .update_way(update_way));
  FDRE \Long_External_Burst.update_rb_pos_phase_reg 
       (.C(ACLK),
        .CE(1'b1),
        .D(UD_RD_Or_Inst3_n_1),
        .Q(\Long_External_Burst.update_rb_pos_phase_reg_1 ),
        .R(1'b0));
  design_1_system_cache_0_0_carry_and_61 \No_Read_FIFO.UD_RD_NO_R_And_Inst1 
       (.lopt(lopt_17),
        .lopt_1(lopt_18),
        .lopt_2(lopt_19),
        .ud_rm_use_resize_part_ok(ud_rm_use_resize_part_ok),
        .update_read_miss_use_ok(update_read_miss_use_ok));
  design_1_system_cache_0_0_carry_select_and \No_Read_FIFO.UD_RD_NO_R_And_Inst2 
       (.\lookup_read_data_info[0,0][Valid] (\lookup_read_data_info[0,0][Valid] ),
        .\lookup_read_data_info[0,1][Valid] (\lookup_read_data_info[0,1][Valid] ),
        .lopt(lopt_20),
        .lopt_1(lopt_21),
        .lopt_10(lopt_28),
        .lopt_11(lopt_29),
        .lopt_2(lopt_22),
        .lopt_3(lopt_23),
        .lopt_4(lopt_24),
        .lopt_5(FIFO_WMA_Pointer_n_20),
        .lopt_6(lopt_25),
        .lopt_7(lopt_26),
        .lopt_8(FIFO_ED_Pointer_n_30),
        .lopt_9(lopt_27),
        .r_miss_fifo_full(r_miss_fifo_full),
        .r_miss_fifo_full_8(r_miss_fifo_full_8),
        .\read_data_status[0,0][Hit_Full] (\read_data_status[0,0][Hit_Full] ),
        .\read_data_status[0,1][Hit_Full] (\read_data_status[0,1][Hit_Full] ),
        .ri_port(ri_port),
        .ud_rm_use_resize_part_ok(ud_rm_use_resize_part_ok),
        .update_read_miss_resize_ok(update_read_miss_resize_ok),
        .update_read_resize_finish_reg(update_read_resize_finish_reg_n_0),
        .update_read_resize_selected_reg(update_read_resize_selected_reg_n_0));
  LUT4 #(
    .INIT(16'hEFEE)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_1 
       (.I0(update_word_cnt_almost_last),
        .I1(update_readback_available),
        .I2(update_done_tag_write_reg_0),
        .I3(update_need_tag_write),
        .O(ENB));
  LUT5 #(
    .INIT(32'h8B888888)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_10 
       (.I0(update_tag_unlock_addr[13]),
        .I1(update_remove_locked_safe3),
        .I2(update_done_tag_write_reg_0),
        .I3(update_need_tag_write),
        .I4(\update_info_reg[Addr][31] [13]),
        .O(ADDRB[7]));
  LUT5 #(
    .INIT(32'h8B888888)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_11 
       (.I0(update_tag_unlock_addr[12]),
        .I1(update_remove_locked_safe3),
        .I2(update_done_tag_write_reg_0),
        .I3(update_need_tag_write),
        .I4(\update_info_reg[Addr][31] [12]),
        .O(ADDRB[6]));
  LUT5 #(
    .INIT(32'h8B888888)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_12 
       (.I0(update_tag_unlock_addr[11]),
        .I1(update_remove_locked_safe3),
        .I2(update_done_tag_write_reg_0),
        .I3(update_need_tag_write),
        .I4(\update_info_reg[Addr][31] [11]),
        .O(ADDRB[5]));
  LUT5 #(
    .INIT(32'h8B888888)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_13 
       (.I0(update_tag_unlock_addr[10]),
        .I1(update_remove_locked_safe3),
        .I2(update_done_tag_write_reg_0),
        .I3(update_need_tag_write),
        .I4(\update_info_reg[Addr][31] [10]),
        .O(ADDRB[4]));
  LUT5 #(
    .INIT(32'h8B888888)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_14 
       (.I0(update_tag_unlock_addr[9]),
        .I1(update_remove_locked_safe3),
        .I2(update_done_tag_write_reg_0),
        .I3(update_need_tag_write),
        .I4(\update_info_reg[Addr][31] [9]),
        .O(ADDRB[3]));
  LUT5 #(
    .INIT(32'h8B888888)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_15 
       (.I0(update_tag_unlock_addr[8]),
        .I1(update_remove_locked_safe3),
        .I2(update_done_tag_write_reg_0),
        .I3(update_need_tag_write),
        .I4(\update_info_reg[Addr][31] [8]),
        .O(ADDRB[2]));
  LUT5 #(
    .INIT(32'h8B888888)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_16 
       (.I0(update_tag_unlock_addr[7]),
        .I1(update_remove_locked_safe3),
        .I2(update_done_tag_write_reg_0),
        .I3(update_need_tag_write),
        .I4(\update_info_reg[Addr][31] [7]),
        .O(ADDRB[1]));
  LUT5 #(
    .INIT(32'h8B888888)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_17 
       (.I0(update_tag_unlock_addr[6]),
        .I1(update_remove_locked_safe3),
        .I2(update_done_tag_write_reg_0),
        .I3(update_need_tag_write),
        .I4(\update_info_reg[Addr][31] [6]),
        .O(ADDRB[0]));
  LUT5 #(
    .INIT(32'h8B888888)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_18 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [7]),
        .I1(update_readback_available),
        .I2(update_done_tag_write_reg_0),
        .I3(update_need_tag_write),
        .I4(\update_info_reg[Addr][31] [21]),
        .O(DATA_INB[7]));
  LUT5 #(
    .INIT(32'h8B888888)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_19 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [6]),
        .I1(update_readback_available),
        .I2(update_done_tag_write_reg_0),
        .I3(update_need_tag_write),
        .I4(\update_info_reg[Addr][31] [20]),
        .O(DATA_INB[6]));
  LUT5 #(
    .INIT(32'h8B888888)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_20 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [5]),
        .I1(update_readback_available),
        .I2(update_done_tag_write_reg_0),
        .I3(update_need_tag_write),
        .I4(\update_info_reg[Addr][31] [19]),
        .O(DATA_INB[5]));
  LUT5 #(
    .INIT(32'h8B888888)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_21__0 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [4]),
        .I1(update_readback_available),
        .I2(update_done_tag_write_reg_0),
        .I3(update_need_tag_write),
        .I4(\update_info_reg[Addr][31] [18]),
        .O(DATA_INB[4]));
  LUT5 #(
    .INIT(32'h8B888888)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_22__0 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [3]),
        .I1(update_readback_available),
        .I2(update_done_tag_write_reg_0),
        .I3(update_need_tag_write),
        .I4(\update_info_reg[Addr][31] [17]),
        .O(DATA_INB[3]));
  LUT5 #(
    .INIT(32'h8B888888)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_23__0 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [2]),
        .I1(update_readback_available),
        .I2(update_done_tag_write_reg_0),
        .I3(update_need_tag_write),
        .I4(\update_info_reg[Addr][31] [16]),
        .O(DATA_INB[2]));
  LUT5 #(
    .INIT(32'h8B888888)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_24__0 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [1]),
        .I1(update_readback_available),
        .I2(update_done_tag_write_reg_0),
        .I3(update_need_tag_write),
        .I4(\update_info_reg[Addr][31] [15]),
        .O(DATA_INB[1]));
  LUT5 #(
    .INIT(32'h8B888888)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_25 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [0]),
        .I1(update_readback_available),
        .I2(update_done_tag_write_reg_0),
        .I3(update_need_tag_write),
        .I4(\update_info_reg[Addr][31] [14]),
        .O(DATA_INB[0]));
  LUT4 #(
    .INIT(16'h0400)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_29 
       (.I0(update_done_tag_write_reg_0),
        .I1(update_need_tag_write),
        .I2(update_readback_available),
        .I3(update_miss),
        .O(DATA_INB[18]));
  LUT5 #(
    .INIT(32'h8B888888)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_30 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [17]),
        .I1(update_readback_available),
        .I2(update_done_tag_write_reg_0),
        .I3(update_need_tag_write),
        .I4(\update_info_reg[Addr][31] [31]),
        .O(DATA_INB[17]));
  LUT5 #(
    .INIT(32'h8B888888)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_31 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [16]),
        .I1(update_readback_available),
        .I2(update_done_tag_write_reg_0),
        .I3(update_need_tag_write),
        .I4(\update_info_reg[Addr][31] [30]),
        .O(DATA_INB[16]));
  LUT5 #(
    .INIT(32'h8B888888)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_32 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [15]),
        .I1(update_readback_available),
        .I2(update_done_tag_write_reg_0),
        .I3(update_need_tag_write),
        .I4(\update_info_reg[Addr][31] [29]),
        .O(DATA_INB[15]));
  LUT5 #(
    .INIT(32'h8B888888)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_33 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [14]),
        .I1(update_readback_available),
        .I2(update_done_tag_write_reg_0),
        .I3(update_need_tag_write),
        .I4(\update_info_reg[Addr][31] [28]),
        .O(DATA_INB[14]));
  LUT5 #(
    .INIT(32'h8B888888)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_34 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [13]),
        .I1(update_readback_available),
        .I2(update_done_tag_write_reg_0),
        .I3(update_need_tag_write),
        .I4(\update_info_reg[Addr][31] [27]),
        .O(DATA_INB[13]));
  LUT5 #(
    .INIT(32'h8B888888)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_35 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [12]),
        .I1(update_readback_available),
        .I2(update_done_tag_write_reg_0),
        .I3(update_need_tag_write),
        .I4(\update_info_reg[Addr][31] [26]),
        .O(DATA_INB[12]));
  LUT5 #(
    .INIT(32'h8B888888)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_36 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [11]),
        .I1(update_readback_available),
        .I2(update_done_tag_write_reg_0),
        .I3(update_need_tag_write),
        .I4(\update_info_reg[Addr][31] [25]),
        .O(DATA_INB[11]));
  LUT5 #(
    .INIT(32'h8B888888)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_37 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [10]),
        .I1(update_readback_available),
        .I2(update_done_tag_write_reg_0),
        .I3(update_need_tag_write),
        .I4(\update_info_reg[Addr][31] [24]),
        .O(DATA_INB[10]));
  LUT5 #(
    .INIT(32'h8B888888)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_38 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [9]),
        .I1(update_readback_available),
        .I2(update_done_tag_write_reg_0),
        .I3(update_need_tag_write),
        .I4(\update_info_reg[Addr][31] [23]),
        .O(DATA_INB[9]));
  LUT5 #(
    .INIT(32'h8B888888)) 
    \Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[0].RAMB36_I1_i_39 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [8]),
        .I1(update_readback_available),
        .I2(update_done_tag_write_reg_0),
        .I3(update_need_tag_write),
        .I4(\update_info_reg[Addr][31] [22]),
        .O(DATA_INB[8]));
  (* C_CE_LOW = "1'b0" *) 
  (* C_IS_SET = "1'b0" *) 
  (* C_NUM_CE = "1" *) 
  (* C_TARGET = "3" *) 
  (* DONT_TOUCH *) 
  design_1_system_cache_0_0_bit_reg_ce__14 Reset_Inst
       (.CE(1'b1),
        .CLK(ACLK),
        .D(ARESET),
        .Q(Q),
        .SR(1'b0));
  (* SOFT_HLUTNM = "soft_lutpair103" *) 
  LUT3 #(
    .INIT(8'h20)) 
    \S_AXI_BRESP[0]_i_2 
       (.I0(\bp_fifo_mem_reg[15][BRESP][0]_srl16_n_0 ),
        .I1(bs_src[0]),
        .I2(bs_src[1]),
        .O(\S_AXI_BRESP_reg[0] ));
  (* SOFT_HLUTNM = "soft_lutpair103" *) 
  LUT3 #(
    .INIT(8'h20)) 
    \S_AXI_BRESP[1]_i_2 
       (.I0(\bp_fifo_mem_reg[15][BRESP][1]_srl16_n_0 ),
        .I1(bs_src[0]),
        .I2(bs_src[1]),
        .O(\S_AXI_BRESP_reg[1] ));
  design_1_system_cache_0_0_carry_piperun_step UD_PR_Comp_Inst1
       (.lopt(\^lopt ),
        .lopt_1(\^lopt_1 ),
        .lopt_2(S_4),
        .lopt_3(\^lopt_2 ),
        .lopt_4(\^lopt_3 ),
        .lopt_5(S_0),
        .lopt_6(\^lopt_4 ),
        .lopt_7(lopt_5),
        .lopt_8(lopt_6),
        .update_done_tag_write_reg(update_done_tag_write_reg_0),
        .update_need_tag_write(update_need_tag_write),
        .update_piperun_pre5(update_piperun_pre5),
        .update_readback_available_reg(update_readback_available));
  design_1_system_cache_0_0_carry_piperun_step_62 UD_PR_Comp_Inst2
       (.S(S_4),
        .lopt(\^lopt ),
        .lopt_1(\^lopt_1 ),
        .update_piperun_pre4(update_piperun_pre4),
        .update_piperun_pre5(update_piperun_pre5));
  design_1_system_cache_0_0_carry_piperun_step_63 UD_PR_Comp_Inst4
       (.S(S_0),
        .lopt(\^lopt_2 ),
        .lopt_1(\^lopt_3 ),
        .update_piperun_pre3(update_piperun_pre3),
        .update_piperun_pre4(update_piperun_pre4));
  design_1_system_cache_0_0_carry_piperun_step_64 UD_PR_Comp_Inst5
       (.\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst ),
        .aw_fifo_full(aw_fifo_full),
        .lopt(\^lopt_4 ),
        .lopt_1(lopt_5),
        .lopt_2(lopt_6),
        .need_to_stall_write_reg(need_to_stall_write_reg_0),
        .update_done_aw_reg(\pending_write_reg[4] ),
        .update_piperun_pre2(update_piperun_pre2),
        .update_piperun_pre3(update_piperun_pre3));
  design_1_system_cache_0_0_carry_piperun_step_65 UD_PR_Comp_Inst6
       (.S(S_5),
        .lopt(lopt_7),
        .lopt_1(lopt_8),
        .lopt_2(lopt_9),
        .lopt_3(lopt_10),
        .lopt_4(lopt_11),
        .lopt_5(update_valid),
        .lopt_6(lopt_12),
        .lopt_7(lopt_13),
        .lopt_8(lopt_14),
        .update_piperun_pre1(update_piperun_pre1),
        .update_piperun_pre2(update_piperun_pre2));
  design_1_system_cache_0_0_carry_and_n_66 UD_PR_Comp_Inst7
       (.\Long_External_Burst.update_rb_pos_phase_reg (\Long_External_Burst.update_rb_pos_phase_reg_1 ),
        .Q(Q),
        .lopt(lopt_7),
        .lopt_1(lopt_8),
        .lopt_2(lopt_9),
        .update_done_tag_write(update_done_tag_write),
        .update_done_tag_write_reg(update_done_tag_write_reg_0),
        .update_need_tag_write(update_need_tag_write),
        .update_piperun(update_piperun),
        .update_piperun_pre1(update_piperun_pre1),
        .update_read_miss_ongoing_reg(\Long_External_Burst.update_rb_pos_phase_reg_0 ),
        .update_readback_available_reg(update_readback_available),
        .update_valid(update_valid));
  design_1_system_cache_0_0_carry_and_67 UD_RD_And_Inst1
       (.A136_out(A136_out),
        .lopt(lopt_15),
        .lopt_1(lopt_16),
        .lopt_2(FIFO_RI_Pointer_n_11),
        .lopt_3(lopt_17),
        .lopt_4(lopt_18),
        .lopt_5(lopt_19),
        .lopt_6(lopt_20),
        .lopt_7(lopt_21),
        .lopt_8(lopt_22),
        .ud_rm_available(ud_rm_available));
  design_1_system_cache_0_0_carry_and_68 UD_RD_And_Inst4
       (.lopt(lopt_23),
        .lopt_1(lopt_24),
        .ri_merge_reg(FIFO_WMA_Pointer_n_20),
        .ud_rm_use_pre_safe(ud_rm_use_pre_safe),
        .update_read_miss_resize_ok(update_read_miss_resize_ok));
  design_1_system_cache_0_0_carry_and_69 UD_RD_And_Inst5
       (.lopt(lopt_25),
        .lopt_1(lopt_26),
        .ud_rm_use_pre_safe(ud_rm_use_pre_safe),
        .ud_rm_use_safe(ud_rm_use_safe),
        .update_read_miss_ongoing_reg(FIFO_ED_Pointer_n_30));
  design_1_system_cache_0_0_carry_and_70 UD_RD_And_Inst6
       (.lopt(lopt_27),
        .lopt_1(lopt_28),
        .lopt_2(lopt_29),
        .ud_rm_use_and_lock_safe(ud_rm_use_and_lock_safe),
        .ud_rm_use_safe(ud_rm_use_safe),
        .update_done_tag_write_reg(update_done_tag_write_reg_0),
        .update_need_tag_write(update_need_tag_write),
        .update_readback_available_reg(update_readback_available),
        .update_remove_locked_safe3(update_remove_locked_safe3),
        .update_rm_alloc_ongoing_reg(update_rm_alloc_ongoing_reg_0),
        .update_word_cnt_almost_last(update_word_cnt_almost_last));
  design_1_system_cache_0_0_carry_and_n_71 UD_RD_And_Inst7
       (.M0_AXI_RLAST(M0_AXI_RLAST),
        .M0_AXI_RREADY(M0_AXI_RREADY),
        .M0_AXI_RVALID(M0_AXI_RVALID),
        .Q(Q),
        .\Use_Reg_Ctrl.queue_exist_i_reg (UD_RD_And_Inst7_n_3),
        .lopt(lopt_30),
        .lopt_1(lopt_31),
        .lopt_2(lopt_32),
        .lopt_3(lopt_33),
        .lopt_4(lopt_34),
        .lopt_5(lopt_35),
        .queue_pop129_out(queue_pop129_out),
        .queue_pop134_out(queue_pop134_out),
        .ri_evicted(ri_evicted),
        .ri_exist(ri_exist),
        .ud_rm_use_and_lock_safe(ud_rm_use_and_lock_safe));
  design_1_system_cache_0_0_carry_and_72 UD_RD_And_Inst8
       (.Carry_IN(backend_rd_data_use_ii),
        .M0_AXI_RVALID(M0_AXI_RVALID),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (M0_AXI_RREADY),
        .lopt(lopt_30),
        .lopt_1(lopt_31));
  design_1_system_cache_0_0_carry_latch_and_n__parameterized3 UD_RD_And_Inst8b
       (.CO(update_locked_tag_is_dead0),
        .Carry_IN(backend_rd_data_use_ii),
        .M0_AXI_RLAST(M0_AXI_RLAST),
        .ri_allocate_reg(ri_allocate),
        .update_lock_release_reg(backend_rd_data_pop),
        .update_readback_available_reg(update_readback_available),
        .update_remove_locked(update_remove_locked));
  design_1_system_cache_0_0_carry_latch_and_n__parameterized1_73 UD_RD_And_Inst8c
       (.A_N(FIFO_WMA_Pointer_n_19),
        .Carry_IN(backend_rd_data_use_ii),
        .Carry_OUT(backend_rd_data_use),
        .O(wma_pop),
        .lopt(lopt_32),
        .lopt_1(lopt_33),
        .lopt_2(lopt_34),
        .lopt_3(lopt_35),
        .lopt_4(lopt_36),
        .lopt_5(lopt_37),
        .lopt_6(lopt_38),
        .lopt_7(lopt_39),
        .lopt_8(lopt_40),
        .lopt_9(S_3));
  design_1_system_cache_0_0_carry_and_74 UD_RD_And_Inst9
       (.Carry_IN(update_word_cnt_en),
        .Carry_OUT(backend_rd_data_use),
        .Q(Q),
        .lopt(lopt_36),
        .lopt_1(lopt_37),
        .lopt_2(lopt_38),
        .ri_allocate_reg(ri_allocate),
        .update_data_we(update_data_we),
        .update_evict_ongoing_reg(update_evict_ongoing_reg_n_0),
        .update_read_miss_ongoing_reg(\Long_External_Burst.update_rb_pos_phase_reg_0 ),
        .update_rm_alloc_ongoing(update_rm_alloc_ongoing),
        .update_word_cnt_last_reg(update_word_cnt_last));
  design_1_system_cache_0_0_carry_or_75 UD_RD_Or_Inst1
       (.lopt(lopt_15),
        .lopt_1(lopt_16),
        .ud_rm_available(ud_rm_available),
        .update_read_miss_ongoing_reg(FIFO_RI_Pointer_n_11),
        .update_read_miss_use_ok(update_read_miss_use_ok));
  design_1_system_cache_0_0_carry_or_76 UD_RD_Or_Inst3
       (.Carry_IN(update_word_cnt_en),
        .\Long_External_Burst.update_rb_pos_phase_reg (UD_RD_Or_Inst3_n_1),
        .\Long_External_Burst.update_rb_pos_phase_reg_0 (\Long_External_Burst.update_rb_pos_phase_reg_1 ),
        .Q(Q),
        .S(S_3),
        .lopt(lopt_39),
        .lopt_1(lopt_40),
        .ri_allocate_reg(ri_allocate),
        .update_data_we(update_data_we),
        .update_read_miss_ongoing_reg(\Long_External_Burst.update_rb_pos_phase_reg_0 ),
        .\update_word_cnt_len_reg[5] (update_word_cnt_len_reg__0));
  design_1_system_cache_0_0_carry_and_77 UD_TagConf_And_Inst1
       (.access_valid(access_valid),
        .lopt(lopt_79),
        .lopt_1(lopt_80),
        .update_match_addr(update_match_addr),
        .update_tag_conflict(update_tag_conflict));
  design_1_system_cache_0_0_carry_compare UD_TagConf_Compare_Inst1
       (.A_0(A_0),
        .\The_Compare[0].sel_reg (\The_Compare[0].sel_reg ),
        .\The_Compare[2].sel_reg (\The_Compare[2].sel_reg ),
        .lopt(lopt_75),
        .lopt_1(lopt_76),
        .lopt_2(lopt_77),
        .lopt_3(lopt_78),
        .lopt_4(lopt_79),
        .lopt_5(lopt_80),
        .lopt_6(access_valid),
        .update_match_addr(update_match_addr),
        .update_need_tag_write_carry(update_need_tag_write_carry));
  design_1_system_cache_0_0_carry_and_78 UD_TagWrite_And_Inst1
       (.lopt(lopt_67),
        .lopt_1(lopt_68),
        .update_need_tag_write_pre4(update_need_tag_write_pre4),
        .update_need_tag_write_pre5(update_need_tag_write_pre5),
        .update_read_miss(update_read_miss));
  design_1_system_cache_0_0_carry_and_79 UD_TagWrite_And_Inst2
       (.lopt(lopt_73),
        .lopt_1(lopt_74),
        .update_need_tag_write_carry(update_need_tag_write_carry),
        .update_need_tag_write_pre1(update_need_tag_write_pre1),
        .update_valid(update_valid));
  design_1_system_cache_0_0_carry_or_80 UD_TagWrite_Or_Inst1
       (.lopt(lopt_67),
        .lopt_1(lopt_68),
        .lopt_2(update_read_miss),
        .lopt_3(lopt_69),
        .lopt_4(lopt_70),
        .lopt_5(S),
        .lopt_6(lopt_71),
        .lopt_7(lopt_72),
        .lopt_8(S_2),
        .ud_new_tag_valid2(ud_new_tag_valid2),
        .update_need_tag_write_pre5(update_need_tag_write_pre5));
  design_1_system_cache_0_0_carry_or_81 UD_TagWrite_Or_Inst2
       (.S(S),
        .lopt(lopt_69),
        .lopt_1(lopt_70),
        .update_need_tag_write_pre3(update_need_tag_write_pre3),
        .update_need_tag_write_pre4(update_need_tag_write_pre4));
  design_1_system_cache_0_0_carry_or_82 UD_TagWrite_Or_Inst3
       (.S_2(S_2),
        .lopt(lopt_71),
        .lopt_1(lopt_72),
        .update_need_tag_write_pre2(update_need_tag_write_pre2),
        .update_need_tag_write_pre3(update_need_tag_write_pre3));
  design_1_system_cache_0_0_carry_or_83 UD_TagWrite_Or_Inst4
       (.lopt(lopt_73),
        .lopt_1(lopt_74),
        .lopt_2(update_valid),
        .lopt_3(lopt_75),
        .lopt_4(lopt_76),
        .lopt_5(\The_Compare[0].sel_reg ),
        .lopt_6(lopt_77),
        .lopt_7(lopt_78),
        .lopt_8(A_0),
        .\update_info_reg[Allocate] (\update_info_reg[Allocate] ),
        .update_need_tag_write_pre1(update_need_tag_write_pre1),
        .update_need_tag_write_pre2(update_need_tag_write_pre2));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFFFF7F)) 
    \Use_FPGA_1.LUT_Refresh_Inst_i_3 
       (.I0(update_rm_alloc_ongoing_reg_0),
        .I1(update_word_cnt_almost_last),
        .I2(update_need_tag_write),
        .I3(update_readback_available),
        .I4(update_done_tag_write_reg_0),
        .I5(update_remove_locked_safe3),
        .O(\Use_FPGA_1.LUT_Refresh_Inst_i_3_n_0 ));
  LUT5 #(
    .INIT(32'hFF0D0000)) 
    \Using_FPGA.MUXCY_I_i_1__139 
       (.I0(lu_mem_releasing_lock[0]),
        .I1(\update_release_tag[Valid] ),
        .I2(lu_mem_removed_way_hold[0]),
        .I3(lud_mem_conflict),
        .I4(DATA_OUTA[0]),
        .O(\lu_check_tag_hit_reg[0] ));
  LUT5 #(
    .INIT(32'hFF0D0000)) 
    \Using_FPGA.MUXCY_I_i_1__144 
       (.I0(lu_mem_releasing_lock[1]),
        .I1(\update_release_tag[Valid] ),
        .I2(lu_mem_removed_way_hold[1]),
        .I3(lud_mem_conflict),
        .I4(DATA_OUTA[1]),
        .O(\lu_check_tag_hit_reg[1] ));
  (* SOFT_HLUTNM = "soft_lutpair104" *) 
  LUT2 #(
    .INIT(4'h2)) 
    \Using_FPGA.MUXCY_I_i_2__10 
       (.I0(update_lock_way),
        .I1(\lu_check_valid_bits_reg[1]_0 ),
        .O(lu_mem_releasing_lock[1]));
  (* SOFT_HLUTNM = "soft_lutpair104" *) 
  LUT2 #(
    .INIT(4'h1)) 
    \Using_FPGA.MUXCY_I_i_2__11 
       (.I0(update_lock_way),
        .I1(\lu_check_valid_bits_reg[1]_0 ),
        .O(lu_mem_releasing_lock[0]));
  (* SOFT_HLUTNM = "soft_lutpair90" *) 
  LUT5 #(
    .INIT(32'hFFFFBF00)) 
    \Using_FPGA.MUXCY_I_i_2__3 
       (.I0(update_done_tag_write_reg_0),
        .I1(update_need_tag_write),
        .I2(update_valid),
        .I3(\Long_External_Burst.update_rb_pos_phase_reg_1 ),
        .I4(update_readback_available),
        .O(update_remove_locked_safe3));
  LUT6 #(
    .INIT(64'hFFFFFFFFFFFF6FF6)) 
    \Using_FPGA.MUXCY_I_i_5 
       (.I0(\update_release_tag[Addr] [11]),
        .I1(\lu_mem_info_reg[Addr][11] [3]),
        .I2(\update_release_tag[Addr] [13]),
        .I3(B_Vec[1]),
        .I4(\lu_mem_info_reg[Addr][10] ),
        .I5(\Using_FPGA.MUXCY_I_i_8_n_0 ),
        .O(\lu_check_valid_bits_reg[1]_0 ));
  (* SOFT_HLUTNM = "soft_lutpair94" *) 
  LUT5 #(
    .INIT(32'hFFFF6FF6)) 
    \Using_FPGA.MUXCY_I_i_8 
       (.I0(\lu_mem_info_reg[Addr][11] [0]),
        .I1(\update_release_tag[Addr] [6]),
        .I2(\lu_mem_info_reg[Addr][11] [1]),
        .I3(\update_release_tag[Addr] [7]),
        .I4(\Using_FPGA.MUXCY_I_i_9_n_0 ),
        .O(\Using_FPGA.MUXCY_I_i_8_n_0 ));
  LUT4 #(
    .INIT(16'h6FF6)) 
    \Using_FPGA.MUXCY_I_i_9 
       (.I0(\update_release_tag[Addr] [8]),
        .I1(\lu_mem_info_reg[Addr][11] [2]),
        .I2(\update_release_tag[Addr] [12]),
        .I3(B_Vec[0]),
        .O(\Using_FPGA.MUXCY_I_i_9_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/bp_fifo_mem_reg[15][BRESP] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/bp_fifo_mem_reg[15][BRESP][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \bp_fifo_mem_reg[15][BRESP][0]_srl16 
       (.A0(bp_read_fifo_addr[0]),
        .A1(bp_read_fifo_addr[1]),
        .A2(bp_read_fifo_addr[2]),
        .A3(bp_read_fifo_addr[3]),
        .CE(sel),
        .CLK(ACLK),
        .D(M0_AXI_BRESP[0]),
        .Q(\bp_fifo_mem_reg[15][BRESP][0]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/bp_fifo_mem_reg[15][BRESP] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/bp_fifo_mem_reg[15][BRESP][1]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \bp_fifo_mem_reg[15][BRESP][1]_srl16 
       (.A0(bp_read_fifo_addr[0]),
        .A1(bp_read_fifo_addr[1]),
        .A2(bp_read_fifo_addr[2]),
        .A3(bp_read_fifo_addr[3]),
        .CE(sel),
        .CLK(ACLK),
        .D(M0_AXI_BRESP[1]),
        .Q(\bp_fifo_mem_reg[15][BRESP][1]_srl16_n_0 ));
  FDRE \bs_fifo_mem_reg[0][Src][0] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\bs_fifo_mem_reg[0][Src][0]_0 ),
        .Q(D[0]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[0][Src][1] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\bs_fifo_mem_reg[0][Src][1]_0 ),
        .Q(D[1]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[10][Src][0] 
       (.C(ACLK),
        .CE(queue_push120_out),
        .D(\bs_fifo_mem_reg[9][Src]__0 [0]),
        .Q(\bs_fifo_mem_reg[10][Src]__0 [0]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[10][Src][1] 
       (.C(ACLK),
        .CE(queue_push120_out),
        .D(\bs_fifo_mem_reg[9][Src]__0 [1]),
        .Q(\bs_fifo_mem_reg[10][Src]__0 [1]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[11][Src][0] 
       (.C(ACLK),
        .CE(queue_push120_out),
        .D(\bs_fifo_mem_reg[10][Src]__0 [0]),
        .Q(\bs_fifo_mem_reg[11][Src]__0 [0]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[11][Src][1] 
       (.C(ACLK),
        .CE(queue_push120_out),
        .D(\bs_fifo_mem_reg[10][Src]__0 [1]),
        .Q(\bs_fifo_mem_reg[11][Src]__0 [1]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[12][Src][0] 
       (.C(ACLK),
        .CE(queue_push120_out),
        .D(\bs_fifo_mem_reg[11][Src]__0 [0]),
        .Q(\bs_fifo_mem_reg[12][Src]__0 [0]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[12][Src][1] 
       (.C(ACLK),
        .CE(queue_push120_out),
        .D(\bs_fifo_mem_reg[11][Src]__0 [1]),
        .Q(\bs_fifo_mem_reg[12][Src]__0 [1]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[13][Src][0] 
       (.C(ACLK),
        .CE(queue_push120_out),
        .D(\bs_fifo_mem_reg[12][Src]__0 [0]),
        .Q(\bs_fifo_mem_reg[13][Src]__0 [0]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[13][Src][1] 
       (.C(ACLK),
        .CE(queue_push120_out),
        .D(\bs_fifo_mem_reg[12][Src]__0 [1]),
        .Q(\bs_fifo_mem_reg[13][Src]__0 [1]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[14][Src][0] 
       (.C(ACLK),
        .CE(queue_push120_out),
        .D(\bs_fifo_mem_reg[13][Src]__0 [0]),
        .Q(\bs_fifo_mem_reg[14][Src]__0 [0]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[14][Src][1] 
       (.C(ACLK),
        .CE(queue_push120_out),
        .D(\bs_fifo_mem_reg[13][Src]__0 [1]),
        .Q(\bs_fifo_mem_reg[14][Src]__0 [1]),
        .R(1'b0));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/bs_fifo_mem_reg[15][Port_Num] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/bs_fifo_mem_reg[15][Port_Num][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \bs_fifo_mem_reg[15][Port_Num][0]_srl16 
       (.A0(bs_read_fifo_addr[0]),
        .A1(bs_read_fifo_addr[1]),
        .A2(bs_read_fifo_addr[2]),
        .A3(bs_read_fifo_addr[3]),
        .CE(queue_push120_out),
        .CLK(ACLK),
        .D(\write_req_info[0][Port_Num] ),
        .Q(\bs_fifo_mem_reg[15][Port_Num][0]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/bs_fifo_mem_reg[15][Slv] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/bs_fifo_mem_reg[15][Slv][-1111111111]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \bs_fifo_mem_reg[15][Slv][-1111111111]_srl16 
       (.A0(bs_read_fifo_addr[0]),
        .A1(bs_read_fifo_addr[1]),
        .A2(bs_read_fifo_addr[2]),
        .A3(bs_read_fifo_addr[3]),
        .CE(queue_push120_out),
        .CLK(ACLK),
        .D(s2b_n_0),
        .Q(\bs_fifo_mem_reg[15][Slv][-1111111111]_srl16_n_0 ));
  FDRE \bs_fifo_mem_reg[15][Src][0] 
       (.C(ACLK),
        .CE(queue_push120_out),
        .D(\bs_fifo_mem_reg[14][Src]__0 [0]),
        .Q(\bs_fifo_mem_reg[15][Src]__0 [0]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[15][Src][1] 
       (.C(ACLK),
        .CE(queue_push120_out),
        .D(\bs_fifo_mem_reg[14][Src]__0 [1]),
        .Q(\bs_fifo_mem_reg[15][Src]__0 [1]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[1][Src][0] 
       (.C(ACLK),
        .CE(queue_push120_out),
        .D(D[0]),
        .Q(\bs_fifo_mem_reg[1][Src]__0 [0]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[1][Src][1] 
       (.C(ACLK),
        .CE(queue_push120_out),
        .D(D[1]),
        .Q(\bs_fifo_mem_reg[1][Src]__0 [1]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[2][Src][0] 
       (.C(ACLK),
        .CE(queue_push120_out),
        .D(\bs_fifo_mem_reg[1][Src]__0 [0]),
        .Q(\bs_fifo_mem_reg[2][Src]__0 [0]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[2][Src][1] 
       (.C(ACLK),
        .CE(queue_push120_out),
        .D(\bs_fifo_mem_reg[1][Src]__0 [1]),
        .Q(\bs_fifo_mem_reg[2][Src]__0 [1]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[3][Src][0] 
       (.C(ACLK),
        .CE(queue_push120_out),
        .D(\bs_fifo_mem_reg[2][Src]__0 [0]),
        .Q(\bs_fifo_mem_reg[3][Src]__0 [0]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[3][Src][1] 
       (.C(ACLK),
        .CE(queue_push120_out),
        .D(\bs_fifo_mem_reg[2][Src]__0 [1]),
        .Q(\bs_fifo_mem_reg[3][Src]__0 [1]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[4][Src][0] 
       (.C(ACLK),
        .CE(queue_push120_out),
        .D(\bs_fifo_mem_reg[3][Src]__0 [0]),
        .Q(\bs_fifo_mem_reg[4][Src]__0 [0]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[4][Src][1] 
       (.C(ACLK),
        .CE(queue_push120_out),
        .D(\bs_fifo_mem_reg[3][Src]__0 [1]),
        .Q(\bs_fifo_mem_reg[4][Src]__0 [1]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[5][Src][0] 
       (.C(ACLK),
        .CE(queue_push120_out),
        .D(\bs_fifo_mem_reg[4][Src]__0 [0]),
        .Q(\bs_fifo_mem_reg[5][Src]__0 [0]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[5][Src][1] 
       (.C(ACLK),
        .CE(queue_push120_out),
        .D(\bs_fifo_mem_reg[4][Src]__0 [1]),
        .Q(\bs_fifo_mem_reg[5][Src]__0 [1]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[6][Src][0] 
       (.C(ACLK),
        .CE(queue_push120_out),
        .D(\bs_fifo_mem_reg[5][Src]__0 [0]),
        .Q(\bs_fifo_mem_reg[6][Src]__0 [0]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[6][Src][1] 
       (.C(ACLK),
        .CE(queue_push120_out),
        .D(\bs_fifo_mem_reg[5][Src]__0 [1]),
        .Q(\bs_fifo_mem_reg[6][Src]__0 [1]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[7][Src][0] 
       (.C(ACLK),
        .CE(queue_push120_out),
        .D(\bs_fifo_mem_reg[6][Src]__0 [0]),
        .Q(\bs_fifo_mem_reg[7][Src]__0 [0]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[7][Src][1] 
       (.C(ACLK),
        .CE(queue_push120_out),
        .D(\bs_fifo_mem_reg[6][Src]__0 [1]),
        .Q(\bs_fifo_mem_reg[7][Src]__0 [1]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[8][Src][0] 
       (.C(ACLK),
        .CE(queue_push120_out),
        .D(\bs_fifo_mem_reg[7][Src]__0 [0]),
        .Q(\bs_fifo_mem_reg[8][Src]__0 [0]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[8][Src][1] 
       (.C(ACLK),
        .CE(queue_push120_out),
        .D(\bs_fifo_mem_reg[7][Src]__0 [1]),
        .Q(\bs_fifo_mem_reg[8][Src]__0 [1]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[9][Src][0] 
       (.C(ACLK),
        .CE(queue_push120_out),
        .D(\bs_fifo_mem_reg[8][Src]__0 [0]),
        .Q(\bs_fifo_mem_reg[9][Src]__0 [0]),
        .R(1'b0));
  FDRE \bs_fifo_mem_reg[9][Src][1] 
       (.C(ACLK),
        .CE(queue_push120_out),
        .D(\bs_fifo_mem_reg[8][Src]__0 [1]),
        .Q(\bs_fifo_mem_reg[9][Src]__0 [1]),
        .R(1'b0));
  FDRE \bs_port_num_reg[0] 
       (.C(ACLK),
        .CE(FIFO_BS_Pointer_n_7),
        .D(\bs_fifo_mem_reg[15][Port_Num][0]_srl16_n_0 ),
        .Q(\S_AXI_BID_reg[0] ),
        .R(Q));
  FDRE bs_slv_reg
       (.C(ACLK),
        .CE(FIFO_BS_Pointer_n_7),
        .D(\bs_fifo_mem_reg[15][Slv][-1111111111]_srl16_n_0 ),
        .Q(bs_slv),
        .R(Q));
  FDRE \bs_src_reg[0] 
       (.C(ACLK),
        .CE(FIFO_BS_Pointer_n_7),
        .D(\bs_fifo_mem[15][Src] [0]),
        .Q(bs_src[0]),
        .R(Q));
  FDRE \bs_src_reg[1] 
       (.C(ACLK),
        .CE(FIFO_BS_Pointer_n_7),
        .D(\bs_fifo_mem[15][Src] [1]),
        .Q(bs_src[1]),
        .R(Q));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/e_fifo_mem_reg[15][Offset] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/e_fifo_mem_reg[15][Offset][10]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \e_fifo_mem_reg[15][Offset][10]_srl16 
       (.A0(e_read_fifo_addr[0]),
        .A1(e_read_fifo_addr[1]),
        .A2(e_read_fifo_addr[2]),
        .A3(e_read_fifo_addr[3]),
        .CE(queue_push125_out),
        .CLK(ACLK),
        .D(\update_info_reg[Addr][31] [10]),
        .Q(\e_fifo_mem_reg[15][Offset][10]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/e_fifo_mem_reg[15][Offset] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/e_fifo_mem_reg[15][Offset][11]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \e_fifo_mem_reg[15][Offset][11]_srl16 
       (.A0(e_read_fifo_addr[0]),
        .A1(e_read_fifo_addr[1]),
        .A2(e_read_fifo_addr[2]),
        .A3(e_read_fifo_addr[3]),
        .CE(queue_push125_out),
        .CLK(ACLK),
        .D(\update_info_reg[Addr][31] [11]),
        .Q(\e_fifo_mem_reg[15][Offset][11]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/e_fifo_mem_reg[15][Offset] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/e_fifo_mem_reg[15][Offset][12]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \e_fifo_mem_reg[15][Offset][12]_srl16 
       (.A0(e_read_fifo_addr[0]),
        .A1(e_read_fifo_addr[1]),
        .A2(e_read_fifo_addr[2]),
        .A3(e_read_fifo_addr[3]),
        .CE(queue_push125_out),
        .CLK(ACLK),
        .D(\update_info_reg[Addr][31] [12]),
        .Q(\e_fifo_mem_reg[15][Offset][12]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/e_fifo_mem_reg[15][Offset] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/e_fifo_mem_reg[15][Offset][13]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \e_fifo_mem_reg[15][Offset][13]_srl16 
       (.A0(e_read_fifo_addr[0]),
        .A1(e_read_fifo_addr[1]),
        .A2(e_read_fifo_addr[2]),
        .A3(e_read_fifo_addr[3]),
        .CE(queue_push125_out),
        .CLK(ACLK),
        .D(\update_info_reg[Addr][31] [13]),
        .Q(\e_fifo_mem_reg[15][Offset][13]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/e_fifo_mem_reg[15][Offset] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/e_fifo_mem_reg[15][Offset][6]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \e_fifo_mem_reg[15][Offset][6]_srl16 
       (.A0(e_read_fifo_addr[0]),
        .A1(e_read_fifo_addr[1]),
        .A2(e_read_fifo_addr[2]),
        .A3(e_read_fifo_addr[3]),
        .CE(queue_push125_out),
        .CLK(ACLK),
        .D(\update_info_reg[Addr][31] [6]),
        .Q(\e_fifo_mem_reg[15][Offset][6]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/e_fifo_mem_reg[15][Offset] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/e_fifo_mem_reg[15][Offset][7]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \e_fifo_mem_reg[15][Offset][7]_srl16 
       (.A0(e_read_fifo_addr[0]),
        .A1(e_read_fifo_addr[1]),
        .A2(e_read_fifo_addr[2]),
        .A3(e_read_fifo_addr[3]),
        .CE(queue_push125_out),
        .CLK(ACLK),
        .D(\update_info_reg[Addr][31] [7]),
        .Q(\e_fifo_mem_reg[15][Offset][7]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/e_fifo_mem_reg[15][Offset] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/e_fifo_mem_reg[15][Offset][8]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \e_fifo_mem_reg[15][Offset][8]_srl16 
       (.A0(e_read_fifo_addr[0]),
        .A1(e_read_fifo_addr[1]),
        .A2(e_read_fifo_addr[2]),
        .A3(e_read_fifo_addr[3]),
        .CE(queue_push125_out),
        .CLK(ACLK),
        .D(\update_info_reg[Addr][31] [8]),
        .Q(\e_fifo_mem_reg[15][Offset][8]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/e_fifo_mem_reg[15][Offset] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/e_fifo_mem_reg[15][Offset][9]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \e_fifo_mem_reg[15][Offset][9]_srl16 
       (.A0(e_read_fifo_addr[0]),
        .A1(e_read_fifo_addr[1]),
        .A2(e_read_fifo_addr[2]),
        .A3(e_read_fifo_addr[3]),
        .CE(queue_push125_out),
        .CLK(ACLK),
        .D(\update_info_reg[Addr][31] [9]),
        .Q(\e_fifo_mem_reg[15][Offset][9]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/e_fifo_mem_reg[15][Way] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/e_fifo_mem_reg[15][Way][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \e_fifo_mem_reg[15][Way][0]_srl16 
       (.A0(e_read_fifo_addr[0]),
        .A1(e_read_fifo_addr[1]),
        .A2(e_read_fifo_addr[2]),
        .A3(e_read_fifo_addr[3]),
        .CE(queue_push125_out),
        .CLK(ACLK),
        .D(update_way),
        .Q(\e_fifo_mem_reg[15][Way][0]_srl16_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair94" *) 
  LUT4 #(
    .INIT(16'h6FF6)) 
    lookup_next_is_last_beat_i_10
       (.I0(\update_release_tag[Addr] [7]),
        .I1(\lu_mem_info_reg[Addr][11] [1]),
        .I2(\update_release_tag[Addr] [6]),
        .I3(\lu_mem_info_reg[Addr][11] [0]),
        .O(lookup_next_is_last_beat_i_10_n_0));
  LUT4 #(
    .INIT(16'h6FF6)) 
    lookup_next_is_last_beat_i_11
       (.I0(\update_release_tag[Addr] [11]),
        .I1(\lu_mem_info_reg[Addr][11] [3]),
        .I2(\update_release_tag[Addr] [13]),
        .I3(B_Vec[1]),
        .O(lookup_next_is_last_beat_i_11_n_0));
  LUT6 #(
    .INIT(64'h00000000FFFEFFFF)) 
    lookup_next_is_last_beat_i_9
       (.I0(lookup_next_is_last_beat_i_10_n_0),
        .I1(\Using_FPGA.MUXCY_I_i_9_n_0 ),
        .I2(\lu_mem_info_reg[Addr][10] ),
        .I3(lookup_next_is_last_beat_i_11_n_0),
        .I4(lud_mem_waiting_for_pipe_reg),
        .I5(lookup_offset_first),
        .O(\lookup_offset_len_cnt_reg[3] ));
  LUT5 #(
    .INIT(32'hFF0D0000)) 
    \lu_check_valid_bits[0]_i_1 
       (.I0(lu_mem_releasing_lock[0]),
        .I1(\update_release_tag[Valid] ),
        .I2(lu_mem_removed_way_hold[0]),
        .I3(lud_mem_conflict),
        .I4(DATA_OUTA[0]),
        .O(\lu_check_valid_bits_reg[1] [0]));
  LUT5 #(
    .INIT(32'hFF0D0000)) 
    \lu_check_valid_bits[1]_i_1 
       (.I0(lu_mem_releasing_lock[1]),
        .I1(\update_release_tag[Valid] ),
        .I2(lu_mem_removed_way_hold[1]),
        .I3(lud_mem_conflict),
        .I4(DATA_OUTA[1]),
        .O(\lu_check_valid_bits_reg[1] [1]));
  FDRE \ri_addr_reg[0] 
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_fifo_mem_reg[15][Addr][0]_srl16_n_0 ),
        .Q(\ri_addr_reg_n_0_[0] ),
        .R(Q));
  FDRE \ri_addr_reg[10] 
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_fifo_mem_reg[15][Addr][10]_srl16_n_0 ),
        .Q(update_tag_unlock_addr[10]),
        .R(Q));
  FDRE \ri_addr_reg[11] 
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_fifo_mem_reg[15][Addr][11]_srl16_n_0 ),
        .Q(update_tag_unlock_addr[11]),
        .R(Q));
  FDRE \ri_addr_reg[12] 
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_fifo_mem_reg[15][Addr][12]_srl16_n_0 ),
        .Q(update_tag_unlock_addr[12]),
        .R(Q));
  FDRE \ri_addr_reg[13] 
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_fifo_mem_reg[15][Addr][13]_srl16_n_0 ),
        .Q(update_tag_unlock_addr[13]),
        .R(Q));
  FDRE \ri_addr_reg[14] 
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_fifo_mem_reg[15][Addr][14]_srl16_n_0 ),
        .Q(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [0]),
        .R(Q));
  FDRE \ri_addr_reg[15] 
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_fifo_mem_reg[15][Addr][15]_srl16_n_0 ),
        .Q(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [1]),
        .R(Q));
  FDRE \ri_addr_reg[16] 
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_fifo_mem_reg[15][Addr][16]_srl16_n_0 ),
        .Q(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [2]),
        .R(Q));
  FDRE \ri_addr_reg[17] 
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_fifo_mem_reg[15][Addr][17]_srl16_n_0 ),
        .Q(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [3]),
        .R(Q));
  FDRE \ri_addr_reg[18] 
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_fifo_mem_reg[15][Addr][18]_srl16_n_0 ),
        .Q(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [4]),
        .R(Q));
  FDRE \ri_addr_reg[19] 
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_fifo_mem_reg[15][Addr][19]_srl16_n_0 ),
        .Q(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [5]),
        .R(Q));
  FDRE \ri_addr_reg[1] 
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_fifo_mem_reg[15][Addr][1]_srl16_n_0 ),
        .Q(\ri_addr_reg_n_0_[1] ),
        .R(Q));
  FDRE \ri_addr_reg[20] 
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_fifo_mem_reg[15][Addr][20]_srl16_n_0 ),
        .Q(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [6]),
        .R(Q));
  FDRE \ri_addr_reg[21] 
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_fifo_mem_reg[15][Addr][21]_srl16_n_0 ),
        .Q(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [7]),
        .R(Q));
  FDRE \ri_addr_reg[22] 
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_fifo_mem_reg[15][Addr][22]_srl16_n_0 ),
        .Q(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [8]),
        .R(Q));
  FDRE \ri_addr_reg[23] 
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_fifo_mem_reg[15][Addr][23]_srl16_n_0 ),
        .Q(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [9]),
        .R(Q));
  FDRE \ri_addr_reg[24] 
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_fifo_mem_reg[15][Addr][24]_srl16_n_0 ),
        .Q(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [10]),
        .R(Q));
  FDRE \ri_addr_reg[25] 
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_fifo_mem_reg[15][Addr][25]_srl16_n_0 ),
        .Q(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [11]),
        .R(Q));
  FDRE \ri_addr_reg[26] 
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_fifo_mem_reg[15][Addr][26]_srl16_n_0 ),
        .Q(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [12]),
        .R(Q));
  FDRE \ri_addr_reg[27] 
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_fifo_mem_reg[15][Addr][27]_srl16_n_0 ),
        .Q(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [13]),
        .R(Q));
  FDRE \ri_addr_reg[28] 
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_fifo_mem_reg[15][Addr][28]_srl16_n_0 ),
        .Q(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [14]),
        .R(Q));
  FDRE \ri_addr_reg[29] 
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_fifo_mem_reg[15][Addr][29]_srl16_n_0 ),
        .Q(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [15]),
        .R(Q));
  FDRE \ri_addr_reg[2] 
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_fifo_mem_reg[15][Addr][2]_srl16_n_0 ),
        .Q(\ri_addr_reg_n_0_[2] ),
        .R(Q));
  FDRE \ri_addr_reg[30] 
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_fifo_mem_reg[15][Addr][30]_srl16_n_0 ),
        .Q(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [16]),
        .R(Q));
  FDRE \ri_addr_reg[31] 
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_fifo_mem_reg[15][Addr][31]_srl16_n_0 ),
        .Q(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [17]),
        .R(Q));
  FDRE \ri_addr_reg[3] 
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_fifo_mem_reg[15][Addr][3]_srl16_n_0 ),
        .Q(\ri_addr_reg_n_0_[3] ),
        .R(Q));
  FDRE \ri_addr_reg[4] 
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_fifo_mem_reg[15][Addr][4]_srl16_n_0 ),
        .Q(\ri_addr_reg_n_0_[4] ),
        .R(Q));
  FDRE \ri_addr_reg[5] 
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_fifo_mem_reg[15][Addr][5]_srl16_n_0 ),
        .Q(\ri_addr_reg_n_0_[5] ),
        .R(Q));
  FDRE \ri_addr_reg[6] 
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_fifo_mem_reg[15][Addr][6]_srl16_n_0 ),
        .Q(update_tag_unlock_addr[6]),
        .R(Q));
  FDRE \ri_addr_reg[7] 
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_fifo_mem_reg[15][Addr][7]_srl16_n_0 ),
        .Q(update_tag_unlock_addr[7]),
        .R(Q));
  FDRE \ri_addr_reg[8] 
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_fifo_mem_reg[15][Addr][8]_srl16_n_0 ),
        .Q(update_tag_unlock_addr[8]),
        .R(Q));
  FDRE \ri_addr_reg[9] 
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_fifo_mem_reg[15][Addr][9]_srl16_n_0 ),
        .Q(update_tag_unlock_addr[9]),
        .R(Q));
  FDRE ri_allocate_reg
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_fifo_mem_reg[15][Allocate][-1111111111]_srl16_n_0 ),
        .Q(ri_allocate),
        .R(Q));
  FDRE ri_evicted_reg
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_fifo_mem_reg[15][Evicted_Line][-1111111111]_srl16_n_0 ),
        .Q(ri_evicted),
        .R(Q));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Addr][0]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(\update_info_reg[Addr][31] [0]),
        .Q(\ri_fifo_mem_reg[15][Addr][0]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr][10]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Addr][10]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(\update_info_reg[Addr][31] [10]),
        .Q(\ri_fifo_mem_reg[15][Addr][10]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr][11]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Addr][11]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(\update_info_reg[Addr][31] [11]),
        .Q(\ri_fifo_mem_reg[15][Addr][11]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr][12]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Addr][12]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(\update_info_reg[Addr][31] [12]),
        .Q(\ri_fifo_mem_reg[15][Addr][12]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr][13]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Addr][13]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(\update_info_reg[Addr][31] [13]),
        .Q(\ri_fifo_mem_reg[15][Addr][13]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr][14]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Addr][14]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(\update_info_reg[Addr][31] [14]),
        .Q(\ri_fifo_mem_reg[15][Addr][14]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr][15]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Addr][15]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(\update_info_reg[Addr][31] [15]),
        .Q(\ri_fifo_mem_reg[15][Addr][15]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr][16]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Addr][16]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(\update_info_reg[Addr][31] [16]),
        .Q(\ri_fifo_mem_reg[15][Addr][16]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr][17]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Addr][17]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(\update_info_reg[Addr][31] [17]),
        .Q(\ri_fifo_mem_reg[15][Addr][17]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr][18]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Addr][18]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(\update_info_reg[Addr][31] [18]),
        .Q(\ri_fifo_mem_reg[15][Addr][18]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr][19]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Addr][19]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(\update_info_reg[Addr][31] [19]),
        .Q(\ri_fifo_mem_reg[15][Addr][19]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr][1]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Addr][1]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(\update_info_reg[Addr][31] [1]),
        .Q(\ri_fifo_mem_reg[15][Addr][1]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr][20]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Addr][20]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(\update_info_reg[Addr][31] [20]),
        .Q(\ri_fifo_mem_reg[15][Addr][20]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr][21]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Addr][21]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(\update_info_reg[Addr][31] [21]),
        .Q(\ri_fifo_mem_reg[15][Addr][21]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr][22]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Addr][22]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(\update_info_reg[Addr][31] [22]),
        .Q(\ri_fifo_mem_reg[15][Addr][22]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr][23]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Addr][23]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(\update_info_reg[Addr][31] [23]),
        .Q(\ri_fifo_mem_reg[15][Addr][23]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr][24]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Addr][24]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(\update_info_reg[Addr][31] [24]),
        .Q(\ri_fifo_mem_reg[15][Addr][24]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr][25]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Addr][25]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(\update_info_reg[Addr][31] [25]),
        .Q(\ri_fifo_mem_reg[15][Addr][25]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr][26]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Addr][26]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(\update_info_reg[Addr][31] [26]),
        .Q(\ri_fifo_mem_reg[15][Addr][26]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr][27]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Addr][27]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(\update_info_reg[Addr][31] [27]),
        .Q(\ri_fifo_mem_reg[15][Addr][27]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr][28]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Addr][28]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(\update_info_reg[Addr][31] [28]),
        .Q(\ri_fifo_mem_reg[15][Addr][28]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr][29]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Addr][29]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(\update_info_reg[Addr][31] [29]),
        .Q(\ri_fifo_mem_reg[15][Addr][29]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr][2]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Addr][2]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(\update_info_reg[Addr][31] [2]),
        .Q(\ri_fifo_mem_reg[15][Addr][2]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr][30]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Addr][30]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(\update_info_reg[Addr][31] [30]),
        .Q(\ri_fifo_mem_reg[15][Addr][30]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr][31]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Addr][31]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(\update_info_reg[Addr][31] [31]),
        .Q(\ri_fifo_mem_reg[15][Addr][31]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr][3]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Addr][3]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(\update_info_reg[Addr][31] [3]),
        .Q(\ri_fifo_mem_reg[15][Addr][3]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr][4]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Addr][4]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(\update_info_reg[Addr][31] [4]),
        .Q(\ri_fifo_mem_reg[15][Addr][4]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr][5]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Addr][5]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(\update_info_reg[Addr][31] [5]),
        .Q(\ri_fifo_mem_reg[15][Addr][5]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr][6]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Addr][6]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(\update_info_reg[Addr][31] [6]),
        .Q(\ri_fifo_mem_reg[15][Addr][6]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr][7]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Addr][7]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(\update_info_reg[Addr][31] [7]),
        .Q(\ri_fifo_mem_reg[15][Addr][7]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr][8]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Addr][8]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(\update_info_reg[Addr][31] [8]),
        .Q(\ri_fifo_mem_reg[15][Addr][8]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Addr][9]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Addr][9]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(\update_info_reg[Addr][31] [9]),
        .Q(\ri_fifo_mem_reg[15][Addr][9]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Allocate] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Allocate][-1111111111]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Allocate][-1111111111]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(\update_info[Allocate] ),
        .Q(\ri_fifo_mem_reg[15][Allocate][-1111111111]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Evicted_Line] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Evicted_Line][-1111111111]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Evicted_Line][-1111111111]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(\write_req_info[0][Internal] ),
        .Q(\ri_fifo_mem_reg[15][Evicted_Line][-1111111111]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Kind] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Kind][-1111111111]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Kind][-1111111111]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(\update_info[Kind] ),
        .Q(\ri_fifo_mem_reg[15][Kind][-1111111111]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Len][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Len][0]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(\update_info_reg[Len][7] [0]),
        .Q(\ri_fifo_mem_reg[15][Len][0]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Len][1]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Len][1]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(\update_info_reg[Len][7] [1]),
        .Q(\ri_fifo_mem_reg[15][Len][1]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Len][2]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Len][2]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(\update_info_reg[Len][7] [2]),
        .Q(\ri_fifo_mem_reg[15][Len][2]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Len][3]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Len][3]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(\update_info_reg[Len][7] [3]),
        .Q(\ri_fifo_mem_reg[15][Len][3]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Len][4]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Len][4]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(\update_info_reg[Len][7] [4]),
        .Q(\ri_fifo_mem_reg[15][Len][4]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Len][5]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Len][5]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(\update_info_reg[Len][7] [5]),
        .Q(\ri_fifo_mem_reg[15][Len][5]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Len][6]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Len][6]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(\update_info_reg[Len][7] [6]),
        .Q(\ri_fifo_mem_reg[15][Len][6]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Len] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Len][7]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Len][7]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(\update_info_reg[Len][7] [7]),
        .Q(\ri_fifo_mem_reg[15][Len][7]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Port_Num] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Port_Num][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Port_Num][0]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(\write_req_info[0][Port_Num] ),
        .Q(\ri_port_reg[0]_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Stp_Bits] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Stp_Bits][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Stp_Bits][0]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(\update_info_reg[Addr_Stp][5] [0]),
        .Q(\ri_fifo_mem_reg[15][Stp_Bits][0]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Stp_Bits] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Stp_Bits][1]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Stp_Bits][1]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(\update_info_reg[Addr_Stp][5] [1]),
        .Q(\ri_fifo_mem_reg[15][Stp_Bits][1]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Stp_Bits] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Stp_Bits][2]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Stp_Bits][2]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(\update_info_reg[Addr_Stp][5] [2]),
        .Q(\ri_fifo_mem_reg[15][Stp_Bits][2]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Stp_Bits] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Stp_Bits][3]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Stp_Bits][3]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(\update_info_reg[Addr_Stp][5] [3]),
        .Q(\ri_fifo_mem_reg[15][Stp_Bits][3]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Stp_Bits] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Stp_Bits][4]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Stp_Bits][4]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(\update_info_reg[Addr_Stp][5] [4]),
        .Q(\ri_fifo_mem_reg[15][Stp_Bits][4]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Stp_Bits] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Stp_Bits][5]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Stp_Bits][5]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(\update_info_reg[Addr_Stp][5] [5]),
        .Q(\ri_fifo_mem_reg[15][Stp_Bits][5]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Use_Bits] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Use_Bits][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Use_Bits][0]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(\update_info_reg[Addr_Use][5] [0]),
        .Q(\ri_fifo_mem_reg[15][Use_Bits][0]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Use_Bits] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Use_Bits][1]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Use_Bits][1]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(\update_info_reg[Addr_Use][5] [1]),
        .Q(\ri_fifo_mem_reg[15][Use_Bits][1]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Use_Bits] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Use_Bits][2]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Use_Bits][2]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(\update_info_reg[Addr_Use][5] [2]),
        .Q(\ri_fifo_mem_reg[15][Use_Bits][2]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Use_Bits] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Use_Bits][3]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Use_Bits][3]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(\update_info_reg[Addr_Use][5] [3]),
        .Q(\ri_fifo_mem_reg[15][Use_Bits][3]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Use_Bits] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Use_Bits][4]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Use_Bits][4]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(\update_info_reg[Addr_Use][5] [4]),
        .Q(\ri_fifo_mem_reg[15][Use_Bits][4]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Use_Bits] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Use_Bits][5]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Use_Bits][5]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(\update_info_reg[Addr_Use][5] [5]),
        .Q(\ri_fifo_mem_reg[15][Use_Bits][5]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Way] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Way][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Way][0]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(update_way),
        .Q(\ri_fifo_mem_reg[15][Way][0]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Write_Merge] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/ri_fifo_mem_reg[15][Write_Merge][-1111111111]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \ri_fifo_mem_reg[15][Write_Merge][-1111111111]_srl16 
       (.A0(ri_read_fifo_addr[0]),
        .A1(ri_read_fifo_addr[1]),
        .A2(ri_read_fifo_addr[2]),
        .A3(ri_read_fifo_addr[3]),
        .CE(\Use_FPGA.Almost_Empty_Inst ),
        .CLK(ACLK),
        .D(\update_info[Wr] ),
        .Q(\ri_fifo_mem_reg[15][Write_Merge][-1111111111]_srl16_n_0 ));
  FDRE \ri_hot_port_reg[0] 
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\update_info_reg[Port_Num][0] ),
        .Q(ri_hot_port),
        .R(Q));
  FDRE ri_kind_reg
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_fifo_mem_reg[15][Kind][-1111111111]_srl16_n_0 ),
        .Q(ri_kind),
        .R(Q));
  FDRE \ri_len_reg[0] 
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_fifo_mem_reg[15][Len][0]_srl16_n_0 ),
        .Q(ri_len[0]),
        .R(Q));
  FDRE \ri_len_reg[1] 
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_fifo_mem_reg[15][Len][1]_srl16_n_0 ),
        .Q(ri_len[1]),
        .R(Q));
  FDRE \ri_len_reg[2] 
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_fifo_mem_reg[15][Len][2]_srl16_n_0 ),
        .Q(ri_len[2]),
        .R(Q));
  FDRE \ri_len_reg[3] 
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_fifo_mem_reg[15][Len][3]_srl16_n_0 ),
        .Q(ri_len[3]),
        .R(Q));
  FDRE \ri_len_reg[4] 
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_fifo_mem_reg[15][Len][4]_srl16_n_0 ),
        .Q(ri_len[4]),
        .R(Q));
  FDRE \ri_len_reg[5] 
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_fifo_mem_reg[15][Len][5]_srl16_n_0 ),
        .Q(ri_len[5]),
        .R(Q));
  FDRE \ri_len_reg[6] 
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_fifo_mem_reg[15][Len][6]_srl16_n_0 ),
        .Q(ri_len[6]),
        .R(Q));
  FDRE \ri_len_reg[7] 
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_fifo_mem_reg[15][Len][7]_srl16_n_0 ),
        .Q(ri_len[7]),
        .R(Q));
  FDRE ri_merge_reg
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_fifo_mem_reg[15][Write_Merge][-1111111111]_srl16_n_0 ),
        .Q(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 ),
        .R(Q));
  FDRE \ri_port_reg[0] 
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_port_reg[0]_0 ),
        .Q(ri_port),
        .R(Q));
  FDRE \ri_stp_reg[0] 
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_fifo_mem_reg[15][Stp_Bits][0]_srl16_n_0 ),
        .Q(ri_stp[0]),
        .R(Q));
  FDRE \ri_stp_reg[1] 
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_fifo_mem_reg[15][Stp_Bits][1]_srl16_n_0 ),
        .Q(ri_stp[1]),
        .R(Q));
  FDRE \ri_stp_reg[2] 
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_fifo_mem_reg[15][Stp_Bits][2]_srl16_n_0 ),
        .Q(ri_stp[2]),
        .R(Q));
  FDRE \ri_stp_reg[3] 
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_fifo_mem_reg[15][Stp_Bits][3]_srl16_n_0 ),
        .Q(ri_stp[3]),
        .R(Q));
  FDRE \ri_stp_reg[4] 
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_fifo_mem_reg[15][Stp_Bits][4]_srl16_n_0 ),
        .Q(ri_stp[4]),
        .R(Q));
  FDRE \ri_stp_reg[5] 
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_fifo_mem_reg[15][Stp_Bits][5]_srl16_n_0 ),
        .Q(ri_stp[5]),
        .R(Q));
  FDRE \ri_use_reg[0] 
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_fifo_mem_reg[15][Use_Bits][0]_srl16_n_0 ),
        .Q(ri_use[0]),
        .R(Q));
  FDRE \ri_use_reg[1] 
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_fifo_mem_reg[15][Use_Bits][1]_srl16_n_0 ),
        .Q(ri_use[1]),
        .R(Q));
  FDRE \ri_use_reg[2] 
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_fifo_mem_reg[15][Use_Bits][2]_srl16_n_0 ),
        .Q(ri_use[2]),
        .R(Q));
  FDRE \ri_use_reg[3] 
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_fifo_mem_reg[15][Use_Bits][3]_srl16_n_0 ),
        .Q(ri_use[3]),
        .R(Q));
  FDRE \ri_use_reg[4] 
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_fifo_mem_reg[15][Use_Bits][4]_srl16_n_0 ),
        .Q(ri_use[4]),
        .R(Q));
  FDRE \ri_use_reg[5] 
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_fifo_mem_reg[15][Use_Bits][5]_srl16_n_0 ),
        .Q(ri_use[5]),
        .R(Q));
  FDRE \ri_way_reg[0] 
       (.C(ACLK),
        .CE(UD_RD_And_Inst7_n_3),
        .D(\ri_fifo_mem_reg[15][Way][0]_srl16_n_0 ),
        .Q(ri_way),
        .R(Q));
  LUT4 #(
    .INIT(16'h0001)) 
    rl_fifo_mem_reg_r1_0_15_0_0_i_2
       (.I0(rl_fifo_mem_reg_r1_0_15_0_0_i_3_n_0),
        .I1(rl_fifo_mem_reg_r1_0_15_0_0_i_4_n_0),
        .I2(rl_fifo_mem_reg_r1_0_15_0_0_i_5_n_0),
        .I3(rl_fifo_mem_reg_r1_0_15_0_0_i_6_n_0),
        .O(\update_read_data_info[0,0][Last] ));
  LUT5 #(
    .INIT(32'hFFFACFCA)) 
    rl_fifo_mem_reg_r1_0_15_0_0_i_3
       (.I0(update_rd_len_cnt_reg__0[5]),
        .I1(ri_len[5]),
        .I2(update_read_resize_first),
        .I3(update_rd_len_cnt_reg__0[4]),
        .I4(ri_len[4]),
        .O(rl_fifo_mem_reg_r1_0_15_0_0_i_3_n_0));
  LUT5 #(
    .INIT(32'hFFFACFCA)) 
    rl_fifo_mem_reg_r1_0_15_0_0_i_4
       (.I0(update_rd_len_cnt_reg__0[6]),
        .I1(ri_len[6]),
        .I2(update_read_resize_first),
        .I3(update_rd_len_cnt_reg__0[7]),
        .I4(ri_len[7]),
        .O(rl_fifo_mem_reg_r1_0_15_0_0_i_4_n_0));
  (* SOFT_HLUTNM = "soft_lutpair95" *) 
  LUT5 #(
    .INIT(32'hFFFACFCA)) 
    rl_fifo_mem_reg_r1_0_15_0_0_i_5
       (.I0(update_rd_len_cnt_reg__0[1]),
        .I1(ri_len[1]),
        .I2(update_read_resize_first),
        .I3(update_rd_len_cnt_reg__0[0]),
        .I4(ri_len[0]),
        .O(rl_fifo_mem_reg_r1_0_15_0_0_i_5_n_0));
  LUT5 #(
    .INIT(32'hFFFACFCA)) 
    rl_fifo_mem_reg_r1_0_15_0_0_i_6
       (.I0(update_rd_len_cnt_reg__0[3]),
        .I1(ri_len[3]),
        .I2(update_read_resize_first),
        .I3(update_rd_len_cnt_reg__0[2]),
        .I4(ri_len[2]),
        .O(rl_fifo_mem_reg_r1_0_15_0_0_i_6_n_0));
  LUT3 #(
    .INIT(8'h02)) 
    s2b
       (.I0(\update_info[Wr] ),
        .I1(\update_info[Early] ),
        .I2(\update_info[Internal_Cmd] ),
        .O(s2b_n_0));
  FDRE \update_cur_evict_way_d1_reg[0] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\e_fifo_mem_reg[15][Way][0]_srl16_n_0 ),
        .Q(update_cur_evict_way_d1),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair90" *) 
  LUT5 #(
    .INIT(32'hAAAAAA2A)) 
    \update_cur_tag_rd_way[0]_i_2 
       (.I0(\Long_External_Burst.update_rb_pos_phase_reg_1 ),
        .I1(update_valid),
        .I2(update_need_tag_write),
        .I3(update_readback_available),
        .I4(update_done_tag_write_reg_0),
        .O(update_readback_possible));
  FDRE \update_cur_tag_rd_way_reg[0] 
       (.C(ACLK),
        .CE(1'b1),
        .D(\ri_way_reg[0]_0 ),
        .Q(update_cur_tag_rd_way),
        .R(Q));
  FDRE update_done_ar_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Full_Inst_0 ),
        .Q(update_done_ar_reg_0),
        .R(update_done_tag_write));
  FDRE update_done_aw_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(need_to_stall_write_reg),
        .Q(\pending_write_reg[4] ),
        .R(update_done_tag_write));
  FDRE update_done_bs_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Full_Inst_2 ),
        .Q(update_done_bs),
        .R(update_done_tag_write));
  FDRE update_done_evict_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(\Use_FPGA.Full_Inst_1 ),
        .Q(update_done_evict),
        .R(update_done_tag_write));
  LUT3 #(
    .INIT(8'hF4)) 
    update_done_tag_write_i_2
       (.I0(update_readback_available),
        .I1(update_need_tag_write),
        .I2(update_done_tag_write_reg_0),
        .O(update_done_tag_write_i_2_n_0));
  FDRE update_done_tag_write_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(update_done_tag_write_i_2_n_0),
        .Q(update_done_tag_write_reg_0),
        .R(update_done_tag_write));
  FDRE update_evict_busy_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(FIFO_ED_Pointer_n_1),
        .Q(update_evict_busy),
        .R(1'b0));
  FDRE update_evict_last_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(p_155_in),
        .Q(update_evict_last),
        .R(Q));
  FDRE update_evict_ongoing_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(FIFO_ED_Pointer_n_4),
        .Q(update_evict_ongoing_reg_n_0),
        .R(1'b0));
  FDRE update_evict_valid_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(p_154_in),
        .Q(update_evict_valid),
        .R(Q));
  LUT4 #(
    .INIT(16'hE41B)) 
    update_lock_release_i_10
       (.I0(update_cur_tag_rd_way),
        .I1(DATA_OUTB[17]),
        .I2(DATA_OUTB[35]),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [17]),
        .O(update_lock_release_i_10_n_0));
  LUT4 #(
    .INIT(16'hE41B)) 
    update_lock_release_i_11
       (.I0(update_cur_tag_rd_way),
        .I1(DATA_OUTB[16]),
        .I2(DATA_OUTB[34]),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [16]),
        .O(update_lock_release_i_11_n_0));
  LUT4 #(
    .INIT(16'hE41B)) 
    update_lock_release_i_12
       (.I0(update_cur_tag_rd_way),
        .I1(DATA_OUTB[14]),
        .I2(DATA_OUTB[32]),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [14]),
        .O(update_lock_release_i_12_n_0));
  LUT4 #(
    .INIT(16'hE41B)) 
    update_lock_release_i_13
       (.I0(update_cur_tag_rd_way),
        .I1(DATA_OUTB[13]),
        .I2(DATA_OUTB[31]),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [13]),
        .O(update_lock_release_i_13_n_0));
  LUT4 #(
    .INIT(16'hE41B)) 
    update_lock_release_i_14
       (.I0(update_cur_tag_rd_way),
        .I1(DATA_OUTB[11]),
        .I2(DATA_OUTB[29]),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [11]),
        .O(update_lock_release_i_14_n_0));
  LUT4 #(
    .INIT(16'hE41B)) 
    update_lock_release_i_15
       (.I0(update_cur_tag_rd_way),
        .I1(DATA_OUTB[10]),
        .I2(DATA_OUTB[28]),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [10]),
        .O(update_lock_release_i_15_n_0));
  LUT4 #(
    .INIT(16'hE41B)) 
    update_lock_release_i_16
       (.I0(update_cur_tag_rd_way),
        .I1(DATA_OUTB[8]),
        .I2(DATA_OUTB[26]),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [8]),
        .O(update_lock_release_i_16_n_0));
  LUT4 #(
    .INIT(16'hE41B)) 
    update_lock_release_i_17
       (.I0(update_cur_tag_rd_way),
        .I1(DATA_OUTB[7]),
        .I2(DATA_OUTB[25]),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [7]),
        .O(update_lock_release_i_17_n_0));
  LUT4 #(
    .INIT(16'hE41B)) 
    update_lock_release_i_18
       (.I0(update_cur_tag_rd_way),
        .I1(DATA_OUTB[5]),
        .I2(DATA_OUTB[23]),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [5]),
        .O(update_lock_release_i_18_n_0));
  LUT4 #(
    .INIT(16'hE41B)) 
    update_lock_release_i_19
       (.I0(update_cur_tag_rd_way),
        .I1(DATA_OUTB[4]),
        .I2(DATA_OUTB[22]),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [4]),
        .O(update_lock_release_i_19_n_0));
  LUT4 #(
    .INIT(16'hE41B)) 
    update_lock_release_i_20
       (.I0(update_cur_tag_rd_way),
        .I1(DATA_OUTB[2]),
        .I2(DATA_OUTB[20]),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [2]),
        .O(update_lock_release_i_20_n_0));
  LUT4 #(
    .INIT(16'hE41B)) 
    update_lock_release_i_21
       (.I0(update_cur_tag_rd_way),
        .I1(DATA_OUTB[1]),
        .I2(DATA_OUTB[19]),
        .I3(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [1]),
        .O(update_lock_release_i_21_n_0));
  LUT6 #(
    .INIT(64'h99A5000000000000)) 
    update_lock_release_i_4
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [15]),
        .I1(DATA_OUTB[33]),
        .I2(DATA_OUTB[15]),
        .I3(update_cur_tag_rd_way),
        .I4(update_lock_release_i_10_n_0),
        .I5(update_lock_release_i_11_n_0),
        .O(update_lock_release_i_4_n_0));
  LUT6 #(
    .INIT(64'h99A5000000000000)) 
    update_lock_release_i_5
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [12]),
        .I1(DATA_OUTB[30]),
        .I2(DATA_OUTB[12]),
        .I3(update_cur_tag_rd_way),
        .I4(update_lock_release_i_12_n_0),
        .I5(update_lock_release_i_13_n_0),
        .O(update_lock_release_i_5_n_0));
  LUT6 #(
    .INIT(64'h99A5000000000000)) 
    update_lock_release_i_6
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [9]),
        .I1(DATA_OUTB[27]),
        .I2(DATA_OUTB[9]),
        .I3(update_cur_tag_rd_way),
        .I4(update_lock_release_i_14_n_0),
        .I5(update_lock_release_i_15_n_0),
        .O(update_lock_release_i_6_n_0));
  LUT6 #(
    .INIT(64'h99A5000000000000)) 
    update_lock_release_i_7
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [6]),
        .I1(DATA_OUTB[24]),
        .I2(DATA_OUTB[6]),
        .I3(update_cur_tag_rd_way),
        .I4(update_lock_release_i_16_n_0),
        .I5(update_lock_release_i_17_n_0),
        .O(update_lock_release_i_7_n_0));
  LUT6 #(
    .INIT(64'h99A5000000000000)) 
    update_lock_release_i_8
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [3]),
        .I1(DATA_OUTB[21]),
        .I2(DATA_OUTB[3]),
        .I3(update_cur_tag_rd_way),
        .I4(update_lock_release_i_18_n_0),
        .I5(update_lock_release_i_19_n_0),
        .O(update_lock_release_i_8_n_0));
  LUT6 #(
    .INIT(64'h99A5000000000000)) 
    update_lock_release_i_9
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[1].RAMB36_I1 [0]),
        .I1(DATA_OUTB[18]),
        .I2(DATA_OUTB[0]),
        .I3(update_cur_tag_rd_way),
        .I4(update_lock_release_i_20_n_0),
        .I5(update_lock_release_i_21_n_0),
        .O(update_lock_release_i_9_n_0));
  FDRE update_lock_release_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(update_remove_locked),
        .Q(update_lock_release),
        .R(Q));
  CARRY4 update_lock_release_reg_i_2
       (.CI(update_lock_release_reg_i_3_n_0),
        .CO({NLW_update_lock_release_reg_i_2_CO_UNCONNECTED[3:2],update_locked_tag_is_dead0,update_lock_release_reg_i_2_n_3}),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b1,1'b1}),
        .O(NLW_update_lock_release_reg_i_2_O_UNCONNECTED[3:0]),
        .S({1'b0,1'b0,update_lock_release_i_4_n_0,update_lock_release_i_5_n_0}));
  CARRY4 update_lock_release_reg_i_3
       (.CI(1'b0),
        .CO({update_lock_release_reg_i_3_n_0,update_lock_release_reg_i_3_n_1,update_lock_release_reg_i_3_n_2,update_lock_release_reg_i_3_n_3}),
        .CYINIT(1'b0),
        .DI({1'b1,1'b1,1'b1,1'b1}),
        .O(NLW_update_lock_release_reg_i_3_O_UNCONNECTED[3:0]),
        .S({update_lock_release_i_6_n_0,update_lock_release_i_7_n_0,update_lock_release_i_8_n_0,update_lock_release_i_9_n_0}));
  FDRE \update_lock_way_reg[0] 
       (.C(ACLK),
        .CE(1'b1),
        .D(ri_way),
        .Q(update_lock_way),
        .R(Q));
  LUT3 #(
    .INIT(8'h1D)) 
    \update_rd_len_cnt[0]_i_1 
       (.I0(update_rd_len_cnt_reg__0[0]),
        .I1(update_read_resize_first),
        .I2(ri_len[0]),
        .O(minusOp));
  (* SOFT_HLUTNM = "soft_lutpair95" *) 
  LUT5 #(
    .INIT(32'hCCA533A5)) 
    \update_rd_len_cnt[1]_i_1 
       (.I0(update_rd_len_cnt_reg__0[0]),
        .I1(ri_len[0]),
        .I2(update_rd_len_cnt_reg__0[1]),
        .I3(update_read_resize_first),
        .I4(ri_len[1]),
        .O(\update_rd_len_cnt[1]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFAFAFC030505FC03)) 
    \update_rd_len_cnt[2]_i_1 
       (.I0(ri_len[1]),
        .I1(update_rd_len_cnt_reg__0[1]),
        .I2(update_rd_len),
        .I3(update_rd_len_cnt_reg__0[2]),
        .I4(update_read_resize_first),
        .I5(ri_len[2]),
        .O(\update_rd_len_cnt[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair97" *) 
  LUT3 #(
    .INIT(8'hB8)) 
    \update_rd_len_cnt[2]_i_2 
       (.I0(ri_len[0]),
        .I1(update_read_resize_first),
        .I2(update_rd_len_cnt_reg__0[0]),
        .O(update_rd_len));
  LUT6 #(
    .INIT(64'hFAFAFC030505FC03)) 
    \update_rd_len_cnt[3]_i_1 
       (.I0(ri_len[2]),
        .I1(update_rd_len_cnt_reg__0[2]),
        .I2(\update_rd_len_cnt[3]_i_2_n_0 ),
        .I3(update_rd_len_cnt_reg__0[3]),
        .I4(update_read_resize_first),
        .I5(ri_len[3]),
        .O(\update_rd_len_cnt[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair97" *) 
  LUT5 #(
    .INIT(32'hFFFACCFA)) 
    \update_rd_len_cnt[3]_i_2 
       (.I0(update_rd_len_cnt_reg__0[0]),
        .I1(ri_len[0]),
        .I2(update_rd_len_cnt_reg__0[1]),
        .I3(update_read_resize_first),
        .I4(ri_len[1]),
        .O(\update_rd_len_cnt[3]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFAFAFC030505FC03)) 
    \update_rd_len_cnt[4]_i_1 
       (.I0(ri_len[3]),
        .I1(update_rd_len_cnt_reg__0[3]),
        .I2(\update_rd_len_cnt[4]_i_2_n_0 ),
        .I3(update_rd_len_cnt_reg__0[4]),
        .I4(update_read_resize_first),
        .I5(ri_len[4]),
        .O(\update_rd_len_cnt[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFCFAFAFFFC)) 
    \update_rd_len_cnt[4]_i_2 
       (.I0(ri_len[1]),
        .I1(update_rd_len_cnt_reg__0[1]),
        .I2(update_rd_len),
        .I3(update_rd_len_cnt_reg__0[2]),
        .I4(update_read_resize_first),
        .I5(ri_len[2]),
        .O(\update_rd_len_cnt[4]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFAFAFC030505FC03)) 
    \update_rd_len_cnt[5]_i_1 
       (.I0(ri_len[4]),
        .I1(update_rd_len_cnt_reg__0[4]),
        .I2(\update_rd_len_cnt[5]_i_2_n_0 ),
        .I3(update_rd_len_cnt_reg__0[5]),
        .I4(update_read_resize_first),
        .I5(ri_len[5]),
        .O(\update_rd_len_cnt[5]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFCFAFAFFFC)) 
    \update_rd_len_cnt[5]_i_2 
       (.I0(ri_len[2]),
        .I1(update_rd_len_cnt_reg__0[2]),
        .I2(\update_rd_len_cnt[3]_i_2_n_0 ),
        .I3(update_rd_len_cnt_reg__0[3]),
        .I4(update_read_resize_first),
        .I5(ri_len[3]),
        .O(\update_rd_len_cnt[5]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFAFAFC030505FC03)) 
    \update_rd_len_cnt[6]_i_1 
       (.I0(ri_len[5]),
        .I1(update_rd_len_cnt_reg__0[5]),
        .I2(\update_rd_len_cnt[6]_i_2_n_0 ),
        .I3(update_rd_len_cnt_reg__0[6]),
        .I4(update_read_resize_first),
        .I5(ri_len[6]),
        .O(\update_rd_len_cnt[6]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFCFAFAFFFC)) 
    \update_rd_len_cnt[6]_i_2 
       (.I0(ri_len[3]),
        .I1(update_rd_len_cnt_reg__0[3]),
        .I2(\update_rd_len_cnt[4]_i_2_n_0 ),
        .I3(update_rd_len_cnt_reg__0[4]),
        .I4(update_read_resize_first),
        .I5(ri_len[4]),
        .O(\update_rd_len_cnt[6]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFAFAFC030505FC03)) 
    \update_rd_len_cnt[7]_i_2 
       (.I0(ri_len[6]),
        .I1(update_rd_len_cnt_reg__0[6]),
        .I2(\update_rd_len_cnt[7]_i_3_n_0 ),
        .I3(update_rd_len_cnt_reg__0[7]),
        .I4(update_read_resize_first),
        .I5(ri_len[7]),
        .O(\update_rd_len_cnt[7]_i_2_n_0 ));
  LUT6 #(
    .INIT(64'hFFFFFFFCFAFAFFFC)) 
    \update_rd_len_cnt[7]_i_3 
       (.I0(ri_len[4]),
        .I1(update_rd_len_cnt_reg__0[4]),
        .I2(\update_rd_len_cnt[5]_i_2_n_0 ),
        .I3(update_rd_len_cnt_reg__0[5]),
        .I4(update_read_resize_first),
        .I5(ri_len[5]),
        .O(\update_rd_len_cnt[7]_i_3_n_0 ));
  FDRE \update_rd_len_cnt_reg[0] 
       (.C(ACLK),
        .CE(update_rd_offset_cnt1),
        .D(minusOp),
        .Q(update_rd_len_cnt_reg__0[0]),
        .R(Q));
  FDRE \update_rd_len_cnt_reg[1] 
       (.C(ACLK),
        .CE(update_rd_offset_cnt1),
        .D(\update_rd_len_cnt[1]_i_1_n_0 ),
        .Q(update_rd_len_cnt_reg__0[1]),
        .R(Q));
  FDRE \update_rd_len_cnt_reg[2] 
       (.C(ACLK),
        .CE(update_rd_offset_cnt1),
        .D(\update_rd_len_cnt[2]_i_1_n_0 ),
        .Q(update_rd_len_cnt_reg__0[2]),
        .R(Q));
  FDRE \update_rd_len_cnt_reg[3] 
       (.C(ACLK),
        .CE(update_rd_offset_cnt1),
        .D(\update_rd_len_cnt[3]_i_1_n_0 ),
        .Q(update_rd_len_cnt_reg__0[3]),
        .R(Q));
  FDRE \update_rd_len_cnt_reg[4] 
       (.C(ACLK),
        .CE(update_rd_offset_cnt1),
        .D(\update_rd_len_cnt[4]_i_1_n_0 ),
        .Q(update_rd_len_cnt_reg__0[4]),
        .R(Q));
  FDRE \update_rd_len_cnt_reg[5] 
       (.C(ACLK),
        .CE(update_rd_offset_cnt1),
        .D(\update_rd_len_cnt[5]_i_1_n_0 ),
        .Q(update_rd_len_cnt_reg__0[5]),
        .R(Q));
  FDRE \update_rd_len_cnt_reg[6] 
       (.C(ACLK),
        .CE(update_rd_offset_cnt1),
        .D(\update_rd_len_cnt[6]_i_1_n_0 ),
        .Q(update_rd_len_cnt_reg__0[6]),
        .R(Q));
  FDRE \update_rd_len_cnt_reg[7] 
       (.C(ACLK),
        .CE(update_rd_offset_cnt1),
        .D(\update_rd_len_cnt[7]_i_2_n_0 ),
        .Q(update_rd_len_cnt_reg__0[7]),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair96" *) 
  LUT5 #(
    .INIT(32'hFFEF0020)) 
    \update_rd_offset_cnt[0]_i_1 
       (.I0(\ri_addr_reg_n_0_[0] ),
        .I1(ri_allocate),
        .I2(ri_kind),
        .I3(ri_use[0]),
        .I4(\update_rd_offset_cnt_reg[3]_i_2_n_7 ),
        .O(update_rd_offset_cnt_next[0]));
  LUT5 #(
    .INIT(32'hFFEF0020)) 
    \update_rd_offset_cnt[1]_i_1 
       (.I0(\ri_addr_reg_n_0_[1] ),
        .I1(ri_allocate),
        .I2(ri_kind),
        .I3(ri_use[1]),
        .I4(\update_rd_offset_cnt_reg[3]_i_2_n_6 ),
        .O(update_rd_offset_cnt_next[1]));
  (* SOFT_HLUTNM = "soft_lutpair93" *) 
  LUT5 #(
    .INIT(32'hFFEF0020)) 
    \update_rd_offset_cnt[2]_i_1 
       (.I0(\ri_addr_reg_n_0_[2] ),
        .I1(ri_allocate),
        .I2(ri_kind),
        .I3(ri_use[2]),
        .I4(\update_rd_offset_cnt_reg[3]_i_2_n_5 ),
        .O(update_rd_offset_cnt_next[2]));
  (* SOFT_HLUTNM = "soft_lutpair98" *) 
  LUT5 #(
    .INIT(32'hFFEF0020)) 
    \update_rd_offset_cnt[3]_i_1 
       (.I0(\ri_addr_reg_n_0_[3] ),
        .I1(ri_allocate),
        .I2(ri_kind),
        .I3(ri_use[3]),
        .I4(\update_rd_offset_cnt_reg[3]_i_2_n_4 ),
        .O(update_rd_offset_cnt_next[3]));
  LUT4 #(
    .INIT(16'h1DE2)) 
    \update_rd_offset_cnt[3]_i_3 
       (.I0(update_rd_offset_cnt[3]),
        .I1(update_read_resize_first),
        .I2(\ri_addr_reg_n_0_[3] ),
        .I3(ri_stp[3]),
        .O(\update_rd_offset_cnt[3]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'h1DE2)) 
    \update_rd_offset_cnt[3]_i_4 
       (.I0(update_rd_offset_cnt[2]),
        .I1(update_read_resize_first),
        .I2(\ri_addr_reg_n_0_[2] ),
        .I3(ri_stp[2]),
        .O(\update_rd_offset_cnt[3]_i_4_n_0 ));
  LUT4 #(
    .INIT(16'h1DE2)) 
    \update_rd_offset_cnt[3]_i_5 
       (.I0(update_rd_offset_cnt[1]),
        .I1(update_read_resize_first),
        .I2(\ri_addr_reg_n_0_[1] ),
        .I3(ri_stp[1]),
        .O(\update_rd_offset_cnt[3]_i_5_n_0 ));
  LUT4 #(
    .INIT(16'h1DE2)) 
    \update_rd_offset_cnt[3]_i_6 
       (.I0(update_rd_offset_cnt[0]),
        .I1(update_read_resize_first),
        .I2(\ri_addr_reg_n_0_[0] ),
        .I3(ri_stp[0]),
        .O(\update_rd_offset_cnt[3]_i_6_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair92" *) 
  LUT5 #(
    .INIT(32'hFFEF0020)) 
    \update_rd_offset_cnt[4]_i_1 
       (.I0(\ri_addr_reg_n_0_[4] ),
        .I1(ri_allocate),
        .I2(ri_kind),
        .I3(ri_use[4]),
        .I4(\update_rd_offset_cnt_reg[5]_i_2_n_7 ),
        .O(update_rd_offset_cnt_next[4]));
  (* SOFT_HLUTNM = "soft_lutpair91" *) 
  LUT5 #(
    .INIT(32'hFFEF0020)) 
    \update_rd_offset_cnt[5]_i_1 
       (.I0(\ri_addr_reg_n_0_[5] ),
        .I1(ri_allocate),
        .I2(ri_kind),
        .I3(ri_use[5]),
        .I4(\update_rd_offset_cnt_reg[5]_i_2_n_6 ),
        .O(update_rd_offset_cnt_next[5]));
  LUT4 #(
    .INIT(16'h1DE2)) 
    \update_rd_offset_cnt[5]_i_3 
       (.I0(update_rd_offset_cnt[5]),
        .I1(update_read_resize_first),
        .I2(\ri_addr_reg_n_0_[5] ),
        .I3(ri_stp[5]),
        .O(\update_rd_offset_cnt[5]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'h1DE2)) 
    \update_rd_offset_cnt[5]_i_4 
       (.I0(update_rd_offset_cnt[4]),
        .I1(update_read_resize_first),
        .I2(\ri_addr_reg_n_0_[4] ),
        .I3(ri_stp[4]),
        .O(\update_rd_offset_cnt[5]_i_4_n_0 ));
  FDRE \update_rd_offset_cnt_reg[0] 
       (.C(ACLK),
        .CE(update_rd_offset_cnt0),
        .D(update_rd_offset_cnt_next[0]),
        .Q(update_rd_offset_cnt[0]),
        .R(Q));
  FDRE \update_rd_offset_cnt_reg[1] 
       (.C(ACLK),
        .CE(update_rd_offset_cnt0),
        .D(update_rd_offset_cnt_next[1]),
        .Q(update_rd_offset_cnt[1]),
        .R(Q));
  FDRE \update_rd_offset_cnt_reg[2] 
       (.C(ACLK),
        .CE(update_rd_offset_cnt0),
        .D(update_rd_offset_cnt_next[2]),
        .Q(update_rd_offset_cnt[2]),
        .R(Q));
  FDRE \update_rd_offset_cnt_reg[3] 
       (.C(ACLK),
        .CE(update_rd_offset_cnt0),
        .D(update_rd_offset_cnt_next[3]),
        .Q(update_rd_offset_cnt[3]),
        .R(Q));
  CARRY4 \update_rd_offset_cnt_reg[3]_i_2 
       (.CI(1'b0),
        .CO({\update_rd_offset_cnt_reg[3]_i_2_n_0 ,\update_rd_offset_cnt_reg[3]_i_2_n_1 ,\update_rd_offset_cnt_reg[3]_i_2_n_2 ,\update_rd_offset_cnt_reg[3]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI(ri_stp[3:0]),
        .O({\update_rd_offset_cnt_reg[3]_i_2_n_4 ,\update_rd_offset_cnt_reg[3]_i_2_n_5 ,\update_rd_offset_cnt_reg[3]_i_2_n_6 ,\update_rd_offset_cnt_reg[3]_i_2_n_7 }),
        .S({\update_rd_offset_cnt[3]_i_3_n_0 ,\update_rd_offset_cnt[3]_i_4_n_0 ,\update_rd_offset_cnt[3]_i_5_n_0 ,\update_rd_offset_cnt[3]_i_6_n_0 }));
  FDRE \update_rd_offset_cnt_reg[4] 
       (.C(ACLK),
        .CE(update_rd_offset_cnt0),
        .D(update_rd_offset_cnt_next[4]),
        .Q(update_rd_offset_cnt[4]),
        .R(Q));
  FDRE \update_rd_offset_cnt_reg[5] 
       (.C(ACLK),
        .CE(update_rd_offset_cnt0),
        .D(update_rd_offset_cnt_next[5]),
        .Q(update_rd_offset_cnt[5]),
        .R(Q));
  CARRY4 \update_rd_offset_cnt_reg[5]_i_2 
       (.CI(\update_rd_offset_cnt_reg[3]_i_2_n_0 ),
        .CO({\NLW_update_rd_offset_cnt_reg[5]_i_2_CO_UNCONNECTED [3:1],\update_rd_offset_cnt_reg[5]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,ri_stp[4]}),
        .O({\NLW_update_rd_offset_cnt_reg[5]_i_2_O_UNCONNECTED [3:2],\update_rd_offset_cnt_reg[5]_i_2_n_6 ,\update_rd_offset_cnt_reg[5]_i_2_n_7 }),
        .S({1'b0,1'b0,\update_rd_offset_cnt[5]_i_3_n_0 ,\update_rd_offset_cnt[5]_i_4_n_0 }));
  FDRE update_read_miss_ongoing_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(update_read_miss_ongoing_reg_0),
        .Q(\Long_External_Burst.update_rb_pos_phase_reg_0 ),
        .R(1'b0));
  LUT3 #(
    .INIT(8'hA2)) 
    update_read_resize_finish_i_2
       (.I0(\update_read_data_info[0,0][Last] ),
        .I1(ri_kind),
        .I2(update_read_resize_selected_reg_n_0),
        .O(update_read_resize_finish_i_2_n_0));
  FDRE update_read_resize_finish_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(FIFO_ED_Pointer_n_9),
        .Q(update_read_resize_finish_reg_n_0),
        .R(1'b0));
  LUT6 #(
    .INIT(64'hFDFFFDDD00000000)) 
    update_read_resize_first_i_2
       (.I0(update_read_resize_selected_reg_n_0),
        .I1(update_read_resize_finish_reg_n_0),
        .I2(\lud_reg_valid_one_hot_reg[1] ),
        .I3(ri_port),
        .I4(\lud_reg_valid_one_hot_reg[0] ),
        .I5(M0_AXI_RLAST),
        .O(update_read_resize_first0));
  FDSE update_read_resize_first_reg
       (.C(ACLK),
        .CE(update_rd_offset_cnt0),
        .D(update_read_resize_first0),
        .Q(update_read_resize_first),
        .S(Q));
  (* SOFT_HLUTNM = "soft_lutpair91" *) 
  LUT5 #(
    .INIT(32'hEFEEBFBB)) 
    update_read_resize_selected_i_10
       (.I0(ri_use[5]),
        .I1(\ri_addr_reg_n_0_[5] ),
        .I2(ri_allocate),
        .I3(ri_kind),
        .I4(\update_rd_offset_cnt_reg[5]_i_2_n_6 ),
        .O(update_read_resize_selected_i_10_n_0));
  (* SOFT_HLUTNM = "soft_lutpair92" *) 
  LUT5 #(
    .INIT(32'hEFEEBFBB)) 
    update_read_resize_selected_i_11
       (.I0(ri_use[4]),
        .I1(\ri_addr_reg_n_0_[4] ),
        .I2(ri_allocate),
        .I3(ri_kind),
        .I4(\update_rd_offset_cnt_reg[5]_i_2_n_7 ),
        .O(update_read_resize_selected_i_11_n_0));
  LUT6 #(
    .INIT(64'hAEAAAAAAAAAAAAAA)) 
    update_read_resize_selected_i_3
       (.I0(M0_AXI_RLAST),
        .I1(ri_kind),
        .I2(update_read_resize_finish_reg_n_0),
        .I3(update_read_resize_selected_i_5_n_0),
        .I4(update_read_resize_selected_i_6_n_0),
        .I5(update_read_resize_selected_i_7_n_0),
        .O(update_read_resize_selected0));
  LUT6 #(
    .INIT(64'hFFFFAE5D00000000)) 
    update_read_resize_selected_i_5
       (.I0(\update_rd_offset_cnt_reg[3]_i_2_n_6 ),
        .I1(ri_kind),
        .I2(ri_allocate),
        .I3(\ri_addr_reg_n_0_[1] ),
        .I4(ri_use[1]),
        .I5(update_read_resize_selected_i_8_n_0),
        .O(update_read_resize_selected_i_5_n_0));
  (* SOFT_HLUTNM = "soft_lutpair96" *) 
  LUT5 #(
    .INIT(32'hEFEEBFBB)) 
    update_read_resize_selected_i_6
       (.I0(ri_use[0]),
        .I1(\ri_addr_reg_n_0_[0] ),
        .I2(ri_allocate),
        .I3(ri_kind),
        .I4(\update_rd_offset_cnt_reg[3]_i_2_n_7 ),
        .O(update_read_resize_selected_i_6_n_0));
  LUT6 #(
    .INIT(64'hFFED000000000000)) 
    update_read_resize_selected_i_7
       (.I0(\update_rd_offset_cnt_reg[3]_i_2_n_4 ),
        .I1(update_read_resize_selected_i_9_n_0),
        .I2(\ri_addr_reg_n_0_[3] ),
        .I3(ri_use[3]),
        .I4(update_read_resize_selected_i_10_n_0),
        .I5(update_read_resize_selected_i_11_n_0),
        .O(update_read_resize_selected_i_7_n_0));
  (* SOFT_HLUTNM = "soft_lutpair93" *) 
  LUT5 #(
    .INIT(32'hEFEEBFBB)) 
    update_read_resize_selected_i_8
       (.I0(ri_use[2]),
        .I1(\ri_addr_reg_n_0_[2] ),
        .I2(ri_allocate),
        .I3(ri_kind),
        .I4(\update_rd_offset_cnt_reg[3]_i_2_n_5 ),
        .O(update_read_resize_selected_i_8_n_0));
  (* SOFT_HLUTNM = "soft_lutpair98" *) 
  LUT2 #(
    .INIT(4'h2)) 
    update_read_resize_selected_i_9
       (.I0(ri_kind),
        .I1(ri_allocate),
        .O(update_read_resize_selected_i_9_n_0));
  FDRE update_read_resize_selected_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(FIFO_ED_Pointer_n_0),
        .Q(update_read_resize_selected_reg_n_0),
        .R(1'b0));
  FDRE update_readback_available_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(update_done_tag_write_reg_1),
        .Q(update_readback_available),
        .R(Q));
  FDRE \update_release_tag_reg[Addr][10] 
       (.C(ACLK),
        .CE(1'b1),
        .D(update_tag_unlock_addr[10]),
        .Q(\lu_check_valid_bits_reg[1]_1 [1]),
        .R(Q));
  FDRE \update_release_tag_reg[Addr][11] 
       (.C(ACLK),
        .CE(1'b1),
        .D(update_tag_unlock_addr[11]),
        .Q(\update_release_tag[Addr] [11]),
        .R(Q));
  FDRE \update_release_tag_reg[Addr][12] 
       (.C(ACLK),
        .CE(1'b1),
        .D(update_tag_unlock_addr[12]),
        .Q(\update_release_tag[Addr] [12]),
        .R(Q));
  FDRE \update_release_tag_reg[Addr][13] 
       (.C(ACLK),
        .CE(1'b1),
        .D(update_tag_unlock_addr[13]),
        .Q(\update_release_tag[Addr] [13]),
        .R(Q));
  FDRE \update_release_tag_reg[Addr][6] 
       (.C(ACLK),
        .CE(1'b1),
        .D(update_tag_unlock_addr[6]),
        .Q(\update_release_tag[Addr] [6]),
        .R(Q));
  FDRE \update_release_tag_reg[Addr][7] 
       (.C(ACLK),
        .CE(1'b1),
        .D(update_tag_unlock_addr[7]),
        .Q(\update_release_tag[Addr] [7]),
        .R(Q));
  FDRE \update_release_tag_reg[Addr][8] 
       (.C(ACLK),
        .CE(1'b1),
        .D(update_tag_unlock_addr[8]),
        .Q(\update_release_tag[Addr] [8]),
        .R(Q));
  FDRE \update_release_tag_reg[Addr][9] 
       (.C(ACLK),
        .CE(1'b1),
        .D(update_tag_unlock_addr[9]),
        .Q(\lu_check_valid_bits_reg[1]_1 [0]),
        .R(Q));
  FDRE \update_release_tag_reg[Valid] 
       (.C(ACLK),
        .CE(1'b1),
        .D(1'b1),
        .Q(\update_release_tag[Valid] ),
        .R(Q));
  FDRE update_rm_alloc_ongoing_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(update_rm_alloc_ongoing_reg_1),
        .Q(update_rm_alloc_ongoing_reg_0),
        .R(1'b0));
  FDRE update_wm_pop_evict_hold_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(FIFO_ED_Pointer_n_35),
        .Q(update_wm_pop_evict_hold),
        .R(1'b0));
  FDRE update_wm_pop_normal_hold_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(FIFO_WMA_Pointer_n_61),
        .Q(update_wm_pop_normal_hold_reg_n_0),
        .R(1'b0));
  FDRE \update_wma_data_reg[0] 
       (.C(ACLK),
        .CE(FIFO_WMA_Pointer_n_27),
        .D(\wr_port_data_info_reg[0][Data][31] [0]),
        .Q(update_wma_data[0]),
        .R(Q));
  FDRE \update_wma_data_reg[10] 
       (.C(ACLK),
        .CE(FIFO_WMA_Pointer_n_26),
        .D(\wr_port_data_info_reg[0][Data][31] [10]),
        .Q(update_wma_data[10]),
        .R(Q));
  FDRE \update_wma_data_reg[11] 
       (.C(ACLK),
        .CE(FIFO_WMA_Pointer_n_26),
        .D(\wr_port_data_info_reg[0][Data][31] [11]),
        .Q(update_wma_data[11]),
        .R(Q));
  FDRE \update_wma_data_reg[12] 
       (.C(ACLK),
        .CE(FIFO_WMA_Pointer_n_26),
        .D(\wr_port_data_info_reg[0][Data][31] [12]),
        .Q(update_wma_data[12]),
        .R(Q));
  FDRE \update_wma_data_reg[13] 
       (.C(ACLK),
        .CE(FIFO_WMA_Pointer_n_26),
        .D(\wr_port_data_info_reg[0][Data][31] [13]),
        .Q(update_wma_data[13]),
        .R(Q));
  FDRE \update_wma_data_reg[14] 
       (.C(ACLK),
        .CE(FIFO_WMA_Pointer_n_26),
        .D(\wr_port_data_info_reg[0][Data][31] [14]),
        .Q(update_wma_data[14]),
        .R(Q));
  FDRE \update_wma_data_reg[15] 
       (.C(ACLK),
        .CE(FIFO_WMA_Pointer_n_26),
        .D(\wr_port_data_info_reg[0][Data][31] [15]),
        .Q(update_wma_data[15]),
        .R(Q));
  FDRE \update_wma_data_reg[16] 
       (.C(ACLK),
        .CE(FIFO_WMA_Pointer_n_25),
        .D(\wr_port_data_info_reg[0][Data][31] [16]),
        .Q(update_wma_data[16]),
        .R(Q));
  FDRE \update_wma_data_reg[17] 
       (.C(ACLK),
        .CE(FIFO_WMA_Pointer_n_25),
        .D(\wr_port_data_info_reg[0][Data][31] [17]),
        .Q(update_wma_data[17]),
        .R(Q));
  FDRE \update_wma_data_reg[18] 
       (.C(ACLK),
        .CE(FIFO_WMA_Pointer_n_25),
        .D(\wr_port_data_info_reg[0][Data][31] [18]),
        .Q(update_wma_data[18]),
        .R(Q));
  FDRE \update_wma_data_reg[19] 
       (.C(ACLK),
        .CE(FIFO_WMA_Pointer_n_25),
        .D(\wr_port_data_info_reg[0][Data][31] [19]),
        .Q(update_wma_data[19]),
        .R(Q));
  FDRE \update_wma_data_reg[1] 
       (.C(ACLK),
        .CE(FIFO_WMA_Pointer_n_27),
        .D(\wr_port_data_info_reg[0][Data][31] [1]),
        .Q(update_wma_data[1]),
        .R(Q));
  FDRE \update_wma_data_reg[20] 
       (.C(ACLK),
        .CE(FIFO_WMA_Pointer_n_25),
        .D(\wr_port_data_info_reg[0][Data][31] [20]),
        .Q(update_wma_data[20]),
        .R(Q));
  FDRE \update_wma_data_reg[21] 
       (.C(ACLK),
        .CE(FIFO_WMA_Pointer_n_25),
        .D(\wr_port_data_info_reg[0][Data][31] [21]),
        .Q(update_wma_data[21]),
        .R(Q));
  FDRE \update_wma_data_reg[22] 
       (.C(ACLK),
        .CE(FIFO_WMA_Pointer_n_25),
        .D(\wr_port_data_info_reg[0][Data][31] [22]),
        .Q(update_wma_data[22]),
        .R(Q));
  FDRE \update_wma_data_reg[23] 
       (.C(ACLK),
        .CE(FIFO_WMA_Pointer_n_25),
        .D(\wr_port_data_info_reg[0][Data][31] [23]),
        .Q(update_wma_data[23]),
        .R(Q));
  FDRE \update_wma_data_reg[24] 
       (.C(ACLK),
        .CE(FIFO_WMA_Pointer_n_24),
        .D(\wr_port_data_info_reg[0][Data][31] [24]),
        .Q(update_wma_data[24]),
        .R(Q));
  FDRE \update_wma_data_reg[25] 
       (.C(ACLK),
        .CE(FIFO_WMA_Pointer_n_24),
        .D(\wr_port_data_info_reg[0][Data][31] [25]),
        .Q(update_wma_data[25]),
        .R(Q));
  FDRE \update_wma_data_reg[26] 
       (.C(ACLK),
        .CE(FIFO_WMA_Pointer_n_24),
        .D(\wr_port_data_info_reg[0][Data][31] [26]),
        .Q(update_wma_data[26]),
        .R(Q));
  FDRE \update_wma_data_reg[27] 
       (.C(ACLK),
        .CE(FIFO_WMA_Pointer_n_24),
        .D(\wr_port_data_info_reg[0][Data][31] [27]),
        .Q(update_wma_data[27]),
        .R(Q));
  FDRE \update_wma_data_reg[28] 
       (.C(ACLK),
        .CE(FIFO_WMA_Pointer_n_24),
        .D(\wr_port_data_info_reg[0][Data][31] [28]),
        .Q(update_wma_data[28]),
        .R(Q));
  FDRE \update_wma_data_reg[29] 
       (.C(ACLK),
        .CE(FIFO_WMA_Pointer_n_24),
        .D(\wr_port_data_info_reg[0][Data][31] [29]),
        .Q(update_wma_data[29]),
        .R(Q));
  FDRE \update_wma_data_reg[2] 
       (.C(ACLK),
        .CE(FIFO_WMA_Pointer_n_27),
        .D(\wr_port_data_info_reg[0][Data][31] [2]),
        .Q(update_wma_data[2]),
        .R(Q));
  FDRE \update_wma_data_reg[30] 
       (.C(ACLK),
        .CE(FIFO_WMA_Pointer_n_24),
        .D(\wr_port_data_info_reg[0][Data][31] [30]),
        .Q(update_wma_data[30]),
        .R(Q));
  FDRE \update_wma_data_reg[31] 
       (.C(ACLK),
        .CE(FIFO_WMA_Pointer_n_24),
        .D(\wr_port_data_info_reg[0][Data][31] [31]),
        .Q(update_wma_data[31]),
        .R(Q));
  FDRE \update_wma_data_reg[3] 
       (.C(ACLK),
        .CE(FIFO_WMA_Pointer_n_27),
        .D(\wr_port_data_info_reg[0][Data][31] [3]),
        .Q(update_wma_data[3]),
        .R(Q));
  FDRE \update_wma_data_reg[4] 
       (.C(ACLK),
        .CE(FIFO_WMA_Pointer_n_27),
        .D(\wr_port_data_info_reg[0][Data][31] [4]),
        .Q(update_wma_data[4]),
        .R(Q));
  FDRE \update_wma_data_reg[5] 
       (.C(ACLK),
        .CE(FIFO_WMA_Pointer_n_27),
        .D(\wr_port_data_info_reg[0][Data][31] [5]),
        .Q(update_wma_data[5]),
        .R(Q));
  FDRE \update_wma_data_reg[6] 
       (.C(ACLK),
        .CE(FIFO_WMA_Pointer_n_27),
        .D(\wr_port_data_info_reg[0][Data][31] [6]),
        .Q(update_wma_data[6]),
        .R(Q));
  FDRE \update_wma_data_reg[7] 
       (.C(ACLK),
        .CE(FIFO_WMA_Pointer_n_27),
        .D(\wr_port_data_info_reg[0][Data][31] [7]),
        .Q(update_wma_data[7]),
        .R(Q));
  FDRE \update_wma_data_reg[8] 
       (.C(ACLK),
        .CE(FIFO_WMA_Pointer_n_26),
        .D(\wr_port_data_info_reg[0][Data][31] [8]),
        .Q(update_wma_data[8]),
        .R(Q));
  FDRE \update_wma_data_reg[9] 
       (.C(ACLK),
        .CE(FIFO_WMA_Pointer_n_26),
        .D(\wr_port_data_info_reg[0][Data][31] [9]),
        .Q(update_wma_data[9]),
        .R(Q));
  FDRE update_wma_last_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(wr_port_data_last_i_reg),
        .Q(in),
        .R(Q));
  FDRE \update_wma_strb_reg[0] 
       (.C(ACLK),
        .CE(1'b1),
        .D(FIFO_WMA_Pointer_n_65),
        .Q(update_wma_strb[0]),
        .R(Q));
  FDRE \update_wma_strb_reg[1] 
       (.C(ACLK),
        .CE(1'b1),
        .D(FIFO_WMA_Pointer_n_64),
        .Q(update_wma_strb[1]),
        .R(Q));
  FDRE \update_wma_strb_reg[2] 
       (.C(ACLK),
        .CE(1'b1),
        .D(FIFO_WMA_Pointer_n_63),
        .Q(update_wma_strb[2]),
        .R(Q));
  FDRE \update_wma_strb_reg[3] 
       (.C(ACLK),
        .CE(1'b1),
        .D(FIFO_WMA_Pointer_n_62),
        .Q(update_wma_strb[3]),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair101" *) 
  LUT4 #(
    .INIT(16'h0010)) 
    update_word_cnt_almost_last_i_1
       (.I0(update_word_cnt_len_reg__0[5]),
        .I1(update_word_cnt_len_reg__0[4]),
        .I2(update_word_cnt_len_reg__0[3]),
        .I3(update_word_cnt_len_reg__0[2]),
        .O(update_word_cnt_almost_last_i_1_n_0));
  FDRE update_word_cnt_almost_last_reg
       (.C(ACLK),
        .CE(update_word_cnt_en),
        .D(update_word_cnt_almost_last_i_1_n_0),
        .Q(update_word_cnt_almost_last),
        .R(Q));
  FDSE update_word_cnt_first_reg
       (.C(ACLK),
        .CE(update_word_cnt_en),
        .D(update_word_cnt_last),
        .Q(update_word_cnt_first),
        .S(Q));
  (* SOFT_HLUTNM = "soft_lutpair101" *) 
  LUT4 #(
    .INIT(16'h0010)) 
    update_word_cnt_last_i_1
       (.I0(update_word_cnt_len_reg__0[5]),
        .I1(update_word_cnt_len_reg__0[4]),
        .I2(update_word_cnt_len_reg__0[2]),
        .I3(update_word_cnt_len_reg__0[3]),
        .O(update_word_cnt_last_i_1_n_0));
  FDRE update_word_cnt_last_reg
       (.C(ACLK),
        .CE(update_word_cnt_en),
        .D(update_word_cnt_last_i_1_n_0),
        .Q(update_word_cnt_last),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair105" *) 
  LUT1 #(
    .INIT(2'h1)) 
    \update_word_cnt_len[2]_i_1 
       (.I0(update_word_cnt_len_reg__0[2]),
        .O(minusOp__0));
  (* SOFT_HLUTNM = "soft_lutpair105" *) 
  LUT2 #(
    .INIT(4'h9)) 
    \update_word_cnt_len[3]_i_1 
       (.I0(update_word_cnt_len_reg__0[2]),
        .I1(update_word_cnt_len_reg__0[3]),
        .O(\update_word_cnt_len[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair100" *) 
  LUT3 #(
    .INIT(8'hE1)) 
    \update_word_cnt_len[4]_i_1 
       (.I0(update_word_cnt_len_reg__0[3]),
        .I1(update_word_cnt_len_reg__0[2]),
        .I2(update_word_cnt_len_reg__0[4]),
        .O(\update_word_cnt_len[4]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair100" *) 
  LUT4 #(
    .INIT(16'hFE01)) 
    \update_word_cnt_len[5]_i_1 
       (.I0(update_word_cnt_len_reg__0[4]),
        .I1(update_word_cnt_len_reg__0[2]),
        .I2(update_word_cnt_len_reg__0[3]),
        .I3(update_word_cnt_len_reg__0[5]),
        .O(\update_word_cnt_len[5]_i_1_n_0 ));
  FDSE \update_word_cnt_len_reg[2] 
       (.C(ACLK),
        .CE(update_word_cnt_en),
        .D(minusOp__0),
        .Q(update_word_cnt_len_reg__0[2]),
        .S(Q));
  FDSE \update_word_cnt_len_reg[3] 
       (.C(ACLK),
        .CE(update_word_cnt_en),
        .D(\update_word_cnt_len[3]_i_1_n_0 ),
        .Q(update_word_cnt_len_reg__0[3]),
        .S(Q));
  FDSE \update_word_cnt_len_reg[4] 
       (.C(ACLK),
        .CE(update_word_cnt_en),
        .D(\update_word_cnt_len[4]_i_1_n_0 ),
        .Q(update_word_cnt_len_reg__0[4]),
        .S(Q));
  FDSE \update_word_cnt_len_reg[5] 
       (.C(ACLK),
        .CE(update_word_cnt_en),
        .D(\update_word_cnt_len[5]_i_1_n_0 ),
        .Q(update_word_cnt_len_reg__0[5]),
        .S(Q));
  FDRE \update_word_cnt_next_reg[2] 
       (.C(ACLK),
        .CE(update_word_cnt_en),
        .D(plusOp[0]),
        .Q(update_word_cnt_next_reg__0[2]),
        .R(Q));
  FDRE \update_word_cnt_next_reg[3] 
       (.C(ACLK),
        .CE(update_word_cnt_en),
        .D(plusOp[1]),
        .Q(update_word_cnt_next_reg__0[3]),
        .R(Q));
  FDRE \update_word_cnt_next_reg[4] 
       (.C(ACLK),
        .CE(update_word_cnt_en),
        .D(plusOp[2]),
        .Q(update_word_cnt_next_reg__0[4]),
        .R(Q));
  FDRE \update_word_cnt_next_reg[5] 
       (.C(ACLK),
        .CE(update_word_cnt_en),
        .D(plusOp[3]),
        .Q(update_word_cnt_next_reg__0[5]),
        .R(Q));
  LUT6 #(
    .INIT(64'hFFEF002000200020)) 
    \update_wr_offset_cnt[0]_i_1 
       (.I0(wm_offset[0]),
        .I1(wm_use_bits[0]),
        .I2(wm_kind),
        .I3(wm_allocate_reg_n_0),
        .I4(\wm_remove_unaligned_reg_n_0_[0] ),
        .I5(p_1_in[0]),
        .O(update_wr_offset_cnt_cmb[0]));
  LUT6 #(
    .INIT(64'hFFEF002000200020)) 
    \update_wr_offset_cnt[1]_i_1 
       (.I0(wm_offset[1]),
        .I1(wm_use_bits[1]),
        .I2(wm_kind),
        .I3(wm_allocate_reg_n_0),
        .I4(p_0_in40_in),
        .I5(p_1_in[1]),
        .O(update_wr_offset_cnt_cmb[1]));
  LUT6 #(
    .INIT(64'hFFEF002000200020)) 
    \update_wr_offset_cnt[2]_i_1 
       (.I0(wm_offset[2]),
        .I1(wm_use_bits[2]),
        .I2(wm_kind),
        .I3(wm_allocate_reg_n_0),
        .I4(p_0_in45_in),
        .I5(p_1_in[2]),
        .O(update_wr_offset_cnt_cmb[2]));
  LUT6 #(
    .INIT(64'hFFEF002000200020)) 
    \update_wr_offset_cnt[3]_i_1 
       (.I0(wm_offset[3]),
        .I1(wm_use_bits[3]),
        .I2(wm_kind),
        .I3(wm_allocate_reg_n_0),
        .I4(p_0_in50_in),
        .I5(p_1_in[3]),
        .O(update_wr_offset_cnt_cmb[3]));
  LUT4 #(
    .INIT(16'h1DE2)) 
    \update_wr_offset_cnt[3]_i_3 
       (.I0(wm_offset[3]),
        .I1(update_write_miss_ongoing),
        .I2(update_wr_offset_cnt[3]),
        .I3(wm_stp_bits[3]),
        .O(\update_wr_offset_cnt[3]_i_3_n_0 ));
  LUT4 #(
    .INIT(16'h1DE2)) 
    \update_wr_offset_cnt[3]_i_4 
       (.I0(wm_offset[2]),
        .I1(update_write_miss_ongoing),
        .I2(update_wr_offset_cnt[2]),
        .I3(wm_stp_bits[2]),
        .O(\update_wr_offset_cnt[3]_i_4_n_0 ));
  LUT4 #(
    .INIT(16'h1DE2)) 
    \update_wr_offset_cnt[3]_i_5 
       (.I0(wm_offset[1]),
        .I1(update_write_miss_ongoing),
        .I2(update_wr_offset_cnt[1]),
        .I3(wm_stp_bits[1]),
        .O(\update_wr_offset_cnt[3]_i_5_n_0 ));
  LUT4 #(
    .INIT(16'h1DE2)) 
    \update_wr_offset_cnt[3]_i_6 
       (.I0(wm_offset[0]),
        .I1(update_write_miss_ongoing),
        .I2(update_wr_offset_cnt[0]),
        .I3(wm_stp_bits[0]),
        .O(\update_wr_offset_cnt[3]_i_6_n_0 ));
  LUT6 #(
    .INIT(64'hFFEF002000200020)) 
    \update_wr_offset_cnt[4]_i_1 
       (.I0(wm_offset[4]),
        .I1(wm_use_bits[4]),
        .I2(wm_kind),
        .I3(wm_allocate_reg_n_0),
        .I4(p_0_in55_in),
        .I5(p_1_in[4]),
        .O(update_wr_offset_cnt_cmb[4]));
  LUT6 #(
    .INIT(64'hFFEF002000200020)) 
    \update_wr_offset_cnt[5]_i_2 
       (.I0(wm_offset[5]),
        .I1(wm_use_bits[5]),
        .I2(wm_kind),
        .I3(wm_allocate_reg_n_0),
        .I4(p_0_in60_in),
        .I5(p_1_in[5]),
        .O(update_wr_offset_cnt_cmb[5]));
  LUT4 #(
    .INIT(16'h1DE2)) 
    \update_wr_offset_cnt[5]_i_7 
       (.I0(wm_offset[5]),
        .I1(update_write_miss_ongoing),
        .I2(update_wr_offset_cnt[5]),
        .I3(wm_stp_bits[5]),
        .O(\update_wr_offset_cnt[5]_i_7_n_0 ));
  LUT4 #(
    .INIT(16'h1DE2)) 
    \update_wr_offset_cnt[5]_i_8 
       (.I0(wm_offset[4]),
        .I1(update_write_miss_ongoing),
        .I2(update_wr_offset_cnt[4]),
        .I3(wm_stp_bits[4]),
        .O(\update_wr_offset_cnt[5]_i_8_n_0 ));
  FDRE \update_wr_offset_cnt_reg[0] 
       (.C(ACLK),
        .CE(update_wr_offset_cnt0),
        .D(update_wr_offset_cnt_cmb[0]),
        .Q(update_wr_offset_cnt[0]),
        .R(Q));
  FDRE \update_wr_offset_cnt_reg[1] 
       (.C(ACLK),
        .CE(update_wr_offset_cnt0),
        .D(update_wr_offset_cnt_cmb[1]),
        .Q(update_wr_offset_cnt[1]),
        .R(Q));
  FDRE \update_wr_offset_cnt_reg[2] 
       (.C(ACLK),
        .CE(update_wr_offset_cnt0),
        .D(update_wr_offset_cnt_cmb[2]),
        .Q(update_wr_offset_cnt[2]),
        .R(Q));
  FDRE \update_wr_offset_cnt_reg[3] 
       (.C(ACLK),
        .CE(update_wr_offset_cnt0),
        .D(update_wr_offset_cnt_cmb[3]),
        .Q(update_wr_offset_cnt[3]),
        .R(Q));
  CARRY4 \update_wr_offset_cnt_reg[3]_i_2 
       (.CI(1'b0),
        .CO({\update_wr_offset_cnt_reg[3]_i_2_n_0 ,\update_wr_offset_cnt_reg[3]_i_2_n_1 ,\update_wr_offset_cnt_reg[3]_i_2_n_2 ,\update_wr_offset_cnt_reg[3]_i_2_n_3 }),
        .CYINIT(1'b0),
        .DI(wm_stp_bits[3:0]),
        .O(p_1_in[3:0]),
        .S({\update_wr_offset_cnt[3]_i_3_n_0 ,\update_wr_offset_cnt[3]_i_4_n_0 ,\update_wr_offset_cnt[3]_i_5_n_0 ,\update_wr_offset_cnt[3]_i_6_n_0 }));
  FDRE \update_wr_offset_cnt_reg[4] 
       (.C(ACLK),
        .CE(update_wr_offset_cnt0),
        .D(update_wr_offset_cnt_cmb[4]),
        .Q(update_wr_offset_cnt[4]),
        .R(Q));
  FDRE \update_wr_offset_cnt_reg[5] 
       (.C(ACLK),
        .CE(update_wr_offset_cnt0),
        .D(update_wr_offset_cnt_cmb[5]),
        .Q(update_wr_offset_cnt[5]),
        .R(Q));
  CARRY4 \update_wr_offset_cnt_reg[5]_i_4 
       (.CI(\update_wr_offset_cnt_reg[3]_i_2_n_0 ),
        .CO({\NLW_update_wr_offset_cnt_reg[5]_i_4_CO_UNCONNECTED [3:1],\update_wr_offset_cnt_reg[5]_i_4_n_3 }),
        .CYINIT(1'b0),
        .DI({1'b0,1'b0,1'b0,wm_stp_bits[4]}),
        .O({\NLW_update_wr_offset_cnt_reg[5]_i_4_O_UNCONNECTED [3:2],p_1_in[5:4]}),
        .S({1'b0,1'b0,\update_wr_offset_cnt[5]_i_7_n_0 ,\update_wr_offset_cnt[5]_i_8_n_0 }));
  FDRE \update_write_miss_busy_i_reg[0] 
       (.C(ACLK),
        .CE(1'b1),
        .D(FIFO_WM_Pointer_n_14),
        .Q(update_write_miss_busy[0]),
        .R(Q));
  FDRE \update_write_miss_busy_i_reg[1] 
       (.C(ACLK),
        .CE(1'b1),
        .D(FIFO_WM_Pointer_n_13),
        .Q(update_write_miss_busy[1]),
        .R(Q));
  FDRE update_write_miss_ongoing_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(FIFO_WMA_Pointer_n_11),
        .Q(update_write_miss_ongoing),
        .R(1'b0));
  LUT5 #(
    .INIT(32'hFEAEAAAA)) 
    \w_fifo_mem_reg[31][BE][0]_srl32_i_1 
       (.I0(update_evict_busy),
        .I1(\wr_port_data_info_reg[0][BE][3] [0]),
        .I2(update_write_miss_ongoing_reg_0),
        .I3(\wr_port_data_info_reg[0][BE][3]_0 [0]),
        .I4(\update_wma_data_reg[24]_0 ),
        .O(\M_AXI_WSTRB_reg[3] [0]));
  LUT5 #(
    .INIT(32'hFEAEAAAA)) 
    \w_fifo_mem_reg[31][BE][1]_srl32_i_1 
       (.I0(update_evict_busy),
        .I1(\wr_port_data_info_reg[0][BE][3] [1]),
        .I2(update_write_miss_ongoing_reg_0),
        .I3(\wr_port_data_info_reg[0][BE][3]_0 [1]),
        .I4(\update_wma_data_reg[24]_0 ),
        .O(\M_AXI_WSTRB_reg[3] [1]));
  LUT5 #(
    .INIT(32'hFEAEAAAA)) 
    \w_fifo_mem_reg[31][BE][2]_srl32_i_1 
       (.I0(update_evict_busy),
        .I1(\wr_port_data_info_reg[0][BE][3] [2]),
        .I2(update_write_miss_ongoing_reg_0),
        .I3(\wr_port_data_info_reg[0][BE][3]_0 [2]),
        .I4(\update_wma_data_reg[24]_0 ),
        .O(\M_AXI_WSTRB_reg[3] [2]));
  LUT5 #(
    .INIT(32'hFEAEAAAA)) 
    \w_fifo_mem_reg[31][BE][3]_srl32_i_1 
       (.I0(update_evict_busy),
        .I1(\wr_port_data_info_reg[0][BE][3] [3]),
        .I2(update_write_miss_ongoing_reg_0),
        .I3(\wr_port_data_info_reg[0][BE][3]_0 [3]),
        .I4(\update_wma_data_reg[24]_0 ),
        .O(\M_AXI_WSTRB_reg[3] [3]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \w_fifo_mem_reg[31][Data][0]_srl32_i_1 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [0]),
        .I1(update_cur_evict_way_d1),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_3 [0]),
        .I3(update_evict_busy),
        .I4(\wr_port_data_info_reg[0][Data][31] [0]),
        .O(\M_AXI_WDATA_reg[31] [0]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \w_fifo_mem_reg[31][Data][10]_srl32_i_1 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [10]),
        .I1(update_cur_evict_way_d1),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_3 [10]),
        .I3(update_evict_busy),
        .I4(\wr_port_data_info_reg[0][Data][31] [10]),
        .O(\M_AXI_WDATA_reg[31] [10]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \w_fifo_mem_reg[31][Data][11]_srl32_i_1 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [11]),
        .I1(update_cur_evict_way_d1),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_3 [11]),
        .I3(update_evict_busy),
        .I4(\wr_port_data_info_reg[0][Data][31] [11]),
        .O(\M_AXI_WDATA_reg[31] [11]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \w_fifo_mem_reg[31][Data][12]_srl32_i_1 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [12]),
        .I1(update_cur_evict_way_d1),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_3 [12]),
        .I3(update_evict_busy),
        .I4(\wr_port_data_info_reg[0][Data][31] [12]),
        .O(\M_AXI_WDATA_reg[31] [12]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \w_fifo_mem_reg[31][Data][13]_srl32_i_1 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [13]),
        .I1(update_cur_evict_way_d1),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_3 [13]),
        .I3(update_evict_busy),
        .I4(\wr_port_data_info_reg[0][Data][31] [13]),
        .O(\M_AXI_WDATA_reg[31] [13]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \w_fifo_mem_reg[31][Data][14]_srl32_i_1 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [14]),
        .I1(update_cur_evict_way_d1),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_3 [14]),
        .I3(update_evict_busy),
        .I4(\wr_port_data_info_reg[0][Data][31] [14]),
        .O(\M_AXI_WDATA_reg[31] [14]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \w_fifo_mem_reg[31][Data][15]_srl32_i_1 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [15]),
        .I1(update_cur_evict_way_d1),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_3 [15]),
        .I3(update_evict_busy),
        .I4(\wr_port_data_info_reg[0][Data][31] [15]),
        .O(\M_AXI_WDATA_reg[31] [15]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \w_fifo_mem_reg[31][Data][16]_srl32_i_1 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [16]),
        .I1(update_cur_evict_way_d1),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_3 [16]),
        .I3(update_evict_busy),
        .I4(\wr_port_data_info_reg[0][Data][31] [16]),
        .O(\M_AXI_WDATA_reg[31] [16]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \w_fifo_mem_reg[31][Data][17]_srl32_i_1 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [17]),
        .I1(update_cur_evict_way_d1),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_3 [17]),
        .I3(update_evict_busy),
        .I4(\wr_port_data_info_reg[0][Data][31] [17]),
        .O(\M_AXI_WDATA_reg[31] [17]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \w_fifo_mem_reg[31][Data][18]_srl32_i_1 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [18]),
        .I1(update_cur_evict_way_d1),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_3 [18]),
        .I3(update_evict_busy),
        .I4(\wr_port_data_info_reg[0][Data][31] [18]),
        .O(\M_AXI_WDATA_reg[31] [18]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \w_fifo_mem_reg[31][Data][19]_srl32_i_1 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [19]),
        .I1(update_cur_evict_way_d1),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_3 [19]),
        .I3(update_evict_busy),
        .I4(\wr_port_data_info_reg[0][Data][31] [19]),
        .O(\M_AXI_WDATA_reg[31] [19]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \w_fifo_mem_reg[31][Data][1]_srl32_i_1 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [1]),
        .I1(update_cur_evict_way_d1),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_3 [1]),
        .I3(update_evict_busy),
        .I4(\wr_port_data_info_reg[0][Data][31] [1]),
        .O(\M_AXI_WDATA_reg[31] [1]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \w_fifo_mem_reg[31][Data][20]_srl32_i_1 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [20]),
        .I1(update_cur_evict_way_d1),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_3 [20]),
        .I3(update_evict_busy),
        .I4(\wr_port_data_info_reg[0][Data][31] [20]),
        .O(\M_AXI_WDATA_reg[31] [20]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \w_fifo_mem_reg[31][Data][21]_srl32_i_1 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [21]),
        .I1(update_cur_evict_way_d1),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_3 [21]),
        .I3(update_evict_busy),
        .I4(\wr_port_data_info_reg[0][Data][31] [21]),
        .O(\M_AXI_WDATA_reg[31] [21]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \w_fifo_mem_reg[31][Data][22]_srl32_i_1 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [22]),
        .I1(update_cur_evict_way_d1),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_3 [22]),
        .I3(update_evict_busy),
        .I4(\wr_port_data_info_reg[0][Data][31] [22]),
        .O(\M_AXI_WDATA_reg[31] [22]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \w_fifo_mem_reg[31][Data][23]_srl32_i_1 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [23]),
        .I1(update_cur_evict_way_d1),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_3 [23]),
        .I3(update_evict_busy),
        .I4(\wr_port_data_info_reg[0][Data][31] [23]),
        .O(\M_AXI_WDATA_reg[31] [23]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \w_fifo_mem_reg[31][Data][24]_srl32_i_1 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [24]),
        .I1(update_cur_evict_way_d1),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_3 [24]),
        .I3(update_evict_busy),
        .I4(\wr_port_data_info_reg[0][Data][31] [24]),
        .O(\M_AXI_WDATA_reg[31] [24]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \w_fifo_mem_reg[31][Data][25]_srl32_i_1 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [25]),
        .I1(update_cur_evict_way_d1),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_3 [25]),
        .I3(update_evict_busy),
        .I4(\wr_port_data_info_reg[0][Data][31] [25]),
        .O(\M_AXI_WDATA_reg[31] [25]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \w_fifo_mem_reg[31][Data][26]_srl32_i_1 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [26]),
        .I1(update_cur_evict_way_d1),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_3 [26]),
        .I3(update_evict_busy),
        .I4(\wr_port_data_info_reg[0][Data][31] [26]),
        .O(\M_AXI_WDATA_reg[31] [26]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \w_fifo_mem_reg[31][Data][27]_srl32_i_1 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [27]),
        .I1(update_cur_evict_way_d1),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_3 [27]),
        .I3(update_evict_busy),
        .I4(\wr_port_data_info_reg[0][Data][31] [27]),
        .O(\M_AXI_WDATA_reg[31] [27]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \w_fifo_mem_reg[31][Data][28]_srl32_i_1 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [28]),
        .I1(update_cur_evict_way_d1),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_3 [28]),
        .I3(update_evict_busy),
        .I4(\wr_port_data_info_reg[0][Data][31] [28]),
        .O(\M_AXI_WDATA_reg[31] [28]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \w_fifo_mem_reg[31][Data][29]_srl32_i_1 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [29]),
        .I1(update_cur_evict_way_d1),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_3 [29]),
        .I3(update_evict_busy),
        .I4(\wr_port_data_info_reg[0][Data][31] [29]),
        .O(\M_AXI_WDATA_reg[31] [29]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \w_fifo_mem_reg[31][Data][2]_srl32_i_1 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [2]),
        .I1(update_cur_evict_way_d1),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_3 [2]),
        .I3(update_evict_busy),
        .I4(\wr_port_data_info_reg[0][Data][31] [2]),
        .O(\M_AXI_WDATA_reg[31] [2]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \w_fifo_mem_reg[31][Data][30]_srl32_i_1 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [30]),
        .I1(update_cur_evict_way_d1),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_3 [30]),
        .I3(update_evict_busy),
        .I4(\wr_port_data_info_reg[0][Data][31] [30]),
        .O(\M_AXI_WDATA_reg[31] [30]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \w_fifo_mem_reg[31][Data][31]_srl32_i_1 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [31]),
        .I1(update_cur_evict_way_d1),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_3 [31]),
        .I3(update_evict_busy),
        .I4(\wr_port_data_info_reg[0][Data][31] [31]),
        .O(\M_AXI_WDATA_reg[31] [31]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \w_fifo_mem_reg[31][Data][3]_srl32_i_1 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [3]),
        .I1(update_cur_evict_way_d1),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_3 [3]),
        .I3(update_evict_busy),
        .I4(\wr_port_data_info_reg[0][Data][31] [3]),
        .O(\M_AXI_WDATA_reg[31] [3]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \w_fifo_mem_reg[31][Data][4]_srl32_i_1 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [4]),
        .I1(update_cur_evict_way_d1),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_3 [4]),
        .I3(update_evict_busy),
        .I4(\wr_port_data_info_reg[0][Data][31] [4]),
        .O(\M_AXI_WDATA_reg[31] [4]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \w_fifo_mem_reg[31][Data][5]_srl32_i_1 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [5]),
        .I1(update_cur_evict_way_d1),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_3 [5]),
        .I3(update_evict_busy),
        .I4(\wr_port_data_info_reg[0][Data][31] [5]),
        .O(\M_AXI_WDATA_reg[31] [5]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \w_fifo_mem_reg[31][Data][6]_srl32_i_1 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [6]),
        .I1(update_cur_evict_way_d1),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_3 [6]),
        .I3(update_evict_busy),
        .I4(\wr_port_data_info_reg[0][Data][31] [6]),
        .O(\M_AXI_WDATA_reg[31] [6]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \w_fifo_mem_reg[31][Data][7]_srl32_i_1 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [7]),
        .I1(update_cur_evict_way_d1),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_3 [7]),
        .I3(update_evict_busy),
        .I4(\wr_port_data_info_reg[0][Data][31] [7]),
        .O(\M_AXI_WDATA_reg[31] [7]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \w_fifo_mem_reg[31][Data][8]_srl32_i_1 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [8]),
        .I1(update_cur_evict_way_d1),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_3 [8]),
        .I3(update_evict_busy),
        .I4(\wr_port_data_info_reg[0][Data][31] [8]),
        .O(\M_AXI_WDATA_reg[31] [8]));
  LUT5 #(
    .INIT(32'hB8FFB800)) 
    \w_fifo_mem_reg[31][Data][9]_srl32_i_1 
       (.I0(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_2 [9]),
        .I1(update_cur_evict_way_d1),
        .I2(\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1_3 [9]),
        .I3(update_evict_busy),
        .I4(\wr_port_data_info_reg[0][Data][31] [9]),
        .O(\M_AXI_WDATA_reg[31] [9]));
  LUT5 #(
    .INIT(32'hB8BBB888)) 
    \w_fifo_mem_reg[31][Last][-1111111111]_srl32_i_1 
       (.I0(update_evict_last),
        .I1(update_evict_busy),
        .I2(\access_data_info[0,1][Last] ),
        .I3(update_write_miss_ongoing_reg_0),
        .I4(\access_data_info[0,0][Last] ),
        .O(\write_data_info[0][Last] ));
  FDRE wm_allocate_reg
       (.C(ACLK),
        .CE(FIFO_ED_Pointer_n_34),
        .D(\wm_fifo_mem_reg[15][Allocate][-1111111111]_srl16_n_0 ),
        .Q(wm_allocate_reg_n_0),
        .R(Q));
  FDSE wm_allow_reg
       (.C(ACLK),
        .CE(FIFO_ED_Pointer_n_34),
        .D(\wm_fifo_mem_reg[15][Allow][-1111111111]_srl16_n_0 ),
        .Q(\update_wma_data_reg[24]_0 ),
        .S(Q));
  FDRE wm_evict_reg
       (.C(ACLK),
        .CE(FIFO_ED_Pointer_n_34),
        .D(\wm_fifo_mem_reg[15][Evict][-1111111111]_srl16_n_0 ),
        .Q(wm_evict),
        .R(Q));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Allocate] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Allocate][-1111111111]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \wm_fifo_mem_reg[15][Allocate][-1111111111]_srl16 
       (.A0(wm_read_fifo_addr[0]),
        .A1(wm_read_fifo_addr[1]),
        .A2(wm_read_fifo_addr[2]),
        .A3(wm_read_fifo_addr[3]),
        .CE(lookup_push_write_miss),
        .CLK(ACLK),
        .D(lookup_wm_allocate),
        .Q(\wm_fifo_mem_reg[15][Allocate][-1111111111]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Allow] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Allow][-1111111111]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \wm_fifo_mem_reg[15][Allow][-1111111111]_srl16 
       (.A0(wm_read_fifo_addr[0]),
        .A1(wm_read_fifo_addr[1]),
        .A2(wm_read_fifo_addr[2]),
        .A3(wm_read_fifo_addr[3]),
        .CE(lookup_push_write_miss),
        .CLK(ACLK),
        .D(lookup_wm_allow_write),
        .Q(\wm_fifo_mem_reg[15][Allow][-1111111111]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Evict] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Evict][-1111111111]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \wm_fifo_mem_reg[15][Evict][-1111111111]_srl16 
       (.A0(wm_read_fifo_addr[0]),
        .A1(wm_read_fifo_addr[1]),
        .A2(wm_read_fifo_addr[2]),
        .A3(wm_read_fifo_addr[3]),
        .CE(lookup_push_write_miss),
        .CLK(ACLK),
        .D(lookup_wm_evict),
        .Q(\wm_fifo_mem_reg[15][Evict][-1111111111]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Kind] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Kind][-1111111111]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \wm_fifo_mem_reg[15][Kind][-1111111111]_srl16 
       (.A0(wm_read_fifo_addr[0]),
        .A1(wm_read_fifo_addr[1]),
        .A2(wm_read_fifo_addr[2]),
        .A3(wm_read_fifo_addr[3]),
        .CE(lookup_push_write_miss),
        .CLK(ACLK),
        .D(\lu_check_info_reg[Kind] ),
        .Q(\wm_fifo_mem_reg[15][Kind][-1111111111]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Offset] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Offset][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \wm_fifo_mem_reg[15][Offset][0]_srl16 
       (.A0(wm_read_fifo_addr[0]),
        .A1(wm_read_fifo_addr[1]),
        .A2(wm_read_fifo_addr[2]),
        .A3(wm_read_fifo_addr[3]),
        .CE(lookup_push_write_miss),
        .CLK(ACLK),
        .D(\lu_check_info_reg[Addr][5] [0]),
        .Q(\wm_fifo_mem_reg[15][Offset][0]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Offset] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Offset][1]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \wm_fifo_mem_reg[15][Offset][1]_srl16 
       (.A0(wm_read_fifo_addr[0]),
        .A1(wm_read_fifo_addr[1]),
        .A2(wm_read_fifo_addr[2]),
        .A3(wm_read_fifo_addr[3]),
        .CE(lookup_push_write_miss),
        .CLK(ACLK),
        .D(\lu_check_info_reg[Addr][5] [1]),
        .Q(\wm_fifo_mem_reg[15][Offset][1]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Offset] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Offset][2]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \wm_fifo_mem_reg[15][Offset][2]_srl16 
       (.A0(wm_read_fifo_addr[0]),
        .A1(wm_read_fifo_addr[1]),
        .A2(wm_read_fifo_addr[2]),
        .A3(wm_read_fifo_addr[3]),
        .CE(lookup_push_write_miss),
        .CLK(ACLK),
        .D(\lu_check_info_reg[Addr][5] [2]),
        .Q(\wm_fifo_mem_reg[15][Offset][2]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Offset] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Offset][3]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \wm_fifo_mem_reg[15][Offset][3]_srl16 
       (.A0(wm_read_fifo_addr[0]),
        .A1(wm_read_fifo_addr[1]),
        .A2(wm_read_fifo_addr[2]),
        .A3(wm_read_fifo_addr[3]),
        .CE(lookup_push_write_miss),
        .CLK(ACLK),
        .D(\lu_check_info_reg[Addr][5] [3]),
        .Q(\wm_fifo_mem_reg[15][Offset][3]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Offset] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Offset][4]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \wm_fifo_mem_reg[15][Offset][4]_srl16 
       (.A0(wm_read_fifo_addr[0]),
        .A1(wm_read_fifo_addr[1]),
        .A2(wm_read_fifo_addr[2]),
        .A3(wm_read_fifo_addr[3]),
        .CE(lookup_push_write_miss),
        .CLK(ACLK),
        .D(\lu_check_info_reg[Addr][5] [4]),
        .Q(\wm_fifo_mem_reg[15][Offset][4]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Offset] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Offset][5]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \wm_fifo_mem_reg[15][Offset][5]_srl16 
       (.A0(wm_read_fifo_addr[0]),
        .A1(wm_read_fifo_addr[1]),
        .A2(wm_read_fifo_addr[2]),
        .A3(wm_read_fifo_addr[3]),
        .CE(lookup_push_write_miss),
        .CLK(ACLK),
        .D(\lu_check_info_reg[Addr][5] [5]),
        .Q(\wm_fifo_mem_reg[15][Offset][5]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Port_Num] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Port_Num][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \wm_fifo_mem_reg[15][Port_Num][0]_srl16 
       (.A0(wm_read_fifo_addr[0]),
        .A1(wm_read_fifo_addr[1]),
        .A2(wm_read_fifo_addr[2]),
        .A3(wm_read_fifo_addr[3]),
        .CE(lookup_push_write_miss),
        .CLK(ACLK),
        .D(\lu_check_info_reg[Port_Num][0] ),
        .Q(\wm_fifo_mem_reg[15][Port_Num][0]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Stp_Bits] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Stp_Bits][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \wm_fifo_mem_reg[15][Stp_Bits][0]_srl16 
       (.A0(wm_read_fifo_addr[0]),
        .A1(wm_read_fifo_addr[1]),
        .A2(wm_read_fifo_addr[2]),
        .A3(wm_read_fifo_addr[3]),
        .CE(lookup_push_write_miss),
        .CLK(ACLK),
        .D(\lu_check_info_reg[Addr_Stp][5] [0]),
        .Q(\wm_fifo_mem_reg[15][Stp_Bits][0]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Stp_Bits] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Stp_Bits][1]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \wm_fifo_mem_reg[15][Stp_Bits][1]_srl16 
       (.A0(wm_read_fifo_addr[0]),
        .A1(wm_read_fifo_addr[1]),
        .A2(wm_read_fifo_addr[2]),
        .A3(wm_read_fifo_addr[3]),
        .CE(lookup_push_write_miss),
        .CLK(ACLK),
        .D(\lu_check_info_reg[Addr_Stp][5] [1]),
        .Q(\wm_fifo_mem_reg[15][Stp_Bits][1]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Stp_Bits] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Stp_Bits][2]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \wm_fifo_mem_reg[15][Stp_Bits][2]_srl16 
       (.A0(wm_read_fifo_addr[0]),
        .A1(wm_read_fifo_addr[1]),
        .A2(wm_read_fifo_addr[2]),
        .A3(wm_read_fifo_addr[3]),
        .CE(lookup_push_write_miss),
        .CLK(ACLK),
        .D(\lu_check_info_reg[Addr_Stp][5] [2]),
        .Q(\wm_fifo_mem_reg[15][Stp_Bits][2]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Stp_Bits] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Stp_Bits][3]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \wm_fifo_mem_reg[15][Stp_Bits][3]_srl16 
       (.A0(wm_read_fifo_addr[0]),
        .A1(wm_read_fifo_addr[1]),
        .A2(wm_read_fifo_addr[2]),
        .A3(wm_read_fifo_addr[3]),
        .CE(lookup_push_write_miss),
        .CLK(ACLK),
        .D(\lu_check_info_reg[Addr_Stp][5] [3]),
        .Q(\wm_fifo_mem_reg[15][Stp_Bits][3]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Stp_Bits] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Stp_Bits][4]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \wm_fifo_mem_reg[15][Stp_Bits][4]_srl16 
       (.A0(wm_read_fifo_addr[0]),
        .A1(wm_read_fifo_addr[1]),
        .A2(wm_read_fifo_addr[2]),
        .A3(wm_read_fifo_addr[3]),
        .CE(lookup_push_write_miss),
        .CLK(ACLK),
        .D(\lu_check_info_reg[Addr_Stp][5] [4]),
        .Q(\wm_fifo_mem_reg[15][Stp_Bits][4]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Stp_Bits] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Stp_Bits][5]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \wm_fifo_mem_reg[15][Stp_Bits][5]_srl16 
       (.A0(wm_read_fifo_addr[0]),
        .A1(wm_read_fifo_addr[1]),
        .A2(wm_read_fifo_addr[2]),
        .A3(wm_read_fifo_addr[3]),
        .CE(lookup_push_write_miss),
        .CLK(ACLK),
        .D(\lu_check_info_reg[Addr_Stp][5] [5]),
        .Q(\wm_fifo_mem_reg[15][Stp_Bits][5]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Use_Bits] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Use_Bits][0]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \wm_fifo_mem_reg[15][Use_Bits][0]_srl16 
       (.A0(wm_read_fifo_addr[0]),
        .A1(wm_read_fifo_addr[1]),
        .A2(wm_read_fifo_addr[2]),
        .A3(wm_read_fifo_addr[3]),
        .CE(lookup_push_write_miss),
        .CLK(ACLK),
        .D(\lu_check_info_reg[Addr_Use][5] [0]),
        .Q(\wm_fifo_mem_reg[15][Use_Bits][0]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Use_Bits] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Use_Bits][1]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \wm_fifo_mem_reg[15][Use_Bits][1]_srl16 
       (.A0(wm_read_fifo_addr[0]),
        .A1(wm_read_fifo_addr[1]),
        .A2(wm_read_fifo_addr[2]),
        .A3(wm_read_fifo_addr[3]),
        .CE(lookup_push_write_miss),
        .CLK(ACLK),
        .D(\lu_check_info_reg[Addr_Use][5] [1]),
        .Q(\wm_fifo_mem_reg[15][Use_Bits][1]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Use_Bits] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Use_Bits][2]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \wm_fifo_mem_reg[15][Use_Bits][2]_srl16 
       (.A0(wm_read_fifo_addr[0]),
        .A1(wm_read_fifo_addr[1]),
        .A2(wm_read_fifo_addr[2]),
        .A3(wm_read_fifo_addr[3]),
        .CE(lookup_push_write_miss),
        .CLK(ACLK),
        .D(\lu_check_info_reg[Addr_Use][5] [2]),
        .Q(\wm_fifo_mem_reg[15][Use_Bits][2]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Use_Bits] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Use_Bits][3]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \wm_fifo_mem_reg[15][Use_Bits][3]_srl16 
       (.A0(wm_read_fifo_addr[0]),
        .A1(wm_read_fifo_addr[1]),
        .A2(wm_read_fifo_addr[2]),
        .A3(wm_read_fifo_addr[3]),
        .CE(lookup_push_write_miss),
        .CLK(ACLK),
        .D(\lu_check_info_reg[Addr_Use][5] [3]),
        .Q(\wm_fifo_mem_reg[15][Use_Bits][3]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Use_Bits] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Use_Bits][4]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \wm_fifo_mem_reg[15][Use_Bits][4]_srl16 
       (.A0(wm_read_fifo_addr[0]),
        .A1(wm_read_fifo_addr[1]),
        .A2(wm_read_fifo_addr[2]),
        .A3(wm_read_fifo_addr[3]),
        .CE(lookup_push_write_miss),
        .CLK(ACLK),
        .D(\lu_check_info_reg[Addr_Use][5] [4]),
        .Q(\wm_fifo_mem_reg[15][Use_Bits][4]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Use_Bits] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Use_Bits][5]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \wm_fifo_mem_reg[15][Use_Bits][5]_srl16 
       (.A0(wm_read_fifo_addr[0]),
        .A1(wm_read_fifo_addr[1]),
        .A2(wm_read_fifo_addr[2]),
        .A3(wm_read_fifo_addr[3]),
        .CE(lookup_push_write_miss),
        .CLK(ACLK),
        .D(\lu_check_info_reg[Addr_Use][5] [5]),
        .Q(\wm_fifo_mem_reg[15][Use_Bits][5]_srl16_n_0 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Will_Use] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wm_fifo_mem_reg[15][Will_Use][-1111111111]_srl16 " *) 
  SRL16E #(
    .INIT(16'h0000)) 
    \wm_fifo_mem_reg[15][Will_Use][-1111111111]_srl16 
       (.A0(wm_read_fifo_addr[0]),
        .A1(wm_read_fifo_addr[1]),
        .A2(wm_read_fifo_addr[2]),
        .A3(wm_read_fifo_addr[3]),
        .CE(lookup_push_write_miss),
        .CLK(ACLK),
        .D(lookup_wm_will_use),
        .Q(\wm_fifo_mem_reg[15][Will_Use][-1111111111]_srl16_n_0 ));
  FDRE wm_kind_reg
       (.C(ACLK),
        .CE(FIFO_ED_Pointer_n_34),
        .D(\wm_fifo_mem_reg[15][Kind][-1111111111]_srl16_n_0 ),
        .Q(wm_kind),
        .R(Q));
  LUT4 #(
    .INIT(16'h0001)) 
    wm_local_wrap0
       (.I0(\wm_fifo_mem_reg[15][Use_Bits][4]_srl16_n_0 ),
        .I1(\wm_fifo_mem_reg[15][Use_Bits][5]_srl16_n_0 ),
        .I2(\wm_fifo_mem_reg[15][Use_Bits][3]_srl16_n_0 ),
        .I3(\wm_fifo_mem_reg[15][Use_Bits][2]_srl16_n_0 ),
        .O(wm_local_wrap0_n_0));
  FDRE wm_local_wrap_reg
       (.C(ACLK),
        .CE(FIFO_ED_Pointer_n_34),
        .D(wm_local_wrap0_n_0),
        .Q(wm_local_wrap),
        .R(Q));
  FDRE \wm_offset_reg[0] 
       (.C(ACLK),
        .CE(FIFO_ED_Pointer_n_34),
        .D(\wm_fifo_mem_reg[15][Offset][0]_srl16_n_0 ),
        .Q(wm_offset[0]),
        .R(Q));
  FDRE \wm_offset_reg[1] 
       (.C(ACLK),
        .CE(FIFO_ED_Pointer_n_34),
        .D(\wm_fifo_mem_reg[15][Offset][1]_srl16_n_0 ),
        .Q(wm_offset[1]),
        .R(Q));
  FDRE \wm_offset_reg[2] 
       (.C(ACLK),
        .CE(FIFO_ED_Pointer_n_34),
        .D(\wm_fifo_mem_reg[15][Offset][2]_srl16_n_0 ),
        .Q(wm_offset[2]),
        .R(Q));
  FDRE \wm_offset_reg[3] 
       (.C(ACLK),
        .CE(FIFO_ED_Pointer_n_34),
        .D(\wm_fifo_mem_reg[15][Offset][3]_srl16_n_0 ),
        .Q(wm_offset[3]),
        .R(Q));
  FDRE \wm_offset_reg[4] 
       (.C(ACLK),
        .CE(FIFO_ED_Pointer_n_34),
        .D(\wm_fifo_mem_reg[15][Offset][4]_srl16_n_0 ),
        .Q(wm_offset[4]),
        .R(Q));
  FDRE \wm_offset_reg[5] 
       (.C(ACLK),
        .CE(FIFO_ED_Pointer_n_34),
        .D(\wm_fifo_mem_reg[15][Offset][5]_srl16_n_0 ),
        .Q(wm_offset[5]),
        .R(Q));
  FDRE \wm_port_reg[0] 
       (.C(ACLK),
        .CE(FIFO_ED_Pointer_n_34),
        .D(\wm_fifo_mem_reg[15][Port_Num][0]_srl16_n_0 ),
        .Q(update_write_miss_ongoing_reg_0),
        .R(Q));
  (* SOFT_HLUTNM = "soft_lutpair102" *) 
  LUT2 #(
    .INIT(4'h6)) 
    \wm_remove_unaligned[1]_i_1 
       (.I0(\wm_fifo_mem_reg[15][Stp_Bits][0]_srl16_n_0 ),
        .I1(\wm_fifo_mem_reg[15][Stp_Bits][1]_srl16_n_0 ),
        .O(\wm_remove_unaligned[1]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair102" *) 
  LUT3 #(
    .INIT(8'h1E)) 
    \wm_remove_unaligned[2]_i_1 
       (.I0(\wm_fifo_mem_reg[15][Stp_Bits][1]_srl16_n_0 ),
        .I1(\wm_fifo_mem_reg[15][Stp_Bits][0]_srl16_n_0 ),
        .I2(\wm_fifo_mem_reg[15][Stp_Bits][2]_srl16_n_0 ),
        .O(\wm_remove_unaligned[2]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair99" *) 
  LUT4 #(
    .INIT(16'h01FE)) 
    \wm_remove_unaligned[3]_i_1 
       (.I0(\wm_fifo_mem_reg[15][Stp_Bits][2]_srl16_n_0 ),
        .I1(\wm_fifo_mem_reg[15][Stp_Bits][0]_srl16_n_0 ),
        .I2(\wm_fifo_mem_reg[15][Stp_Bits][1]_srl16_n_0 ),
        .I3(\wm_fifo_mem_reg[15][Stp_Bits][3]_srl16_n_0 ),
        .O(\wm_remove_unaligned[3]_i_1_n_0 ));
  (* SOFT_HLUTNM = "soft_lutpair99" *) 
  LUT5 #(
    .INIT(32'h0001FFFE)) 
    \wm_remove_unaligned[4]_i_1 
       (.I0(\wm_fifo_mem_reg[15][Stp_Bits][3]_srl16_n_0 ),
        .I1(\wm_fifo_mem_reg[15][Stp_Bits][1]_srl16_n_0 ),
        .I2(\wm_fifo_mem_reg[15][Stp_Bits][0]_srl16_n_0 ),
        .I3(\wm_fifo_mem_reg[15][Stp_Bits][2]_srl16_n_0 ),
        .I4(\wm_fifo_mem_reg[15][Stp_Bits][4]_srl16_n_0 ),
        .O(\wm_remove_unaligned[4]_i_1_n_0 ));
  LUT6 #(
    .INIT(64'h00000001FFFFFFFE)) 
    \wm_remove_unaligned[5]_i_2 
       (.I0(\wm_fifo_mem_reg[15][Stp_Bits][4]_srl16_n_0 ),
        .I1(\wm_fifo_mem_reg[15][Stp_Bits][2]_srl16_n_0 ),
        .I2(\wm_fifo_mem_reg[15][Stp_Bits][0]_srl16_n_0 ),
        .I3(\wm_fifo_mem_reg[15][Stp_Bits][1]_srl16_n_0 ),
        .I4(\wm_fifo_mem_reg[15][Stp_Bits][3]_srl16_n_0 ),
        .I5(\wm_fifo_mem_reg[15][Stp_Bits][5]_srl16_n_0 ),
        .O(\wm_remove_unaligned[5]_i_2_n_0 ));
  FDSE \wm_remove_unaligned_reg[0] 
       (.C(ACLK),
        .CE(FIFO_ED_Pointer_n_34),
        .D(\wm_fifo_mem_reg[15][Stp_Bits][0]_srl16_n_0 ),
        .Q(\wm_remove_unaligned_reg_n_0_[0] ),
        .S(FIFO_ED_Pointer_n_2));
  FDSE \wm_remove_unaligned_reg[1] 
       (.C(ACLK),
        .CE(FIFO_ED_Pointer_n_34),
        .D(\wm_remove_unaligned[1]_i_1_n_0 ),
        .Q(p_0_in40_in),
        .S(FIFO_ED_Pointer_n_2));
  FDSE \wm_remove_unaligned_reg[2] 
       (.C(ACLK),
        .CE(FIFO_ED_Pointer_n_34),
        .D(\wm_remove_unaligned[2]_i_1_n_0 ),
        .Q(p_0_in45_in),
        .S(FIFO_ED_Pointer_n_2));
  FDSE \wm_remove_unaligned_reg[3] 
       (.C(ACLK),
        .CE(FIFO_ED_Pointer_n_34),
        .D(\wm_remove_unaligned[3]_i_1_n_0 ),
        .Q(p_0_in50_in),
        .S(FIFO_ED_Pointer_n_2));
  FDSE \wm_remove_unaligned_reg[4] 
       (.C(ACLK),
        .CE(FIFO_ED_Pointer_n_34),
        .D(\wm_remove_unaligned[4]_i_1_n_0 ),
        .Q(p_0_in55_in),
        .S(FIFO_ED_Pointer_n_2));
  FDSE \wm_remove_unaligned_reg[5] 
       (.C(ACLK),
        .CE(FIFO_ED_Pointer_n_34),
        .D(\wm_remove_unaligned[5]_i_2_n_0 ),
        .Q(p_0_in60_in),
        .S(FIFO_ED_Pointer_n_2));
  FDRE \wm_stp_bits_reg[0] 
       (.C(ACLK),
        .CE(FIFO_ED_Pointer_n_34),
        .D(\wm_fifo_mem_reg[15][Stp_Bits][0]_srl16_n_0 ),
        .Q(wm_stp_bits[0]),
        .R(Q));
  FDRE \wm_stp_bits_reg[1] 
       (.C(ACLK),
        .CE(FIFO_ED_Pointer_n_34),
        .D(\wm_fifo_mem_reg[15][Stp_Bits][1]_srl16_n_0 ),
        .Q(wm_stp_bits[1]),
        .R(Q));
  FDRE \wm_stp_bits_reg[2] 
       (.C(ACLK),
        .CE(FIFO_ED_Pointer_n_34),
        .D(\wm_fifo_mem_reg[15][Stp_Bits][2]_srl16_n_0 ),
        .Q(wm_stp_bits[2]),
        .R(Q));
  FDRE \wm_stp_bits_reg[3] 
       (.C(ACLK),
        .CE(FIFO_ED_Pointer_n_34),
        .D(\wm_fifo_mem_reg[15][Stp_Bits][3]_srl16_n_0 ),
        .Q(wm_stp_bits[3]),
        .R(Q));
  FDRE \wm_stp_bits_reg[4] 
       (.C(ACLK),
        .CE(FIFO_ED_Pointer_n_34),
        .D(\wm_fifo_mem_reg[15][Stp_Bits][4]_srl16_n_0 ),
        .Q(wm_stp_bits[4]),
        .R(Q));
  FDRE \wm_stp_bits_reg[5] 
       (.C(ACLK),
        .CE(FIFO_ED_Pointer_n_34),
        .D(\wm_fifo_mem_reg[15][Stp_Bits][5]_srl16_n_0 ),
        .Q(wm_stp_bits[5]),
        .R(Q));
  FDRE \wm_use_bits_reg[0] 
       (.C(ACLK),
        .CE(FIFO_ED_Pointer_n_34),
        .D(\wm_fifo_mem_reg[15][Use_Bits][0]_srl16_n_0 ),
        .Q(wm_use_bits[0]),
        .R(Q));
  FDRE \wm_use_bits_reg[1] 
       (.C(ACLK),
        .CE(FIFO_ED_Pointer_n_34),
        .D(\wm_fifo_mem_reg[15][Use_Bits][1]_srl16_n_0 ),
        .Q(wm_use_bits[1]),
        .R(Q));
  FDRE \wm_use_bits_reg[2] 
       (.C(ACLK),
        .CE(FIFO_ED_Pointer_n_34),
        .D(\wm_fifo_mem_reg[15][Use_Bits][2]_srl16_n_0 ),
        .Q(wm_use_bits[2]),
        .R(Q));
  FDRE \wm_use_bits_reg[3] 
       (.C(ACLK),
        .CE(FIFO_ED_Pointer_n_34),
        .D(\wm_fifo_mem_reg[15][Use_Bits][3]_srl16_n_0 ),
        .Q(wm_use_bits[3]),
        .R(Q));
  FDRE \wm_use_bits_reg[4] 
       (.C(ACLK),
        .CE(FIFO_ED_Pointer_n_34),
        .D(\wm_fifo_mem_reg[15][Use_Bits][4]_srl16_n_0 ),
        .Q(wm_use_bits[4]),
        .R(Q));
  FDRE \wm_use_bits_reg[5] 
       (.C(ACLK),
        .CE(FIFO_ED_Pointer_n_34),
        .D(\wm_fifo_mem_reg[15][Use_Bits][5]_srl16_n_0 ),
        .Q(wm_use_bits[5]),
        .R(Q));
  FDRE wm_will_use_reg
       (.C(ACLK),
        .CE(FIFO_ED_Pointer_n_34),
        .D(\wm_fifo_mem_reg[15][Will_Use][-1111111111]_srl16_n_0 ),
        .Q(wm_will_use),
        .R(Q));
  MUXF7 \wma_fifo_mem_reg[511][Data][0]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][0]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][0]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][0]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][0]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][0]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][0]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][0]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][0]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][0]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][0]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][0]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][0]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][0]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][0]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][0]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][0]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][0]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][0]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][0]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][0]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][0]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][0]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][0]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][0]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][0]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][0]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][0]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][0]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][0]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][0]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][0]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][0]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][0]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][0]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][0]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][0]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][0]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][0]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][0]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][0]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][0]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][0]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][0]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][0]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][0]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][0]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][0]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][0]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][0]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[0]),
        .Q(\wma_fifo_mem_reg[511][Data][0]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][0]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][0]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][0]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][0]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][0]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][0]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][0]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][0]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][0]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][0]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][0]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][0]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][0]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][0]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][0]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][0]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][0]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][0]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][0]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][0]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][0]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][0]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][0]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][0]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][0]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][0]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][0]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][0]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][0]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][0]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][0]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][0]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][0]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][0]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][0]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][0]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][0]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][0]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][0]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][0]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][0]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][0]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][0]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][0]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][0]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][0]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][0]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][0]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][0]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][0]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][0]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][0]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][0]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][0]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][0]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][0]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][0]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][0]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][0]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][0]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][0]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][0]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][0]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][0]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][0]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][0]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][0]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][0]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][0]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][0]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][0]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][0]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][0]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][0]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][0]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][0]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][10]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][10]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][10]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][10]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][10]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][10]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][10]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][10]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][10]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][10]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][10]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][10]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][10]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][10]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][10]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][10]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][10]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][10]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][10]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][10]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][10]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][10]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][10]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][10]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][10]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][10]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][10]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][10]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][10]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][10]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][10]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][10]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][10]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][10]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][10]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][10]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][10]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][10]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][10]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][10]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][10]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][10]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][10]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][10]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][10]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][10]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][10]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][10]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][10]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][10]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[10]),
        .Q(\wma_fifo_mem_reg[511][Data][10]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][10]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][10]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][10]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][10]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][10]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][10]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][10]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][10]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][10]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][10]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][10]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][10]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][10]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][10]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][10]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][10]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][10]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][10]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][10]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][10]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][10]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][10]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][10]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][10]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][10]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][10]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][10]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][10]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][10]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][10]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][10]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][10]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][10]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][10]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][10]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][10]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][10]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][10]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][10]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][10]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][10]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][10]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][10]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][10]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][10]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][10]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][10]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][10]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][10]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][10]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][10]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][10]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][10]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][10]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][10]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][10]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][10]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][10]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][10]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][10]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][10]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][10]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][10]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][10]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][10]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][10]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][10]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][10]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][10]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][10]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][10]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][10]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][10]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][10]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][10]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][10]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][11]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][11]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][11]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][11]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][11]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][11]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][11]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][11]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][11]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][11]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][11]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][11]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][11]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][11]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][11]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][11]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][11]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][11]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][11]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][11]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][11]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][11]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][11]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][11]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][11]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][11]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][11]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][11]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][11]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][11]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][11]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][11]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][11]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][11]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][11]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][11]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][11]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][11]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][11]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][11]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][11]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][11]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][11]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][11]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][11]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][11]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][11]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][11]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][11]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][11]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[11]),
        .Q(\wma_fifo_mem_reg[511][Data][11]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][11]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][11]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][11]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][11]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][11]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][11]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][11]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][11]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][11]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][11]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][11]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][11]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][11]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][11]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][11]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][11]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][11]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][11]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][11]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][11]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][11]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][11]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][11]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][11]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][11]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][11]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][11]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][11]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][11]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][11]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][11]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][11]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][11]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][11]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][11]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][11]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][11]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][11]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][11]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][11]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][11]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][11]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][11]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][11]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][11]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][11]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][11]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][11]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][11]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][11]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][11]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][11]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][11]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][11]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][11]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][11]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][11]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][11]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][11]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][11]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][11]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][11]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][11]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][11]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][11]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][11]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][11]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][11]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][11]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][11]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][11]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][11]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][11]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][11]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][11]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][11]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][12]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][12]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][12]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][12]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][12]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][12]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][12]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][12]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][12]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][12]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][12]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][12]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][12]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][12]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][12]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][12]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][12]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][12]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][12]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][12]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][12]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][12]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][12]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][12]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][12]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][12]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][12]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][12]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][12]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][12]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][12]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][12]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][12]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][12]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][12]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][12]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][12]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][12]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][12]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][12]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][12]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][12]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][12]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][12]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][12]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][12]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][12]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][12]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][12]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][12]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[12]),
        .Q(\wma_fifo_mem_reg[511][Data][12]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][12]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][12]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][12]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][12]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][12]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][12]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][12]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][12]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][12]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][12]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][12]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][12]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][12]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][12]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][12]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][12]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][12]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][12]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][12]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][12]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][12]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][12]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][12]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][12]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][12]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][12]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][12]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][12]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][12]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][12]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][12]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][12]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][12]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][12]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][12]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][12]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][12]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][12]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][12]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][12]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][12]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][12]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][12]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][12]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][12]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][12]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][12]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][12]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][12]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][12]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][12]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][12]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][12]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][12]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][12]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][12]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][12]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][12]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][12]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][12]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][12]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][12]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][12]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][12]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][12]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][12]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][12]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][12]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][12]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][12]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][12]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][12]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][12]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][12]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][12]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][12]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][13]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][13]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][13]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][13]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][13]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][13]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][13]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][13]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][13]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][13]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][13]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][13]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][13]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][13]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][13]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][13]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][13]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][13]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][13]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][13]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][13]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][13]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][13]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][13]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][13]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][13]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][13]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][13]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][13]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][13]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][13]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][13]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][13]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][13]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][13]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][13]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][13]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][13]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][13]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][13]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][13]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][13]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][13]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][13]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][13]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][13]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][13]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][13]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][13]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][13]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[13]),
        .Q(\wma_fifo_mem_reg[511][Data][13]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][13]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][13]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][13]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][13]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][13]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][13]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][13]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][13]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][13]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][13]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][13]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][13]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][13]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][13]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][13]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][13]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][13]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][13]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][13]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][13]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][13]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][13]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][13]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][13]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][13]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][13]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][13]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][13]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][13]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][13]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][13]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][13]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][13]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][13]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][13]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][13]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][13]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][13]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][13]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][13]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][13]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][13]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][13]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][13]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][13]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][13]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][13]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][13]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][13]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][13]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][13]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][13]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][13]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][13]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][13]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][13]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][13]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][13]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][13]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][13]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][13]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][13]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][13]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][13]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][13]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][13]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][13]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][13]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][13]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][13]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][13]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][13]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][13]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][13]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][13]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][13]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][14]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][14]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][14]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][14]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][14]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][14]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][14]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][14]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][14]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][14]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][14]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][14]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][14]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][14]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][14]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][14]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][14]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][14]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][14]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][14]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][14]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][14]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][14]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][14]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][14]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][14]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][14]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][14]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][14]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][14]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][14]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][14]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][14]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][14]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][14]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][14]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][14]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][14]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][14]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][14]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][14]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][14]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][14]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][14]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][14]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][14]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][14]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][14]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][14]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][14]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[14]),
        .Q(\wma_fifo_mem_reg[511][Data][14]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][14]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][14]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][14]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][14]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][14]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][14]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][14]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][14]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][14]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][14]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][14]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][14]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][14]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][14]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][14]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][14]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][14]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][14]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][14]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][14]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][14]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][14]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][14]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][14]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][14]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][14]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][14]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][14]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][14]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][14]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][14]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][14]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][14]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][14]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][14]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][14]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][14]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][14]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][14]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][14]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][14]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][14]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][14]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][14]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][14]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][14]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][14]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][14]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][14]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][14]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][14]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][14]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][14]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][14]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][14]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][14]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][14]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][14]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][14]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][14]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][14]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][14]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][14]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][14]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][14]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][14]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][14]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][14]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][14]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][14]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][14]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][14]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][14]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][14]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][14]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][14]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][15]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][15]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][15]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][15]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][15]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][15]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][15]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][15]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][15]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][15]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][15]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][15]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][15]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][15]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][15]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][15]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][15]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][15]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][15]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][15]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][15]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][15]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][15]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][15]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][15]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][15]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][15]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][15]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][15]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][15]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][15]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][15]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][15]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][15]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][15]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][15]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][15]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][15]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][15]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][15]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][15]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][15]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][15]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][15]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][15]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][15]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][15]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][15]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][15]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][15]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[15]),
        .Q(\wma_fifo_mem_reg[511][Data][15]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][15]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][15]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][15]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][15]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][15]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][15]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][15]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][15]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][15]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][15]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][15]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][15]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][15]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][15]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][15]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][15]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][15]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][15]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][15]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][15]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][15]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][15]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][15]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][15]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][15]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][15]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][15]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][15]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][15]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][15]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][15]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][15]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][15]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][15]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][15]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][15]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][15]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][15]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][15]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][15]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][15]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][15]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][15]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][15]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][15]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][15]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][15]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][15]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][15]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][15]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][15]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][15]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][15]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][15]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][15]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][15]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][15]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][15]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][15]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][15]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][15]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][15]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][15]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][15]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][15]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][15]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][15]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][15]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][15]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][15]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][15]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][15]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][15]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][15]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][15]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][15]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][16]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][16]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][16]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][16]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][16]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][16]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][16]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][16]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][16]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][16]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][16]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][16]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][16]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][16]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][16]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][16]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][16]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][16]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][16]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][16]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][16]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][16]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][16]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][16]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][16]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][16]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][16]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][16]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][16]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][16]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][16]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][16]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][16]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][16]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][16]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][16]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][16]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][16]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][16]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][16]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][16]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][16]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][16]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][16]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][16]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][16]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][16]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][16]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][16]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][16]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[16]),
        .Q(\wma_fifo_mem_reg[511][Data][16]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][16]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][16]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][16]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][16]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][16]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][16]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][16]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][16]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][16]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][16]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][16]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][16]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][16]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][16]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][16]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][16]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][16]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][16]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][16]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][16]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][16]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][16]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][16]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][16]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][16]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][16]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][16]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][16]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][16]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][16]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][16]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][16]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][16]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][16]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][16]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][16]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][16]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][16]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][16]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][16]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][16]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][16]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][16]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][16]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][16]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][16]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][16]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][16]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][16]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][16]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][16]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][16]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][16]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][16]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][16]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][16]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][16]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][16]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][16]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][16]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][16]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][16]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][16]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][16]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][16]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][16]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][16]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][16]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][16]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][16]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][16]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][16]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][16]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][16]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][16]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][16]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][17]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][17]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][17]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][17]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][17]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][17]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][17]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][17]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][17]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][17]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][17]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][17]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][17]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][17]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][17]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][17]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][17]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][17]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][17]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][17]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][17]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][17]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][17]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][17]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][17]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][17]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][17]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][17]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][17]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][17]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][17]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][17]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][17]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][17]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][17]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][17]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][17]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][17]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][17]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][17]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][17]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][17]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][17]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][17]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][17]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][17]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][17]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][17]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][17]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][17]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[17]),
        .Q(\wma_fifo_mem_reg[511][Data][17]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][17]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][17]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][17]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][17]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][17]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][17]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][17]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][17]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][17]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][17]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][17]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][17]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][17]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][17]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][17]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][17]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][17]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][17]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][17]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][17]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][17]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][17]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][17]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][17]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][17]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][17]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][17]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][17]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][17]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][17]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][17]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][17]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][17]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][17]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][17]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][17]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][17]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][17]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][17]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][17]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][17]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][17]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][17]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][17]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][17]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][17]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][17]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][17]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][17]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][17]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][17]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][17]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][17]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][17]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][17]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][17]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][17]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][17]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][17]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][17]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][17]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][17]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][17]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][17]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][17]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][17]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][17]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][17]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][17]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][17]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][17]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][17]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][17]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][17]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][17]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][17]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][18]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][18]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][18]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][18]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][18]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][18]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][18]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][18]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][18]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][18]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][18]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][18]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][18]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][18]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][18]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][18]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][18]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][18]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][18]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][18]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][18]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][18]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][18]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][18]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][18]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][18]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][18]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][18]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][18]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][18]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][18]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][18]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][18]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][18]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][18]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][18]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][18]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][18]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][18]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][18]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][18]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][18]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][18]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][18]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][18]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][18]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][18]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][18]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][18]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][18]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[18]),
        .Q(\wma_fifo_mem_reg[511][Data][18]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][18]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][18]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][18]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][18]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][18]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][18]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][18]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][18]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][18]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][18]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][18]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][18]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][18]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][18]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][18]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][18]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][18]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][18]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][18]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][18]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][18]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][18]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][18]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][18]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][18]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][18]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][18]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][18]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][18]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][18]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][18]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][18]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][18]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][18]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][18]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][18]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][18]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][18]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][18]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][18]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][18]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][18]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][18]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][18]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][18]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][18]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][18]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][18]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][18]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][18]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][18]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][18]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][18]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][18]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][18]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][18]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][18]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][18]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][18]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][18]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][18]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][18]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][18]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][18]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][18]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][18]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][18]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][18]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][18]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][18]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][18]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][18]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][18]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][18]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][18]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][18]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][19]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][19]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][19]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][19]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][19]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][19]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][19]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][19]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][19]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][19]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][19]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][19]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][19]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][19]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][19]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][19]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][19]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][19]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][19]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][19]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][19]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][19]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][19]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][19]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][19]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][19]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][19]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][19]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][19]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][19]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][19]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][19]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][19]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][19]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][19]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][19]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][19]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][19]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][19]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][19]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][19]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][19]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][19]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][19]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][19]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][19]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][19]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][19]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][19]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][19]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[19]),
        .Q(\wma_fifo_mem_reg[511][Data][19]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][19]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][19]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][19]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][19]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][19]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][19]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][19]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][19]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][19]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][19]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][19]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][19]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][19]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][19]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][19]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][19]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][19]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][19]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][19]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][19]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][19]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][19]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][19]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][19]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][19]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][19]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][19]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][19]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][19]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][19]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][19]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][19]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][19]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][19]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][19]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][19]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][19]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][19]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][19]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][19]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][19]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][19]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][19]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][19]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][19]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][19]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][19]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][19]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][19]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][19]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][19]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][19]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][19]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][19]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][19]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][19]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][19]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][19]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][19]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][19]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][19]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][19]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][19]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][19]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][19]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][19]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][19]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][19]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][19]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][19]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][19]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][19]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][19]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][19]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][19]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][19]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][1]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][1]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][1]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][1]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][1]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][1]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][1]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][1]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][1]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][1]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][1]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][1]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][1]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][1]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][1]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][1]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][1]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][1]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][1]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][1]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][1]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][1]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][1]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][1]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][1]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][1]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][1]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][1]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][1]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][1]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][1]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][1]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][1]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][1]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][1]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][1]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][1]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][1]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][1]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][1]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][1]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][1]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][1]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][1]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][1]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][1]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][1]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][1]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][1]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][1]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[1]),
        .Q(\wma_fifo_mem_reg[511][Data][1]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][1]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][1]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][1]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][1]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][1]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][1]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][1]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][1]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][1]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][1]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][1]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][1]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][1]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][1]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][1]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][1]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][1]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][1]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][1]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][1]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][1]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][1]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][1]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][1]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][1]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][1]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][1]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][1]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][1]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][1]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][1]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][1]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][1]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][1]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][1]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][1]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][1]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][1]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][1]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][1]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][1]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][1]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][1]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][1]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][1]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][1]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][1]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][1]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][1]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][1]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][1]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][1]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][1]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][1]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][1]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][1]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][1]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][1]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][1]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][1]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][1]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][1]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][1]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][1]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][1]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][1]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][1]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][1]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][1]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][1]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][1]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][1]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][1]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][1]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][1]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][1]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][20]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][20]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][20]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][20]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][20]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][20]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][20]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][20]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][20]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][20]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][20]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][20]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][20]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][20]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][20]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][20]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][20]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][20]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][20]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][20]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][20]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][20]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][20]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][20]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][20]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][20]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][20]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][20]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][20]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][20]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][20]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][20]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][20]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][20]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][20]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][20]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][20]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][20]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][20]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][20]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][20]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][20]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][20]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][20]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][20]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][20]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][20]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][20]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][20]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][20]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[20]),
        .Q(\wma_fifo_mem_reg[511][Data][20]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][20]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][20]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][20]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][20]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][20]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][20]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][20]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][20]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][20]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][20]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][20]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][20]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][20]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][20]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][20]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][20]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][20]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][20]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][20]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][20]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][20]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][20]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][20]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][20]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][20]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][20]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][20]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][20]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][20]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][20]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][20]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][20]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][20]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][20]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][20]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][20]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][20]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][20]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][20]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][20]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][20]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][20]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][20]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][20]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][20]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][20]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][20]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][20]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][20]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][20]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][20]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][20]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][20]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][20]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][20]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][20]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][20]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][20]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][20]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][20]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][20]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][20]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][20]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][20]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][20]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][20]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][20]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][20]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][20]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][20]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][20]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][20]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][20]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][20]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][20]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][20]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][21]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][21]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][21]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][21]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][21]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][21]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][21]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][21]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][21]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][21]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][21]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][21]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][21]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][21]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][21]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][21]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][21]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][21]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][21]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][21]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][21]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][21]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][21]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][21]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][21]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][21]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][21]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][21]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][21]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][21]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][21]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][21]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][21]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][21]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][21]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][21]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][21]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][21]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][21]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][21]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][21]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][21]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][21]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][21]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][21]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][21]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][21]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][21]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][21]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][21]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[21]),
        .Q(\wma_fifo_mem_reg[511][Data][21]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][21]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][21]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][21]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][21]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][21]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][21]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][21]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][21]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][21]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][21]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][21]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][21]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][21]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][21]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][21]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][21]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][21]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][21]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][21]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][21]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][21]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][21]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][21]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][21]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][21]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][21]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][21]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][21]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][21]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][21]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][21]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][21]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][21]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][21]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][21]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][21]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][21]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][21]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][21]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][21]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][21]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][21]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][21]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][21]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][21]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][21]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][21]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][21]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][21]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][21]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][21]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][21]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][21]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][21]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][21]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][21]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][21]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][21]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][21]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][21]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][21]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][21]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][21]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][21]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][21]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][21]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][21]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][21]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][21]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][21]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][21]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][21]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][21]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][21]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][21]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][21]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][22]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][22]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][22]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][22]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][22]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][22]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][22]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][22]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][22]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][22]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][22]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][22]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][22]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][22]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][22]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][22]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][22]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][22]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][22]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][22]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][22]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][22]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][22]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][22]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][22]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][22]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][22]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][22]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][22]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][22]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][22]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][22]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][22]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][22]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][22]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][22]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][22]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][22]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][22]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][22]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][22]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][22]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][22]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][22]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][22]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][22]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][22]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][22]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][22]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][22]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[22]),
        .Q(\wma_fifo_mem_reg[511][Data][22]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][22]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][22]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][22]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][22]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][22]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][22]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][22]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][22]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][22]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][22]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][22]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][22]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][22]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][22]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][22]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][22]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][22]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][22]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][22]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][22]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][22]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][22]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][22]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][22]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][22]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][22]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][22]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][22]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][22]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][22]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][22]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][22]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][22]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][22]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][22]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][22]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][22]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][22]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][22]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][22]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][22]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][22]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][22]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][22]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][22]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][22]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][22]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][22]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][22]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][22]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][22]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][22]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][22]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][22]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][22]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][22]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][22]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][22]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][22]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][22]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][22]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][22]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][22]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][22]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][22]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][22]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][22]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][22]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][22]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][22]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][22]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][22]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][22]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][22]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][22]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][22]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][23]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][23]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][23]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][23]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][23]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][23]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][23]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][23]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][23]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][23]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][23]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][23]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][23]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][23]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][23]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][23]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][23]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][23]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][23]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][23]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][23]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][23]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][23]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][23]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][23]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][23]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][23]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][23]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][23]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][23]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][23]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][23]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][23]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][23]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][23]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][23]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][23]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][23]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][23]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][23]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][23]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][23]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][23]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][23]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][23]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][23]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][23]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][23]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][23]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][23]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[23]),
        .Q(\wma_fifo_mem_reg[511][Data][23]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][23]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][23]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][23]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][23]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][23]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][23]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][23]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][23]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][23]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][23]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][23]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][23]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][23]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][23]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][23]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][23]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][23]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][23]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][23]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][23]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][23]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][23]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][23]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][23]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][23]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][23]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][23]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][23]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][23]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][23]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][23]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][23]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][23]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][23]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][23]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][23]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][23]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][23]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][23]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][23]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][23]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][23]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][23]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][23]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][23]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][23]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][23]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][23]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][23]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][23]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][23]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][23]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][23]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][23]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][23]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][23]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][23]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][23]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][23]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][23]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][23]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][23]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][23]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][23]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][23]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][23]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][23]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][23]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][23]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][23]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][23]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][23]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][23]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][23]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][23]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][23]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][24]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][24]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][24]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][24]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][24]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][24]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][24]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][24]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][24]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][24]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][24]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][24]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][24]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][24]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][24]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][24]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][24]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][24]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][24]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][24]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][24]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][24]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][24]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][24]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][24]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][24]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][24]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][24]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][24]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][24]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][24]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][24]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][24]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][24]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][24]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][24]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][24]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][24]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][24]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][24]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][24]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][24]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][24]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][24]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][24]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][24]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][24]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][24]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][24]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][24]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[24]),
        .Q(\wma_fifo_mem_reg[511][Data][24]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][24]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][24]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][24]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][24]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][24]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][24]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][24]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][24]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][24]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][24]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][24]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][24]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][24]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][24]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][24]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][24]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][24]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][24]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][24]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][24]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][24]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][24]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][24]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][24]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][24]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][24]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][24]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][24]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][24]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][24]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][24]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][24]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][24]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][24]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][24]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][24]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][24]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][24]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][24]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][24]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][24]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][24]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][24]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][24]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][24]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][24]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][24]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][24]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][24]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][24]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][24]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][24]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][24]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][24]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][24]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][24]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][24]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][24]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][24]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][24]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][24]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][24]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][24]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][24]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][24]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][24]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][24]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][24]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][24]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][24]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][24]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][24]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][24]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][24]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][24]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][24]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][25]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][25]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][25]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][25]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][25]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][25]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][25]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][25]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][25]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][25]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][25]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][25]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][25]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][25]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][25]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][25]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][25]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][25]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][25]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][25]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][25]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][25]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][25]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][25]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][25]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][25]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][25]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][25]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][25]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][25]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][25]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][25]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][25]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][25]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][25]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][25]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][25]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][25]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][25]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][25]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][25]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][25]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][25]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][25]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][25]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][25]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][25]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][25]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][25]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][25]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[25]),
        .Q(\wma_fifo_mem_reg[511][Data][25]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][25]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][25]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][25]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][25]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][25]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][25]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][25]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][25]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][25]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][25]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][25]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][25]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][25]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][25]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][25]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][25]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][25]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][25]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][25]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][25]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][25]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][25]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][25]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][25]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][25]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][25]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][25]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][25]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][25]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][25]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][25]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][25]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][25]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][25]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][25]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][25]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][25]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][25]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][25]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][25]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][25]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][25]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][25]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][25]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][25]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][25]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][25]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][25]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][25]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][25]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][25]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][25]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][25]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][25]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][25]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][25]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][25]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][25]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][25]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][25]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][25]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][25]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][25]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][25]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][25]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][25]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][25]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][25]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][25]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][25]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][25]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][25]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][25]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][25]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][25]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][25]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][26]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][26]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][26]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][26]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][26]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][26]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][26]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][26]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][26]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][26]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][26]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][26]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][26]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][26]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][26]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][26]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][26]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][26]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][26]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][26]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][26]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][26]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][26]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][26]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][26]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][26]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][26]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][26]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][26]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][26]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][26]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][26]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][26]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][26]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][26]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][26]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][26]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][26]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][26]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][26]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][26]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][26]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][26]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][26]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][26]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][26]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][26]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][26]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][26]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][26]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[26]),
        .Q(\wma_fifo_mem_reg[511][Data][26]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][26]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][26]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][26]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][26]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][26]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][26]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][26]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][26]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][26]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][26]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][26]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][26]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][26]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][26]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][26]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][26]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][26]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][26]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][26]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][26]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][26]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][26]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][26]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][26]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][26]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][26]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][26]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][26]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][26]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][26]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][26]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][26]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][26]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][26]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][26]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][26]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][26]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][26]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][26]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][26]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][26]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][26]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][26]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][26]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][26]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][26]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][26]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][26]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][26]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][26]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][26]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][26]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][26]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][26]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][26]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][26]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][26]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][26]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][26]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][26]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][26]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][26]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][26]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][26]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][26]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][26]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][26]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][26]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][26]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][26]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][26]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][26]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][26]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][26]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][26]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][26]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][27]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][27]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][27]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][27]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][27]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][27]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][27]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][27]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][27]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][27]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][27]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][27]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][27]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][27]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][27]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][27]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][27]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][27]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][27]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][27]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][27]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][27]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][27]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][27]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][27]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][27]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][27]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][27]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][27]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][27]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][27]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][27]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][27]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][27]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][27]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][27]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][27]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][27]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][27]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][27]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][27]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][27]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][27]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][27]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][27]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][27]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][27]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][27]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][27]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][27]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[27]),
        .Q(\wma_fifo_mem_reg[511][Data][27]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][27]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][27]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][27]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][27]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][27]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][27]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][27]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][27]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][27]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][27]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][27]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][27]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][27]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][27]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][27]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][27]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][27]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][27]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][27]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][27]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][27]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][27]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][27]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][27]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][27]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][27]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][27]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][27]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][27]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][27]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][27]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][27]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][27]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][27]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][27]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][27]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][27]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][27]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][27]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][27]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][27]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][27]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][27]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][27]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][27]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][27]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][27]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][27]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][27]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][27]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][27]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][27]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][27]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][27]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][27]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][27]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][27]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][27]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][27]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][27]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][27]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][27]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][27]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][27]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][27]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][27]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][27]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][27]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][27]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][27]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][27]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][27]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][27]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][27]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][27]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][27]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][28]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][28]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][28]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][28]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][28]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][28]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][28]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][28]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][28]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][28]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][28]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][28]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][28]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][28]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][28]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][28]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][28]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][28]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][28]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][28]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][28]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][28]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][28]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][28]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][28]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][28]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][28]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][28]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][28]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][28]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][28]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][28]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][28]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][28]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][28]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][28]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][28]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][28]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][28]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][28]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][28]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][28]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][28]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][28]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][28]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][28]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][28]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][28]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][28]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][28]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[28]),
        .Q(\wma_fifo_mem_reg[511][Data][28]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][28]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][28]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][28]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][28]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][28]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][28]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][28]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][28]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][28]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][28]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][28]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][28]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][28]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][28]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][28]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][28]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][28]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][28]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][28]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][28]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][28]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][28]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][28]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][28]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][28]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][28]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][28]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][28]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][28]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][28]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][28]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][28]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][28]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][28]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][28]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][28]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][28]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][28]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][28]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][28]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][28]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][28]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][28]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][28]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][28]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][28]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][28]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][28]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][28]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][28]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][28]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][28]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][28]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][28]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][28]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][28]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][28]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][28]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][28]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][28]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][28]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][28]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][28]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][28]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][28]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][28]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][28]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][28]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][28]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][28]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][28]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][28]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][28]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][28]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][28]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][28]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][29]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][29]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][29]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][29]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][29]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][29]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][29]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][29]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][29]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][29]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][29]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][29]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][29]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][29]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][29]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][29]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][29]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][29]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][29]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][29]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][29]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][29]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][29]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][29]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][29]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][29]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][29]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][29]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][29]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][29]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][29]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][29]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][29]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][29]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][29]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][29]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][29]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][29]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][29]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][29]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][29]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][29]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][29]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][29]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][29]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][29]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][29]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][29]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][29]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][29]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[29]),
        .Q(\wma_fifo_mem_reg[511][Data][29]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][29]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][29]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][29]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][29]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][29]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][29]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][29]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][29]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][29]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][29]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][29]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][29]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][29]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][29]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][29]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][29]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][29]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][29]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][29]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][29]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][29]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][29]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][29]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][29]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][29]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][29]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][29]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][29]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][29]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][29]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][29]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][29]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][29]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][29]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][29]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][29]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][29]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][29]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][29]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][29]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][29]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][29]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][29]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][29]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][29]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][29]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][29]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][29]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][29]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][29]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][29]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][29]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][29]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][29]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][29]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][29]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][29]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][29]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][29]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][29]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][29]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][29]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][29]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][29]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][29]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][29]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][29]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][29]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][29]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][29]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][29]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][29]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][29]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][29]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][29]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][29]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][2]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][2]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][2]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][2]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][2]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][2]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][2]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][2]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][2]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][2]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][2]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][2]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][2]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][2]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][2]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][2]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][2]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][2]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][2]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][2]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][2]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][2]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][2]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][2]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][2]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][2]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][2]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][2]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][2]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][2]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][2]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][2]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][2]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][2]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][2]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][2]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][2]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][2]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][2]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][2]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][2]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][2]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][2]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][2]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][2]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][2]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][2]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][2]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][2]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][2]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[2]),
        .Q(\wma_fifo_mem_reg[511][Data][2]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][2]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][2]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][2]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][2]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][2]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][2]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][2]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][2]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][2]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][2]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][2]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][2]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][2]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][2]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][2]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][2]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][2]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][2]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][2]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][2]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][2]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][2]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][2]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][2]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][2]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][2]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][2]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][2]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][2]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][2]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][2]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][2]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][2]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][2]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][2]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][2]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][2]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][2]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][2]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][2]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][2]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][2]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][2]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][2]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][2]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][2]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][2]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][2]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][2]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][2]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][2]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][2]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][2]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][2]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][2]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][2]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][2]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][2]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][2]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][2]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][2]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][2]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][2]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][2]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][2]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][2]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][2]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][2]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][2]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][2]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][2]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][2]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][2]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][2]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][2]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][2]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][30]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][30]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][30]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][30]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][30]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][30]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][30]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][30]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][30]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][30]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][30]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][30]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][30]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][30]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][30]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][30]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][30]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][30]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][30]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][30]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][30]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][30]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][30]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][30]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][30]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][30]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][30]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][30]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][30]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][30]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][30]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][30]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][30]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][30]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][30]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][30]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][30]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][30]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][30]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][30]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][30]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][30]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][30]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][30]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][30]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][30]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][30]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][30]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][30]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][30]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[30]),
        .Q(\wma_fifo_mem_reg[511][Data][30]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][30]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][30]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][30]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][30]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][30]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][30]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][30]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][30]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][30]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][30]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][30]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][30]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][30]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][30]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][30]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][30]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][30]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][30]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][30]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][30]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][30]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][30]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][30]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][30]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][30]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][30]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][30]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][30]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][30]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][30]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][30]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][30]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][30]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][30]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][30]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][30]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][30]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][30]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][30]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][30]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][30]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][30]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][30]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][30]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][30]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][30]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][30]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][30]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][30]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][30]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][30]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][30]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][30]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][30]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][30]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][30]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][30]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][30]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][30]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][30]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][30]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][30]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][30]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][30]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][30]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][30]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][30]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][30]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][30]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][30]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][30]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][30]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][30]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][30]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][30]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][30]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][31]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][31]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][31]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][31]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][31]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][31]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][31]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][31]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][31]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][31]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][31]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][31]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][31]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][31]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][31]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][31]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][31]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][31]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][31]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][31]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][31]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][31]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][31]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][31]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][31]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][31]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][31]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][31]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][31]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][31]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][31]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][31]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][31]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][31]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][31]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][31]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][31]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][31]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][31]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][31]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][31]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][31]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][31]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][31]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][31]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][31]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][31]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][31]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][31]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][31]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[31]),
        .Q(\wma_fifo_mem_reg[511][Data][31]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][31]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][31]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][31]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][31]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][31]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][31]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][31]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][31]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][31]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][31]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][31]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][31]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][31]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][31]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][31]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][31]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][31]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][31]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][31]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][31]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][31]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][31]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][31]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][31]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][31]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][31]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][31]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][31]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][31]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][31]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][31]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][31]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][31]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][31]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][31]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][31]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][31]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][31]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][31]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][31]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][31]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][31]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][31]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][31]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][31]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][31]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][31]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][31]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][31]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][31]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][31]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][31]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][31]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][31]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][31]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][31]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][31]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][31]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][31]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][31]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][31]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][31]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][31]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][31]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][31]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][31]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][31]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][31]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][31]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][31]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][31]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][31]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][31]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][31]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][31]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][31]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][3]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][3]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][3]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][3]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][3]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][3]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][3]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][3]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][3]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][3]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][3]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][3]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][3]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][3]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][3]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][3]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][3]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][3]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][3]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][3]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][3]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][3]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][3]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][3]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][3]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][3]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][3]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][3]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][3]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][3]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][3]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][3]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][3]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][3]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][3]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][3]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][3]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][3]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][3]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][3]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][3]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][3]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][3]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][3]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][3]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][3]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][3]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][3]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][3]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][3]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[3]),
        .Q(\wma_fifo_mem_reg[511][Data][3]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][3]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][3]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][3]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][3]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][3]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][3]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][3]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][3]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][3]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][3]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][3]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][3]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][3]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][3]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][3]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][3]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][3]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][3]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][3]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][3]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][3]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][3]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][3]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][3]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][3]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][3]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][3]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][3]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][3]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][3]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][3]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][3]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][3]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][3]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][3]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][3]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][3]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][3]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][3]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][3]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][3]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][3]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][3]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][3]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][3]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][3]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][3]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][3]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][3]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][3]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][3]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][3]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][3]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][3]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][3]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][3]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][3]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][3]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][3]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][3]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][3]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][3]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][3]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][3]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][3]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][3]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][3]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][3]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][3]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][3]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][3]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][3]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][3]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][3]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][3]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][3]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][4]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][4]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][4]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][4]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][4]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][4]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][4]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][4]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][4]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][4]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][4]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][4]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][4]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][4]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][4]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][4]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][4]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][4]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][4]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][4]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][4]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][4]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][4]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][4]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][4]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][4]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][4]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][4]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][4]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][4]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][4]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][4]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][4]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][4]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][4]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][4]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][4]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][4]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][4]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][4]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][4]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][4]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][4]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][4]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][4]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][4]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][4]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][4]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][4]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][4]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[4]),
        .Q(\wma_fifo_mem_reg[511][Data][4]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][4]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][4]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][4]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][4]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][4]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][4]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][4]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][4]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][4]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][4]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][4]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][4]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][4]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][4]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][4]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][4]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][4]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][4]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][4]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][4]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][4]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][4]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][4]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][4]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][4]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][4]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][4]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][4]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][4]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][4]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][4]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][4]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][4]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][4]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][4]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][4]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][4]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][4]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][4]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][4]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][4]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][4]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][4]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][4]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][4]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][4]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][4]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][4]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][4]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][4]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][4]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][4]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][4]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][4]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][4]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][4]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][4]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][4]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][4]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][4]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][4]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][4]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][4]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][4]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][4]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][4]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][4]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][4]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][4]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][4]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][4]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][4]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][4]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][4]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][4]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][4]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][5]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][5]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][5]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][5]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][5]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][5]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][5]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][5]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][5]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][5]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][5]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][5]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][5]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][5]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][5]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][5]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][5]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][5]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][5]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][5]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][5]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][5]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][5]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][5]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][5]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][5]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][5]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][5]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][5]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][5]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][5]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][5]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][5]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][5]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][5]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][5]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][5]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][5]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][5]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][5]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][5]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][5]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][5]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][5]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][5]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][5]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][5]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][5]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][5]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][5]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[5]),
        .Q(\wma_fifo_mem_reg[511][Data][5]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][5]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][5]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][5]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][5]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][5]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][5]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][5]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][5]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][5]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][5]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][5]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][5]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][5]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][5]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][5]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][5]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][5]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][5]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][5]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][5]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][5]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][5]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][5]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][5]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][5]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][5]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][5]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][5]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][5]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][5]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][5]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][5]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][5]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][5]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][5]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][5]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][5]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][5]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][5]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][5]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][5]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][5]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][5]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][5]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][5]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][5]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][5]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][5]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][5]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][5]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][5]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][5]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][5]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][5]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][5]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][5]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][5]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][5]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][5]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][5]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][5]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][5]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][5]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][5]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][5]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][5]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][5]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][5]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][5]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][5]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][5]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][5]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][5]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][5]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][5]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][5]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][6]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][6]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][6]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][6]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][6]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][6]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][6]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][6]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][6]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][6]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][6]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][6]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][6]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][6]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][6]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][6]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][6]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][6]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][6]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][6]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][6]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][6]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][6]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][6]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][6]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][6]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][6]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][6]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][6]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][6]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][6]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][6]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][6]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][6]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][6]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][6]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][6]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][6]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][6]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][6]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][6]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][6]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][6]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][6]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][6]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][6]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][6]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][6]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][6]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][6]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[6]),
        .Q(\wma_fifo_mem_reg[511][Data][6]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][6]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][6]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][6]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][6]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][6]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][6]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][6]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][6]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][6]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][6]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][6]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][6]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][6]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][6]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][6]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][6]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][6]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][6]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][6]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][6]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][6]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][6]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][6]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][6]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][6]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][6]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][6]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][6]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][6]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][6]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][6]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][6]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][6]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][6]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][6]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][6]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][6]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][6]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][6]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][6]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][6]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][6]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][6]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][6]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][6]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][6]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][6]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][6]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][6]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][6]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][6]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][6]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][6]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][6]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][6]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][6]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][6]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][6]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][6]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][6]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][6]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][6]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][6]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][6]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][6]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][6]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][6]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][6]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][6]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][6]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][6]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][6]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][6]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][6]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][6]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][6]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][7]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][7]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][7]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][7]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][7]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][7]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][7]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][7]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][7]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][7]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][7]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][7]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][7]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][7]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][7]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][7]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][7]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][7]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][7]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][7]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][7]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][7]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][7]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][7]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][7]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][7]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][7]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][7]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][7]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][7]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][7]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][7]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][7]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][7]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][7]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][7]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][7]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][7]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][7]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][7]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][7]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][7]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][7]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][7]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][7]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][7]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][7]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][7]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][7]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][7]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[7]),
        .Q(\wma_fifo_mem_reg[511][Data][7]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][7]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][7]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][7]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][7]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][7]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][7]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][7]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][7]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][7]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][7]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][7]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][7]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][7]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][7]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][7]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][7]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][7]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][7]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][7]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][7]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][7]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][7]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][7]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][7]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][7]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][7]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][7]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][7]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][7]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][7]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][7]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][7]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][7]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][7]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][7]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][7]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][7]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][7]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][7]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][7]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][7]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][7]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][7]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][7]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][7]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][7]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][7]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][7]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][7]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][7]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][7]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][7]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][7]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][7]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][7]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][7]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][7]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][7]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][7]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][7]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][7]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][7]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][7]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][7]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][7]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][7]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][7]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][7]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][7]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][7]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][7]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][7]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][7]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][7]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][7]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][7]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][8]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][8]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][8]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][8]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][8]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][8]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][8]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][8]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][8]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][8]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][8]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][8]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][8]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][8]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][8]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][8]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][8]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][8]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][8]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][8]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][8]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][8]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][8]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][8]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][8]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][8]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][8]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][8]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][8]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][8]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][8]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][8]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][8]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][8]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][8]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][8]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][8]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][8]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][8]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][8]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][8]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][8]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][8]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][8]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][8]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][8]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][8]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][8]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][8]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][8]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[8]),
        .Q(\wma_fifo_mem_reg[511][Data][8]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][8]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][8]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][8]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][8]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][8]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][8]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][8]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][8]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][8]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][8]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][8]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][8]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][8]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][8]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][8]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][8]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][8]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][8]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][8]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][8]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][8]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][8]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][8]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][8]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][8]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][8]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][8]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][8]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][8]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][8]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][8]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][8]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][8]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][8]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][8]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][8]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][8]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][8]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][8]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][8]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][8]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][8]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][8]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][8]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][8]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][8]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][8]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][8]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][8]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][8]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][8]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][8]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][8]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][8]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][8]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][8]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][8]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][8]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][8]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][8]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][8]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][8]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][8]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][8]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][8]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][8]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][8]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][8]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][8]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][8]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][8]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][8]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][8]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][8]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][8]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][8]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Data][9]_mux 
       (.I0(\wma_fifo_mem_reg[511][Data][9]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][9]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][9]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][9]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Data][9]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][9]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][9]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][9]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Data][9]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][9]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][9]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][9]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Data][9]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][9]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][9]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Data][9]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Data][9]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][9]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][9]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][9]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Data][9]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][9]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][9]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][9]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Data][9]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][9]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][9]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][9]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Data][9]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][9]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][9]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Data][9]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Data][9]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][9]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][9]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Data][9]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Data][9]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][9]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][9]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][9]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Data][9]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][9]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][9]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Data][9]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Data][9]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Data][9]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Data][9]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][9]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][9]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_data[9]),
        .Q(\wma_fifo_mem_reg[511][Data][9]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][9]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][9]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][9]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][9]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][9]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][9]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][9]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][9]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][9]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][9]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][9]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][9]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][9]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][9]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][9]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][9]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][9]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][9]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][9]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][9]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][9]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][9]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][9]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][9]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][9]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][9]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][9]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][9]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][9]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][9]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][9]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][9]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][9]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][9]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][9]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Data][9]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][9]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][9]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][9]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][9]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][9]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][9]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][9]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][9]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][9]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][9]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][9]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][9]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][9]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][9]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][9]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][9]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][9]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][9]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][9]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][9]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][9]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][9]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][9]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][9]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][9]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][9]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][9]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][9]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][9]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][9]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][9]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][9]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][9]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][9]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][9]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Data][9]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Data][9]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Data][9]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Data][9]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Data][9]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Last][0]_mux 
       (.I0(\wma_fifo_mem_reg[511][Last][0]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Last][0]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Last][0]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Last][0]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Last][0]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Last][0]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Last][0]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Last][0]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Last][0]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Last][0]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Last][0]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Last][0]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Last][0]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Last][0]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Last][0]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Last][0]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Last][0]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Last][0]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Last][0]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Last][0]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Last][0]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Last][0]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Last][0]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Last][0]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Last][0]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Last][0]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Last][0]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Last][0]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Last][0]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Last][0]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Last][0]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Last][0]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Last][0]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Last][0]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Last][0]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Last][0]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Last][0]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Last][0]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Last][0]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Last][0]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Last][0]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Last][0]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Last][0]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Last][0]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Last][0]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Last][0]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Last][0]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last][0]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Last][0]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(in),
        .Q(\wma_fifo_mem_reg[511][Last][0]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Last][0]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last][0]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Last][0]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Last][0]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Last][0]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Last][0]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last][0]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Last][0]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Last][0]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Last][0]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Last][0]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last][0]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Last][0]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Last][0]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Last][0]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Last][0]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last][0]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Last][0]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Last][0]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Last][0]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Last][0]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last][0]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Last][0]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Last][0]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Last][0]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Last][0]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last][0]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Last][0]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Last][0]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Last][0]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Last][0]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last][0]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Last][0]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Last][0]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Last][0]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Last][0]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last][0]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Last][0]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Last][0]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Last][0]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Last][0]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last][0]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Last][0]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Last][0]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Last][0]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Last][0]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last][0]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Last][0]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Last][0]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Last][0]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Last][0]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last][0]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Last][0]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Last][0]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Last][0]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Last][0]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last][0]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Last][0]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Last][0]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Last][0]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Last][0]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last][0]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Last][0]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Last][0]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Last][0]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Last][0]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last][0]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Last][0]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Last][0]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Last][0]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Last][0]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Last][0]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Last][0]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Last][0]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Last][0]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Last][0]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Strb][0]_mux 
       (.I0(\wma_fifo_mem_reg[511][Strb][0]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][0]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][0]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Strb][0]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Strb][0]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][0]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][0]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Strb][0]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Strb][0]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][0]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][0]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Strb][0]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Strb][0]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][0]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][0]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Strb][0]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Strb][0]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][0]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][0]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Strb][0]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Strb][0]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][0]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][0]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Strb][0]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Strb][0]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][0]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][0]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Strb][0]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Strb][0]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][0]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][0]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Strb][0]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Strb][0]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][0]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][0]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Strb][0]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Strb][0]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][0]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][0]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Strb][0]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Strb][0]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][0]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][0]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Strb][0]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Strb][0]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][0]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][0]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][0]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][0]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_strb[0]),
        .Q(\wma_fifo_mem_reg[511][Strb][0]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][0]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][0]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][0]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][0]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][0]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][0]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][0]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][0]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][0]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][0]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][0]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][0]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][0]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][0]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][0]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][0]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][0]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][0]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][0]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][0]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][0]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][0]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][0]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][0]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][0]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][0]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][0]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][0]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][0]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][0]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][0]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][0]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][0]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][0]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][0]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Strb][0]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][0]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][0]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][0]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][0]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][0]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][0]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][0]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][0]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][0]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][0]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][0]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][0]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][0]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][0]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][0]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][0]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][0]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][0]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][0]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][0]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][0]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][0]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][0]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][0]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][0]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][0]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][0]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][0]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][0]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][0]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][0]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][0]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][0]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][0]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][0]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][0]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][0]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][0]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][0]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][0]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Strb][1]_mux 
       (.I0(\wma_fifo_mem_reg[511][Strb][1]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][1]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][1]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Strb][1]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Strb][1]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][1]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][1]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Strb][1]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Strb][1]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][1]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][1]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Strb][1]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Strb][1]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][1]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][1]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Strb][1]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Strb][1]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][1]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][1]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Strb][1]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Strb][1]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][1]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][1]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Strb][1]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Strb][1]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][1]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][1]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Strb][1]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Strb][1]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][1]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][1]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Strb][1]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Strb][1]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][1]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][1]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Strb][1]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Strb][1]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][1]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][1]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Strb][1]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Strb][1]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][1]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][1]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Strb][1]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Strb][1]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][1]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][1]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][1]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][1]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_strb[1]),
        .Q(\wma_fifo_mem_reg[511][Strb][1]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][1]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][1]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][1]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][1]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][1]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][1]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][1]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][1]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][1]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][1]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][1]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][1]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][1]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][1]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][1]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][1]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][1]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][1]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][1]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][1]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][1]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][1]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][1]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][1]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][1]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][1]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][1]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][1]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][1]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][1]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][1]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][1]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][1]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][1]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][1]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Strb][1]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][1]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][1]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][1]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][1]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][1]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][1]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][1]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][1]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][1]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][1]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][1]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][1]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][1]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][1]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][1]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][1]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][1]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][1]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][1]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][1]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][1]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][1]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][1]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][1]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][1]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][1]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][1]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][1]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][1]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][1]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][1]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][1]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][1]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][1]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][1]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][1]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][1]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][1]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][1]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][1]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Strb][2]_mux 
       (.I0(\wma_fifo_mem_reg[511][Strb][2]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][2]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][2]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Strb][2]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Strb][2]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][2]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][2]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Strb][2]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Strb][2]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][2]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][2]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Strb][2]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Strb][2]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][2]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][2]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Strb][2]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Strb][2]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][2]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][2]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Strb][2]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Strb][2]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][2]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][2]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Strb][2]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Strb][2]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][2]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][2]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Strb][2]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Strb][2]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][2]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][2]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Strb][2]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Strb][2]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][2]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][2]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Strb][2]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Strb][2]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][2]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][2]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Strb][2]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Strb][2]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][2]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][2]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Strb][2]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Strb][2]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][2]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][2]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][2]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][2]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_strb[2]),
        .Q(\wma_fifo_mem_reg[511][Strb][2]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][2]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][2]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][2]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][2]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][2]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][2]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][2]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][2]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][2]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][2]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][2]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][2]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][2]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][2]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][2]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][2]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][2]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][2]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][2]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][2]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][2]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][2]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][2]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][2]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][2]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][2]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][2]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][2]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][2]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][2]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][2]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][2]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][2]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][2]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][2]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Strb][2]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][2]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][2]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][2]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][2]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][2]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][2]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][2]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][2]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][2]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][2]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][2]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][2]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][2]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][2]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][2]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][2]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][2]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][2]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][2]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][2]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][2]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][2]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][2]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][2]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][2]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][2]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][2]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][2]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][2]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][2]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][2]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][2]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][2]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][2]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][2]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][2]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][2]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][2]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][2]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][2]_srl32__9_n_1 ));
  MUXF7 \wma_fifo_mem_reg[511][Strb][3]_mux 
       (.I0(\wma_fifo_mem_reg[511][Strb][3]_srl32_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][3]_srl32__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][3]_mux_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Strb][3]_mux__0 
       (.I0(\wma_fifo_mem_reg[511][Strb][3]_srl32__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][3]_srl32__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][3]_mux__0_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Strb][3]_mux__1 
       (.I0(\wma_fifo_mem_reg[511][Strb][3]_srl32__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][3]_srl32__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][3]_mux__1_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Strb][3]_mux__10 
       (.I0(\wma_fifo_mem_reg[511][Strb][3]_mux__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][3]_mux__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][3]_mux__10_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF7 \wma_fifo_mem_reg[511][Strb][3]_mux__2 
       (.I0(\wma_fifo_mem_reg[511][Strb][3]_srl32__5_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][3]_srl32__6_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][3]_mux__2_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Strb][3]_mux__3 
       (.I0(\wma_fifo_mem_reg[511][Strb][3]_srl32__7_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][3]_srl32__8_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][3]_mux__3_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Strb][3]_mux__4 
       (.I0(\wma_fifo_mem_reg[511][Strb][3]_srl32__9_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][3]_srl32__10_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][3]_mux__4_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Strb][3]_mux__5 
       (.I0(\wma_fifo_mem_reg[511][Strb][3]_srl32__11_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][3]_srl32__12_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][3]_mux__5_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF7 \wma_fifo_mem_reg[511][Strb][3]_mux__6 
       (.I0(\wma_fifo_mem_reg[511][Strb][3]_srl32__13_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][3]_srl32__14_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][3]_mux__6_n_0 ),
        .S(wma_read_fifo_addr[5]));
  MUXF8 \wma_fifo_mem_reg[511][Strb][3]_mux__7 
       (.I0(\wma_fifo_mem_reg[511][Strb][3]_mux_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][3]_mux__0_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][3]_mux__7_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Strb][3]_mux__8 
       (.I0(\wma_fifo_mem_reg[511][Strb][3]_mux__1_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][3]_mux__2_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][3]_mux__8_n_0 ),
        .S(wma_read_fifo_addr[6]));
  MUXF8 \wma_fifo_mem_reg[511][Strb][3]_mux__9 
       (.I0(\wma_fifo_mem_reg[511][Strb][3]_mux__3_n_0 ),
        .I1(\wma_fifo_mem_reg[511][Strb][3]_mux__4_n_0 ),
        .O(\wma_fifo_mem_reg[511][Strb][3]_mux__9_n_0 ),
        .S(wma_read_fifo_addr[6]));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][3]_srl32 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][3]_srl32 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(update_wma_strb[3]),
        .Q(\wma_fifo_mem_reg[511][Strb][3]_srl32_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][3]_srl32_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][3]_srl32__0 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][3]_srl32__0 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][3]_srl32_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][3]_srl32__0_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][3]_srl32__0_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][3]_srl32__1 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][3]_srl32__1 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][3]_srl32__0_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][3]_srl32__1_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][3]_srl32__1_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][3]_srl32__10 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][3]_srl32__10 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][3]_srl32__9_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][3]_srl32__10_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][3]_srl32__10_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][3]_srl32__11 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][3]_srl32__11 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][3]_srl32__10_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][3]_srl32__11_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][3]_srl32__11_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][3]_srl32__12 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][3]_srl32__12 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][3]_srl32__11_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][3]_srl32__12_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][3]_srl32__12_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][3]_srl32__13 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][3]_srl32__13 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][3]_srl32__12_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][3]_srl32__13_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][3]_srl32__13_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][3]_srl32__14 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][3]_srl32__14 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][3]_srl32__13_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][3]_srl32__14_n_0 ),
        .Q31(\NLW_wma_fifo_mem_reg[511][Strb][3]_srl32__14_Q31_UNCONNECTED ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][3]_srl32__2 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][3]_srl32__2 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][3]_srl32__1_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][3]_srl32__2_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][3]_srl32__2_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][3]_srl32__3 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][3]_srl32__3 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][3]_srl32__2_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][3]_srl32__3_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][3]_srl32__3_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][3]_srl32__4 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][3]_srl32__4 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][3]_srl32__3_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][3]_srl32__4_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][3]_srl32__4_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][3]_srl32__5 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][3]_srl32__5 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][3]_srl32__4_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][3]_srl32__5_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][3]_srl32__5_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][3]_srl32__6 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][3]_srl32__6 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][3]_srl32__5_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][3]_srl32__6_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][3]_srl32__6_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][3]_srl32__7 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][3]_srl32__7 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][3]_srl32__6_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][3]_srl32__7_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][3]_srl32__7_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][3]_srl32__8 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][3]_srl32__8 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][3]_srl32__7_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][3]_srl32__8_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][3]_srl32__8_n_1 ));
  (* srl_bus_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb] " *) 
  (* srl_name = "U0/\CC/Gen_Block[0].UD/wma_fifo_mem_reg[511][Strb][3]_srl32__9 " *) 
  SRLC32E #(
    .INIT(32'h00000000)) 
    \wma_fifo_mem_reg[511][Strb][3]_srl32__9 
       (.A(wma_read_fifo_addr[4:0]),
        .CE(wma_word_done_d1),
        .CLK(ACLK),
        .D(\wma_fifo_mem_reg[511][Strb][3]_srl32__8_n_1 ),
        .Q(\wma_fifo_mem_reg[511][Strb][3]_srl32__9_n_0 ),
        .Q31(\wma_fifo_mem_reg[511][Strb][3]_srl32__9_n_1 ));
  FDRE wma_merge_done_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(FIFO_WMA_Pointer_n_7),
        .Q(wma_merge_done),
        .R(1'b0));
  LUT6 #(
    .INIT(64'h000000007770777F)) 
    wma_word_done_d1_i_2
       (.I0(p_1_in[0]),
        .I1(\wm_remove_unaligned_reg_n_0_[0] ),
        .I2(wma_word_done_d1_i_3_n_0),
        .I3(wm_use_bits[0]),
        .I4(wm_offset[0]),
        .I5(update_wr_offset_cnt_cmb[1]),
        .O(wma_word_done_d1_i_2_n_0));
  LUT2 #(
    .INIT(4'hB)) 
    wma_word_done_d1_i_3
       (.I0(wm_allocate_reg_n_0),
        .I1(wm_kind),
        .O(wma_word_done_d1_i_3_n_0));
  FDRE wma_word_done_d1_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(FIFO_WMA_Pointer_n_12),
        .Q(wma_word_done_d1),
        .R(1'b0));
  FDRE write_data_full_d1_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(write_data_full),
        .Q(write_data_full_d1),
        .R(Q));
endmodule

(* C_BASEADDR = "64'b0000000000000000000000000000000011111111111111111111111111111111" *) (* C_CACHE_BLOCKS = "1" *) (* C_CACHE_DATA_WIDTH = "32" *) 
(* C_CACHE_LINE_LENGTH = "16" *) (* C_CACHE_SIZE = "32768" *) (* C_ENABLE_COHERENCY = "0" *) 
(* C_ENABLE_CTRL = "0" *) (* C_ENABLE_ERROR_HANDLING = "0" *) (* C_ENABLE_EXCLUSIVE = "0" *) 
(* C_ENABLE_NON_SECURE = "0" *) (* C_ENABLE_PEER_PORT_DATA = "0" *) (* C_ENABLE_STATISTICS = "0" *) 
(* C_ENABLE_VERSION_REGISTER = "0" *) (* C_FAMILY = "zynq" *) (* C_FREQ = "0" *) 
(* C_GEN_MATCH_Lx_CACHE = "0" *) (* C_HIGHADDR = "64'b0000000000000000000000000000000000000000000000000000000000000000" *) (* C_INSTANCE = "system_cache" *) 
(* C_KEEP_SHARED_WRITE = "1" *) (* C_Lx_CACHE_LINE_LENGTH = "4" *) (* C_Lx_CACHE_SIZE = "8192" *) 
(* C_Lx_NUM_WAYS = "1" *) (* C_M0_AXI_ADDR_WIDTH = "32" *) (* C_M0_AXI_DATA_WIDTH = "32" *) 
(* C_M0_AXI_RRESP_WIDTH = "2" *) (* C_M0_AXI_THREAD_ID_WIDTH = "1" *) (* C_M1_AXI_ADDR_WIDTH = "32" *) 
(* C_M1_AXI_DATA_WIDTH = "32" *) (* C_M1_AXI_RRESP_WIDTH = "2" *) (* C_M1_AXI_THREAD_ID_WIDTH = "1" *) 
(* C_M2_AXI_ADDR_WIDTH = "32" *) (* C_M2_AXI_DATA_WIDTH = "32" *) (* C_M2_AXI_RRESP_WIDTH = "2" *) 
(* C_M2_AXI_THREAD_ID_WIDTH = "1" *) (* C_M3_AXI_ADDR_WIDTH = "32" *) (* C_M3_AXI_DATA_WIDTH = "32" *) 
(* C_M3_AXI_RRESP_WIDTH = "2" *) (* C_M3_AXI_THREAD_ID_WIDTH = "1" *) (* C_NUM_GENERIC_PORTS = "0" *) 
(* C_NUM_MASTER_PORTS = "1" *) (* C_NUM_OPTIMIZED_PORTS = "2" *) (* C_NUM_WAYS = "2" *) 
(* C_READ_EXCLUSIVE_CLEAN = "1" *) (* C_READ_ONLY_UNIQUE = "0" *) (* C_S0_AXI_ADDR_WIDTH = "32" *) 
(* C_S0_AXI_DATA_WIDTH = "32" *) (* C_S0_AXI_FORCE_READ_ALLOCATE = "0" *) (* C_S0_AXI_FORCE_READ_BUFFER = "0" *) 
(* C_S0_AXI_FORCE_WRITE_ALLOCATE = "0" *) (* C_S0_AXI_FORCE_WRITE_BUFFER = "0" *) (* C_S0_AXI_GEN_ADDR_WIDTH = "32" *) 
(* C_S0_AXI_GEN_DATA_WIDTH = "32" *) (* C_S0_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) (* C_S0_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
(* C_S0_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) (* C_S0_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) (* C_S0_AXI_GEN_ID_WIDTH = "1" *) 
(* C_S0_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S0_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) (* C_S0_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
(* C_S0_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S0_AXI_GEN_SUPPORT_DIRTY = "0" *) (* C_S0_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
(* C_S0_AXI_ID_WIDTH = "1" *) (* C_S0_AXI_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S0_AXI_PROHIBIT_READ_BUFFER = "0" *) 
(* C_S0_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) (* C_S0_AXI_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S0_AXI_RRESP_WIDTH = "2" *) 
(* C_S0_AXI_SUPPORT_DIRTY = "0" *) (* C_S0_AXI_SUPPORT_UNIQUE = "0" *) (* C_S10_AXI_ADDR_WIDTH = "32" *) 
(* C_S10_AXI_DATA_WIDTH = "32" *) (* C_S10_AXI_FORCE_READ_ALLOCATE = "0" *) (* C_S10_AXI_FORCE_READ_BUFFER = "0" *) 
(* C_S10_AXI_FORCE_WRITE_ALLOCATE = "0" *) (* C_S10_AXI_FORCE_WRITE_BUFFER = "0" *) (* C_S10_AXI_GEN_ADDR_WIDTH = "32" *) 
(* C_S10_AXI_GEN_DATA_WIDTH = "32" *) (* C_S10_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) (* C_S10_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
(* C_S10_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) (* C_S10_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) (* C_S10_AXI_GEN_ID_WIDTH = "1" *) 
(* C_S10_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S10_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) (* C_S10_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
(* C_S10_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S10_AXI_GEN_SUPPORT_DIRTY = "0" *) (* C_S10_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
(* C_S10_AXI_ID_WIDTH = "1" *) (* C_S10_AXI_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S10_AXI_PROHIBIT_READ_BUFFER = "0" *) 
(* C_S10_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) (* C_S10_AXI_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S10_AXI_RRESP_WIDTH = "2" *) 
(* C_S10_AXI_SUPPORT_DIRTY = "0" *) (* C_S10_AXI_SUPPORT_UNIQUE = "0" *) (* C_S11_AXI_ADDR_WIDTH = "32" *) 
(* C_S11_AXI_DATA_WIDTH = "32" *) (* C_S11_AXI_FORCE_READ_ALLOCATE = "0" *) (* C_S11_AXI_FORCE_READ_BUFFER = "0" *) 
(* C_S11_AXI_FORCE_WRITE_ALLOCATE = "0" *) (* C_S11_AXI_FORCE_WRITE_BUFFER = "0" *) (* C_S11_AXI_GEN_ADDR_WIDTH = "32" *) 
(* C_S11_AXI_GEN_DATA_WIDTH = "32" *) (* C_S11_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) (* C_S11_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
(* C_S11_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) (* C_S11_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) (* C_S11_AXI_GEN_ID_WIDTH = "1" *) 
(* C_S11_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S11_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) (* C_S11_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
(* C_S11_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S11_AXI_GEN_SUPPORT_DIRTY = "0" *) (* C_S11_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
(* C_S11_AXI_ID_WIDTH = "1" *) (* C_S11_AXI_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S11_AXI_PROHIBIT_READ_BUFFER = "0" *) 
(* C_S11_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) (* C_S11_AXI_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S11_AXI_RRESP_WIDTH = "2" *) 
(* C_S11_AXI_SUPPORT_DIRTY = "0" *) (* C_S11_AXI_SUPPORT_UNIQUE = "0" *) (* C_S12_AXI_ADDR_WIDTH = "32" *) 
(* C_S12_AXI_DATA_WIDTH = "32" *) (* C_S12_AXI_FORCE_READ_ALLOCATE = "0" *) (* C_S12_AXI_FORCE_READ_BUFFER = "0" *) 
(* C_S12_AXI_FORCE_WRITE_ALLOCATE = "0" *) (* C_S12_AXI_FORCE_WRITE_BUFFER = "0" *) (* C_S12_AXI_GEN_ADDR_WIDTH = "32" *) 
(* C_S12_AXI_GEN_DATA_WIDTH = "32" *) (* C_S12_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) (* C_S12_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
(* C_S12_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) (* C_S12_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) (* C_S12_AXI_GEN_ID_WIDTH = "1" *) 
(* C_S12_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S12_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) (* C_S12_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
(* C_S12_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S12_AXI_GEN_SUPPORT_DIRTY = "0" *) (* C_S12_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
(* C_S12_AXI_ID_WIDTH = "1" *) (* C_S12_AXI_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S12_AXI_PROHIBIT_READ_BUFFER = "0" *) 
(* C_S12_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) (* C_S12_AXI_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S12_AXI_RRESP_WIDTH = "2" *) 
(* C_S12_AXI_SUPPORT_DIRTY = "0" *) (* C_S12_AXI_SUPPORT_UNIQUE = "0" *) (* C_S13_AXI_ADDR_WIDTH = "32" *) 
(* C_S13_AXI_DATA_WIDTH = "32" *) (* C_S13_AXI_FORCE_READ_ALLOCATE = "0" *) (* C_S13_AXI_FORCE_READ_BUFFER = "0" *) 
(* C_S13_AXI_FORCE_WRITE_ALLOCATE = "0" *) (* C_S13_AXI_FORCE_WRITE_BUFFER = "0" *) (* C_S13_AXI_GEN_ADDR_WIDTH = "32" *) 
(* C_S13_AXI_GEN_DATA_WIDTH = "32" *) (* C_S13_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) (* C_S13_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
(* C_S13_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) (* C_S13_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) (* C_S13_AXI_GEN_ID_WIDTH = "1" *) 
(* C_S13_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S13_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) (* C_S13_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
(* C_S13_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S13_AXI_GEN_SUPPORT_DIRTY = "0" *) (* C_S13_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
(* C_S13_AXI_ID_WIDTH = "1" *) (* C_S13_AXI_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S13_AXI_PROHIBIT_READ_BUFFER = "0" *) 
(* C_S13_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) (* C_S13_AXI_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S13_AXI_RRESP_WIDTH = "2" *) 
(* C_S13_AXI_SUPPORT_DIRTY = "0" *) (* C_S13_AXI_SUPPORT_UNIQUE = "0" *) (* C_S14_AXI_ADDR_WIDTH = "32" *) 
(* C_S14_AXI_DATA_WIDTH = "32" *) (* C_S14_AXI_FORCE_READ_ALLOCATE = "0" *) (* C_S14_AXI_FORCE_READ_BUFFER = "0" *) 
(* C_S14_AXI_FORCE_WRITE_ALLOCATE = "0" *) (* C_S14_AXI_FORCE_WRITE_BUFFER = "0" *) (* C_S14_AXI_GEN_ADDR_WIDTH = "32" *) 
(* C_S14_AXI_GEN_DATA_WIDTH = "32" *) (* C_S14_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) (* C_S14_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
(* C_S14_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) (* C_S14_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) (* C_S14_AXI_GEN_ID_WIDTH = "1" *) 
(* C_S14_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S14_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) (* C_S14_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
(* C_S14_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S14_AXI_GEN_SUPPORT_DIRTY = "0" *) (* C_S14_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
(* C_S14_AXI_ID_WIDTH = "1" *) (* C_S14_AXI_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S14_AXI_PROHIBIT_READ_BUFFER = "0" *) 
(* C_S14_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) (* C_S14_AXI_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S14_AXI_RRESP_WIDTH = "2" *) 
(* C_S14_AXI_SUPPORT_DIRTY = "0" *) (* C_S14_AXI_SUPPORT_UNIQUE = "0" *) (* C_S15_AXI_ADDR_WIDTH = "32" *) 
(* C_S15_AXI_DATA_WIDTH = "32" *) (* C_S15_AXI_FORCE_READ_ALLOCATE = "0" *) (* C_S15_AXI_FORCE_READ_BUFFER = "0" *) 
(* C_S15_AXI_FORCE_WRITE_ALLOCATE = "0" *) (* C_S15_AXI_FORCE_WRITE_BUFFER = "0" *) (* C_S15_AXI_GEN_ADDR_WIDTH = "32" *) 
(* C_S15_AXI_GEN_DATA_WIDTH = "32" *) (* C_S15_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) (* C_S15_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
(* C_S15_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) (* C_S15_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) (* C_S15_AXI_GEN_ID_WIDTH = "1" *) 
(* C_S15_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S15_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) (* C_S15_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
(* C_S15_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S15_AXI_GEN_SUPPORT_DIRTY = "0" *) (* C_S15_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
(* C_S15_AXI_ID_WIDTH = "1" *) (* C_S15_AXI_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S15_AXI_PROHIBIT_READ_BUFFER = "0" *) 
(* C_S15_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) (* C_S15_AXI_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S15_AXI_RRESP_WIDTH = "2" *) 
(* C_S15_AXI_SUPPORT_DIRTY = "0" *) (* C_S15_AXI_SUPPORT_UNIQUE = "0" *) (* C_S1_AXI_ADDR_WIDTH = "32" *) 
(* C_S1_AXI_DATA_WIDTH = "32" *) (* C_S1_AXI_FORCE_READ_ALLOCATE = "0" *) (* C_S1_AXI_FORCE_READ_BUFFER = "0" *) 
(* C_S1_AXI_FORCE_WRITE_ALLOCATE = "0" *) (* C_S1_AXI_FORCE_WRITE_BUFFER = "0" *) (* C_S1_AXI_GEN_ADDR_WIDTH = "32" *) 
(* C_S1_AXI_GEN_DATA_WIDTH = "32" *) (* C_S1_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) (* C_S1_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
(* C_S1_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) (* C_S1_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) (* C_S1_AXI_GEN_ID_WIDTH = "1" *) 
(* C_S1_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S1_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) (* C_S1_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
(* C_S1_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S1_AXI_GEN_SUPPORT_DIRTY = "0" *) (* C_S1_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
(* C_S1_AXI_ID_WIDTH = "1" *) (* C_S1_AXI_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S1_AXI_PROHIBIT_READ_BUFFER = "0" *) 
(* C_S1_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) (* C_S1_AXI_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S1_AXI_RRESP_WIDTH = "2" *) 
(* C_S1_AXI_SUPPORT_DIRTY = "0" *) (* C_S1_AXI_SUPPORT_UNIQUE = "0" *) (* C_S2_AXI_ADDR_WIDTH = "32" *) 
(* C_S2_AXI_DATA_WIDTH = "32" *) (* C_S2_AXI_FORCE_READ_ALLOCATE = "0" *) (* C_S2_AXI_FORCE_READ_BUFFER = "0" *) 
(* C_S2_AXI_FORCE_WRITE_ALLOCATE = "0" *) (* C_S2_AXI_FORCE_WRITE_BUFFER = "0" *) (* C_S2_AXI_GEN_ADDR_WIDTH = "32" *) 
(* C_S2_AXI_GEN_DATA_WIDTH = "32" *) (* C_S2_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) (* C_S2_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
(* C_S2_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) (* C_S2_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) (* C_S2_AXI_GEN_ID_WIDTH = "1" *) 
(* C_S2_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S2_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) (* C_S2_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
(* C_S2_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S2_AXI_GEN_SUPPORT_DIRTY = "0" *) (* C_S2_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
(* C_S2_AXI_ID_WIDTH = "1" *) (* C_S2_AXI_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S2_AXI_PROHIBIT_READ_BUFFER = "0" *) 
(* C_S2_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) (* C_S2_AXI_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S2_AXI_RRESP_WIDTH = "2" *) 
(* C_S2_AXI_SUPPORT_DIRTY = "0" *) (* C_S2_AXI_SUPPORT_UNIQUE = "0" *) (* C_S3_AXI_ADDR_WIDTH = "32" *) 
(* C_S3_AXI_DATA_WIDTH = "32" *) (* C_S3_AXI_FORCE_READ_ALLOCATE = "0" *) (* C_S3_AXI_FORCE_READ_BUFFER = "0" *) 
(* C_S3_AXI_FORCE_WRITE_ALLOCATE = "0" *) (* C_S3_AXI_FORCE_WRITE_BUFFER = "0" *) (* C_S3_AXI_GEN_ADDR_WIDTH = "32" *) 
(* C_S3_AXI_GEN_DATA_WIDTH = "32" *) (* C_S3_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) (* C_S3_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
(* C_S3_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) (* C_S3_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) (* C_S3_AXI_GEN_ID_WIDTH = "1" *) 
(* C_S3_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S3_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) (* C_S3_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
(* C_S3_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S3_AXI_GEN_SUPPORT_DIRTY = "0" *) (* C_S3_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
(* C_S3_AXI_ID_WIDTH = "1" *) (* C_S3_AXI_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S3_AXI_PROHIBIT_READ_BUFFER = "0" *) 
(* C_S3_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) (* C_S3_AXI_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S3_AXI_RRESP_WIDTH = "2" *) 
(* C_S3_AXI_SUPPORT_DIRTY = "0" *) (* C_S3_AXI_SUPPORT_UNIQUE = "0" *) (* C_S4_AXI_ADDR_WIDTH = "32" *) 
(* C_S4_AXI_DATA_WIDTH = "32" *) (* C_S4_AXI_FORCE_READ_ALLOCATE = "0" *) (* C_S4_AXI_FORCE_READ_BUFFER = "0" *) 
(* C_S4_AXI_FORCE_WRITE_ALLOCATE = "0" *) (* C_S4_AXI_FORCE_WRITE_BUFFER = "0" *) (* C_S4_AXI_GEN_ADDR_WIDTH = "32" *) 
(* C_S4_AXI_GEN_DATA_WIDTH = "32" *) (* C_S4_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) (* C_S4_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
(* C_S4_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) (* C_S4_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) (* C_S4_AXI_GEN_ID_WIDTH = "1" *) 
(* C_S4_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S4_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) (* C_S4_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
(* C_S4_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S4_AXI_GEN_SUPPORT_DIRTY = "0" *) (* C_S4_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
(* C_S4_AXI_ID_WIDTH = "1" *) (* C_S4_AXI_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S4_AXI_PROHIBIT_READ_BUFFER = "0" *) 
(* C_S4_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) (* C_S4_AXI_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S4_AXI_RRESP_WIDTH = "2" *) 
(* C_S4_AXI_SUPPORT_DIRTY = "0" *) (* C_S4_AXI_SUPPORT_UNIQUE = "0" *) (* C_S5_AXI_ADDR_WIDTH = "32" *) 
(* C_S5_AXI_DATA_WIDTH = "32" *) (* C_S5_AXI_FORCE_READ_ALLOCATE = "0" *) (* C_S5_AXI_FORCE_READ_BUFFER = "0" *) 
(* C_S5_AXI_FORCE_WRITE_ALLOCATE = "0" *) (* C_S5_AXI_FORCE_WRITE_BUFFER = "0" *) (* C_S5_AXI_GEN_ADDR_WIDTH = "32" *) 
(* C_S5_AXI_GEN_DATA_WIDTH = "32" *) (* C_S5_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) (* C_S5_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
(* C_S5_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) (* C_S5_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) (* C_S5_AXI_GEN_ID_WIDTH = "1" *) 
(* C_S5_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S5_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) (* C_S5_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
(* C_S5_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S5_AXI_GEN_SUPPORT_DIRTY = "0" *) (* C_S5_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
(* C_S5_AXI_ID_WIDTH = "1" *) (* C_S5_AXI_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S5_AXI_PROHIBIT_READ_BUFFER = "0" *) 
(* C_S5_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) (* C_S5_AXI_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S5_AXI_RRESP_WIDTH = "2" *) 
(* C_S5_AXI_SUPPORT_DIRTY = "0" *) (* C_S5_AXI_SUPPORT_UNIQUE = "0" *) (* C_S6_AXI_ADDR_WIDTH = "32" *) 
(* C_S6_AXI_DATA_WIDTH = "32" *) (* C_S6_AXI_FORCE_READ_ALLOCATE = "0" *) (* C_S6_AXI_FORCE_READ_BUFFER = "0" *) 
(* C_S6_AXI_FORCE_WRITE_ALLOCATE = "0" *) (* C_S6_AXI_FORCE_WRITE_BUFFER = "0" *) (* C_S6_AXI_GEN_ADDR_WIDTH = "32" *) 
(* C_S6_AXI_GEN_DATA_WIDTH = "32" *) (* C_S6_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) (* C_S6_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
(* C_S6_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) (* C_S6_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) (* C_S6_AXI_GEN_ID_WIDTH = "1" *) 
(* C_S6_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S6_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) (* C_S6_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
(* C_S6_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S6_AXI_GEN_SUPPORT_DIRTY = "0" *) (* C_S6_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
(* C_S6_AXI_ID_WIDTH = "1" *) (* C_S6_AXI_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S6_AXI_PROHIBIT_READ_BUFFER = "0" *) 
(* C_S6_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) (* C_S6_AXI_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S6_AXI_RRESP_WIDTH = "2" *) 
(* C_S6_AXI_SUPPORT_DIRTY = "0" *) (* C_S6_AXI_SUPPORT_UNIQUE = "0" *) (* C_S7_AXI_ADDR_WIDTH = "32" *) 
(* C_S7_AXI_DATA_WIDTH = "32" *) (* C_S7_AXI_FORCE_READ_ALLOCATE = "0" *) (* C_S7_AXI_FORCE_READ_BUFFER = "0" *) 
(* C_S7_AXI_FORCE_WRITE_ALLOCATE = "0" *) (* C_S7_AXI_FORCE_WRITE_BUFFER = "0" *) (* C_S7_AXI_GEN_ADDR_WIDTH = "32" *) 
(* C_S7_AXI_GEN_DATA_WIDTH = "32" *) (* C_S7_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) (* C_S7_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
(* C_S7_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) (* C_S7_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) (* C_S7_AXI_GEN_ID_WIDTH = "1" *) 
(* C_S7_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S7_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) (* C_S7_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
(* C_S7_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S7_AXI_GEN_SUPPORT_DIRTY = "0" *) (* C_S7_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
(* C_S7_AXI_ID_WIDTH = "1" *) (* C_S7_AXI_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S7_AXI_PROHIBIT_READ_BUFFER = "0" *) 
(* C_S7_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) (* C_S7_AXI_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S7_AXI_RRESP_WIDTH = "2" *) 
(* C_S7_AXI_SUPPORT_DIRTY = "0" *) (* C_S7_AXI_SUPPORT_UNIQUE = "0" *) (* C_S8_AXI_ADDR_WIDTH = "32" *) 
(* C_S8_AXI_DATA_WIDTH = "32" *) (* C_S8_AXI_FORCE_READ_ALLOCATE = "0" *) (* C_S8_AXI_FORCE_READ_BUFFER = "0" *) 
(* C_S8_AXI_FORCE_WRITE_ALLOCATE = "0" *) (* C_S8_AXI_FORCE_WRITE_BUFFER = "0" *) (* C_S8_AXI_GEN_ADDR_WIDTH = "32" *) 
(* C_S8_AXI_GEN_DATA_WIDTH = "32" *) (* C_S8_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) (* C_S8_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
(* C_S8_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) (* C_S8_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) (* C_S8_AXI_GEN_ID_WIDTH = "1" *) 
(* C_S8_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S8_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) (* C_S8_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
(* C_S8_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S8_AXI_GEN_SUPPORT_DIRTY = "0" *) (* C_S8_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
(* C_S8_AXI_ID_WIDTH = "1" *) (* C_S8_AXI_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S8_AXI_PROHIBIT_READ_BUFFER = "0" *) 
(* C_S8_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) (* C_S8_AXI_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S8_AXI_RRESP_WIDTH = "2" *) 
(* C_S8_AXI_SUPPORT_DIRTY = "0" *) (* C_S8_AXI_SUPPORT_UNIQUE = "0" *) (* C_S9_AXI_ADDR_WIDTH = "32" *) 
(* C_S9_AXI_DATA_WIDTH = "32" *) (* C_S9_AXI_FORCE_READ_ALLOCATE = "0" *) (* C_S9_AXI_FORCE_READ_BUFFER = "0" *) 
(* C_S9_AXI_FORCE_WRITE_ALLOCATE = "0" *) (* C_S9_AXI_FORCE_WRITE_BUFFER = "0" *) (* C_S9_AXI_GEN_ADDR_WIDTH = "32" *) 
(* C_S9_AXI_GEN_DATA_WIDTH = "32" *) (* C_S9_AXI_GEN_FORCE_READ_ALLOCATE = "0" *) (* C_S9_AXI_GEN_FORCE_READ_BUFFER = "0" *) 
(* C_S9_AXI_GEN_FORCE_WRITE_ALLOCATE = "0" *) (* C_S9_AXI_GEN_FORCE_WRITE_BUFFER = "0" *) (* C_S9_AXI_GEN_ID_WIDTH = "1" *) 
(* C_S9_AXI_GEN_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S9_AXI_GEN_PROHIBIT_READ_BUFFER = "0" *) (* C_S9_AXI_GEN_PROHIBIT_WRITE_ALLOCATE = "1" *) 
(* C_S9_AXI_GEN_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S9_AXI_GEN_SUPPORT_DIRTY = "0" *) (* C_S9_AXI_GEN_SUPPORT_UNIQUE = "0" *) 
(* C_S9_AXI_ID_WIDTH = "1" *) (* C_S9_AXI_PROHIBIT_READ_ALLOCATE = "0" *) (* C_S9_AXI_PROHIBIT_READ_BUFFER = "0" *) 
(* C_S9_AXI_PROHIBIT_WRITE_ALLOCATE = "1" *) (* C_S9_AXI_PROHIBIT_WRITE_BUFFER = "0" *) (* C_S9_AXI_RRESP_WIDTH = "2" *) 
(* C_S9_AXI_SUPPORT_DIRTY = "0" *) (* C_S9_AXI_SUPPORT_UNIQUE = "0" *) (* C_SNOOP_KEEP_CLEAN_SHARED = "0" *) 
(* C_SNOOP_KEEP_READ_CLEAN = "0" *) (* C_SNOOP_KEEP_READ_NSD = "0" *) (* C_SNOOP_KEEP_READ_SHARED = "0" *) 
(* C_SUPPORT_SNOOP_FILTER = "0" *) (* C_S_AXI_CTRL_ADDR_WIDTH = "17" *) (* C_S_AXI_CTRL_DATA_WIDTH = "32" *) 
(* ORIG_REF_NAME = "system_cache" *) 
module design_1_system_cache_0_0_system_cache
   (ACLK,
    ARESETN,
    S0_AXI_AWID,
    S0_AXI_AWADDR,
    S0_AXI_AWLEN,
    S0_AXI_AWSIZE,
    S0_AXI_AWBURST,
    S0_AXI_AWLOCK,
    S0_AXI_AWCACHE,
    S0_AXI_AWPROT,
    S0_AXI_AWQOS,
    S0_AXI_AWVALID,
    S0_AXI_AWREADY,
    S0_AXI_AWDOMAIN,
    S0_AXI_AWSNOOP,
    S0_AXI_AWBAR,
    S0_AXI_WDATA,
    S0_AXI_WSTRB,
    S0_AXI_WLAST,
    S0_AXI_WVALID,
    S0_AXI_WREADY,
    S0_AXI_BRESP,
    S0_AXI_BID,
    S0_AXI_BVALID,
    S0_AXI_BREADY,
    S0_AXI_WACK,
    S0_AXI_ARID,
    S0_AXI_ARADDR,
    S0_AXI_ARLEN,
    S0_AXI_ARSIZE,
    S0_AXI_ARBURST,
    S0_AXI_ARLOCK,
    S0_AXI_ARCACHE,
    S0_AXI_ARPROT,
    S0_AXI_ARQOS,
    S0_AXI_ARVALID,
    S0_AXI_ARREADY,
    S0_AXI_ARDOMAIN,
    S0_AXI_ARSNOOP,
    S0_AXI_ARBAR,
    S0_AXI_RID,
    S0_AXI_RDATA,
    S0_AXI_RRESP,
    S0_AXI_RLAST,
    S0_AXI_RVALID,
    S0_AXI_RREADY,
    S0_AXI_RACK,
    S0_AXI_ACVALID,
    S0_AXI_ACADDR,
    S0_AXI_ACSNOOP,
    S0_AXI_ACPROT,
    S0_AXI_ACREADY,
    S0_AXI_CRVALID,
    S0_AXI_CRRESP,
    S0_AXI_CRREADY,
    S0_AXI_CDVALID,
    S0_AXI_CDDATA,
    S0_AXI_CDLAST,
    S0_AXI_CDREADY,
    S1_AXI_AWID,
    S1_AXI_AWADDR,
    S1_AXI_AWLEN,
    S1_AXI_AWSIZE,
    S1_AXI_AWBURST,
    S1_AXI_AWLOCK,
    S1_AXI_AWCACHE,
    S1_AXI_AWPROT,
    S1_AXI_AWQOS,
    S1_AXI_AWVALID,
    S1_AXI_AWREADY,
    S1_AXI_AWDOMAIN,
    S1_AXI_AWSNOOP,
    S1_AXI_AWBAR,
    S1_AXI_WDATA,
    S1_AXI_WSTRB,
    S1_AXI_WLAST,
    S1_AXI_WVALID,
    S1_AXI_WREADY,
    S1_AXI_BRESP,
    S1_AXI_BID,
    S1_AXI_BVALID,
    S1_AXI_BREADY,
    S1_AXI_WACK,
    S1_AXI_ARID,
    S1_AXI_ARADDR,
    S1_AXI_ARLEN,
    S1_AXI_ARSIZE,
    S1_AXI_ARBURST,
    S1_AXI_ARLOCK,
    S1_AXI_ARCACHE,
    S1_AXI_ARPROT,
    S1_AXI_ARQOS,
    S1_AXI_ARVALID,
    S1_AXI_ARREADY,
    S1_AXI_ARDOMAIN,
    S1_AXI_ARSNOOP,
    S1_AXI_ARBAR,
    S1_AXI_RID,
    S1_AXI_RDATA,
    S1_AXI_RRESP,
    S1_AXI_RLAST,
    S1_AXI_RVALID,
    S1_AXI_RREADY,
    S1_AXI_RACK,
    S1_AXI_ACVALID,
    S1_AXI_ACADDR,
    S1_AXI_ACSNOOP,
    S1_AXI_ACPROT,
    S1_AXI_ACREADY,
    S1_AXI_CRVALID,
    S1_AXI_CRRESP,
    S1_AXI_CRREADY,
    S1_AXI_CDVALID,
    S1_AXI_CDDATA,
    S1_AXI_CDLAST,
    S1_AXI_CDREADY,
    S2_AXI_AWID,
    S2_AXI_AWADDR,
    S2_AXI_AWLEN,
    S2_AXI_AWSIZE,
    S2_AXI_AWBURST,
    S2_AXI_AWLOCK,
    S2_AXI_AWCACHE,
    S2_AXI_AWPROT,
    S2_AXI_AWQOS,
    S2_AXI_AWVALID,
    S2_AXI_AWREADY,
    S2_AXI_AWDOMAIN,
    S2_AXI_AWSNOOP,
    S2_AXI_AWBAR,
    S2_AXI_WDATA,
    S2_AXI_WSTRB,
    S2_AXI_WLAST,
    S2_AXI_WVALID,
    S2_AXI_WREADY,
    S2_AXI_BRESP,
    S2_AXI_BID,
    S2_AXI_BVALID,
    S2_AXI_BREADY,
    S2_AXI_WACK,
    S2_AXI_ARID,
    S2_AXI_ARADDR,
    S2_AXI_ARLEN,
    S2_AXI_ARSIZE,
    S2_AXI_ARBURST,
    S2_AXI_ARLOCK,
    S2_AXI_ARCACHE,
    S2_AXI_ARPROT,
    S2_AXI_ARQOS,
    S2_AXI_ARVALID,
    S2_AXI_ARREADY,
    S2_AXI_ARDOMAIN,
    S2_AXI_ARSNOOP,
    S2_AXI_ARBAR,
    S2_AXI_RID,
    S2_AXI_RDATA,
    S2_AXI_RRESP,
    S2_AXI_RLAST,
    S2_AXI_RVALID,
    S2_AXI_RREADY,
    S2_AXI_RACK,
    S2_AXI_ACVALID,
    S2_AXI_ACADDR,
    S2_AXI_ACSNOOP,
    S2_AXI_ACPROT,
    S2_AXI_ACREADY,
    S2_AXI_CRVALID,
    S2_AXI_CRRESP,
    S2_AXI_CRREADY,
    S2_AXI_CDVALID,
    S2_AXI_CDDATA,
    S2_AXI_CDLAST,
    S2_AXI_CDREADY,
    S3_AXI_AWID,
    S3_AXI_AWADDR,
    S3_AXI_AWLEN,
    S3_AXI_AWSIZE,
    S3_AXI_AWBURST,
    S3_AXI_AWLOCK,
    S3_AXI_AWCACHE,
    S3_AXI_AWPROT,
    S3_AXI_AWQOS,
    S3_AXI_AWVALID,
    S3_AXI_AWREADY,
    S3_AXI_AWDOMAIN,
    S3_AXI_AWSNOOP,
    S3_AXI_AWBAR,
    S3_AXI_WDATA,
    S3_AXI_WSTRB,
    S3_AXI_WLAST,
    S3_AXI_WVALID,
    S3_AXI_WREADY,
    S3_AXI_BRESP,
    S3_AXI_BID,
    S3_AXI_BVALID,
    S3_AXI_BREADY,
    S3_AXI_WACK,
    S3_AXI_ARID,
    S3_AXI_ARADDR,
    S3_AXI_ARLEN,
    S3_AXI_ARSIZE,
    S3_AXI_ARBURST,
    S3_AXI_ARLOCK,
    S3_AXI_ARCACHE,
    S3_AXI_ARPROT,
    S3_AXI_ARQOS,
    S3_AXI_ARVALID,
    S3_AXI_ARREADY,
    S3_AXI_ARDOMAIN,
    S3_AXI_ARSNOOP,
    S3_AXI_ARBAR,
    S3_AXI_RID,
    S3_AXI_RDATA,
    S3_AXI_RRESP,
    S3_AXI_RLAST,
    S3_AXI_RVALID,
    S3_AXI_RREADY,
    S3_AXI_RACK,
    S3_AXI_ACVALID,
    S3_AXI_ACADDR,
    S3_AXI_ACSNOOP,
    S3_AXI_ACPROT,
    S3_AXI_ACREADY,
    S3_AXI_CRVALID,
    S3_AXI_CRRESP,
    S3_AXI_CRREADY,
    S3_AXI_CDVALID,
    S3_AXI_CDDATA,
    S3_AXI_CDLAST,
    S3_AXI_CDREADY,
    S4_AXI_AWID,
    S4_AXI_AWADDR,
    S4_AXI_AWLEN,
    S4_AXI_AWSIZE,
    S4_AXI_AWBURST,
    S4_AXI_AWLOCK,
    S4_AXI_AWCACHE,
    S4_AXI_AWPROT,
    S4_AXI_AWQOS,
    S4_AXI_AWVALID,
    S4_AXI_AWREADY,
    S4_AXI_AWDOMAIN,
    S4_AXI_AWSNOOP,
    S4_AXI_AWBAR,
    S4_AXI_WDATA,
    S4_AXI_WSTRB,
    S4_AXI_WLAST,
    S4_AXI_WVALID,
    S4_AXI_WREADY,
    S4_AXI_BRESP,
    S4_AXI_BID,
    S4_AXI_BVALID,
    S4_AXI_BREADY,
    S4_AXI_WACK,
    S4_AXI_ARID,
    S4_AXI_ARADDR,
    S4_AXI_ARLEN,
    S4_AXI_ARSIZE,
    S4_AXI_ARBURST,
    S4_AXI_ARLOCK,
    S4_AXI_ARCACHE,
    S4_AXI_ARPROT,
    S4_AXI_ARQOS,
    S4_AXI_ARVALID,
    S4_AXI_ARREADY,
    S4_AXI_ARDOMAIN,
    S4_AXI_ARSNOOP,
    S4_AXI_ARBAR,
    S4_AXI_RID,
    S4_AXI_RDATA,
    S4_AXI_RRESP,
    S4_AXI_RLAST,
    S4_AXI_RVALID,
    S4_AXI_RREADY,
    S4_AXI_RACK,
    S4_AXI_ACVALID,
    S4_AXI_ACADDR,
    S4_AXI_ACSNOOP,
    S4_AXI_ACPROT,
    S4_AXI_ACREADY,
    S4_AXI_CRVALID,
    S4_AXI_CRRESP,
    S4_AXI_CRREADY,
    S4_AXI_CDVALID,
    S4_AXI_CDDATA,
    S4_AXI_CDLAST,
    S4_AXI_CDREADY,
    S5_AXI_AWID,
    S5_AXI_AWADDR,
    S5_AXI_AWLEN,
    S5_AXI_AWSIZE,
    S5_AXI_AWBURST,
    S5_AXI_AWLOCK,
    S5_AXI_AWCACHE,
    S5_AXI_AWPROT,
    S5_AXI_AWQOS,
    S5_AXI_AWVALID,
    S5_AXI_AWREADY,
    S5_AXI_AWDOMAIN,
    S5_AXI_AWSNOOP,
    S5_AXI_AWBAR,
    S5_AXI_WDATA,
    S5_AXI_WSTRB,
    S5_AXI_WLAST,
    S5_AXI_WVALID,
    S5_AXI_WREADY,
    S5_AXI_BRESP,
    S5_AXI_BID,
    S5_AXI_BVALID,
    S5_AXI_BREADY,
    S5_AXI_WACK,
    S5_AXI_ARID,
    S5_AXI_ARADDR,
    S5_AXI_ARLEN,
    S5_AXI_ARSIZE,
    S5_AXI_ARBURST,
    S5_AXI_ARLOCK,
    S5_AXI_ARCACHE,
    S5_AXI_ARPROT,
    S5_AXI_ARQOS,
    S5_AXI_ARVALID,
    S5_AXI_ARREADY,
    S5_AXI_ARDOMAIN,
    S5_AXI_ARSNOOP,
    S5_AXI_ARBAR,
    S5_AXI_RID,
    S5_AXI_RDATA,
    S5_AXI_RRESP,
    S5_AXI_RLAST,
    S5_AXI_RVALID,
    S5_AXI_RREADY,
    S5_AXI_RACK,
    S5_AXI_ACVALID,
    S5_AXI_ACADDR,
    S5_AXI_ACSNOOP,
    S5_AXI_ACPROT,
    S5_AXI_ACREADY,
    S5_AXI_CRVALID,
    S5_AXI_CRRESP,
    S5_AXI_CRREADY,
    S5_AXI_CDVALID,
    S5_AXI_CDDATA,
    S5_AXI_CDLAST,
    S5_AXI_CDREADY,
    S6_AXI_AWID,
    S6_AXI_AWADDR,
    S6_AXI_AWLEN,
    S6_AXI_AWSIZE,
    S6_AXI_AWBURST,
    S6_AXI_AWLOCK,
    S6_AXI_AWCACHE,
    S6_AXI_AWPROT,
    S6_AXI_AWQOS,
    S6_AXI_AWVALID,
    S6_AXI_AWREADY,
    S6_AXI_AWDOMAIN,
    S6_AXI_AWSNOOP,
    S6_AXI_AWBAR,
    S6_AXI_WDATA,
    S6_AXI_WSTRB,
    S6_AXI_WLAST,
    S6_AXI_WVALID,
    S6_AXI_WREADY,
    S6_AXI_BRESP,
    S6_AXI_BID,
    S6_AXI_BVALID,
    S6_AXI_BREADY,
    S6_AXI_WACK,
    S6_AXI_ARID,
    S6_AXI_ARADDR,
    S6_AXI_ARLEN,
    S6_AXI_ARSIZE,
    S6_AXI_ARBURST,
    S6_AXI_ARLOCK,
    S6_AXI_ARCACHE,
    S6_AXI_ARPROT,
    S6_AXI_ARQOS,
    S6_AXI_ARVALID,
    S6_AXI_ARREADY,
    S6_AXI_ARDOMAIN,
    S6_AXI_ARSNOOP,
    S6_AXI_ARBAR,
    S6_AXI_RID,
    S6_AXI_RDATA,
    S6_AXI_RRESP,
    S6_AXI_RLAST,
    S6_AXI_RVALID,
    S6_AXI_RREADY,
    S6_AXI_RACK,
    S6_AXI_ACVALID,
    S6_AXI_ACADDR,
    S6_AXI_ACSNOOP,
    S6_AXI_ACPROT,
    S6_AXI_ACREADY,
    S6_AXI_CRVALID,
    S6_AXI_CRRESP,
    S6_AXI_CRREADY,
    S6_AXI_CDVALID,
    S6_AXI_CDDATA,
    S6_AXI_CDLAST,
    S6_AXI_CDREADY,
    S7_AXI_AWID,
    S7_AXI_AWADDR,
    S7_AXI_AWLEN,
    S7_AXI_AWSIZE,
    S7_AXI_AWBURST,
    S7_AXI_AWLOCK,
    S7_AXI_AWCACHE,
    S7_AXI_AWPROT,
    S7_AXI_AWQOS,
    S7_AXI_AWVALID,
    S7_AXI_AWREADY,
    S7_AXI_AWDOMAIN,
    S7_AXI_AWSNOOP,
    S7_AXI_AWBAR,
    S7_AXI_WDATA,
    S7_AXI_WSTRB,
    S7_AXI_WLAST,
    S7_AXI_WVALID,
    S7_AXI_WREADY,
    S7_AXI_BRESP,
    S7_AXI_BID,
    S7_AXI_BVALID,
    S7_AXI_BREADY,
    S7_AXI_WACK,
    S7_AXI_ARID,
    S7_AXI_ARADDR,
    S7_AXI_ARLEN,
    S7_AXI_ARSIZE,
    S7_AXI_ARBURST,
    S7_AXI_ARLOCK,
    S7_AXI_ARCACHE,
    S7_AXI_ARPROT,
    S7_AXI_ARQOS,
    S7_AXI_ARVALID,
    S7_AXI_ARREADY,
    S7_AXI_ARDOMAIN,
    S7_AXI_ARSNOOP,
    S7_AXI_ARBAR,
    S7_AXI_RID,
    S7_AXI_RDATA,
    S7_AXI_RRESP,
    S7_AXI_RLAST,
    S7_AXI_RVALID,
    S7_AXI_RREADY,
    S7_AXI_RACK,
    S7_AXI_ACVALID,
    S7_AXI_ACADDR,
    S7_AXI_ACSNOOP,
    S7_AXI_ACPROT,
    S7_AXI_ACREADY,
    S7_AXI_CRVALID,
    S7_AXI_CRRESP,
    S7_AXI_CRREADY,
    S7_AXI_CDVALID,
    S7_AXI_CDDATA,
    S7_AXI_CDLAST,
    S7_AXI_CDREADY,
    S8_AXI_AWID,
    S8_AXI_AWADDR,
    S8_AXI_AWLEN,
    S8_AXI_AWSIZE,
    S8_AXI_AWBURST,
    S8_AXI_AWLOCK,
    S8_AXI_AWCACHE,
    S8_AXI_AWPROT,
    S8_AXI_AWQOS,
    S8_AXI_AWVALID,
    S8_AXI_AWREADY,
    S8_AXI_AWDOMAIN,
    S8_AXI_AWSNOOP,
    S8_AXI_AWBAR,
    S8_AXI_WDATA,
    S8_AXI_WSTRB,
    S8_AXI_WLAST,
    S8_AXI_WVALID,
    S8_AXI_WREADY,
    S8_AXI_BRESP,
    S8_AXI_BID,
    S8_AXI_BVALID,
    S8_AXI_BREADY,
    S8_AXI_WACK,
    S8_AXI_ARID,
    S8_AXI_ARADDR,
    S8_AXI_ARLEN,
    S8_AXI_ARSIZE,
    S8_AXI_ARBURST,
    S8_AXI_ARLOCK,
    S8_AXI_ARCACHE,
    S8_AXI_ARPROT,
    S8_AXI_ARQOS,
    S8_AXI_ARVALID,
    S8_AXI_ARREADY,
    S8_AXI_ARDOMAIN,
    S8_AXI_ARSNOOP,
    S8_AXI_ARBAR,
    S8_AXI_RID,
    S8_AXI_RDATA,
    S8_AXI_RRESP,
    S8_AXI_RLAST,
    S8_AXI_RVALID,
    S8_AXI_RREADY,
    S8_AXI_RACK,
    S8_AXI_ACVALID,
    S8_AXI_ACADDR,
    S8_AXI_ACSNOOP,
    S8_AXI_ACPROT,
    S8_AXI_ACREADY,
    S8_AXI_CRVALID,
    S8_AXI_CRRESP,
    S8_AXI_CRREADY,
    S8_AXI_CDVALID,
    S8_AXI_CDDATA,
    S8_AXI_CDLAST,
    S8_AXI_CDREADY,
    S9_AXI_AWID,
    S9_AXI_AWADDR,
    S9_AXI_AWLEN,
    S9_AXI_AWSIZE,
    S9_AXI_AWBURST,
    S9_AXI_AWLOCK,
    S9_AXI_AWCACHE,
    S9_AXI_AWPROT,
    S9_AXI_AWQOS,
    S9_AXI_AWVALID,
    S9_AXI_AWREADY,
    S9_AXI_AWDOMAIN,
    S9_AXI_AWSNOOP,
    S9_AXI_AWBAR,
    S9_AXI_WDATA,
    S9_AXI_WSTRB,
    S9_AXI_WLAST,
    S9_AXI_WVALID,
    S9_AXI_WREADY,
    S9_AXI_BRESP,
    S9_AXI_BID,
    S9_AXI_BVALID,
    S9_AXI_BREADY,
    S9_AXI_WACK,
    S9_AXI_ARID,
    S9_AXI_ARADDR,
    S9_AXI_ARLEN,
    S9_AXI_ARSIZE,
    S9_AXI_ARBURST,
    S9_AXI_ARLOCK,
    S9_AXI_ARCACHE,
    S9_AXI_ARPROT,
    S9_AXI_ARQOS,
    S9_AXI_ARVALID,
    S9_AXI_ARREADY,
    S9_AXI_ARDOMAIN,
    S9_AXI_ARSNOOP,
    S9_AXI_ARBAR,
    S9_AXI_RID,
    S9_AXI_RDATA,
    S9_AXI_RRESP,
    S9_AXI_RLAST,
    S9_AXI_RVALID,
    S9_AXI_RREADY,
    S9_AXI_RACK,
    S9_AXI_ACVALID,
    S9_AXI_ACADDR,
    S9_AXI_ACSNOOP,
    S9_AXI_ACPROT,
    S9_AXI_ACREADY,
    S9_AXI_CRVALID,
    S9_AXI_CRRESP,
    S9_AXI_CRREADY,
    S9_AXI_CDVALID,
    S9_AXI_CDDATA,
    S9_AXI_CDLAST,
    S9_AXI_CDREADY,
    S10_AXI_AWID,
    S10_AXI_AWADDR,
    S10_AXI_AWLEN,
    S10_AXI_AWSIZE,
    S10_AXI_AWBURST,
    S10_AXI_AWLOCK,
    S10_AXI_AWCACHE,
    S10_AXI_AWPROT,
    S10_AXI_AWQOS,
    S10_AXI_AWVALID,
    S10_AXI_AWREADY,
    S10_AXI_AWDOMAIN,
    S10_AXI_AWSNOOP,
    S10_AXI_AWBAR,
    S10_AXI_WDATA,
    S10_AXI_WSTRB,
    S10_AXI_WLAST,
    S10_AXI_WVALID,
    S10_AXI_WREADY,
    S10_AXI_BRESP,
    S10_AXI_BID,
    S10_AXI_BVALID,
    S10_AXI_BREADY,
    S10_AXI_WACK,
    S10_AXI_ARID,
    S10_AXI_ARADDR,
    S10_AXI_ARLEN,
    S10_AXI_ARSIZE,
    S10_AXI_ARBURST,
    S10_AXI_ARLOCK,
    S10_AXI_ARCACHE,
    S10_AXI_ARPROT,
    S10_AXI_ARQOS,
    S10_AXI_ARVALID,
    S10_AXI_ARREADY,
    S10_AXI_ARDOMAIN,
    S10_AXI_ARSNOOP,
    S10_AXI_ARBAR,
    S10_AXI_RID,
    S10_AXI_RDATA,
    S10_AXI_RRESP,
    S10_AXI_RLAST,
    S10_AXI_RVALID,
    S10_AXI_RREADY,
    S10_AXI_RACK,
    S10_AXI_ACVALID,
    S10_AXI_ACADDR,
    S10_AXI_ACSNOOP,
    S10_AXI_ACPROT,
    S10_AXI_ACREADY,
    S10_AXI_CRVALID,
    S10_AXI_CRRESP,
    S10_AXI_CRREADY,
    S10_AXI_CDVALID,
    S10_AXI_CDDATA,
    S10_AXI_CDLAST,
    S10_AXI_CDREADY,
    S11_AXI_AWID,
    S11_AXI_AWADDR,
    S11_AXI_AWLEN,
    S11_AXI_AWSIZE,
    S11_AXI_AWBURST,
    S11_AXI_AWLOCK,
    S11_AXI_AWCACHE,
    S11_AXI_AWPROT,
    S11_AXI_AWQOS,
    S11_AXI_AWVALID,
    S11_AXI_AWREADY,
    S11_AXI_AWDOMAIN,
    S11_AXI_AWSNOOP,
    S11_AXI_AWBAR,
    S11_AXI_WDATA,
    S11_AXI_WSTRB,
    S11_AXI_WLAST,
    S11_AXI_WVALID,
    S11_AXI_WREADY,
    S11_AXI_BRESP,
    S11_AXI_BID,
    S11_AXI_BVALID,
    S11_AXI_BREADY,
    S11_AXI_WACK,
    S11_AXI_ARID,
    S11_AXI_ARADDR,
    S11_AXI_ARLEN,
    S11_AXI_ARSIZE,
    S11_AXI_ARBURST,
    S11_AXI_ARLOCK,
    S11_AXI_ARCACHE,
    S11_AXI_ARPROT,
    S11_AXI_ARQOS,
    S11_AXI_ARVALID,
    S11_AXI_ARREADY,
    S11_AXI_ARDOMAIN,
    S11_AXI_ARSNOOP,
    S11_AXI_ARBAR,
    S11_AXI_RID,
    S11_AXI_RDATA,
    S11_AXI_RRESP,
    S11_AXI_RLAST,
    S11_AXI_RVALID,
    S11_AXI_RREADY,
    S11_AXI_RACK,
    S11_AXI_ACVALID,
    S11_AXI_ACADDR,
    S11_AXI_ACSNOOP,
    S11_AXI_ACPROT,
    S11_AXI_ACREADY,
    S11_AXI_CRVALID,
    S11_AXI_CRRESP,
    S11_AXI_CRREADY,
    S11_AXI_CDVALID,
    S11_AXI_CDDATA,
    S11_AXI_CDLAST,
    S11_AXI_CDREADY,
    S12_AXI_AWID,
    S12_AXI_AWADDR,
    S12_AXI_AWLEN,
    S12_AXI_AWSIZE,
    S12_AXI_AWBURST,
    S12_AXI_AWLOCK,
    S12_AXI_AWCACHE,
    S12_AXI_AWPROT,
    S12_AXI_AWQOS,
    S12_AXI_AWVALID,
    S12_AXI_AWREADY,
    S12_AXI_AWDOMAIN,
    S12_AXI_AWSNOOP,
    S12_AXI_AWBAR,
    S12_AXI_WDATA,
    S12_AXI_WSTRB,
    S12_AXI_WLAST,
    S12_AXI_WVALID,
    S12_AXI_WREADY,
    S12_AXI_BRESP,
    S12_AXI_BID,
    S12_AXI_BVALID,
    S12_AXI_BREADY,
    S12_AXI_WACK,
    S12_AXI_ARID,
    S12_AXI_ARADDR,
    S12_AXI_ARLEN,
    S12_AXI_ARSIZE,
    S12_AXI_ARBURST,
    S12_AXI_ARLOCK,
    S12_AXI_ARCACHE,
    S12_AXI_ARPROT,
    S12_AXI_ARQOS,
    S12_AXI_ARVALID,
    S12_AXI_ARREADY,
    S12_AXI_ARDOMAIN,
    S12_AXI_ARSNOOP,
    S12_AXI_ARBAR,
    S12_AXI_RID,
    S12_AXI_RDATA,
    S12_AXI_RRESP,
    S12_AXI_RLAST,
    S12_AXI_RVALID,
    S12_AXI_RREADY,
    S12_AXI_RACK,
    S12_AXI_ACVALID,
    S12_AXI_ACADDR,
    S12_AXI_ACSNOOP,
    S12_AXI_ACPROT,
    S12_AXI_ACREADY,
    S12_AXI_CRVALID,
    S12_AXI_CRRESP,
    S12_AXI_CRREADY,
    S12_AXI_CDVALID,
    S12_AXI_CDDATA,
    S12_AXI_CDLAST,
    S12_AXI_CDREADY,
    S13_AXI_AWID,
    S13_AXI_AWADDR,
    S13_AXI_AWLEN,
    S13_AXI_AWSIZE,
    S13_AXI_AWBURST,
    S13_AXI_AWLOCK,
    S13_AXI_AWCACHE,
    S13_AXI_AWPROT,
    S13_AXI_AWQOS,
    S13_AXI_AWVALID,
    S13_AXI_AWREADY,
    S13_AXI_AWDOMAIN,
    S13_AXI_AWSNOOP,
    S13_AXI_AWBAR,
    S13_AXI_WDATA,
    S13_AXI_WSTRB,
    S13_AXI_WLAST,
    S13_AXI_WVALID,
    S13_AXI_WREADY,
    S13_AXI_BRESP,
    S13_AXI_BID,
    S13_AXI_BVALID,
    S13_AXI_BREADY,
    S13_AXI_WACK,
    S13_AXI_ARID,
    S13_AXI_ARADDR,
    S13_AXI_ARLEN,
    S13_AXI_ARSIZE,
    S13_AXI_ARBURST,
    S13_AXI_ARLOCK,
    S13_AXI_ARCACHE,
    S13_AXI_ARPROT,
    S13_AXI_ARQOS,
    S13_AXI_ARVALID,
    S13_AXI_ARREADY,
    S13_AXI_ARDOMAIN,
    S13_AXI_ARSNOOP,
    S13_AXI_ARBAR,
    S13_AXI_RID,
    S13_AXI_RDATA,
    S13_AXI_RRESP,
    S13_AXI_RLAST,
    S13_AXI_RVALID,
    S13_AXI_RREADY,
    S13_AXI_RACK,
    S13_AXI_ACVALID,
    S13_AXI_ACADDR,
    S13_AXI_ACSNOOP,
    S13_AXI_ACPROT,
    S13_AXI_ACREADY,
    S13_AXI_CRVALID,
    S13_AXI_CRRESP,
    S13_AXI_CRREADY,
    S13_AXI_CDVALID,
    S13_AXI_CDDATA,
    S13_AXI_CDLAST,
    S13_AXI_CDREADY,
    S14_AXI_AWID,
    S14_AXI_AWADDR,
    S14_AXI_AWLEN,
    S14_AXI_AWSIZE,
    S14_AXI_AWBURST,
    S14_AXI_AWLOCK,
    S14_AXI_AWCACHE,
    S14_AXI_AWPROT,
    S14_AXI_AWQOS,
    S14_AXI_AWVALID,
    S14_AXI_AWREADY,
    S14_AXI_AWDOMAIN,
    S14_AXI_AWSNOOP,
    S14_AXI_AWBAR,
    S14_AXI_WDATA,
    S14_AXI_WSTRB,
    S14_AXI_WLAST,
    S14_AXI_WVALID,
    S14_AXI_WREADY,
    S14_AXI_BRESP,
    S14_AXI_BID,
    S14_AXI_BVALID,
    S14_AXI_BREADY,
    S14_AXI_WACK,
    S14_AXI_ARID,
    S14_AXI_ARADDR,
    S14_AXI_ARLEN,
    S14_AXI_ARSIZE,
    S14_AXI_ARBURST,
    S14_AXI_ARLOCK,
    S14_AXI_ARCACHE,
    S14_AXI_ARPROT,
    S14_AXI_ARQOS,
    S14_AXI_ARVALID,
    S14_AXI_ARREADY,
    S14_AXI_ARDOMAIN,
    S14_AXI_ARSNOOP,
    S14_AXI_ARBAR,
    S14_AXI_RID,
    S14_AXI_RDATA,
    S14_AXI_RRESP,
    S14_AXI_RLAST,
    S14_AXI_RVALID,
    S14_AXI_RREADY,
    S14_AXI_RACK,
    S14_AXI_ACVALID,
    S14_AXI_ACADDR,
    S14_AXI_ACSNOOP,
    S14_AXI_ACPROT,
    S14_AXI_ACREADY,
    S14_AXI_CRVALID,
    S14_AXI_CRRESP,
    S14_AXI_CRREADY,
    S14_AXI_CDVALID,
    S14_AXI_CDDATA,
    S14_AXI_CDLAST,
    S14_AXI_CDREADY,
    S15_AXI_AWID,
    S15_AXI_AWADDR,
    S15_AXI_AWLEN,
    S15_AXI_AWSIZE,
    S15_AXI_AWBURST,
    S15_AXI_AWLOCK,
    S15_AXI_AWCACHE,
    S15_AXI_AWPROT,
    S15_AXI_AWQOS,
    S15_AXI_AWVALID,
    S15_AXI_AWREADY,
    S15_AXI_AWDOMAIN,
    S15_AXI_AWSNOOP,
    S15_AXI_AWBAR,
    S15_AXI_WDATA,
    S15_AXI_WSTRB,
    S15_AXI_WLAST,
    S15_AXI_WVALID,
    S15_AXI_WREADY,
    S15_AXI_BRESP,
    S15_AXI_BID,
    S15_AXI_BVALID,
    S15_AXI_BREADY,
    S15_AXI_WACK,
    S15_AXI_ARID,
    S15_AXI_ARADDR,
    S15_AXI_ARLEN,
    S15_AXI_ARSIZE,
    S15_AXI_ARBURST,
    S15_AXI_ARLOCK,
    S15_AXI_ARCACHE,
    S15_AXI_ARPROT,
    S15_AXI_ARQOS,
    S15_AXI_ARVALID,
    S15_AXI_ARREADY,
    S15_AXI_ARDOMAIN,
    S15_AXI_ARSNOOP,
    S15_AXI_ARBAR,
    S15_AXI_RID,
    S15_AXI_RDATA,
    S15_AXI_RRESP,
    S15_AXI_RLAST,
    S15_AXI_RVALID,
    S15_AXI_RREADY,
    S15_AXI_RACK,
    S15_AXI_ACVALID,
    S15_AXI_ACADDR,
    S15_AXI_ACSNOOP,
    S15_AXI_ACPROT,
    S15_AXI_ACREADY,
    S15_AXI_CRVALID,
    S15_AXI_CRRESP,
    S15_AXI_CRREADY,
    S15_AXI_CDVALID,
    S15_AXI_CDDATA,
    S15_AXI_CDLAST,
    S15_AXI_CDREADY,
    S0_AXI_GEN_AWID,
    S0_AXI_GEN_AWADDR,
    S0_AXI_GEN_AWLEN,
    S0_AXI_GEN_AWSIZE,
    S0_AXI_GEN_AWBURST,
    S0_AXI_GEN_AWLOCK,
    S0_AXI_GEN_AWCACHE,
    S0_AXI_GEN_AWPROT,
    S0_AXI_GEN_AWQOS,
    S0_AXI_GEN_AWVALID,
    S0_AXI_GEN_AWREADY,
    S0_AXI_GEN_WDATA,
    S0_AXI_GEN_WSTRB,
    S0_AXI_GEN_WLAST,
    S0_AXI_GEN_WVALID,
    S0_AXI_GEN_WREADY,
    S0_AXI_GEN_BRESP,
    S0_AXI_GEN_BID,
    S0_AXI_GEN_BVALID,
    S0_AXI_GEN_BREADY,
    S0_AXI_GEN_ARID,
    S0_AXI_GEN_ARADDR,
    S0_AXI_GEN_ARLEN,
    S0_AXI_GEN_ARSIZE,
    S0_AXI_GEN_ARBURST,
    S0_AXI_GEN_ARLOCK,
    S0_AXI_GEN_ARCACHE,
    S0_AXI_GEN_ARPROT,
    S0_AXI_GEN_ARQOS,
    S0_AXI_GEN_ARVALID,
    S0_AXI_GEN_ARREADY,
    S0_AXI_GEN_RID,
    S0_AXI_GEN_RDATA,
    S0_AXI_GEN_RRESP,
    S0_AXI_GEN_RLAST,
    S0_AXI_GEN_RVALID,
    S0_AXI_GEN_RREADY,
    S1_AXI_GEN_AWID,
    S1_AXI_GEN_AWADDR,
    S1_AXI_GEN_AWLEN,
    S1_AXI_GEN_AWSIZE,
    S1_AXI_GEN_AWBURST,
    S1_AXI_GEN_AWLOCK,
    S1_AXI_GEN_AWCACHE,
    S1_AXI_GEN_AWPROT,
    S1_AXI_GEN_AWQOS,
    S1_AXI_GEN_AWVALID,
    S1_AXI_GEN_AWREADY,
    S1_AXI_GEN_WDATA,
    S1_AXI_GEN_WSTRB,
    S1_AXI_GEN_WLAST,
    S1_AXI_GEN_WVALID,
    S1_AXI_GEN_WREADY,
    S1_AXI_GEN_BRESP,
    S1_AXI_GEN_BID,
    S1_AXI_GEN_BVALID,
    S1_AXI_GEN_BREADY,
    S1_AXI_GEN_ARID,
    S1_AXI_GEN_ARADDR,
    S1_AXI_GEN_ARLEN,
    S1_AXI_GEN_ARSIZE,
    S1_AXI_GEN_ARBURST,
    S1_AXI_GEN_ARLOCK,
    S1_AXI_GEN_ARCACHE,
    S1_AXI_GEN_ARPROT,
    S1_AXI_GEN_ARQOS,
    S1_AXI_GEN_ARVALID,
    S1_AXI_GEN_ARREADY,
    S1_AXI_GEN_RID,
    S1_AXI_GEN_RDATA,
    S1_AXI_GEN_RRESP,
    S1_AXI_GEN_RLAST,
    S1_AXI_GEN_RVALID,
    S1_AXI_GEN_RREADY,
    S2_AXI_GEN_AWID,
    S2_AXI_GEN_AWADDR,
    S2_AXI_GEN_AWLEN,
    S2_AXI_GEN_AWSIZE,
    S2_AXI_GEN_AWBURST,
    S2_AXI_GEN_AWLOCK,
    S2_AXI_GEN_AWCACHE,
    S2_AXI_GEN_AWPROT,
    S2_AXI_GEN_AWQOS,
    S2_AXI_GEN_AWVALID,
    S2_AXI_GEN_AWREADY,
    S2_AXI_GEN_WDATA,
    S2_AXI_GEN_WSTRB,
    S2_AXI_GEN_WLAST,
    S2_AXI_GEN_WVALID,
    S2_AXI_GEN_WREADY,
    S2_AXI_GEN_BRESP,
    S2_AXI_GEN_BID,
    S2_AXI_GEN_BVALID,
    S2_AXI_GEN_BREADY,
    S2_AXI_GEN_ARID,
    S2_AXI_GEN_ARADDR,
    S2_AXI_GEN_ARLEN,
    S2_AXI_GEN_ARSIZE,
    S2_AXI_GEN_ARBURST,
    S2_AXI_GEN_ARLOCK,
    S2_AXI_GEN_ARCACHE,
    S2_AXI_GEN_ARPROT,
    S2_AXI_GEN_ARQOS,
    S2_AXI_GEN_ARVALID,
    S2_AXI_GEN_ARREADY,
    S2_AXI_GEN_RID,
    S2_AXI_GEN_RDATA,
    S2_AXI_GEN_RRESP,
    S2_AXI_GEN_RLAST,
    S2_AXI_GEN_RVALID,
    S2_AXI_GEN_RREADY,
    S3_AXI_GEN_AWID,
    S3_AXI_GEN_AWADDR,
    S3_AXI_GEN_AWLEN,
    S3_AXI_GEN_AWSIZE,
    S3_AXI_GEN_AWBURST,
    S3_AXI_GEN_AWLOCK,
    S3_AXI_GEN_AWCACHE,
    S3_AXI_GEN_AWPROT,
    S3_AXI_GEN_AWQOS,
    S3_AXI_GEN_AWVALID,
    S3_AXI_GEN_AWREADY,
    S3_AXI_GEN_WDATA,
    S3_AXI_GEN_WSTRB,
    S3_AXI_GEN_WLAST,
    S3_AXI_GEN_WVALID,
    S3_AXI_GEN_WREADY,
    S3_AXI_GEN_BRESP,
    S3_AXI_GEN_BID,
    S3_AXI_GEN_BVALID,
    S3_AXI_GEN_BREADY,
    S3_AXI_GEN_ARID,
    S3_AXI_GEN_ARADDR,
    S3_AXI_GEN_ARLEN,
    S3_AXI_GEN_ARSIZE,
    S3_AXI_GEN_ARBURST,
    S3_AXI_GEN_ARLOCK,
    S3_AXI_GEN_ARCACHE,
    S3_AXI_GEN_ARPROT,
    S3_AXI_GEN_ARQOS,
    S3_AXI_GEN_ARVALID,
    S3_AXI_GEN_ARREADY,
    S3_AXI_GEN_RID,
    S3_AXI_GEN_RDATA,
    S3_AXI_GEN_RRESP,
    S3_AXI_GEN_RLAST,
    S3_AXI_GEN_RVALID,
    S3_AXI_GEN_RREADY,
    S4_AXI_GEN_AWID,
    S4_AXI_GEN_AWADDR,
    S4_AXI_GEN_AWLEN,
    S4_AXI_GEN_AWSIZE,
    S4_AXI_GEN_AWBURST,
    S4_AXI_GEN_AWLOCK,
    S4_AXI_GEN_AWCACHE,
    S4_AXI_GEN_AWPROT,
    S4_AXI_GEN_AWQOS,
    S4_AXI_GEN_AWVALID,
    S4_AXI_GEN_AWREADY,
    S4_AXI_GEN_WDATA,
    S4_AXI_GEN_WSTRB,
    S4_AXI_GEN_WLAST,
    S4_AXI_GEN_WVALID,
    S4_AXI_GEN_WREADY,
    S4_AXI_GEN_BRESP,
    S4_AXI_GEN_BID,
    S4_AXI_GEN_BVALID,
    S4_AXI_GEN_BREADY,
    S4_AXI_GEN_ARID,
    S4_AXI_GEN_ARADDR,
    S4_AXI_GEN_ARLEN,
    S4_AXI_GEN_ARSIZE,
    S4_AXI_GEN_ARBURST,
    S4_AXI_GEN_ARLOCK,
    S4_AXI_GEN_ARCACHE,
    S4_AXI_GEN_ARPROT,
    S4_AXI_GEN_ARQOS,
    S4_AXI_GEN_ARVALID,
    S4_AXI_GEN_ARREADY,
    S4_AXI_GEN_RID,
    S4_AXI_GEN_RDATA,
    S4_AXI_GEN_RRESP,
    S4_AXI_GEN_RLAST,
    S4_AXI_GEN_RVALID,
    S4_AXI_GEN_RREADY,
    S5_AXI_GEN_AWID,
    S5_AXI_GEN_AWADDR,
    S5_AXI_GEN_AWLEN,
    S5_AXI_GEN_AWSIZE,
    S5_AXI_GEN_AWBURST,
    S5_AXI_GEN_AWLOCK,
    S5_AXI_GEN_AWCACHE,
    S5_AXI_GEN_AWPROT,
    S5_AXI_GEN_AWQOS,
    S5_AXI_GEN_AWVALID,
    S5_AXI_GEN_AWREADY,
    S5_AXI_GEN_WDATA,
    S5_AXI_GEN_WSTRB,
    S5_AXI_GEN_WLAST,
    S5_AXI_GEN_WVALID,
    S5_AXI_GEN_WREADY,
    S5_AXI_GEN_BRESP,
    S5_AXI_GEN_BID,
    S5_AXI_GEN_BVALID,
    S5_AXI_GEN_BREADY,
    S5_AXI_GEN_ARID,
    S5_AXI_GEN_ARADDR,
    S5_AXI_GEN_ARLEN,
    S5_AXI_GEN_ARSIZE,
    S5_AXI_GEN_ARBURST,
    S5_AXI_GEN_ARLOCK,
    S5_AXI_GEN_ARCACHE,
    S5_AXI_GEN_ARPROT,
    S5_AXI_GEN_ARQOS,
    S5_AXI_GEN_ARVALID,
    S5_AXI_GEN_ARREADY,
    S5_AXI_GEN_RID,
    S5_AXI_GEN_RDATA,
    S5_AXI_GEN_RRESP,
    S5_AXI_GEN_RLAST,
    S5_AXI_GEN_RVALID,
    S5_AXI_GEN_RREADY,
    S6_AXI_GEN_AWID,
    S6_AXI_GEN_AWADDR,
    S6_AXI_GEN_AWLEN,
    S6_AXI_GEN_AWSIZE,
    S6_AXI_GEN_AWBURST,
    S6_AXI_GEN_AWLOCK,
    S6_AXI_GEN_AWCACHE,
    S6_AXI_GEN_AWPROT,
    S6_AXI_GEN_AWQOS,
    S6_AXI_GEN_AWVALID,
    S6_AXI_GEN_AWREADY,
    S6_AXI_GEN_WDATA,
    S6_AXI_GEN_WSTRB,
    S6_AXI_GEN_WLAST,
    S6_AXI_GEN_WVALID,
    S6_AXI_GEN_WREADY,
    S6_AXI_GEN_BRESP,
    S6_AXI_GEN_BID,
    S6_AXI_GEN_BVALID,
    S6_AXI_GEN_BREADY,
    S6_AXI_GEN_ARID,
    S6_AXI_GEN_ARADDR,
    S6_AXI_GEN_ARLEN,
    S6_AXI_GEN_ARSIZE,
    S6_AXI_GEN_ARBURST,
    S6_AXI_GEN_ARLOCK,
    S6_AXI_GEN_ARCACHE,
    S6_AXI_GEN_ARPROT,
    S6_AXI_GEN_ARQOS,
    S6_AXI_GEN_ARVALID,
    S6_AXI_GEN_ARREADY,
    S6_AXI_GEN_RID,
    S6_AXI_GEN_RDATA,
    S6_AXI_GEN_RRESP,
    S6_AXI_GEN_RLAST,
    S6_AXI_GEN_RVALID,
    S6_AXI_GEN_RREADY,
    S7_AXI_GEN_AWID,
    S7_AXI_GEN_AWADDR,
    S7_AXI_GEN_AWLEN,
    S7_AXI_GEN_AWSIZE,
    S7_AXI_GEN_AWBURST,
    S7_AXI_GEN_AWLOCK,
    S7_AXI_GEN_AWCACHE,
    S7_AXI_GEN_AWPROT,
    S7_AXI_GEN_AWQOS,
    S7_AXI_GEN_AWVALID,
    S7_AXI_GEN_AWREADY,
    S7_AXI_GEN_WDATA,
    S7_AXI_GEN_WSTRB,
    S7_AXI_GEN_WLAST,
    S7_AXI_GEN_WVALID,
    S7_AXI_GEN_WREADY,
    S7_AXI_GEN_BRESP,
    S7_AXI_GEN_BID,
    S7_AXI_GEN_BVALID,
    S7_AXI_GEN_BREADY,
    S7_AXI_GEN_ARID,
    S7_AXI_GEN_ARADDR,
    S7_AXI_GEN_ARLEN,
    S7_AXI_GEN_ARSIZE,
    S7_AXI_GEN_ARBURST,
    S7_AXI_GEN_ARLOCK,
    S7_AXI_GEN_ARCACHE,
    S7_AXI_GEN_ARPROT,
    S7_AXI_GEN_ARQOS,
    S7_AXI_GEN_ARVALID,
    S7_AXI_GEN_ARREADY,
    S7_AXI_GEN_RID,
    S7_AXI_GEN_RDATA,
    S7_AXI_GEN_RRESP,
    S7_AXI_GEN_RLAST,
    S7_AXI_GEN_RVALID,
    S7_AXI_GEN_RREADY,
    S8_AXI_GEN_AWID,
    S8_AXI_GEN_AWADDR,
    S8_AXI_GEN_AWLEN,
    S8_AXI_GEN_AWSIZE,
    S8_AXI_GEN_AWBURST,
    S8_AXI_GEN_AWLOCK,
    S8_AXI_GEN_AWCACHE,
    S8_AXI_GEN_AWPROT,
    S8_AXI_GEN_AWQOS,
    S8_AXI_GEN_AWVALID,
    S8_AXI_GEN_AWREADY,
    S8_AXI_GEN_WDATA,
    S8_AXI_GEN_WSTRB,
    S8_AXI_GEN_WLAST,
    S8_AXI_GEN_WVALID,
    S8_AXI_GEN_WREADY,
    S8_AXI_GEN_BRESP,
    S8_AXI_GEN_BID,
    S8_AXI_GEN_BVALID,
    S8_AXI_GEN_BREADY,
    S8_AXI_GEN_ARID,
    S8_AXI_GEN_ARADDR,
    S8_AXI_GEN_ARLEN,
    S8_AXI_GEN_ARSIZE,
    S8_AXI_GEN_ARBURST,
    S8_AXI_GEN_ARLOCK,
    S8_AXI_GEN_ARCACHE,
    S8_AXI_GEN_ARPROT,
    S8_AXI_GEN_ARQOS,
    S8_AXI_GEN_ARVALID,
    S8_AXI_GEN_ARREADY,
    S8_AXI_GEN_RID,
    S8_AXI_GEN_RDATA,
    S8_AXI_GEN_RRESP,
    S8_AXI_GEN_RLAST,
    S8_AXI_GEN_RVALID,
    S8_AXI_GEN_RREADY,
    S9_AXI_GEN_AWID,
    S9_AXI_GEN_AWADDR,
    S9_AXI_GEN_AWLEN,
    S9_AXI_GEN_AWSIZE,
    S9_AXI_GEN_AWBURST,
    S9_AXI_GEN_AWLOCK,
    S9_AXI_GEN_AWCACHE,
    S9_AXI_GEN_AWPROT,
    S9_AXI_GEN_AWQOS,
    S9_AXI_GEN_AWVALID,
    S9_AXI_GEN_AWREADY,
    S9_AXI_GEN_WDATA,
    S9_AXI_GEN_WSTRB,
    S9_AXI_GEN_WLAST,
    S9_AXI_GEN_WVALID,
    S9_AXI_GEN_WREADY,
    S9_AXI_GEN_BRESP,
    S9_AXI_GEN_BID,
    S9_AXI_GEN_BVALID,
    S9_AXI_GEN_BREADY,
    S9_AXI_GEN_ARID,
    S9_AXI_GEN_ARADDR,
    S9_AXI_GEN_ARLEN,
    S9_AXI_GEN_ARSIZE,
    S9_AXI_GEN_ARBURST,
    S9_AXI_GEN_ARLOCK,
    S9_AXI_GEN_ARCACHE,
    S9_AXI_GEN_ARPROT,
    S9_AXI_GEN_ARQOS,
    S9_AXI_GEN_ARVALID,
    S9_AXI_GEN_ARREADY,
    S9_AXI_GEN_RID,
    S9_AXI_GEN_RDATA,
    S9_AXI_GEN_RRESP,
    S9_AXI_GEN_RLAST,
    S9_AXI_GEN_RVALID,
    S9_AXI_GEN_RREADY,
    S10_AXI_GEN_AWID,
    S10_AXI_GEN_AWADDR,
    S10_AXI_GEN_AWLEN,
    S10_AXI_GEN_AWSIZE,
    S10_AXI_GEN_AWBURST,
    S10_AXI_GEN_AWLOCK,
    S10_AXI_GEN_AWCACHE,
    S10_AXI_GEN_AWPROT,
    S10_AXI_GEN_AWQOS,
    S10_AXI_GEN_AWVALID,
    S10_AXI_GEN_AWREADY,
    S10_AXI_GEN_WDATA,
    S10_AXI_GEN_WSTRB,
    S10_AXI_GEN_WLAST,
    S10_AXI_GEN_WVALID,
    S10_AXI_GEN_WREADY,
    S10_AXI_GEN_BRESP,
    S10_AXI_GEN_BID,
    S10_AXI_GEN_BVALID,
    S10_AXI_GEN_BREADY,
    S10_AXI_GEN_ARID,
    S10_AXI_GEN_ARADDR,
    S10_AXI_GEN_ARLEN,
    S10_AXI_GEN_ARSIZE,
    S10_AXI_GEN_ARBURST,
    S10_AXI_GEN_ARLOCK,
    S10_AXI_GEN_ARCACHE,
    S10_AXI_GEN_ARPROT,
    S10_AXI_GEN_ARQOS,
    S10_AXI_GEN_ARVALID,
    S10_AXI_GEN_ARREADY,
    S10_AXI_GEN_RID,
    S10_AXI_GEN_RDATA,
    S10_AXI_GEN_RRESP,
    S10_AXI_GEN_RLAST,
    S10_AXI_GEN_RVALID,
    S10_AXI_GEN_RREADY,
    S11_AXI_GEN_AWID,
    S11_AXI_GEN_AWADDR,
    S11_AXI_GEN_AWLEN,
    S11_AXI_GEN_AWSIZE,
    S11_AXI_GEN_AWBURST,
    S11_AXI_GEN_AWLOCK,
    S11_AXI_GEN_AWCACHE,
    S11_AXI_GEN_AWPROT,
    S11_AXI_GEN_AWQOS,
    S11_AXI_GEN_AWVALID,
    S11_AXI_GEN_AWREADY,
    S11_AXI_GEN_WDATA,
    S11_AXI_GEN_WSTRB,
    S11_AXI_GEN_WLAST,
    S11_AXI_GEN_WVALID,
    S11_AXI_GEN_WREADY,
    S11_AXI_GEN_BRESP,
    S11_AXI_GEN_BID,
    S11_AXI_GEN_BVALID,
    S11_AXI_GEN_BREADY,
    S11_AXI_GEN_ARID,
    S11_AXI_GEN_ARADDR,
    S11_AXI_GEN_ARLEN,
    S11_AXI_GEN_ARSIZE,
    S11_AXI_GEN_ARBURST,
    S11_AXI_GEN_ARLOCK,
    S11_AXI_GEN_ARCACHE,
    S11_AXI_GEN_ARPROT,
    S11_AXI_GEN_ARQOS,
    S11_AXI_GEN_ARVALID,
    S11_AXI_GEN_ARREADY,
    S11_AXI_GEN_RID,
    S11_AXI_GEN_RDATA,
    S11_AXI_GEN_RRESP,
    S11_AXI_GEN_RLAST,
    S11_AXI_GEN_RVALID,
    S11_AXI_GEN_RREADY,
    S12_AXI_GEN_AWID,
    S12_AXI_GEN_AWADDR,
    S12_AXI_GEN_AWLEN,
    S12_AXI_GEN_AWSIZE,
    S12_AXI_GEN_AWBURST,
    S12_AXI_GEN_AWLOCK,
    S12_AXI_GEN_AWCACHE,
    S12_AXI_GEN_AWPROT,
    S12_AXI_GEN_AWQOS,
    S12_AXI_GEN_AWVALID,
    S12_AXI_GEN_AWREADY,
    S12_AXI_GEN_WDATA,
    S12_AXI_GEN_WSTRB,
    S12_AXI_GEN_WLAST,
    S12_AXI_GEN_WVALID,
    S12_AXI_GEN_WREADY,
    S12_AXI_GEN_BRESP,
    S12_AXI_GEN_BID,
    S12_AXI_GEN_BVALID,
    S12_AXI_GEN_BREADY,
    S12_AXI_GEN_ARID,
    S12_AXI_GEN_ARADDR,
    S12_AXI_GEN_ARLEN,
    S12_AXI_GEN_ARSIZE,
    S12_AXI_GEN_ARBURST,
    S12_AXI_GEN_ARLOCK,
    S12_AXI_GEN_ARCACHE,
    S12_AXI_GEN_ARPROT,
    S12_AXI_GEN_ARQOS,
    S12_AXI_GEN_ARVALID,
    S12_AXI_GEN_ARREADY,
    S12_AXI_GEN_RID,
    S12_AXI_GEN_RDATA,
    S12_AXI_GEN_RRESP,
    S12_AXI_GEN_RLAST,
    S12_AXI_GEN_RVALID,
    S12_AXI_GEN_RREADY,
    S13_AXI_GEN_AWID,
    S13_AXI_GEN_AWADDR,
    S13_AXI_GEN_AWLEN,
    S13_AXI_GEN_AWSIZE,
    S13_AXI_GEN_AWBURST,
    S13_AXI_GEN_AWLOCK,
    S13_AXI_GEN_AWCACHE,
    S13_AXI_GEN_AWPROT,
    S13_AXI_GEN_AWQOS,
    S13_AXI_GEN_AWVALID,
    S13_AXI_GEN_AWREADY,
    S13_AXI_GEN_WDATA,
    S13_AXI_GEN_WSTRB,
    S13_AXI_GEN_WLAST,
    S13_AXI_GEN_WVALID,
    S13_AXI_GEN_WREADY,
    S13_AXI_GEN_BRESP,
    S13_AXI_GEN_BID,
    S13_AXI_GEN_BVALID,
    S13_AXI_GEN_BREADY,
    S13_AXI_GEN_ARID,
    S13_AXI_GEN_ARADDR,
    S13_AXI_GEN_ARLEN,
    S13_AXI_GEN_ARSIZE,
    S13_AXI_GEN_ARBURST,
    S13_AXI_GEN_ARLOCK,
    S13_AXI_GEN_ARCACHE,
    S13_AXI_GEN_ARPROT,
    S13_AXI_GEN_ARQOS,
    S13_AXI_GEN_ARVALID,
    S13_AXI_GEN_ARREADY,
    S13_AXI_GEN_RID,
    S13_AXI_GEN_RDATA,
    S13_AXI_GEN_RRESP,
    S13_AXI_GEN_RLAST,
    S13_AXI_GEN_RVALID,
    S13_AXI_GEN_RREADY,
    S14_AXI_GEN_AWID,
    S14_AXI_GEN_AWADDR,
    S14_AXI_GEN_AWLEN,
    S14_AXI_GEN_AWSIZE,
    S14_AXI_GEN_AWBURST,
    S14_AXI_GEN_AWLOCK,
    S14_AXI_GEN_AWCACHE,
    S14_AXI_GEN_AWPROT,
    S14_AXI_GEN_AWQOS,
    S14_AXI_GEN_AWVALID,
    S14_AXI_GEN_AWREADY,
    S14_AXI_GEN_WDATA,
    S14_AXI_GEN_WSTRB,
    S14_AXI_GEN_WLAST,
    S14_AXI_GEN_WVALID,
    S14_AXI_GEN_WREADY,
    S14_AXI_GEN_BRESP,
    S14_AXI_GEN_BID,
    S14_AXI_GEN_BVALID,
    S14_AXI_GEN_BREADY,
    S14_AXI_GEN_ARID,
    S14_AXI_GEN_ARADDR,
    S14_AXI_GEN_ARLEN,
    S14_AXI_GEN_ARSIZE,
    S14_AXI_GEN_ARBURST,
    S14_AXI_GEN_ARLOCK,
    S14_AXI_GEN_ARCACHE,
    S14_AXI_GEN_ARPROT,
    S14_AXI_GEN_ARQOS,
    S14_AXI_GEN_ARVALID,
    S14_AXI_GEN_ARREADY,
    S14_AXI_GEN_RID,
    S14_AXI_GEN_RDATA,
    S14_AXI_GEN_RRESP,
    S14_AXI_GEN_RLAST,
    S14_AXI_GEN_RVALID,
    S14_AXI_GEN_RREADY,
    S15_AXI_GEN_AWID,
    S15_AXI_GEN_AWADDR,
    S15_AXI_GEN_AWLEN,
    S15_AXI_GEN_AWSIZE,
    S15_AXI_GEN_AWBURST,
    S15_AXI_GEN_AWLOCK,
    S15_AXI_GEN_AWCACHE,
    S15_AXI_GEN_AWPROT,
    S15_AXI_GEN_AWQOS,
    S15_AXI_GEN_AWVALID,
    S15_AXI_GEN_AWREADY,
    S15_AXI_GEN_WDATA,
    S15_AXI_GEN_WSTRB,
    S15_AXI_GEN_WLAST,
    S15_AXI_GEN_WVALID,
    S15_AXI_GEN_WREADY,
    S15_AXI_GEN_BRESP,
    S15_AXI_GEN_BID,
    S15_AXI_GEN_BVALID,
    S15_AXI_GEN_BREADY,
    S15_AXI_GEN_ARID,
    S15_AXI_GEN_ARADDR,
    S15_AXI_GEN_ARLEN,
    S15_AXI_GEN_ARSIZE,
    S15_AXI_GEN_ARBURST,
    S15_AXI_GEN_ARLOCK,
    S15_AXI_GEN_ARCACHE,
    S15_AXI_GEN_ARPROT,
    S15_AXI_GEN_ARQOS,
    S15_AXI_GEN_ARVALID,
    S15_AXI_GEN_ARREADY,
    S15_AXI_GEN_RID,
    S15_AXI_GEN_RDATA,
    S15_AXI_GEN_RRESP,
    S15_AXI_GEN_RLAST,
    S15_AXI_GEN_RVALID,
    S15_AXI_GEN_RREADY,
    S_AXI_CTRL_AWADDR,
    S_AXI_CTRL_AWPROT,
    S_AXI_CTRL_AWVALID,
    S_AXI_CTRL_AWREADY,
    S_AXI_CTRL_WDATA,
    S_AXI_CTRL_WVALID,
    S_AXI_CTRL_WREADY,
    S_AXI_CTRL_BRESP,
    S_AXI_CTRL_BVALID,
    S_AXI_CTRL_BREADY,
    S_AXI_CTRL_ARADDR,
    S_AXI_CTRL_ARPROT,
    S_AXI_CTRL_ARVALID,
    S_AXI_CTRL_ARREADY,
    S_AXI_CTRL_RDATA,
    S_AXI_CTRL_RRESP,
    S_AXI_CTRL_RVALID,
    S_AXI_CTRL_RREADY,
    M0_AXI_AWID,
    M0_AXI_AWADDR,
    M0_AXI_AWLEN,
    M0_AXI_AWSIZE,
    M0_AXI_AWBURST,
    M0_AXI_AWLOCK,
    M0_AXI_AWCACHE,
    M0_AXI_AWPROT,
    M0_AXI_AWQOS,
    M0_AXI_AWVALID,
    M0_AXI_AWREADY,
    M0_AXI_AWDOMAIN,
    M0_AXI_AWSNOOP,
    M0_AXI_AWBAR,
    M0_AXI_WDATA,
    M0_AXI_WSTRB,
    M0_AXI_WLAST,
    M0_AXI_WVALID,
    M0_AXI_WREADY,
    M0_AXI_BRESP,
    M0_AXI_BID,
    M0_AXI_BVALID,
    M0_AXI_BREADY,
    M0_AXI_WACK,
    M0_AXI_ARID,
    M0_AXI_ARADDR,
    M0_AXI_ARLEN,
    M0_AXI_ARSIZE,
    M0_AXI_ARBURST,
    M0_AXI_ARLOCK,
    M0_AXI_ARCACHE,
    M0_AXI_ARPROT,
    M0_AXI_ARQOS,
    M0_AXI_ARVALID,
    M0_AXI_ARREADY,
    M0_AXI_ARDOMAIN,
    M0_AXI_ARSNOOP,
    M0_AXI_ARBAR,
    M0_AXI_RID,
    M0_AXI_RDATA,
    M0_AXI_RRESP,
    M0_AXI_RLAST,
    M0_AXI_RVALID,
    M0_AXI_RREADY,
    M0_AXI_RACK,
    M0_AXI_ACVALID,
    M0_AXI_ACADDR,
    M0_AXI_ACSNOOP,
    M0_AXI_ACPROT,
    M0_AXI_ACREADY,
    M0_AXI_CRVALID,
    M0_AXI_CRRESP,
    M0_AXI_CRREADY,
    M0_AXI_CDVALID,
    M0_AXI_CDDATA,
    M0_AXI_CDLAST,
    M0_AXI_CDREADY,
    M1_AXI_AWID,
    M1_AXI_AWADDR,
    M1_AXI_AWLEN,
    M1_AXI_AWSIZE,
    M1_AXI_AWBURST,
    M1_AXI_AWLOCK,
    M1_AXI_AWCACHE,
    M1_AXI_AWPROT,
    M1_AXI_AWQOS,
    M1_AXI_AWVALID,
    M1_AXI_AWREADY,
    M1_AXI_WDATA,
    M1_AXI_WSTRB,
    M1_AXI_WLAST,
    M1_AXI_WVALID,
    M1_AXI_WREADY,
    M1_AXI_BRESP,
    M1_AXI_BID,
    M1_AXI_BVALID,
    M1_AXI_BREADY,
    M1_AXI_ARID,
    M1_AXI_ARADDR,
    M1_AXI_ARLEN,
    M1_AXI_ARSIZE,
    M1_AXI_ARBURST,
    M1_AXI_ARLOCK,
    M1_AXI_ARCACHE,
    M1_AXI_ARPROT,
    M1_AXI_ARQOS,
    M1_AXI_ARVALID,
    M1_AXI_ARREADY,
    M1_AXI_RID,
    M1_AXI_RDATA,
    M1_AXI_RRESP,
    M1_AXI_RLAST,
    M1_AXI_RVALID,
    M1_AXI_RREADY,
    M2_AXI_AWID,
    M2_AXI_AWADDR,
    M2_AXI_AWLEN,
    M2_AXI_AWSIZE,
    M2_AXI_AWBURST,
    M2_AXI_AWLOCK,
    M2_AXI_AWCACHE,
    M2_AXI_AWPROT,
    M2_AXI_AWQOS,
    M2_AXI_AWVALID,
    M2_AXI_AWREADY,
    M2_AXI_WDATA,
    M2_AXI_WSTRB,
    M2_AXI_WLAST,
    M2_AXI_WVALID,
    M2_AXI_WREADY,
    M2_AXI_BRESP,
    M2_AXI_BID,
    M2_AXI_BVALID,
    M2_AXI_BREADY,
    M2_AXI_ARID,
    M2_AXI_ARADDR,
    M2_AXI_ARLEN,
    M2_AXI_ARSIZE,
    M2_AXI_ARBURST,
    M2_AXI_ARLOCK,
    M2_AXI_ARCACHE,
    M2_AXI_ARPROT,
    M2_AXI_ARQOS,
    M2_AXI_ARVALID,
    M2_AXI_ARREADY,
    M2_AXI_RID,
    M2_AXI_RDATA,
    M2_AXI_RRESP,
    M2_AXI_RLAST,
    M2_AXI_RVALID,
    M2_AXI_RREADY,
    M3_AXI_AWID,
    M3_AXI_AWADDR,
    M3_AXI_AWLEN,
    M3_AXI_AWSIZE,
    M3_AXI_AWBURST,
    M3_AXI_AWLOCK,
    M3_AXI_AWCACHE,
    M3_AXI_AWPROT,
    M3_AXI_AWQOS,
    M3_AXI_AWVALID,
    M3_AXI_AWREADY,
    M3_AXI_WDATA,
    M3_AXI_WSTRB,
    M3_AXI_WLAST,
    M3_AXI_WVALID,
    M3_AXI_WREADY,
    M3_AXI_BRESP,
    M3_AXI_BID,
    M3_AXI_BVALID,
    M3_AXI_BREADY,
    M3_AXI_ARID,
    M3_AXI_ARADDR,
    M3_AXI_ARLEN,
    M3_AXI_ARSIZE,
    M3_AXI_ARBURST,
    M3_AXI_ARLOCK,
    M3_AXI_ARCACHE,
    M3_AXI_ARPROT,
    M3_AXI_ARQOS,
    M3_AXI_ARVALID,
    M3_AXI_ARREADY,
    M3_AXI_RID,
    M3_AXI_RDATA,
    M3_AXI_RRESP,
    M3_AXI_RLAST,
    M3_AXI_RVALID,
    M3_AXI_RREADY);
  input ACLK;
  input ARESETN;
  input [0:0]S0_AXI_AWID;
  input [31:0]S0_AXI_AWADDR;
  input [7:0]S0_AXI_AWLEN;
  input [2:0]S0_AXI_AWSIZE;
  input [1:0]S0_AXI_AWBURST;
  input S0_AXI_AWLOCK;
  input [3:0]S0_AXI_AWCACHE;
  input [2:0]S0_AXI_AWPROT;
  input [3:0]S0_AXI_AWQOS;
  input S0_AXI_AWVALID;
  output S0_AXI_AWREADY;
  input [1:0]S0_AXI_AWDOMAIN;
  input [2:0]S0_AXI_AWSNOOP;
  input [1:0]S0_AXI_AWBAR;
  input [31:0]S0_AXI_WDATA;
  input [3:0]S0_AXI_WSTRB;
  input S0_AXI_WLAST;
  input S0_AXI_WVALID;
  output S0_AXI_WREADY;
  output [1:0]S0_AXI_BRESP;
  output [0:0]S0_AXI_BID;
  output S0_AXI_BVALID;
  input S0_AXI_BREADY;
  input S0_AXI_WACK;
  input [0:0]S0_AXI_ARID;
  input [31:0]S0_AXI_ARADDR;
  input [7:0]S0_AXI_ARLEN;
  input [2:0]S0_AXI_ARSIZE;
  input [1:0]S0_AXI_ARBURST;
  input S0_AXI_ARLOCK;
  input [3:0]S0_AXI_ARCACHE;
  input [2:0]S0_AXI_ARPROT;
  input [3:0]S0_AXI_ARQOS;
  input S0_AXI_ARVALID;
  output S0_AXI_ARREADY;
  input [1:0]S0_AXI_ARDOMAIN;
  input [3:0]S0_AXI_ARSNOOP;
  input [1:0]S0_AXI_ARBAR;
  output [0:0]S0_AXI_RID;
  output [31:0]S0_AXI_RDATA;
  output [1:0]S0_AXI_RRESP;
  output S0_AXI_RLAST;
  output S0_AXI_RVALID;
  input S0_AXI_RREADY;
  input S0_AXI_RACK;
  output S0_AXI_ACVALID;
  output [31:0]S0_AXI_ACADDR;
  output [3:0]S0_AXI_ACSNOOP;
  output [2:0]S0_AXI_ACPROT;
  input S0_AXI_ACREADY;
  input S0_AXI_CRVALID;
  input [4:0]S0_AXI_CRRESP;
  output S0_AXI_CRREADY;
  input S0_AXI_CDVALID;
  input [31:0]S0_AXI_CDDATA;
  input S0_AXI_CDLAST;
  output S0_AXI_CDREADY;
  input [0:0]S1_AXI_AWID;
  input [31:0]S1_AXI_AWADDR;
  input [7:0]S1_AXI_AWLEN;
  input [2:0]S1_AXI_AWSIZE;
  input [1:0]S1_AXI_AWBURST;
  input S1_AXI_AWLOCK;
  input [3:0]S1_AXI_AWCACHE;
  input [2:0]S1_AXI_AWPROT;
  input [3:0]S1_AXI_AWQOS;
  input S1_AXI_AWVALID;
  output S1_AXI_AWREADY;
  input [1:0]S1_AXI_AWDOMAIN;
  input [2:0]S1_AXI_AWSNOOP;
  input [1:0]S1_AXI_AWBAR;
  input [31:0]S1_AXI_WDATA;
  input [3:0]S1_AXI_WSTRB;
  input S1_AXI_WLAST;
  input S1_AXI_WVALID;
  output S1_AXI_WREADY;
  output [1:0]S1_AXI_BRESP;
  output [0:0]S1_AXI_BID;
  output S1_AXI_BVALID;
  input S1_AXI_BREADY;
  input S1_AXI_WACK;
  input [0:0]S1_AXI_ARID;
  input [31:0]S1_AXI_ARADDR;
  input [7:0]S1_AXI_ARLEN;
  input [2:0]S1_AXI_ARSIZE;
  input [1:0]S1_AXI_ARBURST;
  input S1_AXI_ARLOCK;
  input [3:0]S1_AXI_ARCACHE;
  input [2:0]S1_AXI_ARPROT;
  input [3:0]S1_AXI_ARQOS;
  input S1_AXI_ARVALID;
  output S1_AXI_ARREADY;
  input [1:0]S1_AXI_ARDOMAIN;
  input [3:0]S1_AXI_ARSNOOP;
  input [1:0]S1_AXI_ARBAR;
  output [0:0]S1_AXI_RID;
  output [31:0]S1_AXI_RDATA;
  output [1:0]S1_AXI_RRESP;
  output S1_AXI_RLAST;
  output S1_AXI_RVALID;
  input S1_AXI_RREADY;
  input S1_AXI_RACK;
  output S1_AXI_ACVALID;
  output [31:0]S1_AXI_ACADDR;
  output [3:0]S1_AXI_ACSNOOP;
  output [2:0]S1_AXI_ACPROT;
  input S1_AXI_ACREADY;
  input S1_AXI_CRVALID;
  input [4:0]S1_AXI_CRRESP;
  output S1_AXI_CRREADY;
  input S1_AXI_CDVALID;
  input [31:0]S1_AXI_CDDATA;
  input S1_AXI_CDLAST;
  output S1_AXI_CDREADY;
  input [0:0]S2_AXI_AWID;
  input [31:0]S2_AXI_AWADDR;
  input [7:0]S2_AXI_AWLEN;
  input [2:0]S2_AXI_AWSIZE;
  input [1:0]S2_AXI_AWBURST;
  input S2_AXI_AWLOCK;
  input [3:0]S2_AXI_AWCACHE;
  input [2:0]S2_AXI_AWPROT;
  input [3:0]S2_AXI_AWQOS;
  input S2_AXI_AWVALID;
  output S2_AXI_AWREADY;
  input [1:0]S2_AXI_AWDOMAIN;
  input [2:0]S2_AXI_AWSNOOP;
  input [1:0]S2_AXI_AWBAR;
  input [31:0]S2_AXI_WDATA;
  input [3:0]S2_AXI_WSTRB;
  input S2_AXI_WLAST;
  input S2_AXI_WVALID;
  output S2_AXI_WREADY;
  output [1:0]S2_AXI_BRESP;
  output [0:0]S2_AXI_BID;
  output S2_AXI_BVALID;
  input S2_AXI_BREADY;
  input S2_AXI_WACK;
  input [0:0]S2_AXI_ARID;
  input [31:0]S2_AXI_ARADDR;
  input [7:0]S2_AXI_ARLEN;
  input [2:0]S2_AXI_ARSIZE;
  input [1:0]S2_AXI_ARBURST;
  input S2_AXI_ARLOCK;
  input [3:0]S2_AXI_ARCACHE;
  input [2:0]S2_AXI_ARPROT;
  input [3:0]S2_AXI_ARQOS;
  input S2_AXI_ARVALID;
  output S2_AXI_ARREADY;
  input [1:0]S2_AXI_ARDOMAIN;
  input [3:0]S2_AXI_ARSNOOP;
  input [1:0]S2_AXI_ARBAR;
  output [0:0]S2_AXI_RID;
  output [31:0]S2_AXI_RDATA;
  output [1:0]S2_AXI_RRESP;
  output S2_AXI_RLAST;
  output S2_AXI_RVALID;
  input S2_AXI_RREADY;
  input S2_AXI_RACK;
  output S2_AXI_ACVALID;
  output [31:0]S2_AXI_ACADDR;
  output [3:0]S2_AXI_ACSNOOP;
  output [2:0]S2_AXI_ACPROT;
  input S2_AXI_ACREADY;
  input S2_AXI_CRVALID;
  input [4:0]S2_AXI_CRRESP;
  output S2_AXI_CRREADY;
  input S2_AXI_CDVALID;
  input [31:0]S2_AXI_CDDATA;
  input S2_AXI_CDLAST;
  output S2_AXI_CDREADY;
  input [0:0]S3_AXI_AWID;
  input [31:0]S3_AXI_AWADDR;
  input [7:0]S3_AXI_AWLEN;
  input [2:0]S3_AXI_AWSIZE;
  input [1:0]S3_AXI_AWBURST;
  input S3_AXI_AWLOCK;
  input [3:0]S3_AXI_AWCACHE;
  input [2:0]S3_AXI_AWPROT;
  input [3:0]S3_AXI_AWQOS;
  input S3_AXI_AWVALID;
  output S3_AXI_AWREADY;
  input [1:0]S3_AXI_AWDOMAIN;
  input [2:0]S3_AXI_AWSNOOP;
  input [1:0]S3_AXI_AWBAR;
  input [31:0]S3_AXI_WDATA;
  input [3:0]S3_AXI_WSTRB;
  input S3_AXI_WLAST;
  input S3_AXI_WVALID;
  output S3_AXI_WREADY;
  output [1:0]S3_AXI_BRESP;
  output [0:0]S3_AXI_BID;
  output S3_AXI_BVALID;
  input S3_AXI_BREADY;
  input S3_AXI_WACK;
  input [0:0]S3_AXI_ARID;
  input [31:0]S3_AXI_ARADDR;
  input [7:0]S3_AXI_ARLEN;
  input [2:0]S3_AXI_ARSIZE;
  input [1:0]S3_AXI_ARBURST;
  input S3_AXI_ARLOCK;
  input [3:0]S3_AXI_ARCACHE;
  input [2:0]S3_AXI_ARPROT;
  input [3:0]S3_AXI_ARQOS;
  input S3_AXI_ARVALID;
  output S3_AXI_ARREADY;
  input [1:0]S3_AXI_ARDOMAIN;
  input [3:0]S3_AXI_ARSNOOP;
  input [1:0]S3_AXI_ARBAR;
  output [0:0]S3_AXI_RID;
  output [31:0]S3_AXI_RDATA;
  output [1:0]S3_AXI_RRESP;
  output S3_AXI_RLAST;
  output S3_AXI_RVALID;
  input S3_AXI_RREADY;
  input S3_AXI_RACK;
  output S3_AXI_ACVALID;
  output [31:0]S3_AXI_ACADDR;
  output [3:0]S3_AXI_ACSNOOP;
  output [2:0]S3_AXI_ACPROT;
  input S3_AXI_ACREADY;
  input S3_AXI_CRVALID;
  input [4:0]S3_AXI_CRRESP;
  output S3_AXI_CRREADY;
  input S3_AXI_CDVALID;
  input [31:0]S3_AXI_CDDATA;
  input S3_AXI_CDLAST;
  output S3_AXI_CDREADY;
  input [0:0]S4_AXI_AWID;
  input [31:0]S4_AXI_AWADDR;
  input [7:0]S4_AXI_AWLEN;
  input [2:0]S4_AXI_AWSIZE;
  input [1:0]S4_AXI_AWBURST;
  input S4_AXI_AWLOCK;
  input [3:0]S4_AXI_AWCACHE;
  input [2:0]S4_AXI_AWPROT;
  input [3:0]S4_AXI_AWQOS;
  input S4_AXI_AWVALID;
  output S4_AXI_AWREADY;
  input [1:0]S4_AXI_AWDOMAIN;
  input [2:0]S4_AXI_AWSNOOP;
  input [1:0]S4_AXI_AWBAR;
  input [31:0]S4_AXI_WDATA;
  input [3:0]S4_AXI_WSTRB;
  input S4_AXI_WLAST;
  input S4_AXI_WVALID;
  output S4_AXI_WREADY;
  output [1:0]S4_AXI_BRESP;
  output [0:0]S4_AXI_BID;
  output S4_AXI_BVALID;
  input S4_AXI_BREADY;
  input S4_AXI_WACK;
  input [0:0]S4_AXI_ARID;
  input [31:0]S4_AXI_ARADDR;
  input [7:0]S4_AXI_ARLEN;
  input [2:0]S4_AXI_ARSIZE;
  input [1:0]S4_AXI_ARBURST;
  input S4_AXI_ARLOCK;
  input [3:0]S4_AXI_ARCACHE;
  input [2:0]S4_AXI_ARPROT;
  input [3:0]S4_AXI_ARQOS;
  input S4_AXI_ARVALID;
  output S4_AXI_ARREADY;
  input [1:0]S4_AXI_ARDOMAIN;
  input [3:0]S4_AXI_ARSNOOP;
  input [1:0]S4_AXI_ARBAR;
  output [0:0]S4_AXI_RID;
  output [31:0]S4_AXI_RDATA;
  output [1:0]S4_AXI_RRESP;
  output S4_AXI_RLAST;
  output S4_AXI_RVALID;
  input S4_AXI_RREADY;
  input S4_AXI_RACK;
  output S4_AXI_ACVALID;
  output [31:0]S4_AXI_ACADDR;
  output [3:0]S4_AXI_ACSNOOP;
  output [2:0]S4_AXI_ACPROT;
  input S4_AXI_ACREADY;
  input S4_AXI_CRVALID;
  input [4:0]S4_AXI_CRRESP;
  output S4_AXI_CRREADY;
  input S4_AXI_CDVALID;
  input [31:0]S4_AXI_CDDATA;
  input S4_AXI_CDLAST;
  output S4_AXI_CDREADY;
  input [0:0]S5_AXI_AWID;
  input [31:0]S5_AXI_AWADDR;
  input [7:0]S5_AXI_AWLEN;
  input [2:0]S5_AXI_AWSIZE;
  input [1:0]S5_AXI_AWBURST;
  input S5_AXI_AWLOCK;
  input [3:0]S5_AXI_AWCACHE;
  input [2:0]S5_AXI_AWPROT;
  input [3:0]S5_AXI_AWQOS;
  input S5_AXI_AWVALID;
  output S5_AXI_AWREADY;
  input [1:0]S5_AXI_AWDOMAIN;
  input [2:0]S5_AXI_AWSNOOP;
  input [1:0]S5_AXI_AWBAR;
  input [31:0]S5_AXI_WDATA;
  input [3:0]S5_AXI_WSTRB;
  input S5_AXI_WLAST;
  input S5_AXI_WVALID;
  output S5_AXI_WREADY;
  output [1:0]S5_AXI_BRESP;
  output [0:0]S5_AXI_BID;
  output S5_AXI_BVALID;
  input S5_AXI_BREADY;
  input S5_AXI_WACK;
  input [0:0]S5_AXI_ARID;
  input [31:0]S5_AXI_ARADDR;
  input [7:0]S5_AXI_ARLEN;
  input [2:0]S5_AXI_ARSIZE;
  input [1:0]S5_AXI_ARBURST;
  input S5_AXI_ARLOCK;
  input [3:0]S5_AXI_ARCACHE;
  input [2:0]S5_AXI_ARPROT;
  input [3:0]S5_AXI_ARQOS;
  input S5_AXI_ARVALID;
  output S5_AXI_ARREADY;
  input [1:0]S5_AXI_ARDOMAIN;
  input [3:0]S5_AXI_ARSNOOP;
  input [1:0]S5_AXI_ARBAR;
  output [0:0]S5_AXI_RID;
  output [31:0]S5_AXI_RDATA;
  output [1:0]S5_AXI_RRESP;
  output S5_AXI_RLAST;
  output S5_AXI_RVALID;
  input S5_AXI_RREADY;
  input S5_AXI_RACK;
  output S5_AXI_ACVALID;
  output [31:0]S5_AXI_ACADDR;
  output [3:0]S5_AXI_ACSNOOP;
  output [2:0]S5_AXI_ACPROT;
  input S5_AXI_ACREADY;
  input S5_AXI_CRVALID;
  input [4:0]S5_AXI_CRRESP;
  output S5_AXI_CRREADY;
  input S5_AXI_CDVALID;
  input [31:0]S5_AXI_CDDATA;
  input S5_AXI_CDLAST;
  output S5_AXI_CDREADY;
  input [0:0]S6_AXI_AWID;
  input [31:0]S6_AXI_AWADDR;
  input [7:0]S6_AXI_AWLEN;
  input [2:0]S6_AXI_AWSIZE;
  input [1:0]S6_AXI_AWBURST;
  input S6_AXI_AWLOCK;
  input [3:0]S6_AXI_AWCACHE;
  input [2:0]S6_AXI_AWPROT;
  input [3:0]S6_AXI_AWQOS;
  input S6_AXI_AWVALID;
  output S6_AXI_AWREADY;
  input [1:0]S6_AXI_AWDOMAIN;
  input [2:0]S6_AXI_AWSNOOP;
  input [1:0]S6_AXI_AWBAR;
  input [31:0]S6_AXI_WDATA;
  input [3:0]S6_AXI_WSTRB;
  input S6_AXI_WLAST;
  input S6_AXI_WVALID;
  output S6_AXI_WREADY;
  output [1:0]S6_AXI_BRESP;
  output [0:0]S6_AXI_BID;
  output S6_AXI_BVALID;
  input S6_AXI_BREADY;
  input S6_AXI_WACK;
  input [0:0]S6_AXI_ARID;
  input [31:0]S6_AXI_ARADDR;
  input [7:0]S6_AXI_ARLEN;
  input [2:0]S6_AXI_ARSIZE;
  input [1:0]S6_AXI_ARBURST;
  input S6_AXI_ARLOCK;
  input [3:0]S6_AXI_ARCACHE;
  input [2:0]S6_AXI_ARPROT;
  input [3:0]S6_AXI_ARQOS;
  input S6_AXI_ARVALID;
  output S6_AXI_ARREADY;
  input [1:0]S6_AXI_ARDOMAIN;
  input [3:0]S6_AXI_ARSNOOP;
  input [1:0]S6_AXI_ARBAR;
  output [0:0]S6_AXI_RID;
  output [31:0]S6_AXI_RDATA;
  output [1:0]S6_AXI_RRESP;
  output S6_AXI_RLAST;
  output S6_AXI_RVALID;
  input S6_AXI_RREADY;
  input S6_AXI_RACK;
  output S6_AXI_ACVALID;
  output [31:0]S6_AXI_ACADDR;
  output [3:0]S6_AXI_ACSNOOP;
  output [2:0]S6_AXI_ACPROT;
  input S6_AXI_ACREADY;
  input S6_AXI_CRVALID;
  input [4:0]S6_AXI_CRRESP;
  output S6_AXI_CRREADY;
  input S6_AXI_CDVALID;
  input [31:0]S6_AXI_CDDATA;
  input S6_AXI_CDLAST;
  output S6_AXI_CDREADY;
  input [0:0]S7_AXI_AWID;
  input [31:0]S7_AXI_AWADDR;
  input [7:0]S7_AXI_AWLEN;
  input [2:0]S7_AXI_AWSIZE;
  input [1:0]S7_AXI_AWBURST;
  input S7_AXI_AWLOCK;
  input [3:0]S7_AXI_AWCACHE;
  input [2:0]S7_AXI_AWPROT;
  input [3:0]S7_AXI_AWQOS;
  input S7_AXI_AWVALID;
  output S7_AXI_AWREADY;
  input [1:0]S7_AXI_AWDOMAIN;
  input [2:0]S7_AXI_AWSNOOP;
  input [1:0]S7_AXI_AWBAR;
  input [31:0]S7_AXI_WDATA;
  input [3:0]S7_AXI_WSTRB;
  input S7_AXI_WLAST;
  input S7_AXI_WVALID;
  output S7_AXI_WREADY;
  output [1:0]S7_AXI_BRESP;
  output [0:0]S7_AXI_BID;
  output S7_AXI_BVALID;
  input S7_AXI_BREADY;
  input S7_AXI_WACK;
  input [0:0]S7_AXI_ARID;
  input [31:0]S7_AXI_ARADDR;
  input [7:0]S7_AXI_ARLEN;
  input [2:0]S7_AXI_ARSIZE;
  input [1:0]S7_AXI_ARBURST;
  input S7_AXI_ARLOCK;
  input [3:0]S7_AXI_ARCACHE;
  input [2:0]S7_AXI_ARPROT;
  input [3:0]S7_AXI_ARQOS;
  input S7_AXI_ARVALID;
  output S7_AXI_ARREADY;
  input [1:0]S7_AXI_ARDOMAIN;
  input [3:0]S7_AXI_ARSNOOP;
  input [1:0]S7_AXI_ARBAR;
  output [0:0]S7_AXI_RID;
  output [31:0]S7_AXI_RDATA;
  output [1:0]S7_AXI_RRESP;
  output S7_AXI_RLAST;
  output S7_AXI_RVALID;
  input S7_AXI_RREADY;
  input S7_AXI_RACK;
  output S7_AXI_ACVALID;
  output [31:0]S7_AXI_ACADDR;
  output [3:0]S7_AXI_ACSNOOP;
  output [2:0]S7_AXI_ACPROT;
  input S7_AXI_ACREADY;
  input S7_AXI_CRVALID;
  input [4:0]S7_AXI_CRRESP;
  output S7_AXI_CRREADY;
  input S7_AXI_CDVALID;
  input [31:0]S7_AXI_CDDATA;
  input S7_AXI_CDLAST;
  output S7_AXI_CDREADY;
  input [0:0]S8_AXI_AWID;
  input [31:0]S8_AXI_AWADDR;
  input [7:0]S8_AXI_AWLEN;
  input [2:0]S8_AXI_AWSIZE;
  input [1:0]S8_AXI_AWBURST;
  input S8_AXI_AWLOCK;
  input [3:0]S8_AXI_AWCACHE;
  input [2:0]S8_AXI_AWPROT;
  input [3:0]S8_AXI_AWQOS;
  input S8_AXI_AWVALID;
  output S8_AXI_AWREADY;
  input [1:0]S8_AXI_AWDOMAIN;
  input [2:0]S8_AXI_AWSNOOP;
  input [1:0]S8_AXI_AWBAR;
  input [31:0]S8_AXI_WDATA;
  input [3:0]S8_AXI_WSTRB;
  input S8_AXI_WLAST;
  input S8_AXI_WVALID;
  output S8_AXI_WREADY;
  output [1:0]S8_AXI_BRESP;
  output [0:0]S8_AXI_BID;
  output S8_AXI_BVALID;
  input S8_AXI_BREADY;
  input S8_AXI_WACK;
  input [0:0]S8_AXI_ARID;
  input [31:0]S8_AXI_ARADDR;
  input [7:0]S8_AXI_ARLEN;
  input [2:0]S8_AXI_ARSIZE;
  input [1:0]S8_AXI_ARBURST;
  input S8_AXI_ARLOCK;
  input [3:0]S8_AXI_ARCACHE;
  input [2:0]S8_AXI_ARPROT;
  input [3:0]S8_AXI_ARQOS;
  input S8_AXI_ARVALID;
  output S8_AXI_ARREADY;
  input [1:0]S8_AXI_ARDOMAIN;
  input [3:0]S8_AXI_ARSNOOP;
  input [1:0]S8_AXI_ARBAR;
  output [0:0]S8_AXI_RID;
  output [31:0]S8_AXI_RDATA;
  output [1:0]S8_AXI_RRESP;
  output S8_AXI_RLAST;
  output S8_AXI_RVALID;
  input S8_AXI_RREADY;
  input S8_AXI_RACK;
  output S8_AXI_ACVALID;
  output [31:0]S8_AXI_ACADDR;
  output [3:0]S8_AXI_ACSNOOP;
  output [2:0]S8_AXI_ACPROT;
  input S8_AXI_ACREADY;
  input S8_AXI_CRVALID;
  input [4:0]S8_AXI_CRRESP;
  output S8_AXI_CRREADY;
  input S8_AXI_CDVALID;
  input [31:0]S8_AXI_CDDATA;
  input S8_AXI_CDLAST;
  output S8_AXI_CDREADY;
  input [0:0]S9_AXI_AWID;
  input [31:0]S9_AXI_AWADDR;
  input [7:0]S9_AXI_AWLEN;
  input [2:0]S9_AXI_AWSIZE;
  input [1:0]S9_AXI_AWBURST;
  input S9_AXI_AWLOCK;
  input [3:0]S9_AXI_AWCACHE;
  input [2:0]S9_AXI_AWPROT;
  input [3:0]S9_AXI_AWQOS;
  input S9_AXI_AWVALID;
  output S9_AXI_AWREADY;
  input [1:0]S9_AXI_AWDOMAIN;
  input [2:0]S9_AXI_AWSNOOP;
  input [1:0]S9_AXI_AWBAR;
  input [31:0]S9_AXI_WDATA;
  input [3:0]S9_AXI_WSTRB;
  input S9_AXI_WLAST;
  input S9_AXI_WVALID;
  output S9_AXI_WREADY;
  output [1:0]S9_AXI_BRESP;
  output [0:0]S9_AXI_BID;
  output S9_AXI_BVALID;
  input S9_AXI_BREADY;
  input S9_AXI_WACK;
  input [0:0]S9_AXI_ARID;
  input [31:0]S9_AXI_ARADDR;
  input [7:0]S9_AXI_ARLEN;
  input [2:0]S9_AXI_ARSIZE;
  input [1:0]S9_AXI_ARBURST;
  input S9_AXI_ARLOCK;
  input [3:0]S9_AXI_ARCACHE;
  input [2:0]S9_AXI_ARPROT;
  input [3:0]S9_AXI_ARQOS;
  input S9_AXI_ARVALID;
  output S9_AXI_ARREADY;
  input [1:0]S9_AXI_ARDOMAIN;
  input [3:0]S9_AXI_ARSNOOP;
  input [1:0]S9_AXI_ARBAR;
  output [0:0]S9_AXI_RID;
  output [31:0]S9_AXI_RDATA;
  output [1:0]S9_AXI_RRESP;
  output S9_AXI_RLAST;
  output S9_AXI_RVALID;
  input S9_AXI_RREADY;
  input S9_AXI_RACK;
  output S9_AXI_ACVALID;
  output [31:0]S9_AXI_ACADDR;
  output [3:0]S9_AXI_ACSNOOP;
  output [2:0]S9_AXI_ACPROT;
  input S9_AXI_ACREADY;
  input S9_AXI_CRVALID;
  input [4:0]S9_AXI_CRRESP;
  output S9_AXI_CRREADY;
  input S9_AXI_CDVALID;
  input [31:0]S9_AXI_CDDATA;
  input S9_AXI_CDLAST;
  output S9_AXI_CDREADY;
  input [0:0]S10_AXI_AWID;
  input [31:0]S10_AXI_AWADDR;
  input [7:0]S10_AXI_AWLEN;
  input [2:0]S10_AXI_AWSIZE;
  input [1:0]S10_AXI_AWBURST;
  input S10_AXI_AWLOCK;
  input [3:0]S10_AXI_AWCACHE;
  input [2:0]S10_AXI_AWPROT;
  input [3:0]S10_AXI_AWQOS;
  input S10_AXI_AWVALID;
  output S10_AXI_AWREADY;
  input [1:0]S10_AXI_AWDOMAIN;
  input [2:0]S10_AXI_AWSNOOP;
  input [1:0]S10_AXI_AWBAR;
  input [31:0]S10_AXI_WDATA;
  input [3:0]S10_AXI_WSTRB;
  input S10_AXI_WLAST;
  input S10_AXI_WVALID;
  output S10_AXI_WREADY;
  output [1:0]S10_AXI_BRESP;
  output [0:0]S10_AXI_BID;
  output S10_AXI_BVALID;
  input S10_AXI_BREADY;
  input S10_AXI_WACK;
  input [0:0]S10_AXI_ARID;
  input [31:0]S10_AXI_ARADDR;
  input [7:0]S10_AXI_ARLEN;
  input [2:0]S10_AXI_ARSIZE;
  input [1:0]S10_AXI_ARBURST;
  input S10_AXI_ARLOCK;
  input [3:0]S10_AXI_ARCACHE;
  input [2:0]S10_AXI_ARPROT;
  input [3:0]S10_AXI_ARQOS;
  input S10_AXI_ARVALID;
  output S10_AXI_ARREADY;
  input [1:0]S10_AXI_ARDOMAIN;
  input [3:0]S10_AXI_ARSNOOP;
  input [1:0]S10_AXI_ARBAR;
  output [0:0]S10_AXI_RID;
  output [31:0]S10_AXI_RDATA;
  output [1:0]S10_AXI_RRESP;
  output S10_AXI_RLAST;
  output S10_AXI_RVALID;
  input S10_AXI_RREADY;
  input S10_AXI_RACK;
  output S10_AXI_ACVALID;
  output [31:0]S10_AXI_ACADDR;
  output [3:0]S10_AXI_ACSNOOP;
  output [2:0]S10_AXI_ACPROT;
  input S10_AXI_ACREADY;
  input S10_AXI_CRVALID;
  input [4:0]S10_AXI_CRRESP;
  output S10_AXI_CRREADY;
  input S10_AXI_CDVALID;
  input [31:0]S10_AXI_CDDATA;
  input S10_AXI_CDLAST;
  output S10_AXI_CDREADY;
  input [0:0]S11_AXI_AWID;
  input [31:0]S11_AXI_AWADDR;
  input [7:0]S11_AXI_AWLEN;
  input [2:0]S11_AXI_AWSIZE;
  input [1:0]S11_AXI_AWBURST;
  input S11_AXI_AWLOCK;
  input [3:0]S11_AXI_AWCACHE;
  input [2:0]S11_AXI_AWPROT;
  input [3:0]S11_AXI_AWQOS;
  input S11_AXI_AWVALID;
  output S11_AXI_AWREADY;
  input [1:0]S11_AXI_AWDOMAIN;
  input [2:0]S11_AXI_AWSNOOP;
  input [1:0]S11_AXI_AWBAR;
  input [31:0]S11_AXI_WDATA;
  input [3:0]S11_AXI_WSTRB;
  input S11_AXI_WLAST;
  input S11_AXI_WVALID;
  output S11_AXI_WREADY;
  output [1:0]S11_AXI_BRESP;
  output [0:0]S11_AXI_BID;
  output S11_AXI_BVALID;
  input S11_AXI_BREADY;
  input S11_AXI_WACK;
  input [0:0]S11_AXI_ARID;
  input [31:0]S11_AXI_ARADDR;
  input [7:0]S11_AXI_ARLEN;
  input [2:0]S11_AXI_ARSIZE;
  input [1:0]S11_AXI_ARBURST;
  input S11_AXI_ARLOCK;
  input [3:0]S11_AXI_ARCACHE;
  input [2:0]S11_AXI_ARPROT;
  input [3:0]S11_AXI_ARQOS;
  input S11_AXI_ARVALID;
  output S11_AXI_ARREADY;
  input [1:0]S11_AXI_ARDOMAIN;
  input [3:0]S11_AXI_ARSNOOP;
  input [1:0]S11_AXI_ARBAR;
  output [0:0]S11_AXI_RID;
  output [31:0]S11_AXI_RDATA;
  output [1:0]S11_AXI_RRESP;
  output S11_AXI_RLAST;
  output S11_AXI_RVALID;
  input S11_AXI_RREADY;
  input S11_AXI_RACK;
  output S11_AXI_ACVALID;
  output [31:0]S11_AXI_ACADDR;
  output [3:0]S11_AXI_ACSNOOP;
  output [2:0]S11_AXI_ACPROT;
  input S11_AXI_ACREADY;
  input S11_AXI_CRVALID;
  input [4:0]S11_AXI_CRRESP;
  output S11_AXI_CRREADY;
  input S11_AXI_CDVALID;
  input [31:0]S11_AXI_CDDATA;
  input S11_AXI_CDLAST;
  output S11_AXI_CDREADY;
  input [0:0]S12_AXI_AWID;
  input [31:0]S12_AXI_AWADDR;
  input [7:0]S12_AXI_AWLEN;
  input [2:0]S12_AXI_AWSIZE;
  input [1:0]S12_AXI_AWBURST;
  input S12_AXI_AWLOCK;
  input [3:0]S12_AXI_AWCACHE;
  input [2:0]S12_AXI_AWPROT;
  input [3:0]S12_AXI_AWQOS;
  input S12_AXI_AWVALID;
  output S12_AXI_AWREADY;
  input [1:0]S12_AXI_AWDOMAIN;
  input [2:0]S12_AXI_AWSNOOP;
  input [1:0]S12_AXI_AWBAR;
  input [31:0]S12_AXI_WDATA;
  input [3:0]S12_AXI_WSTRB;
  input S12_AXI_WLAST;
  input S12_AXI_WVALID;
  output S12_AXI_WREADY;
  output [1:0]S12_AXI_BRESP;
  output [0:0]S12_AXI_BID;
  output S12_AXI_BVALID;
  input S12_AXI_BREADY;
  input S12_AXI_WACK;
  input [0:0]S12_AXI_ARID;
  input [31:0]S12_AXI_ARADDR;
  input [7:0]S12_AXI_ARLEN;
  input [2:0]S12_AXI_ARSIZE;
  input [1:0]S12_AXI_ARBURST;
  input S12_AXI_ARLOCK;
  input [3:0]S12_AXI_ARCACHE;
  input [2:0]S12_AXI_ARPROT;
  input [3:0]S12_AXI_ARQOS;
  input S12_AXI_ARVALID;
  output S12_AXI_ARREADY;
  input [1:0]S12_AXI_ARDOMAIN;
  input [3:0]S12_AXI_ARSNOOP;
  input [1:0]S12_AXI_ARBAR;
  output [0:0]S12_AXI_RID;
  output [31:0]S12_AXI_RDATA;
  output [1:0]S12_AXI_RRESP;
  output S12_AXI_RLAST;
  output S12_AXI_RVALID;
  input S12_AXI_RREADY;
  input S12_AXI_RACK;
  output S12_AXI_ACVALID;
  output [31:0]S12_AXI_ACADDR;
  output [3:0]S12_AXI_ACSNOOP;
  output [2:0]S12_AXI_ACPROT;
  input S12_AXI_ACREADY;
  input S12_AXI_CRVALID;
  input [4:0]S12_AXI_CRRESP;
  output S12_AXI_CRREADY;
  input S12_AXI_CDVALID;
  input [31:0]S12_AXI_CDDATA;
  input S12_AXI_CDLAST;
  output S12_AXI_CDREADY;
  input [0:0]S13_AXI_AWID;
  input [31:0]S13_AXI_AWADDR;
  input [7:0]S13_AXI_AWLEN;
  input [2:0]S13_AXI_AWSIZE;
  input [1:0]S13_AXI_AWBURST;
  input S13_AXI_AWLOCK;
  input [3:0]S13_AXI_AWCACHE;
  input [2:0]S13_AXI_AWPROT;
  input [3:0]S13_AXI_AWQOS;
  input S13_AXI_AWVALID;
  output S13_AXI_AWREADY;
  input [1:0]S13_AXI_AWDOMAIN;
  input [2:0]S13_AXI_AWSNOOP;
  input [1:0]S13_AXI_AWBAR;
  input [31:0]S13_AXI_WDATA;
  input [3:0]S13_AXI_WSTRB;
  input S13_AXI_WLAST;
  input S13_AXI_WVALID;
  output S13_AXI_WREADY;
  output [1:0]S13_AXI_BRESP;
  output [0:0]S13_AXI_BID;
  output S13_AXI_BVALID;
  input S13_AXI_BREADY;
  input S13_AXI_WACK;
  input [0:0]S13_AXI_ARID;
  input [31:0]S13_AXI_ARADDR;
  input [7:0]S13_AXI_ARLEN;
  input [2:0]S13_AXI_ARSIZE;
  input [1:0]S13_AXI_ARBURST;
  input S13_AXI_ARLOCK;
  input [3:0]S13_AXI_ARCACHE;
  input [2:0]S13_AXI_ARPROT;
  input [3:0]S13_AXI_ARQOS;
  input S13_AXI_ARVALID;
  output S13_AXI_ARREADY;
  input [1:0]S13_AXI_ARDOMAIN;
  input [3:0]S13_AXI_ARSNOOP;
  input [1:0]S13_AXI_ARBAR;
  output [0:0]S13_AXI_RID;
  output [31:0]S13_AXI_RDATA;
  output [1:0]S13_AXI_RRESP;
  output S13_AXI_RLAST;
  output S13_AXI_RVALID;
  input S13_AXI_RREADY;
  input S13_AXI_RACK;
  output S13_AXI_ACVALID;
  output [31:0]S13_AXI_ACADDR;
  output [3:0]S13_AXI_ACSNOOP;
  output [2:0]S13_AXI_ACPROT;
  input S13_AXI_ACREADY;
  input S13_AXI_CRVALID;
  input [4:0]S13_AXI_CRRESP;
  output S13_AXI_CRREADY;
  input S13_AXI_CDVALID;
  input [31:0]S13_AXI_CDDATA;
  input S13_AXI_CDLAST;
  output S13_AXI_CDREADY;
  input [0:0]S14_AXI_AWID;
  input [31:0]S14_AXI_AWADDR;
  input [7:0]S14_AXI_AWLEN;
  input [2:0]S14_AXI_AWSIZE;
  input [1:0]S14_AXI_AWBURST;
  input S14_AXI_AWLOCK;
  input [3:0]S14_AXI_AWCACHE;
  input [2:0]S14_AXI_AWPROT;
  input [3:0]S14_AXI_AWQOS;
  input S14_AXI_AWVALID;
  output S14_AXI_AWREADY;
  input [1:0]S14_AXI_AWDOMAIN;
  input [2:0]S14_AXI_AWSNOOP;
  input [1:0]S14_AXI_AWBAR;
  input [31:0]S14_AXI_WDATA;
  input [3:0]S14_AXI_WSTRB;
  input S14_AXI_WLAST;
  input S14_AXI_WVALID;
  output S14_AXI_WREADY;
  output [1:0]S14_AXI_BRESP;
  output [0:0]S14_AXI_BID;
  output S14_AXI_BVALID;
  input S14_AXI_BREADY;
  input S14_AXI_WACK;
  input [0:0]S14_AXI_ARID;
  input [31:0]S14_AXI_ARADDR;
  input [7:0]S14_AXI_ARLEN;
  input [2:0]S14_AXI_ARSIZE;
  input [1:0]S14_AXI_ARBURST;
  input S14_AXI_ARLOCK;
  input [3:0]S14_AXI_ARCACHE;
  input [2:0]S14_AXI_ARPROT;
  input [3:0]S14_AXI_ARQOS;
  input S14_AXI_ARVALID;
  output S14_AXI_ARREADY;
  input [1:0]S14_AXI_ARDOMAIN;
  input [3:0]S14_AXI_ARSNOOP;
  input [1:0]S14_AXI_ARBAR;
  output [0:0]S14_AXI_RID;
  output [31:0]S14_AXI_RDATA;
  output [1:0]S14_AXI_RRESP;
  output S14_AXI_RLAST;
  output S14_AXI_RVALID;
  input S14_AXI_RREADY;
  input S14_AXI_RACK;
  output S14_AXI_ACVALID;
  output [31:0]S14_AXI_ACADDR;
  output [3:0]S14_AXI_ACSNOOP;
  output [2:0]S14_AXI_ACPROT;
  input S14_AXI_ACREADY;
  input S14_AXI_CRVALID;
  input [4:0]S14_AXI_CRRESP;
  output S14_AXI_CRREADY;
  input S14_AXI_CDVALID;
  input [31:0]S14_AXI_CDDATA;
  input S14_AXI_CDLAST;
  output S14_AXI_CDREADY;
  input [0:0]S15_AXI_AWID;
  input [31:0]S15_AXI_AWADDR;
  input [7:0]S15_AXI_AWLEN;
  input [2:0]S15_AXI_AWSIZE;
  input [1:0]S15_AXI_AWBURST;
  input S15_AXI_AWLOCK;
  input [3:0]S15_AXI_AWCACHE;
  input [2:0]S15_AXI_AWPROT;
  input [3:0]S15_AXI_AWQOS;
  input S15_AXI_AWVALID;
  output S15_AXI_AWREADY;
  input [1:0]S15_AXI_AWDOMAIN;
  input [2:0]S15_AXI_AWSNOOP;
  input [1:0]S15_AXI_AWBAR;
  input [31:0]S15_AXI_WDATA;
  input [3:0]S15_AXI_WSTRB;
  input S15_AXI_WLAST;
  input S15_AXI_WVALID;
  output S15_AXI_WREADY;
  output [1:0]S15_AXI_BRESP;
  output [0:0]S15_AXI_BID;
  output S15_AXI_BVALID;
  input S15_AXI_BREADY;
  input S15_AXI_WACK;
  input [0:0]S15_AXI_ARID;
  input [31:0]S15_AXI_ARADDR;
  input [7:0]S15_AXI_ARLEN;
  input [2:0]S15_AXI_ARSIZE;
  input [1:0]S15_AXI_ARBURST;
  input S15_AXI_ARLOCK;
  input [3:0]S15_AXI_ARCACHE;
  input [2:0]S15_AXI_ARPROT;
  input [3:0]S15_AXI_ARQOS;
  input S15_AXI_ARVALID;
  output S15_AXI_ARREADY;
  input [1:0]S15_AXI_ARDOMAIN;
  input [3:0]S15_AXI_ARSNOOP;
  input [1:0]S15_AXI_ARBAR;
  output [0:0]S15_AXI_RID;
  output [31:0]S15_AXI_RDATA;
  output [1:0]S15_AXI_RRESP;
  output S15_AXI_RLAST;
  output S15_AXI_RVALID;
  input S15_AXI_RREADY;
  input S15_AXI_RACK;
  output S15_AXI_ACVALID;
  output [31:0]S15_AXI_ACADDR;
  output [3:0]S15_AXI_ACSNOOP;
  output [2:0]S15_AXI_ACPROT;
  input S15_AXI_ACREADY;
  input S15_AXI_CRVALID;
  input [4:0]S15_AXI_CRRESP;
  output S15_AXI_CRREADY;
  input S15_AXI_CDVALID;
  input [31:0]S15_AXI_CDDATA;
  input S15_AXI_CDLAST;
  output S15_AXI_CDREADY;
  input [0:0]S0_AXI_GEN_AWID;
  input [31:0]S0_AXI_GEN_AWADDR;
  input [7:0]S0_AXI_GEN_AWLEN;
  input [2:0]S0_AXI_GEN_AWSIZE;
  input [1:0]S0_AXI_GEN_AWBURST;
  input S0_AXI_GEN_AWLOCK;
  input [3:0]S0_AXI_GEN_AWCACHE;
  input [2:0]S0_AXI_GEN_AWPROT;
  input [3:0]S0_AXI_GEN_AWQOS;
  input S0_AXI_GEN_AWVALID;
  output S0_AXI_GEN_AWREADY;
  input [31:0]S0_AXI_GEN_WDATA;
  input [3:0]S0_AXI_GEN_WSTRB;
  input S0_AXI_GEN_WLAST;
  input S0_AXI_GEN_WVALID;
  output S0_AXI_GEN_WREADY;
  output [1:0]S0_AXI_GEN_BRESP;
  output [0:0]S0_AXI_GEN_BID;
  output S0_AXI_GEN_BVALID;
  input S0_AXI_GEN_BREADY;
  input [0:0]S0_AXI_GEN_ARID;
  input [31:0]S0_AXI_GEN_ARADDR;
  input [7:0]S0_AXI_GEN_ARLEN;
  input [2:0]S0_AXI_GEN_ARSIZE;
  input [1:0]S0_AXI_GEN_ARBURST;
  input S0_AXI_GEN_ARLOCK;
  input [3:0]S0_AXI_GEN_ARCACHE;
  input [2:0]S0_AXI_GEN_ARPROT;
  input [3:0]S0_AXI_GEN_ARQOS;
  input S0_AXI_GEN_ARVALID;
  output S0_AXI_GEN_ARREADY;
  output [0:0]S0_AXI_GEN_RID;
  output [31:0]S0_AXI_GEN_RDATA;
  output [1:0]S0_AXI_GEN_RRESP;
  output S0_AXI_GEN_RLAST;
  output S0_AXI_GEN_RVALID;
  input S0_AXI_GEN_RREADY;
  input [0:0]S1_AXI_GEN_AWID;
  input [31:0]S1_AXI_GEN_AWADDR;
  input [7:0]S1_AXI_GEN_AWLEN;
  input [2:0]S1_AXI_GEN_AWSIZE;
  input [1:0]S1_AXI_GEN_AWBURST;
  input S1_AXI_GEN_AWLOCK;
  input [3:0]S1_AXI_GEN_AWCACHE;
  input [2:0]S1_AXI_GEN_AWPROT;
  input [3:0]S1_AXI_GEN_AWQOS;
  input S1_AXI_GEN_AWVALID;
  output S1_AXI_GEN_AWREADY;
  input [31:0]S1_AXI_GEN_WDATA;
  input [3:0]S1_AXI_GEN_WSTRB;
  input S1_AXI_GEN_WLAST;
  input S1_AXI_GEN_WVALID;
  output S1_AXI_GEN_WREADY;
  output [1:0]S1_AXI_GEN_BRESP;
  output [0:0]S1_AXI_GEN_BID;
  output S1_AXI_GEN_BVALID;
  input S1_AXI_GEN_BREADY;
  input [0:0]S1_AXI_GEN_ARID;
  input [31:0]S1_AXI_GEN_ARADDR;
  input [7:0]S1_AXI_GEN_ARLEN;
  input [2:0]S1_AXI_GEN_ARSIZE;
  input [1:0]S1_AXI_GEN_ARBURST;
  input S1_AXI_GEN_ARLOCK;
  input [3:0]S1_AXI_GEN_ARCACHE;
  input [2:0]S1_AXI_GEN_ARPROT;
  input [3:0]S1_AXI_GEN_ARQOS;
  input S1_AXI_GEN_ARVALID;
  output S1_AXI_GEN_ARREADY;
  output [0:0]S1_AXI_GEN_RID;
  output [31:0]S1_AXI_GEN_RDATA;
  output [1:0]S1_AXI_GEN_RRESP;
  output S1_AXI_GEN_RLAST;
  output S1_AXI_GEN_RVALID;
  input S1_AXI_GEN_RREADY;
  input [0:0]S2_AXI_GEN_AWID;
  input [31:0]S2_AXI_GEN_AWADDR;
  input [7:0]S2_AXI_GEN_AWLEN;
  input [2:0]S2_AXI_GEN_AWSIZE;
  input [1:0]S2_AXI_GEN_AWBURST;
  input S2_AXI_GEN_AWLOCK;
  input [3:0]S2_AXI_GEN_AWCACHE;
  input [2:0]S2_AXI_GEN_AWPROT;
  input [3:0]S2_AXI_GEN_AWQOS;
  input S2_AXI_GEN_AWVALID;
  output S2_AXI_GEN_AWREADY;
  input [31:0]S2_AXI_GEN_WDATA;
  input [3:0]S2_AXI_GEN_WSTRB;
  input S2_AXI_GEN_WLAST;
  input S2_AXI_GEN_WVALID;
  output S2_AXI_GEN_WREADY;
  output [1:0]S2_AXI_GEN_BRESP;
  output [0:0]S2_AXI_GEN_BID;
  output S2_AXI_GEN_BVALID;
  input S2_AXI_GEN_BREADY;
  input [0:0]S2_AXI_GEN_ARID;
  input [31:0]S2_AXI_GEN_ARADDR;
  input [7:0]S2_AXI_GEN_ARLEN;
  input [2:0]S2_AXI_GEN_ARSIZE;
  input [1:0]S2_AXI_GEN_ARBURST;
  input S2_AXI_GEN_ARLOCK;
  input [3:0]S2_AXI_GEN_ARCACHE;
  input [2:0]S2_AXI_GEN_ARPROT;
  input [3:0]S2_AXI_GEN_ARQOS;
  input S2_AXI_GEN_ARVALID;
  output S2_AXI_GEN_ARREADY;
  output [0:0]S2_AXI_GEN_RID;
  output [31:0]S2_AXI_GEN_RDATA;
  output [1:0]S2_AXI_GEN_RRESP;
  output S2_AXI_GEN_RLAST;
  output S2_AXI_GEN_RVALID;
  input S2_AXI_GEN_RREADY;
  input [0:0]S3_AXI_GEN_AWID;
  input [31:0]S3_AXI_GEN_AWADDR;
  input [7:0]S3_AXI_GEN_AWLEN;
  input [2:0]S3_AXI_GEN_AWSIZE;
  input [1:0]S3_AXI_GEN_AWBURST;
  input S3_AXI_GEN_AWLOCK;
  input [3:0]S3_AXI_GEN_AWCACHE;
  input [2:0]S3_AXI_GEN_AWPROT;
  input [3:0]S3_AXI_GEN_AWQOS;
  input S3_AXI_GEN_AWVALID;
  output S3_AXI_GEN_AWREADY;
  input [31:0]S3_AXI_GEN_WDATA;
  input [3:0]S3_AXI_GEN_WSTRB;
  input S3_AXI_GEN_WLAST;
  input S3_AXI_GEN_WVALID;
  output S3_AXI_GEN_WREADY;
  output [1:0]S3_AXI_GEN_BRESP;
  output [0:0]S3_AXI_GEN_BID;
  output S3_AXI_GEN_BVALID;
  input S3_AXI_GEN_BREADY;
  input [0:0]S3_AXI_GEN_ARID;
  input [31:0]S3_AXI_GEN_ARADDR;
  input [7:0]S3_AXI_GEN_ARLEN;
  input [2:0]S3_AXI_GEN_ARSIZE;
  input [1:0]S3_AXI_GEN_ARBURST;
  input S3_AXI_GEN_ARLOCK;
  input [3:0]S3_AXI_GEN_ARCACHE;
  input [2:0]S3_AXI_GEN_ARPROT;
  input [3:0]S3_AXI_GEN_ARQOS;
  input S3_AXI_GEN_ARVALID;
  output S3_AXI_GEN_ARREADY;
  output [0:0]S3_AXI_GEN_RID;
  output [31:0]S3_AXI_GEN_RDATA;
  output [1:0]S3_AXI_GEN_RRESP;
  output S3_AXI_GEN_RLAST;
  output S3_AXI_GEN_RVALID;
  input S3_AXI_GEN_RREADY;
  input [0:0]S4_AXI_GEN_AWID;
  input [31:0]S4_AXI_GEN_AWADDR;
  input [7:0]S4_AXI_GEN_AWLEN;
  input [2:0]S4_AXI_GEN_AWSIZE;
  input [1:0]S4_AXI_GEN_AWBURST;
  input S4_AXI_GEN_AWLOCK;
  input [3:0]S4_AXI_GEN_AWCACHE;
  input [2:0]S4_AXI_GEN_AWPROT;
  input [3:0]S4_AXI_GEN_AWQOS;
  input S4_AXI_GEN_AWVALID;
  output S4_AXI_GEN_AWREADY;
  input [31:0]S4_AXI_GEN_WDATA;
  input [3:0]S4_AXI_GEN_WSTRB;
  input S4_AXI_GEN_WLAST;
  input S4_AXI_GEN_WVALID;
  output S4_AXI_GEN_WREADY;
  output [1:0]S4_AXI_GEN_BRESP;
  output [0:0]S4_AXI_GEN_BID;
  output S4_AXI_GEN_BVALID;
  input S4_AXI_GEN_BREADY;
  input [0:0]S4_AXI_GEN_ARID;
  input [31:0]S4_AXI_GEN_ARADDR;
  input [7:0]S4_AXI_GEN_ARLEN;
  input [2:0]S4_AXI_GEN_ARSIZE;
  input [1:0]S4_AXI_GEN_ARBURST;
  input S4_AXI_GEN_ARLOCK;
  input [3:0]S4_AXI_GEN_ARCACHE;
  input [2:0]S4_AXI_GEN_ARPROT;
  input [3:0]S4_AXI_GEN_ARQOS;
  input S4_AXI_GEN_ARVALID;
  output S4_AXI_GEN_ARREADY;
  output [0:0]S4_AXI_GEN_RID;
  output [31:0]S4_AXI_GEN_RDATA;
  output [1:0]S4_AXI_GEN_RRESP;
  output S4_AXI_GEN_RLAST;
  output S4_AXI_GEN_RVALID;
  input S4_AXI_GEN_RREADY;
  input [0:0]S5_AXI_GEN_AWID;
  input [31:0]S5_AXI_GEN_AWADDR;
  input [7:0]S5_AXI_GEN_AWLEN;
  input [2:0]S5_AXI_GEN_AWSIZE;
  input [1:0]S5_AXI_GEN_AWBURST;
  input S5_AXI_GEN_AWLOCK;
  input [3:0]S5_AXI_GEN_AWCACHE;
  input [2:0]S5_AXI_GEN_AWPROT;
  input [3:0]S5_AXI_GEN_AWQOS;
  input S5_AXI_GEN_AWVALID;
  output S5_AXI_GEN_AWREADY;
  input [31:0]S5_AXI_GEN_WDATA;
  input [3:0]S5_AXI_GEN_WSTRB;
  input S5_AXI_GEN_WLAST;
  input S5_AXI_GEN_WVALID;
  output S5_AXI_GEN_WREADY;
  output [1:0]S5_AXI_GEN_BRESP;
  output [0:0]S5_AXI_GEN_BID;
  output S5_AXI_GEN_BVALID;
  input S5_AXI_GEN_BREADY;
  input [0:0]S5_AXI_GEN_ARID;
  input [31:0]S5_AXI_GEN_ARADDR;
  input [7:0]S5_AXI_GEN_ARLEN;
  input [2:0]S5_AXI_GEN_ARSIZE;
  input [1:0]S5_AXI_GEN_ARBURST;
  input S5_AXI_GEN_ARLOCK;
  input [3:0]S5_AXI_GEN_ARCACHE;
  input [2:0]S5_AXI_GEN_ARPROT;
  input [3:0]S5_AXI_GEN_ARQOS;
  input S5_AXI_GEN_ARVALID;
  output S5_AXI_GEN_ARREADY;
  output [0:0]S5_AXI_GEN_RID;
  output [31:0]S5_AXI_GEN_RDATA;
  output [1:0]S5_AXI_GEN_RRESP;
  output S5_AXI_GEN_RLAST;
  output S5_AXI_GEN_RVALID;
  input S5_AXI_GEN_RREADY;
  input [0:0]S6_AXI_GEN_AWID;
  input [31:0]S6_AXI_GEN_AWADDR;
  input [7:0]S6_AXI_GEN_AWLEN;
  input [2:0]S6_AXI_GEN_AWSIZE;
  input [1:0]S6_AXI_GEN_AWBURST;
  input S6_AXI_GEN_AWLOCK;
  input [3:0]S6_AXI_GEN_AWCACHE;
  input [2:0]S6_AXI_GEN_AWPROT;
  input [3:0]S6_AXI_GEN_AWQOS;
  input S6_AXI_GEN_AWVALID;
  output S6_AXI_GEN_AWREADY;
  input [31:0]S6_AXI_GEN_WDATA;
  input [3:0]S6_AXI_GEN_WSTRB;
  input S6_AXI_GEN_WLAST;
  input S6_AXI_GEN_WVALID;
  output S6_AXI_GEN_WREADY;
  output [1:0]S6_AXI_GEN_BRESP;
  output [0:0]S6_AXI_GEN_BID;
  output S6_AXI_GEN_BVALID;
  input S6_AXI_GEN_BREADY;
  input [0:0]S6_AXI_GEN_ARID;
  input [31:0]S6_AXI_GEN_ARADDR;
  input [7:0]S6_AXI_GEN_ARLEN;
  input [2:0]S6_AXI_GEN_ARSIZE;
  input [1:0]S6_AXI_GEN_ARBURST;
  input S6_AXI_GEN_ARLOCK;
  input [3:0]S6_AXI_GEN_ARCACHE;
  input [2:0]S6_AXI_GEN_ARPROT;
  input [3:0]S6_AXI_GEN_ARQOS;
  input S6_AXI_GEN_ARVALID;
  output S6_AXI_GEN_ARREADY;
  output [0:0]S6_AXI_GEN_RID;
  output [31:0]S6_AXI_GEN_RDATA;
  output [1:0]S6_AXI_GEN_RRESP;
  output S6_AXI_GEN_RLAST;
  output S6_AXI_GEN_RVALID;
  input S6_AXI_GEN_RREADY;
  input [0:0]S7_AXI_GEN_AWID;
  input [31:0]S7_AXI_GEN_AWADDR;
  input [7:0]S7_AXI_GEN_AWLEN;
  input [2:0]S7_AXI_GEN_AWSIZE;
  input [1:0]S7_AXI_GEN_AWBURST;
  input S7_AXI_GEN_AWLOCK;
  input [3:0]S7_AXI_GEN_AWCACHE;
  input [2:0]S7_AXI_GEN_AWPROT;
  input [3:0]S7_AXI_GEN_AWQOS;
  input S7_AXI_GEN_AWVALID;
  output S7_AXI_GEN_AWREADY;
  input [31:0]S7_AXI_GEN_WDATA;
  input [3:0]S7_AXI_GEN_WSTRB;
  input S7_AXI_GEN_WLAST;
  input S7_AXI_GEN_WVALID;
  output S7_AXI_GEN_WREADY;
  output [1:0]S7_AXI_GEN_BRESP;
  output [0:0]S7_AXI_GEN_BID;
  output S7_AXI_GEN_BVALID;
  input S7_AXI_GEN_BREADY;
  input [0:0]S7_AXI_GEN_ARID;
  input [31:0]S7_AXI_GEN_ARADDR;
  input [7:0]S7_AXI_GEN_ARLEN;
  input [2:0]S7_AXI_GEN_ARSIZE;
  input [1:0]S7_AXI_GEN_ARBURST;
  input S7_AXI_GEN_ARLOCK;
  input [3:0]S7_AXI_GEN_ARCACHE;
  input [2:0]S7_AXI_GEN_ARPROT;
  input [3:0]S7_AXI_GEN_ARQOS;
  input S7_AXI_GEN_ARVALID;
  output S7_AXI_GEN_ARREADY;
  output [0:0]S7_AXI_GEN_RID;
  output [31:0]S7_AXI_GEN_RDATA;
  output [1:0]S7_AXI_GEN_RRESP;
  output S7_AXI_GEN_RLAST;
  output S7_AXI_GEN_RVALID;
  input S7_AXI_GEN_RREADY;
  input [0:0]S8_AXI_GEN_AWID;
  input [31:0]S8_AXI_GEN_AWADDR;
  input [7:0]S8_AXI_GEN_AWLEN;
  input [2:0]S8_AXI_GEN_AWSIZE;
  input [1:0]S8_AXI_GEN_AWBURST;
  input S8_AXI_GEN_AWLOCK;
  input [3:0]S8_AXI_GEN_AWCACHE;
  input [2:0]S8_AXI_GEN_AWPROT;
  input [3:0]S8_AXI_GEN_AWQOS;
  input S8_AXI_GEN_AWVALID;
  output S8_AXI_GEN_AWREADY;
  input [31:0]S8_AXI_GEN_WDATA;
  input [3:0]S8_AXI_GEN_WSTRB;
  input S8_AXI_GEN_WLAST;
  input S8_AXI_GEN_WVALID;
  output S8_AXI_GEN_WREADY;
  output [1:0]S8_AXI_GEN_BRESP;
  output [0:0]S8_AXI_GEN_BID;
  output S8_AXI_GEN_BVALID;
  input S8_AXI_GEN_BREADY;
  input [0:0]S8_AXI_GEN_ARID;
  input [31:0]S8_AXI_GEN_ARADDR;
  input [7:0]S8_AXI_GEN_ARLEN;
  input [2:0]S8_AXI_GEN_ARSIZE;
  input [1:0]S8_AXI_GEN_ARBURST;
  input S8_AXI_GEN_ARLOCK;
  input [3:0]S8_AXI_GEN_ARCACHE;
  input [2:0]S8_AXI_GEN_ARPROT;
  input [3:0]S8_AXI_GEN_ARQOS;
  input S8_AXI_GEN_ARVALID;
  output S8_AXI_GEN_ARREADY;
  output [0:0]S8_AXI_GEN_RID;
  output [31:0]S8_AXI_GEN_RDATA;
  output [1:0]S8_AXI_GEN_RRESP;
  output S8_AXI_GEN_RLAST;
  output S8_AXI_GEN_RVALID;
  input S8_AXI_GEN_RREADY;
  input [0:0]S9_AXI_GEN_AWID;
  input [31:0]S9_AXI_GEN_AWADDR;
  input [7:0]S9_AXI_GEN_AWLEN;
  input [2:0]S9_AXI_GEN_AWSIZE;
  input [1:0]S9_AXI_GEN_AWBURST;
  input S9_AXI_GEN_AWLOCK;
  input [3:0]S9_AXI_GEN_AWCACHE;
  input [2:0]S9_AXI_GEN_AWPROT;
  input [3:0]S9_AXI_GEN_AWQOS;
  input S9_AXI_GEN_AWVALID;
  output S9_AXI_GEN_AWREADY;
  input [31:0]S9_AXI_GEN_WDATA;
  input [3:0]S9_AXI_GEN_WSTRB;
  input S9_AXI_GEN_WLAST;
  input S9_AXI_GEN_WVALID;
  output S9_AXI_GEN_WREADY;
  output [1:0]S9_AXI_GEN_BRESP;
  output [0:0]S9_AXI_GEN_BID;
  output S9_AXI_GEN_BVALID;
  input S9_AXI_GEN_BREADY;
  input [0:0]S9_AXI_GEN_ARID;
  input [31:0]S9_AXI_GEN_ARADDR;
  input [7:0]S9_AXI_GEN_ARLEN;
  input [2:0]S9_AXI_GEN_ARSIZE;
  input [1:0]S9_AXI_GEN_ARBURST;
  input S9_AXI_GEN_ARLOCK;
  input [3:0]S9_AXI_GEN_ARCACHE;
  input [2:0]S9_AXI_GEN_ARPROT;
  input [3:0]S9_AXI_GEN_ARQOS;
  input S9_AXI_GEN_ARVALID;
  output S9_AXI_GEN_ARREADY;
  output [0:0]S9_AXI_GEN_RID;
  output [31:0]S9_AXI_GEN_RDATA;
  output [1:0]S9_AXI_GEN_RRESP;
  output S9_AXI_GEN_RLAST;
  output S9_AXI_GEN_RVALID;
  input S9_AXI_GEN_RREADY;
  input [0:0]S10_AXI_GEN_AWID;
  input [31:0]S10_AXI_GEN_AWADDR;
  input [7:0]S10_AXI_GEN_AWLEN;
  input [2:0]S10_AXI_GEN_AWSIZE;
  input [1:0]S10_AXI_GEN_AWBURST;
  input S10_AXI_GEN_AWLOCK;
  input [3:0]S10_AXI_GEN_AWCACHE;
  input [2:0]S10_AXI_GEN_AWPROT;
  input [3:0]S10_AXI_GEN_AWQOS;
  input S10_AXI_GEN_AWVALID;
  output S10_AXI_GEN_AWREADY;
  input [31:0]S10_AXI_GEN_WDATA;
  input [3:0]S10_AXI_GEN_WSTRB;
  input S10_AXI_GEN_WLAST;
  input S10_AXI_GEN_WVALID;
  output S10_AXI_GEN_WREADY;
  output [1:0]S10_AXI_GEN_BRESP;
  output [0:0]S10_AXI_GEN_BID;
  output S10_AXI_GEN_BVALID;
  input S10_AXI_GEN_BREADY;
  input [0:0]S10_AXI_GEN_ARID;
  input [31:0]S10_AXI_GEN_ARADDR;
  input [7:0]S10_AXI_GEN_ARLEN;
  input [2:0]S10_AXI_GEN_ARSIZE;
  input [1:0]S10_AXI_GEN_ARBURST;
  input S10_AXI_GEN_ARLOCK;
  input [3:0]S10_AXI_GEN_ARCACHE;
  input [2:0]S10_AXI_GEN_ARPROT;
  input [3:0]S10_AXI_GEN_ARQOS;
  input S10_AXI_GEN_ARVALID;
  output S10_AXI_GEN_ARREADY;
  output [0:0]S10_AXI_GEN_RID;
  output [31:0]S10_AXI_GEN_RDATA;
  output [1:0]S10_AXI_GEN_RRESP;
  output S10_AXI_GEN_RLAST;
  output S10_AXI_GEN_RVALID;
  input S10_AXI_GEN_RREADY;
  input [0:0]S11_AXI_GEN_AWID;
  input [31:0]S11_AXI_GEN_AWADDR;
  input [7:0]S11_AXI_GEN_AWLEN;
  input [2:0]S11_AXI_GEN_AWSIZE;
  input [1:0]S11_AXI_GEN_AWBURST;
  input S11_AXI_GEN_AWLOCK;
  input [3:0]S11_AXI_GEN_AWCACHE;
  input [2:0]S11_AXI_GEN_AWPROT;
  input [3:0]S11_AXI_GEN_AWQOS;
  input S11_AXI_GEN_AWVALID;
  output S11_AXI_GEN_AWREADY;
  input [31:0]S11_AXI_GEN_WDATA;
  input [3:0]S11_AXI_GEN_WSTRB;
  input S11_AXI_GEN_WLAST;
  input S11_AXI_GEN_WVALID;
  output S11_AXI_GEN_WREADY;
  output [1:0]S11_AXI_GEN_BRESP;
  output [0:0]S11_AXI_GEN_BID;
  output S11_AXI_GEN_BVALID;
  input S11_AXI_GEN_BREADY;
  input [0:0]S11_AXI_GEN_ARID;
  input [31:0]S11_AXI_GEN_ARADDR;
  input [7:0]S11_AXI_GEN_ARLEN;
  input [2:0]S11_AXI_GEN_ARSIZE;
  input [1:0]S11_AXI_GEN_ARBURST;
  input S11_AXI_GEN_ARLOCK;
  input [3:0]S11_AXI_GEN_ARCACHE;
  input [2:0]S11_AXI_GEN_ARPROT;
  input [3:0]S11_AXI_GEN_ARQOS;
  input S11_AXI_GEN_ARVALID;
  output S11_AXI_GEN_ARREADY;
  output [0:0]S11_AXI_GEN_RID;
  output [31:0]S11_AXI_GEN_RDATA;
  output [1:0]S11_AXI_GEN_RRESP;
  output S11_AXI_GEN_RLAST;
  output S11_AXI_GEN_RVALID;
  input S11_AXI_GEN_RREADY;
  input [0:0]S12_AXI_GEN_AWID;
  input [31:0]S12_AXI_GEN_AWADDR;
  input [7:0]S12_AXI_GEN_AWLEN;
  input [2:0]S12_AXI_GEN_AWSIZE;
  input [1:0]S12_AXI_GEN_AWBURST;
  input S12_AXI_GEN_AWLOCK;
  input [3:0]S12_AXI_GEN_AWCACHE;
  input [2:0]S12_AXI_GEN_AWPROT;
  input [3:0]S12_AXI_GEN_AWQOS;
  input S12_AXI_GEN_AWVALID;
  output S12_AXI_GEN_AWREADY;
  input [31:0]S12_AXI_GEN_WDATA;
  input [3:0]S12_AXI_GEN_WSTRB;
  input S12_AXI_GEN_WLAST;
  input S12_AXI_GEN_WVALID;
  output S12_AXI_GEN_WREADY;
  output [1:0]S12_AXI_GEN_BRESP;
  output [0:0]S12_AXI_GEN_BID;
  output S12_AXI_GEN_BVALID;
  input S12_AXI_GEN_BREADY;
  input [0:0]S12_AXI_GEN_ARID;
  input [31:0]S12_AXI_GEN_ARADDR;
  input [7:0]S12_AXI_GEN_ARLEN;
  input [2:0]S12_AXI_GEN_ARSIZE;
  input [1:0]S12_AXI_GEN_ARBURST;
  input S12_AXI_GEN_ARLOCK;
  input [3:0]S12_AXI_GEN_ARCACHE;
  input [2:0]S12_AXI_GEN_ARPROT;
  input [3:0]S12_AXI_GEN_ARQOS;
  input S12_AXI_GEN_ARVALID;
  output S12_AXI_GEN_ARREADY;
  output [0:0]S12_AXI_GEN_RID;
  output [31:0]S12_AXI_GEN_RDATA;
  output [1:0]S12_AXI_GEN_RRESP;
  output S12_AXI_GEN_RLAST;
  output S12_AXI_GEN_RVALID;
  input S12_AXI_GEN_RREADY;
  input [0:0]S13_AXI_GEN_AWID;
  input [31:0]S13_AXI_GEN_AWADDR;
  input [7:0]S13_AXI_GEN_AWLEN;
  input [2:0]S13_AXI_GEN_AWSIZE;
  input [1:0]S13_AXI_GEN_AWBURST;
  input S13_AXI_GEN_AWLOCK;
  input [3:0]S13_AXI_GEN_AWCACHE;
  input [2:0]S13_AXI_GEN_AWPROT;
  input [3:0]S13_AXI_GEN_AWQOS;
  input S13_AXI_GEN_AWVALID;
  output S13_AXI_GEN_AWREADY;
  input [31:0]S13_AXI_GEN_WDATA;
  input [3:0]S13_AXI_GEN_WSTRB;
  input S13_AXI_GEN_WLAST;
  input S13_AXI_GEN_WVALID;
  output S13_AXI_GEN_WREADY;
  output [1:0]S13_AXI_GEN_BRESP;
  output [0:0]S13_AXI_GEN_BID;
  output S13_AXI_GEN_BVALID;
  input S13_AXI_GEN_BREADY;
  input [0:0]S13_AXI_GEN_ARID;
  input [31:0]S13_AXI_GEN_ARADDR;
  input [7:0]S13_AXI_GEN_ARLEN;
  input [2:0]S13_AXI_GEN_ARSIZE;
  input [1:0]S13_AXI_GEN_ARBURST;
  input S13_AXI_GEN_ARLOCK;
  input [3:0]S13_AXI_GEN_ARCACHE;
  input [2:0]S13_AXI_GEN_ARPROT;
  input [3:0]S13_AXI_GEN_ARQOS;
  input S13_AXI_GEN_ARVALID;
  output S13_AXI_GEN_ARREADY;
  output [0:0]S13_AXI_GEN_RID;
  output [31:0]S13_AXI_GEN_RDATA;
  output [1:0]S13_AXI_GEN_RRESP;
  output S13_AXI_GEN_RLAST;
  output S13_AXI_GEN_RVALID;
  input S13_AXI_GEN_RREADY;
  input [0:0]S14_AXI_GEN_AWID;
  input [31:0]S14_AXI_GEN_AWADDR;
  input [7:0]S14_AXI_GEN_AWLEN;
  input [2:0]S14_AXI_GEN_AWSIZE;
  input [1:0]S14_AXI_GEN_AWBURST;
  input S14_AXI_GEN_AWLOCK;
  input [3:0]S14_AXI_GEN_AWCACHE;
  input [2:0]S14_AXI_GEN_AWPROT;
  input [3:0]S14_AXI_GEN_AWQOS;
  input S14_AXI_GEN_AWVALID;
  output S14_AXI_GEN_AWREADY;
  input [31:0]S14_AXI_GEN_WDATA;
  input [3:0]S14_AXI_GEN_WSTRB;
  input S14_AXI_GEN_WLAST;
  input S14_AXI_GEN_WVALID;
  output S14_AXI_GEN_WREADY;
  output [1:0]S14_AXI_GEN_BRESP;
  output [0:0]S14_AXI_GEN_BID;
  output S14_AXI_GEN_BVALID;
  input S14_AXI_GEN_BREADY;
  input [0:0]S14_AXI_GEN_ARID;
  input [31:0]S14_AXI_GEN_ARADDR;
  input [7:0]S14_AXI_GEN_ARLEN;
  input [2:0]S14_AXI_GEN_ARSIZE;
  input [1:0]S14_AXI_GEN_ARBURST;
  input S14_AXI_GEN_ARLOCK;
  input [3:0]S14_AXI_GEN_ARCACHE;
  input [2:0]S14_AXI_GEN_ARPROT;
  input [3:0]S14_AXI_GEN_ARQOS;
  input S14_AXI_GEN_ARVALID;
  output S14_AXI_GEN_ARREADY;
  output [0:0]S14_AXI_GEN_RID;
  output [31:0]S14_AXI_GEN_RDATA;
  output [1:0]S14_AXI_GEN_RRESP;
  output S14_AXI_GEN_RLAST;
  output S14_AXI_GEN_RVALID;
  input S14_AXI_GEN_RREADY;
  input [0:0]S15_AXI_GEN_AWID;
  input [31:0]S15_AXI_GEN_AWADDR;
  input [7:0]S15_AXI_GEN_AWLEN;
  input [2:0]S15_AXI_GEN_AWSIZE;
  input [1:0]S15_AXI_GEN_AWBURST;
  input S15_AXI_GEN_AWLOCK;
  input [3:0]S15_AXI_GEN_AWCACHE;
  input [2:0]S15_AXI_GEN_AWPROT;
  input [3:0]S15_AXI_GEN_AWQOS;
  input S15_AXI_GEN_AWVALID;
  output S15_AXI_GEN_AWREADY;
  input [31:0]S15_AXI_GEN_WDATA;
  input [3:0]S15_AXI_GEN_WSTRB;
  input S15_AXI_GEN_WLAST;
  input S15_AXI_GEN_WVALID;
  output S15_AXI_GEN_WREADY;
  output [1:0]S15_AXI_GEN_BRESP;
  output [0:0]S15_AXI_GEN_BID;
  output S15_AXI_GEN_BVALID;
  input S15_AXI_GEN_BREADY;
  input [0:0]S15_AXI_GEN_ARID;
  input [31:0]S15_AXI_GEN_ARADDR;
  input [7:0]S15_AXI_GEN_ARLEN;
  input [2:0]S15_AXI_GEN_ARSIZE;
  input [1:0]S15_AXI_GEN_ARBURST;
  input S15_AXI_GEN_ARLOCK;
  input [3:0]S15_AXI_GEN_ARCACHE;
  input [2:0]S15_AXI_GEN_ARPROT;
  input [3:0]S15_AXI_GEN_ARQOS;
  input S15_AXI_GEN_ARVALID;
  output S15_AXI_GEN_ARREADY;
  output [0:0]S15_AXI_GEN_RID;
  output [31:0]S15_AXI_GEN_RDATA;
  output [1:0]S15_AXI_GEN_RRESP;
  output S15_AXI_GEN_RLAST;
  output S15_AXI_GEN_RVALID;
  input S15_AXI_GEN_RREADY;
  input [16:0]S_AXI_CTRL_AWADDR;
  input [2:0]S_AXI_CTRL_AWPROT;
  input S_AXI_CTRL_AWVALID;
  output S_AXI_CTRL_AWREADY;
  input [31:0]S_AXI_CTRL_WDATA;
  input S_AXI_CTRL_WVALID;
  output S_AXI_CTRL_WREADY;
  output [1:0]S_AXI_CTRL_BRESP;
  output S_AXI_CTRL_BVALID;
  input S_AXI_CTRL_BREADY;
  input [16:0]S_AXI_CTRL_ARADDR;
  input [2:0]S_AXI_CTRL_ARPROT;
  input S_AXI_CTRL_ARVALID;
  output S_AXI_CTRL_ARREADY;
  output [31:0]S_AXI_CTRL_RDATA;
  output [1:0]S_AXI_CTRL_RRESP;
  output S_AXI_CTRL_RVALID;
  input S_AXI_CTRL_RREADY;
  output [0:0]M0_AXI_AWID;
  output [31:0]M0_AXI_AWADDR;
  output [7:0]M0_AXI_AWLEN;
  output [2:0]M0_AXI_AWSIZE;
  output [1:0]M0_AXI_AWBURST;
  output M0_AXI_AWLOCK;
  output [3:0]M0_AXI_AWCACHE;
  output [2:0]M0_AXI_AWPROT;
  output [3:0]M0_AXI_AWQOS;
  output M0_AXI_AWVALID;
  input M0_AXI_AWREADY;
  output [1:0]M0_AXI_AWDOMAIN;
  output [2:0]M0_AXI_AWSNOOP;
  output [1:0]M0_AXI_AWBAR;
  output [31:0]M0_AXI_WDATA;
  output [3:0]M0_AXI_WSTRB;
  output M0_AXI_WLAST;
  output M0_AXI_WVALID;
  input M0_AXI_WREADY;
  input [1:0]M0_AXI_BRESP;
  input [0:0]M0_AXI_BID;
  input M0_AXI_BVALID;
  output M0_AXI_BREADY;
  output M0_AXI_WACK;
  output [0:0]M0_AXI_ARID;
  output [31:0]M0_AXI_ARADDR;
  output [7:0]M0_AXI_ARLEN;
  output [2:0]M0_AXI_ARSIZE;
  output [1:0]M0_AXI_ARBURST;
  output M0_AXI_ARLOCK;
  output [3:0]M0_AXI_ARCACHE;
  output [2:0]M0_AXI_ARPROT;
  output [3:0]M0_AXI_ARQOS;
  output M0_AXI_ARVALID;
  input M0_AXI_ARREADY;
  output [1:0]M0_AXI_ARDOMAIN;
  output [3:0]M0_AXI_ARSNOOP;
  output [1:0]M0_AXI_ARBAR;
  input [0:0]M0_AXI_RID;
  input [31:0]M0_AXI_RDATA;
  input [1:0]M0_AXI_RRESP;
  input M0_AXI_RLAST;
  input M0_AXI_RVALID;
  output M0_AXI_RREADY;
  output M0_AXI_RACK;
  input M0_AXI_ACVALID;
  input [31:0]M0_AXI_ACADDR;
  input [3:0]M0_AXI_ACSNOOP;
  input [2:0]M0_AXI_ACPROT;
  output M0_AXI_ACREADY;
  output M0_AXI_CRVALID;
  output [4:0]M0_AXI_CRRESP;
  input M0_AXI_CRREADY;
  output M0_AXI_CDVALID;
  output [31:0]M0_AXI_CDDATA;
  output M0_AXI_CDLAST;
  input M0_AXI_CDREADY;
  output [0:0]M1_AXI_AWID;
  output [31:0]M1_AXI_AWADDR;
  output [7:0]M1_AXI_AWLEN;
  output [2:0]M1_AXI_AWSIZE;
  output [1:0]M1_AXI_AWBURST;
  output M1_AXI_AWLOCK;
  output [3:0]M1_AXI_AWCACHE;
  output [2:0]M1_AXI_AWPROT;
  output [3:0]M1_AXI_AWQOS;
  output M1_AXI_AWVALID;
  input M1_AXI_AWREADY;
  output [31:0]M1_AXI_WDATA;
  output [3:0]M1_AXI_WSTRB;
  output M1_AXI_WLAST;
  output M1_AXI_WVALID;
  input M1_AXI_WREADY;
  input [1:0]M1_AXI_BRESP;
  input [0:0]M1_AXI_BID;
  input M1_AXI_BVALID;
  output M1_AXI_BREADY;
  output [0:0]M1_AXI_ARID;
  output [31:0]M1_AXI_ARADDR;
  output [7:0]M1_AXI_ARLEN;
  output [2:0]M1_AXI_ARSIZE;
  output [1:0]M1_AXI_ARBURST;
  output M1_AXI_ARLOCK;
  output [3:0]M1_AXI_ARCACHE;
  output [2:0]M1_AXI_ARPROT;
  output [3:0]M1_AXI_ARQOS;
  output M1_AXI_ARVALID;
  input M1_AXI_ARREADY;
  input [0:0]M1_AXI_RID;
  input [31:0]M1_AXI_RDATA;
  input [1:0]M1_AXI_RRESP;
  input M1_AXI_RLAST;
  input M1_AXI_RVALID;
  output M1_AXI_RREADY;
  output [0:0]M2_AXI_AWID;
  output [31:0]M2_AXI_AWADDR;
  output [7:0]M2_AXI_AWLEN;
  output [2:0]M2_AXI_AWSIZE;
  output [1:0]M2_AXI_AWBURST;
  output M2_AXI_AWLOCK;
  output [3:0]M2_AXI_AWCACHE;
  output [2:0]M2_AXI_AWPROT;
  output [3:0]M2_AXI_AWQOS;
  output M2_AXI_AWVALID;
  input M2_AXI_AWREADY;
  output [31:0]M2_AXI_WDATA;
  output [3:0]M2_AXI_WSTRB;
  output M2_AXI_WLAST;
  output M2_AXI_WVALID;
  input M2_AXI_WREADY;
  input [1:0]M2_AXI_BRESP;
  input [0:0]M2_AXI_BID;
  input M2_AXI_BVALID;
  output M2_AXI_BREADY;
  output [0:0]M2_AXI_ARID;
  output [31:0]M2_AXI_ARADDR;
  output [7:0]M2_AXI_ARLEN;
  output [2:0]M2_AXI_ARSIZE;
  output [1:0]M2_AXI_ARBURST;
  output M2_AXI_ARLOCK;
  output [3:0]M2_AXI_ARCACHE;
  output [2:0]M2_AXI_ARPROT;
  output [3:0]M2_AXI_ARQOS;
  output M2_AXI_ARVALID;
  input M2_AXI_ARREADY;
  input [0:0]M2_AXI_RID;
  input [31:0]M2_AXI_RDATA;
  input [1:0]M2_AXI_RRESP;
  input M2_AXI_RLAST;
  input M2_AXI_RVALID;
  output M2_AXI_RREADY;
  output [0:0]M3_AXI_AWID;
  output [31:0]M3_AXI_AWADDR;
  output [7:0]M3_AXI_AWLEN;
  output [2:0]M3_AXI_AWSIZE;
  output [1:0]M3_AXI_AWBURST;
  output M3_AXI_AWLOCK;
  output [3:0]M3_AXI_AWCACHE;
  output [2:0]M3_AXI_AWPROT;
  output [3:0]M3_AXI_AWQOS;
  output M3_AXI_AWVALID;
  input M3_AXI_AWREADY;
  output [31:0]M3_AXI_WDATA;
  output [3:0]M3_AXI_WSTRB;
  output M3_AXI_WLAST;
  output M3_AXI_WVALID;
  input M3_AXI_WREADY;
  input [1:0]M3_AXI_BRESP;
  input [0:0]M3_AXI_BID;
  input M3_AXI_BVALID;
  output M3_AXI_BREADY;
  output [0:0]M3_AXI_ARID;
  output [31:0]M3_AXI_ARADDR;
  output [7:0]M3_AXI_ARLEN;
  output [2:0]M3_AXI_ARSIZE;
  output [1:0]M3_AXI_ARBURST;
  output M3_AXI_ARLOCK;
  output [3:0]M3_AXI_ARCACHE;
  output [2:0]M3_AXI_ARPROT;
  output [3:0]M3_AXI_ARQOS;
  output M3_AXI_ARVALID;
  input M3_AXI_ARREADY;
  input [0:0]M3_AXI_RID;
  input [31:0]M3_AXI_RDATA;
  input [1:0]M3_AXI_RRESP;
  input M3_AXI_RLAST;
  input M3_AXI_RVALID;
  output M3_AXI_RREADY;

  wire \<const0> ;
  wire \<const1> ;
  wire ACLK;
  wire ARESET;
  wire ARESETN;
  wire ARESET_i_1_n_0;
  wire AXI_Ctrl_n_4;
  wire BE_n_12;
  wire BE_n_14;
  wire BE_n_15;
  wire BE_n_4;
  wire \CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.BE_Block_Or_Inst3/S ;
  wire \CB/Gen_Master_Ports[0].TransOrd/aw_fifo_full ;
  wire \CB/Gen_Master_Ports[0].TransOrd/pending_write_is_1 ;
  wire \CB/Gen_Master_Ports[0].TransOrd/queue_full ;
  wire \CB/Gen_Master_Ports[0].TransOrd/queue_push ;
  wire \CB/Gen_Master_Ports[0].TransOrd/queue_push29_out ;
  wire \CB/Gen_Master_Ports[0].TransOrd/refresh_pending_write ;
  wire [3:3]\CB/Gen_Master_Ports[0].TransOrd/w_read_fifo_addr ;
  wire CC_n_11;
  wire CC_n_131;
  wire CC_n_132;
  wire CC_n_142;
  wire CC_n_144;
  wire CC_n_17;
  wire CC_n_194;
  wire CC_n_213;
  wire CC_n_214;
  wire CC_n_215;
  wire CC_n_216;
  wire CC_n_217;
  wire CC_n_218;
  wire CC_n_221;
  wire CC_n_223;
  wire CC_n_225;
  wire CC_n_232;
  wire CC_n_233;
  wire CC_n_234;
  wire CC_n_235;
  wire CC_n_237;
  wire CC_n_238;
  wire CC_n_30;
  wire CC_n_4;
  wire CC_n_8;
  wire CC_n_9;
  wire FE_n_114;
  wire FE_n_193;
  wire FE_n_198;
  wire FE_n_199;
  wire FE_n_201;
  wire FE_n_203;
  wire FE_n_204;
  wire FE_n_205;
  wire FE_n_206;
  wire FE_n_207;
  wire FE_n_208;
  wire FE_n_55;
  wire FE_n_56;
  wire FE_n_63;
  wire FE_n_64;
  wire FE_n_67;
  wire FE_n_69;
  wire \Gen_Block[0].ARB/A ;
  wire \Gen_Block[0].ARB/ARESET_I ;
  wire [5:0]\Gen_Block[0].LU/B_Vec ;
  wire \Gen_Block[0].LU/LUD_Reg_PR_Or_Inst1/A_N ;
  wire \Gen_Block[0].LU/LU_Check_TagConf_Compare_Inst1/The_Compare[2].sel_reg ;
  wire \Gen_Block[0].LU/LU_DS_IO_Or_Inst1/The_Compare[1].carry_or_I1/S ;
  wire \Gen_Block[0].LU/LU_Data_WE_And_Inst5/A ;
  wire \Gen_Block[0].LU/LU_Data_WE_And_Inst5/The_Compare[0].sel_reg ;
  wire \Gen_Block[0].LU/LU_Mem_PR_And_Inst1/S ;
  wire \Gen_Block[0].LU/LU_Mem_TagConf_Compare_Inst1/A ;
  wire \Gen_Block[0].LU/LU_Mem_TagConf_Compare_Inst1/The_Compare[0].sel_reg ;
  wire \Gen_Block[0].LU/lookup_restart_mem ;
  wire \Gen_Block[0].LU/lu_check_valid ;
  wire \Gen_Block[0].LU/lu_mem_write_alloc0 ;
  wire \Gen_Block[0].LU/lud_addr_pipeline_full ;
  wire \Gen_Block[0].LU/lud_addr_pipeline_full0 ;
  wire [1:1]\Gen_Block[0].LU/lud_mem_port_one_hot ;
  wire \Gen_Block[0].LU/lud_reg_port_num ;
  wire \Gen_Block[0].LU/p_162_in ;
  wire \Gen_Block[0].LU/p_57_in ;
  wire \Gen_Block[0].UD/p_1_in3_in ;
  wire \Gen_Block[0].UD/p_2_in ;
  wire \Gen_Block[0].UD/p_3_in ;
  wire \Gen_Block[0].UD/ri_fifo_full ;
  wire \Gen_Block[0].UD/update_done_ar ;
  wire \Gen_Block[0].UD/update_done_aw ;
  wire \Gen_Block[0].UD/update_ext_bresp_any ;
  wire \Gen_Block[0].UD/update_wr_miss_rs_last ;
  wire [31:0]\Gen_Block[0].UD/update_wr_miss_word ;
  wire \Gen_Block[0].UD/wm_allow ;
  wire \Gen_Block[0].UD/wm_port ;
  wire [31:0]M0_AXI_ARADDR;
  wire [1:0]M0_AXI_ARBURST;
  wire [7:0]M0_AXI_ARLEN;
  wire [1:1]\^M0_AXI_ARPROT ;
  wire M0_AXI_ARREADY;
  wire [2:0]M0_AXI_ARSIZE;
  wire M0_AXI_ARVALID;
  wire [31:0]M0_AXI_AWADDR;
  wire [1:0]M0_AXI_AWBURST;
  wire [7:0]M0_AXI_AWLEN;
  wire [1:1]\^M0_AXI_AWPROT ;
  wire M0_AXI_AWREADY;
  wire [1:0]\^M0_AXI_AWSIZE ;
  wire M0_AXI_AWVALID;
  wire M0_AXI_BREADY;
  wire [1:0]M0_AXI_BRESP;
  wire M0_AXI_BVALID;
  wire [31:0]M0_AXI_RDATA;
  wire M0_AXI_RLAST;
  wire M0_AXI_RREADY;
  wire [1:0]M0_AXI_RRESP;
  wire M0_AXI_RVALID;
  wire [31:0]M0_AXI_WDATA;
  wire M0_AXI_WLAST;
  wire M0_AXI_WREADY;
  wire [3:0]M0_AXI_WSTRB;
  wire M0_AXI_WVALID;
  wire [31:0]S0_AXI_ARADDR;
  wire [1:0]S0_AXI_ARBURST;
  wire [3:0]S0_AXI_ARCACHE;
  wire [0:0]S0_AXI_ARID;
  wire [7:0]S0_AXI_ARLEN;
  wire S0_AXI_ARREADY;
  wire [2:0]S0_AXI_ARSIZE;
  wire [3:0]S0_AXI_ARSNOOP;
  wire S0_AXI_ARVALID;
  wire [31:0]S0_AXI_AWADDR;
  wire [1:0]S0_AXI_AWBAR;
  wire [1:0]S0_AXI_AWBURST;
  wire [3:0]S0_AXI_AWCACHE;
  wire [0:0]S0_AXI_AWID;
  wire [7:0]S0_AXI_AWLEN;
  wire S0_AXI_AWREADY;
  wire [2:0]S0_AXI_AWSIZE;
  wire S0_AXI_AWVALID;
  wire [0:0]S0_AXI_BID;
  wire S0_AXI_BREADY;
  wire [1:0]S0_AXI_BRESP;
  wire S0_AXI_BVALID;
  wire [31:0]S0_AXI_RDATA;
  wire [0:0]S0_AXI_RID;
  wire S0_AXI_RLAST;
  wire S0_AXI_RREADY;
  wire [1:0]S0_AXI_RRESP;
  wire S0_AXI_RVALID;
  wire [31:0]S0_AXI_WDATA;
  wire S0_AXI_WLAST;
  wire S0_AXI_WREADY;
  wire [3:0]S0_AXI_WSTRB;
  wire S0_AXI_WVALID;
  wire [31:0]S1_AXI_ARADDR;
  wire [1:0]S1_AXI_ARBURST;
  wire [3:0]S1_AXI_ARCACHE;
  wire [0:0]S1_AXI_ARID;
  wire [7:0]S1_AXI_ARLEN;
  wire S1_AXI_ARREADY;
  wire [2:0]S1_AXI_ARSIZE;
  wire [3:0]S1_AXI_ARSNOOP;
  wire S1_AXI_ARVALID;
  wire [31:0]S1_AXI_AWADDR;
  wire [1:0]S1_AXI_AWBAR;
  wire [1:0]S1_AXI_AWBURST;
  wire [3:0]S1_AXI_AWCACHE;
  wire [0:0]S1_AXI_AWID;
  wire [7:0]S1_AXI_AWLEN;
  wire S1_AXI_AWREADY;
  wire [2:0]S1_AXI_AWSIZE;
  wire S1_AXI_AWVALID;
  wire [0:0]S1_AXI_BID;
  wire S1_AXI_BREADY;
  wire [1:0]S1_AXI_BRESP;
  wire S1_AXI_BVALID;
  wire [31:0]S1_AXI_RDATA;
  wire [0:0]S1_AXI_RID;
  wire S1_AXI_RLAST;
  wire S1_AXI_RREADY;
  wire [1:0]S1_AXI_RRESP;
  wire S1_AXI_RVALID;
  wire [31:0]S1_AXI_WDATA;
  wire S1_AXI_WLAST;
  wire S1_AXI_WREADY;
  wire [3:0]S1_AXI_WSTRB;
  wire S1_AXI_WVALID;
  wire \Use_Port_0.AXI_0/R_Channel/I5 ;
  wire \Use_Port_0.AXI_0/R_Channel/new_read_data_last ;
  wire \Use_Port_0.AXI_0/R_Channel/r_hit_last ;
  wire \Use_Port_0.AXI_0/R_Channel/r_hit_push ;
  wire [3:0]\Use_Port_0.AXI_0/R_Channel/r_hit_read_fifo_addr ;
  wire \Use_Port_0.AXI_0/R_Channel/r_miss_fifo_full ;
  wire \Use_Port_0.AXI_0/R_Channel/r_miss_last ;
  wire [1:0]\Use_Port_0.AXI_0/R_Channel/r_miss_read_fifo_addr ;
  wire \Use_Port_0.AXI_0/R_Channel/r_push_safe ;
  wire [3:0]\Use_Port_0.AXI_0/R_Channel/r_read_fifo_addr ;
  wire [1:0]\Use_Port_0.AXI_0/R_Channel/r_write_fifo_addr ;
  wire \Use_Port_0.AXI_0/R_Channel/rip_last ;
  wire \Use_Port_0.AXI_0/WC_Or_Inst1/S ;
  wire [31:0]\Use_Port_0.AXI_0/new_read_data_word ;
  wire \Use_Port_1.AXI_1/R_Channel/I5 ;
  wire \Use_Port_1.AXI_1/R_Channel/new_read_data_last ;
  wire \Use_Port_1.AXI_1/R_Channel/r_hit_last ;
  wire \Use_Port_1.AXI_1/R_Channel/r_hit_push ;
  wire [3:0]\Use_Port_1.AXI_1/R_Channel/r_hit_read_fifo_addr ;
  wire \Use_Port_1.AXI_1/R_Channel/r_miss_fifo_full ;
  wire \Use_Port_1.AXI_1/R_Channel/r_miss_last ;
  wire [1:0]\Use_Port_1.AXI_1/R_Channel/r_miss_read_fifo_addr ;
  wire \Use_Port_1.AXI_1/R_Channel/r_push_safe ;
  wire [3:0]\Use_Port_1.AXI_1/R_Channel/r_read_fifo_addr ;
  wire [1:0]\Use_Port_1.AXI_1/R_Channel/r_write_fifo_addr ;
  wire \Use_Port_1.AXI_1/R_Channel/rip_last ;
  wire \Use_Port_1.AXI_1/WC_Or_Inst1/S ;
  wire [31:0]\Use_Port_1.AXI_1/new_read_data_word ;
  wire [3:0]\access_data_info[0,0][BE] ;
  wire \access_data_info[0,0][Last] ;
  wire \access_data_info[0,0][Valid] ;
  wire [3:0]\access_data_info[0,1][BE] ;
  wire \access_data_info[0,1][Last] ;
  wire \access_data_info[0,1][Valid] ;
  wire [31:0]\access_info[0][Addr] ;
  wire [5:1]\access_info[0][Addr_Stp] ;
  wire [5:0]\access_info[0][Addr_Use] ;
  wire \access_info[0][Early] ;
  wire \access_info[0][Force_Hit] ;
  wire \access_info[0][Keep] ;
  wire \access_info[0][Kind] ;
  wire [7:0]\access_info[0][Len] ;
  wire [0:0]\access_info[0][Port_Num] ;
  wire [2:0]\access_info[0][Size] ;
  wire \access_info[0][Wr] ;
  wire access_valid;
  wire [14:6]\ctrl_access[Addr] ;
  wire \ctrl_access[Internal_Cmd] ;
  wire [1:1]\ctrl_access[Size] ;
  wire ctrl_init_done_i;
  wire ctrl_init_last0;
  wire ctrl_ready;
  wire [31:0]lookup_data_new_word;
  wire lookup_piperun;
  wire \lookup_read_data_info[0,0][Valid] ;
  wire \lookup_read_data_info[0,1][Valid] ;
  wire \lookup_read_data_new[0,0][Hit] ;
  wire \lookup_read_data_new[0,0][Valid] ;
  wire \lookup_read_data_new[0,1][Valid] ;
  wire [7:6]lru_check_line_addr;
  wire \read_data_status[0,0][Hit_Full] ;
  wire \read_data_status[0,0][Hit_Pop] ;
  wire \read_data_status[0,1][Hit_Full] ;
  wire \read_data_status[0,1][Hit_Pop] ;
  wire \read_req_info[0][Kind] ;
  wire [7:0]\read_req_info[0][Len] ;
  wire [1:1]\read_req_info[0][Size] ;
  wire \read_req_info[0][Valid] ;
  wire [31:2]\update_info[Addr] ;
  wire update_need_ar;
  wire update_need_aw;
  wire \update_read_data_info[0,0][Valid] ;
  wire \update_read_data_info[0,1][Valid] ;
  wire wr_port_data_ready;
  wire write_data_almost_full;
  wire write_data_full;
  wire [3:0]\write_data_info[0][BE] ;
  wire [31:0]\write_data_info[0][Data] ;
  wire \write_data_info[0][Last] ;
  wire \write_data_info[0][Valid] ;
  wire [31:14]\write_req_info[0][Addr] ;
  wire [7:0]\write_req_info[0][Len] ;
  wire \write_req_info[0][Line_Only] ;
  wire [1:1]\write_req_info[0][Size] ;
  wire \NLW_Use_Port_0.AXI_0/R_Channel/rl_fifo_mem_reg_r1_0_15_0_0_SPO_UNCONNECTED ;
  wire \NLW_Use_Port_0.AXI_0/R_Channel/rl_fifo_mem_reg_r2_0_15_0_0_SPO_UNCONNECTED ;
  wire \NLW_Use_Port_0.AXI_0/R_Channel/rr_fifo_mem_reg_0_15_0_0_SPO_UNCONNECTED ;
  wire \NLW_Use_Port_0.AXI_0/R_Channel/rr_fifo_mem_reg_0_15_1_1_SPO_UNCONNECTED ;
  wire [1:0]\NLW_Use_Port_0.AXI_0/R_Channel/rw_fifo_mem_reg_0_15_0_5_DOD_UNCONNECTED ;
  wire [1:0]\NLW_Use_Port_0.AXI_0/R_Channel/rw_fifo_mem_reg_0_15_12_17_DOD_UNCONNECTED ;
  wire [1:0]\NLW_Use_Port_0.AXI_0/R_Channel/rw_fifo_mem_reg_0_15_18_23_DOD_UNCONNECTED ;
  wire [1:0]\NLW_Use_Port_0.AXI_0/R_Channel/rw_fifo_mem_reg_0_15_24_29_DOD_UNCONNECTED ;
  wire [1:0]\NLW_Use_Port_0.AXI_0/R_Channel/rw_fifo_mem_reg_0_15_30_31_DOB_UNCONNECTED ;
  wire [1:0]\NLW_Use_Port_0.AXI_0/R_Channel/rw_fifo_mem_reg_0_15_30_31_DOC_UNCONNECTED ;
  wire [1:0]\NLW_Use_Port_0.AXI_0/R_Channel/rw_fifo_mem_reg_0_15_30_31_DOD_UNCONNECTED ;
  wire [1:0]\NLW_Use_Port_0.AXI_0/R_Channel/rw_fifo_mem_reg_0_15_6_11_DOD_UNCONNECTED ;
  wire \NLW_Use_Port_1.AXI_1/R_Channel/rl_fifo_mem_reg_r1_0_15_0_0_SPO_UNCONNECTED ;
  wire \NLW_Use_Port_1.AXI_1/R_Channel/rl_fifo_mem_reg_r2_0_15_0_0_SPO_UNCONNECTED ;
  wire \NLW_Use_Port_1.AXI_1/R_Channel/rr_fifo_mem_reg_0_15_0_0_SPO_UNCONNECTED ;
  wire \NLW_Use_Port_1.AXI_1/R_Channel/rr_fifo_mem_reg_0_15_1_1_SPO_UNCONNECTED ;
  wire [1:0]\NLW_Use_Port_1.AXI_1/R_Channel/rw_fifo_mem_reg_0_15_0_5_DOD_UNCONNECTED ;
  wire [1:0]\NLW_Use_Port_1.AXI_1/R_Channel/rw_fifo_mem_reg_0_15_12_17_DOD_UNCONNECTED ;
  wire [1:0]\NLW_Use_Port_1.AXI_1/R_Channel/rw_fifo_mem_reg_0_15_18_23_DOD_UNCONNECTED ;
  wire [1:0]\NLW_Use_Port_1.AXI_1/R_Channel/rw_fifo_mem_reg_0_15_24_29_DOD_UNCONNECTED ;
  wire [1:0]\NLW_Use_Port_1.AXI_1/R_Channel/rw_fifo_mem_reg_0_15_30_31_DOB_UNCONNECTED ;
  wire [1:0]\NLW_Use_Port_1.AXI_1/R_Channel/rw_fifo_mem_reg_0_15_30_31_DOC_UNCONNECTED ;
  wire [1:0]\NLW_Use_Port_1.AXI_1/R_Channel/rw_fifo_mem_reg_0_15_30_31_DOD_UNCONNECTED ;
  wire [1:0]\NLW_Use_Port_1.AXI_1/R_Channel/rw_fifo_mem_reg_0_15_6_11_DOD_UNCONNECTED ;

  assign M0_AXI_ACREADY = \<const0> ;
  assign M0_AXI_ARBAR[1] = \<const0> ;
  assign M0_AXI_ARBAR[0] = \<const0> ;
  assign M0_AXI_ARCACHE[3] = \<const0> ;
  assign M0_AXI_ARCACHE[2] = \<const0> ;
  assign M0_AXI_ARCACHE[1] = \<const1> ;
  assign M0_AXI_ARCACHE[0] = \<const1> ;
  assign M0_AXI_ARDOMAIN[1] = \<const0> ;
  assign M0_AXI_ARDOMAIN[0] = \<const0> ;
  assign M0_AXI_ARID[0] = \<const0> ;
  assign M0_AXI_ARLOCK = \<const0> ;
  assign M0_AXI_ARPROT[2] = \<const0> ;
  assign M0_AXI_ARPROT[1] = \^M0_AXI_ARPROT [1];
  assign M0_AXI_ARPROT[0] = \<const0> ;
  assign M0_AXI_ARQOS[3] = \<const1> ;
  assign M0_AXI_ARQOS[2] = \<const1> ;
  assign M0_AXI_ARQOS[1] = \<const1> ;
  assign M0_AXI_ARQOS[0] = \<const1> ;
  assign M0_AXI_ARSNOOP[3] = \<const0> ;
  assign M0_AXI_ARSNOOP[2] = \<const0> ;
  assign M0_AXI_ARSNOOP[1] = \<const0> ;
  assign M0_AXI_ARSNOOP[0] = \<const0> ;
  assign M0_AXI_AWBAR[1] = \<const0> ;
  assign M0_AXI_AWBAR[0] = \<const0> ;
  assign M0_AXI_AWCACHE[3] = \<const0> ;
  assign M0_AXI_AWCACHE[2] = \<const0> ;
  assign M0_AXI_AWCACHE[1] = \<const1> ;
  assign M0_AXI_AWCACHE[0] = \<const1> ;
  assign M0_AXI_AWDOMAIN[1] = \<const0> ;
  assign M0_AXI_AWDOMAIN[0] = \<const0> ;
  assign M0_AXI_AWID[0] = \<const0> ;
  assign M0_AXI_AWLOCK = \<const0> ;
  assign M0_AXI_AWPROT[2] = \<const0> ;
  assign M0_AXI_AWPROT[1] = \^M0_AXI_AWPROT [1];
  assign M0_AXI_AWPROT[0] = \<const0> ;
  assign M0_AXI_AWQOS[3] = \<const1> ;
  assign M0_AXI_AWQOS[2] = \<const1> ;
  assign M0_AXI_AWQOS[1] = \<const1> ;
  assign M0_AXI_AWQOS[0] = \<const1> ;
  assign M0_AXI_AWSIZE[2] = \<const0> ;
  assign M0_AXI_AWSIZE[1:0] = \^M0_AXI_AWSIZE [1:0];
  assign M0_AXI_AWSNOOP[2] = \<const0> ;
  assign M0_AXI_AWSNOOP[1] = \<const0> ;
  assign M0_AXI_AWSNOOP[0] = \<const0> ;
  assign M0_AXI_CDDATA[31] = \<const0> ;
  assign M0_AXI_CDDATA[30] = \<const0> ;
  assign M0_AXI_CDDATA[29] = \<const0> ;
  assign M0_AXI_CDDATA[28] = \<const0> ;
  assign M0_AXI_CDDATA[27] = \<const0> ;
  assign M0_AXI_CDDATA[26] = \<const0> ;
  assign M0_AXI_CDDATA[25] = \<const0> ;
  assign M0_AXI_CDDATA[24] = \<const0> ;
  assign M0_AXI_CDDATA[23] = \<const0> ;
  assign M0_AXI_CDDATA[22] = \<const0> ;
  assign M0_AXI_CDDATA[21] = \<const0> ;
  assign M0_AXI_CDDATA[20] = \<const0> ;
  assign M0_AXI_CDDATA[19] = \<const0> ;
  assign M0_AXI_CDDATA[18] = \<const0> ;
  assign M0_AXI_CDDATA[17] = \<const0> ;
  assign M0_AXI_CDDATA[16] = \<const0> ;
  assign M0_AXI_CDDATA[15] = \<const0> ;
  assign M0_AXI_CDDATA[14] = \<const0> ;
  assign M0_AXI_CDDATA[13] = \<const0> ;
  assign M0_AXI_CDDATA[12] = \<const0> ;
  assign M0_AXI_CDDATA[11] = \<const0> ;
  assign M0_AXI_CDDATA[10] = \<const0> ;
  assign M0_AXI_CDDATA[9] = \<const0> ;
  assign M0_AXI_CDDATA[8] = \<const0> ;
  assign M0_AXI_CDDATA[7] = \<const0> ;
  assign M0_AXI_CDDATA[6] = \<const0> ;
  assign M0_AXI_CDDATA[5] = \<const0> ;
  assign M0_AXI_CDDATA[4] = \<const0> ;
  assign M0_AXI_CDDATA[3] = \<const0> ;
  assign M0_AXI_CDDATA[2] = \<const0> ;
  assign M0_AXI_CDDATA[1] = \<const0> ;
  assign M0_AXI_CDDATA[0] = \<const0> ;
  assign M0_AXI_CDLAST = \<const0> ;
  assign M0_AXI_CDVALID = \<const0> ;
  assign M0_AXI_CRRESP[4] = \<const0> ;
  assign M0_AXI_CRRESP[3] = \<const0> ;
  assign M0_AXI_CRRESP[2] = \<const0> ;
  assign M0_AXI_CRRESP[1] = \<const0> ;
  assign M0_AXI_CRRESP[0] = \<const0> ;
  assign M0_AXI_CRVALID = \<const0> ;
  assign M0_AXI_RACK = \<const0> ;
  assign M0_AXI_WACK = \<const0> ;
  assign M1_AXI_ARADDR[31] = \<const0> ;
  assign M1_AXI_ARADDR[30] = \<const0> ;
  assign M1_AXI_ARADDR[29] = \<const0> ;
  assign M1_AXI_ARADDR[28] = \<const0> ;
  assign M1_AXI_ARADDR[27] = \<const0> ;
  assign M1_AXI_ARADDR[26] = \<const0> ;
  assign M1_AXI_ARADDR[25] = \<const0> ;
  assign M1_AXI_ARADDR[24] = \<const0> ;
  assign M1_AXI_ARADDR[23] = \<const0> ;
  assign M1_AXI_ARADDR[22] = \<const0> ;
  assign M1_AXI_ARADDR[21] = \<const0> ;
  assign M1_AXI_ARADDR[20] = \<const0> ;
  assign M1_AXI_ARADDR[19] = \<const0> ;
  assign M1_AXI_ARADDR[18] = \<const0> ;
  assign M1_AXI_ARADDR[17] = \<const0> ;
  assign M1_AXI_ARADDR[16] = \<const0> ;
  assign M1_AXI_ARADDR[15] = \<const0> ;
  assign M1_AXI_ARADDR[14] = \<const0> ;
  assign M1_AXI_ARADDR[13] = \<const0> ;
  assign M1_AXI_ARADDR[12] = \<const0> ;
  assign M1_AXI_ARADDR[11] = \<const0> ;
  assign M1_AXI_ARADDR[10] = \<const0> ;
  assign M1_AXI_ARADDR[9] = \<const0> ;
  assign M1_AXI_ARADDR[8] = \<const0> ;
  assign M1_AXI_ARADDR[7] = \<const0> ;
  assign M1_AXI_ARADDR[6] = \<const0> ;
  assign M1_AXI_ARADDR[5] = \<const0> ;
  assign M1_AXI_ARADDR[4] = \<const0> ;
  assign M1_AXI_ARADDR[3] = \<const0> ;
  assign M1_AXI_ARADDR[2] = \<const0> ;
  assign M1_AXI_ARADDR[1] = \<const0> ;
  assign M1_AXI_ARADDR[0] = \<const0> ;
  assign M1_AXI_ARBURST[1] = \<const0> ;
  assign M1_AXI_ARBURST[0] = \<const0> ;
  assign M1_AXI_ARCACHE[3] = \<const0> ;
  assign M1_AXI_ARCACHE[2] = \<const0> ;
  assign M1_AXI_ARCACHE[1] = \<const0> ;
  assign M1_AXI_ARCACHE[0] = \<const0> ;
  assign M1_AXI_ARID[0] = \<const0> ;
  assign M1_AXI_ARLEN[7] = \<const0> ;
  assign M1_AXI_ARLEN[6] = \<const0> ;
  assign M1_AXI_ARLEN[5] = \<const0> ;
  assign M1_AXI_ARLEN[4] = \<const0> ;
  assign M1_AXI_ARLEN[3] = \<const0> ;
  assign M1_AXI_ARLEN[2] = \<const0> ;
  assign M1_AXI_ARLEN[1] = \<const0> ;
  assign M1_AXI_ARLEN[0] = \<const0> ;
  assign M1_AXI_ARLOCK = \<const0> ;
  assign M1_AXI_ARPROT[2] = \<const0> ;
  assign M1_AXI_ARPROT[1] = \<const0> ;
  assign M1_AXI_ARPROT[0] = \<const0> ;
  assign M1_AXI_ARQOS[3] = \<const0> ;
  assign M1_AXI_ARQOS[2] = \<const0> ;
  assign M1_AXI_ARQOS[1] = \<const0> ;
  assign M1_AXI_ARQOS[0] = \<const0> ;
  assign M1_AXI_ARSIZE[2] = \<const0> ;
  assign M1_AXI_ARSIZE[1] = \<const0> ;
  assign M1_AXI_ARSIZE[0] = \<const0> ;
  assign M1_AXI_ARVALID = \<const0> ;
  assign M1_AXI_AWADDR[31] = \<const0> ;
  assign M1_AXI_AWADDR[30] = \<const0> ;
  assign M1_AXI_AWADDR[29] = \<const0> ;
  assign M1_AXI_AWADDR[28] = \<const0> ;
  assign M1_AXI_AWADDR[27] = \<const0> ;
  assign M1_AXI_AWADDR[26] = \<const0> ;
  assign M1_AXI_AWADDR[25] = \<const0> ;
  assign M1_AXI_AWADDR[24] = \<const0> ;
  assign M1_AXI_AWADDR[23] = \<const0> ;
  assign M1_AXI_AWADDR[22] = \<const0> ;
  assign M1_AXI_AWADDR[21] = \<const0> ;
  assign M1_AXI_AWADDR[20] = \<const0> ;
  assign M1_AXI_AWADDR[19] = \<const0> ;
  assign M1_AXI_AWADDR[18] = \<const0> ;
  assign M1_AXI_AWADDR[17] = \<const0> ;
  assign M1_AXI_AWADDR[16] = \<const0> ;
  assign M1_AXI_AWADDR[15] = \<const0> ;
  assign M1_AXI_AWADDR[14] = \<const0> ;
  assign M1_AXI_AWADDR[13] = \<const0> ;
  assign M1_AXI_AWADDR[12] = \<const0> ;
  assign M1_AXI_AWADDR[11] = \<const0> ;
  assign M1_AXI_AWADDR[10] = \<const0> ;
  assign M1_AXI_AWADDR[9] = \<const0> ;
  assign M1_AXI_AWADDR[8] = \<const0> ;
  assign M1_AXI_AWADDR[7] = \<const0> ;
  assign M1_AXI_AWADDR[6] = \<const0> ;
  assign M1_AXI_AWADDR[5] = \<const0> ;
  assign M1_AXI_AWADDR[4] = \<const0> ;
  assign M1_AXI_AWADDR[3] = \<const0> ;
  assign M1_AXI_AWADDR[2] = \<const0> ;
  assign M1_AXI_AWADDR[1] = \<const0> ;
  assign M1_AXI_AWADDR[0] = \<const0> ;
  assign M1_AXI_AWBURST[1] = \<const0> ;
  assign M1_AXI_AWBURST[0] = \<const0> ;
  assign M1_AXI_AWCACHE[3] = \<const0> ;
  assign M1_AXI_AWCACHE[2] = \<const0> ;
  assign M1_AXI_AWCACHE[1] = \<const0> ;
  assign M1_AXI_AWCACHE[0] = \<const0> ;
  assign M1_AXI_AWID[0] = \<const0> ;
  assign M1_AXI_AWLEN[7] = \<const0> ;
  assign M1_AXI_AWLEN[6] = \<const0> ;
  assign M1_AXI_AWLEN[5] = \<const0> ;
  assign M1_AXI_AWLEN[4] = \<const0> ;
  assign M1_AXI_AWLEN[3] = \<const0> ;
  assign M1_AXI_AWLEN[2] = \<const0> ;
  assign M1_AXI_AWLEN[1] = \<const0> ;
  assign M1_AXI_AWLEN[0] = \<const0> ;
  assign M1_AXI_AWLOCK = \<const0> ;
  assign M1_AXI_AWPROT[2] = \<const0> ;
  assign M1_AXI_AWPROT[1] = \<const0> ;
  assign M1_AXI_AWPROT[0] = \<const0> ;
  assign M1_AXI_AWQOS[3] = \<const0> ;
  assign M1_AXI_AWQOS[2] = \<const0> ;
  assign M1_AXI_AWQOS[1] = \<const0> ;
  assign M1_AXI_AWQOS[0] = \<const0> ;
  assign M1_AXI_AWSIZE[2] = \<const0> ;
  assign M1_AXI_AWSIZE[1] = \<const0> ;
  assign M1_AXI_AWSIZE[0] = \<const0> ;
  assign M1_AXI_AWVALID = \<const0> ;
  assign M1_AXI_BREADY = \<const0> ;
  assign M1_AXI_RREADY = \<const0> ;
  assign M1_AXI_WDATA[31] = \<const0> ;
  assign M1_AXI_WDATA[30] = \<const0> ;
  assign M1_AXI_WDATA[29] = \<const0> ;
  assign M1_AXI_WDATA[28] = \<const0> ;
  assign M1_AXI_WDATA[27] = \<const0> ;
  assign M1_AXI_WDATA[26] = \<const0> ;
  assign M1_AXI_WDATA[25] = \<const0> ;
  assign M1_AXI_WDATA[24] = \<const0> ;
  assign M1_AXI_WDATA[23] = \<const0> ;
  assign M1_AXI_WDATA[22] = \<const0> ;
  assign M1_AXI_WDATA[21] = \<const0> ;
  assign M1_AXI_WDATA[20] = \<const0> ;
  assign M1_AXI_WDATA[19] = \<const0> ;
  assign M1_AXI_WDATA[18] = \<const0> ;
  assign M1_AXI_WDATA[17] = \<const0> ;
  assign M1_AXI_WDATA[16] = \<const0> ;
  assign M1_AXI_WDATA[15] = \<const0> ;
  assign M1_AXI_WDATA[14] = \<const0> ;
  assign M1_AXI_WDATA[13] = \<const0> ;
  assign M1_AXI_WDATA[12] = \<const0> ;
  assign M1_AXI_WDATA[11] = \<const0> ;
  assign M1_AXI_WDATA[10] = \<const0> ;
  assign M1_AXI_WDATA[9] = \<const0> ;
  assign M1_AXI_WDATA[8] = \<const0> ;
  assign M1_AXI_WDATA[7] = \<const0> ;
  assign M1_AXI_WDATA[6] = \<const0> ;
  assign M1_AXI_WDATA[5] = \<const0> ;
  assign M1_AXI_WDATA[4] = \<const0> ;
  assign M1_AXI_WDATA[3] = \<const0> ;
  assign M1_AXI_WDATA[2] = \<const0> ;
  assign M1_AXI_WDATA[1] = \<const0> ;
  assign M1_AXI_WDATA[0] = \<const0> ;
  assign M1_AXI_WLAST = \<const0> ;
  assign M1_AXI_WSTRB[3] = \<const0> ;
  assign M1_AXI_WSTRB[2] = \<const0> ;
  assign M1_AXI_WSTRB[1] = \<const0> ;
  assign M1_AXI_WSTRB[0] = \<const0> ;
  assign M1_AXI_WVALID = \<const0> ;
  assign M2_AXI_ARADDR[31] = \<const0> ;
  assign M2_AXI_ARADDR[30] = \<const0> ;
  assign M2_AXI_ARADDR[29] = \<const0> ;
  assign M2_AXI_ARADDR[28] = \<const0> ;
  assign M2_AXI_ARADDR[27] = \<const0> ;
  assign M2_AXI_ARADDR[26] = \<const0> ;
  assign M2_AXI_ARADDR[25] = \<const0> ;
  assign M2_AXI_ARADDR[24] = \<const0> ;
  assign M2_AXI_ARADDR[23] = \<const0> ;
  assign M2_AXI_ARADDR[22] = \<const0> ;
  assign M2_AXI_ARADDR[21] = \<const0> ;
  assign M2_AXI_ARADDR[20] = \<const0> ;
  assign M2_AXI_ARADDR[19] = \<const0> ;
  assign M2_AXI_ARADDR[18] = \<const0> ;
  assign M2_AXI_ARADDR[17] = \<const0> ;
  assign M2_AXI_ARADDR[16] = \<const0> ;
  assign M2_AXI_ARADDR[15] = \<const0> ;
  assign M2_AXI_ARADDR[14] = \<const0> ;
  assign M2_AXI_ARADDR[13] = \<const0> ;
  assign M2_AXI_ARADDR[12] = \<const0> ;
  assign M2_AXI_ARADDR[11] = \<const0> ;
  assign M2_AXI_ARADDR[10] = \<const0> ;
  assign M2_AXI_ARADDR[9] = \<const0> ;
  assign M2_AXI_ARADDR[8] = \<const0> ;
  assign M2_AXI_ARADDR[7] = \<const0> ;
  assign M2_AXI_ARADDR[6] = \<const0> ;
  assign M2_AXI_ARADDR[5] = \<const0> ;
  assign M2_AXI_ARADDR[4] = \<const0> ;
  assign M2_AXI_ARADDR[3] = \<const0> ;
  assign M2_AXI_ARADDR[2] = \<const0> ;
  assign M2_AXI_ARADDR[1] = \<const0> ;
  assign M2_AXI_ARADDR[0] = \<const0> ;
  assign M2_AXI_ARBURST[1] = \<const0> ;
  assign M2_AXI_ARBURST[0] = \<const0> ;
  assign M2_AXI_ARCACHE[3] = \<const0> ;
  assign M2_AXI_ARCACHE[2] = \<const0> ;
  assign M2_AXI_ARCACHE[1] = \<const0> ;
  assign M2_AXI_ARCACHE[0] = \<const0> ;
  assign M2_AXI_ARID[0] = \<const0> ;
  assign M2_AXI_ARLEN[7] = \<const0> ;
  assign M2_AXI_ARLEN[6] = \<const0> ;
  assign M2_AXI_ARLEN[5] = \<const0> ;
  assign M2_AXI_ARLEN[4] = \<const0> ;
  assign M2_AXI_ARLEN[3] = \<const0> ;
  assign M2_AXI_ARLEN[2] = \<const0> ;
  assign M2_AXI_ARLEN[1] = \<const0> ;
  assign M2_AXI_ARLEN[0] = \<const0> ;
  assign M2_AXI_ARLOCK = \<const0> ;
  assign M2_AXI_ARPROT[2] = \<const0> ;
  assign M2_AXI_ARPROT[1] = \<const0> ;
  assign M2_AXI_ARPROT[0] = \<const0> ;
  assign M2_AXI_ARQOS[3] = \<const0> ;
  assign M2_AXI_ARQOS[2] = \<const0> ;
  assign M2_AXI_ARQOS[1] = \<const0> ;
  assign M2_AXI_ARQOS[0] = \<const0> ;
  assign M2_AXI_ARSIZE[2] = \<const0> ;
  assign M2_AXI_ARSIZE[1] = \<const0> ;
  assign M2_AXI_ARSIZE[0] = \<const0> ;
  assign M2_AXI_ARVALID = \<const0> ;
  assign M2_AXI_AWADDR[31] = \<const0> ;
  assign M2_AXI_AWADDR[30] = \<const0> ;
  assign M2_AXI_AWADDR[29] = \<const0> ;
  assign M2_AXI_AWADDR[28] = \<const0> ;
  assign M2_AXI_AWADDR[27] = \<const0> ;
  assign M2_AXI_AWADDR[26] = \<const0> ;
  assign M2_AXI_AWADDR[25] = \<const0> ;
  assign M2_AXI_AWADDR[24] = \<const0> ;
  assign M2_AXI_AWADDR[23] = \<const0> ;
  assign M2_AXI_AWADDR[22] = \<const0> ;
  assign M2_AXI_AWADDR[21] = \<const0> ;
  assign M2_AXI_AWADDR[20] = \<const0> ;
  assign M2_AXI_AWADDR[19] = \<const0> ;
  assign M2_AXI_AWADDR[18] = \<const0> ;
  assign M2_AXI_AWADDR[17] = \<const0> ;
  assign M2_AXI_AWADDR[16] = \<const0> ;
  assign M2_AXI_AWADDR[15] = \<const0> ;
  assign M2_AXI_AWADDR[14] = \<const0> ;
  assign M2_AXI_AWADDR[13] = \<const0> ;
  assign M2_AXI_AWADDR[12] = \<const0> ;
  assign M2_AXI_AWADDR[11] = \<const0> ;
  assign M2_AXI_AWADDR[10] = \<const0> ;
  assign M2_AXI_AWADDR[9] = \<const0> ;
  assign M2_AXI_AWADDR[8] = \<const0> ;
  assign M2_AXI_AWADDR[7] = \<const0> ;
  assign M2_AXI_AWADDR[6] = \<const0> ;
  assign M2_AXI_AWADDR[5] = \<const0> ;
  assign M2_AXI_AWADDR[4] = \<const0> ;
  assign M2_AXI_AWADDR[3] = \<const0> ;
  assign M2_AXI_AWADDR[2] = \<const0> ;
  assign M2_AXI_AWADDR[1] = \<const0> ;
  assign M2_AXI_AWADDR[0] = \<const0> ;
  assign M2_AXI_AWBURST[1] = \<const0> ;
  assign M2_AXI_AWBURST[0] = \<const0> ;
  assign M2_AXI_AWCACHE[3] = \<const0> ;
  assign M2_AXI_AWCACHE[2] = \<const0> ;
  assign M2_AXI_AWCACHE[1] = \<const0> ;
  assign M2_AXI_AWCACHE[0] = \<const0> ;
  assign M2_AXI_AWID[0] = \<const0> ;
  assign M2_AXI_AWLEN[7] = \<const0> ;
  assign M2_AXI_AWLEN[6] = \<const0> ;
  assign M2_AXI_AWLEN[5] = \<const0> ;
  assign M2_AXI_AWLEN[4] = \<const0> ;
  assign M2_AXI_AWLEN[3] = \<const0> ;
  assign M2_AXI_AWLEN[2] = \<const0> ;
  assign M2_AXI_AWLEN[1] = \<const0> ;
  assign M2_AXI_AWLEN[0] = \<const0> ;
  assign M2_AXI_AWLOCK = \<const0> ;
  assign M2_AXI_AWPROT[2] = \<const0> ;
  assign M2_AXI_AWPROT[1] = \<const0> ;
  assign M2_AXI_AWPROT[0] = \<const0> ;
  assign M2_AXI_AWQOS[3] = \<const0> ;
  assign M2_AXI_AWQOS[2] = \<const0> ;
  assign M2_AXI_AWQOS[1] = \<const0> ;
  assign M2_AXI_AWQOS[0] = \<const0> ;
  assign M2_AXI_AWSIZE[2] = \<const0> ;
  assign M2_AXI_AWSIZE[1] = \<const0> ;
  assign M2_AXI_AWSIZE[0] = \<const0> ;
  assign M2_AXI_AWVALID = \<const0> ;
  assign M2_AXI_BREADY = \<const0> ;
  assign M2_AXI_RREADY = \<const0> ;
  assign M2_AXI_WDATA[31] = \<const0> ;
  assign M2_AXI_WDATA[30] = \<const0> ;
  assign M2_AXI_WDATA[29] = \<const0> ;
  assign M2_AXI_WDATA[28] = \<const0> ;
  assign M2_AXI_WDATA[27] = \<const0> ;
  assign M2_AXI_WDATA[26] = \<const0> ;
  assign M2_AXI_WDATA[25] = \<const0> ;
  assign M2_AXI_WDATA[24] = \<const0> ;
  assign M2_AXI_WDATA[23] = \<const0> ;
  assign M2_AXI_WDATA[22] = \<const0> ;
  assign M2_AXI_WDATA[21] = \<const0> ;
  assign M2_AXI_WDATA[20] = \<const0> ;
  assign M2_AXI_WDATA[19] = \<const0> ;
  assign M2_AXI_WDATA[18] = \<const0> ;
  assign M2_AXI_WDATA[17] = \<const0> ;
  assign M2_AXI_WDATA[16] = \<const0> ;
  assign M2_AXI_WDATA[15] = \<const0> ;
  assign M2_AXI_WDATA[14] = \<const0> ;
  assign M2_AXI_WDATA[13] = \<const0> ;
  assign M2_AXI_WDATA[12] = \<const0> ;
  assign M2_AXI_WDATA[11] = \<const0> ;
  assign M2_AXI_WDATA[10] = \<const0> ;
  assign M2_AXI_WDATA[9] = \<const0> ;
  assign M2_AXI_WDATA[8] = \<const0> ;
  assign M2_AXI_WDATA[7] = \<const0> ;
  assign M2_AXI_WDATA[6] = \<const0> ;
  assign M2_AXI_WDATA[5] = \<const0> ;
  assign M2_AXI_WDATA[4] = \<const0> ;
  assign M2_AXI_WDATA[3] = \<const0> ;
  assign M2_AXI_WDATA[2] = \<const0> ;
  assign M2_AXI_WDATA[1] = \<const0> ;
  assign M2_AXI_WDATA[0] = \<const0> ;
  assign M2_AXI_WLAST = \<const0> ;
  assign M2_AXI_WSTRB[3] = \<const0> ;
  assign M2_AXI_WSTRB[2] = \<const0> ;
  assign M2_AXI_WSTRB[1] = \<const0> ;
  assign M2_AXI_WSTRB[0] = \<const0> ;
  assign M2_AXI_WVALID = \<const0> ;
  assign M3_AXI_ARADDR[31] = \<const0> ;
  assign M3_AXI_ARADDR[30] = \<const0> ;
  assign M3_AXI_ARADDR[29] = \<const0> ;
  assign M3_AXI_ARADDR[28] = \<const0> ;
  assign M3_AXI_ARADDR[27] = \<const0> ;
  assign M3_AXI_ARADDR[26] = \<const0> ;
  assign M3_AXI_ARADDR[25] = \<const0> ;
  assign M3_AXI_ARADDR[24] = \<const0> ;
  assign M3_AXI_ARADDR[23] = \<const0> ;
  assign M3_AXI_ARADDR[22] = \<const0> ;
  assign M3_AXI_ARADDR[21] = \<const0> ;
  assign M3_AXI_ARADDR[20] = \<const0> ;
  assign M3_AXI_ARADDR[19] = \<const0> ;
  assign M3_AXI_ARADDR[18] = \<const0> ;
  assign M3_AXI_ARADDR[17] = \<const0> ;
  assign M3_AXI_ARADDR[16] = \<const0> ;
  assign M3_AXI_ARADDR[15] = \<const0> ;
  assign M3_AXI_ARADDR[14] = \<const0> ;
  assign M3_AXI_ARADDR[13] = \<const0> ;
  assign M3_AXI_ARADDR[12] = \<const0> ;
  assign M3_AXI_ARADDR[11] = \<const0> ;
  assign M3_AXI_ARADDR[10] = \<const0> ;
  assign M3_AXI_ARADDR[9] = \<const0> ;
  assign M3_AXI_ARADDR[8] = \<const0> ;
  assign M3_AXI_ARADDR[7] = \<const0> ;
  assign M3_AXI_ARADDR[6] = \<const0> ;
  assign M3_AXI_ARADDR[5] = \<const0> ;
  assign M3_AXI_ARADDR[4] = \<const0> ;
  assign M3_AXI_ARADDR[3] = \<const0> ;
  assign M3_AXI_ARADDR[2] = \<const0> ;
  assign M3_AXI_ARADDR[1] = \<const0> ;
  assign M3_AXI_ARADDR[0] = \<const0> ;
  assign M3_AXI_ARBURST[1] = \<const0> ;
  assign M3_AXI_ARBURST[0] = \<const0> ;
  assign M3_AXI_ARCACHE[3] = \<const0> ;
  assign M3_AXI_ARCACHE[2] = \<const0> ;
  assign M3_AXI_ARCACHE[1] = \<const0> ;
  assign M3_AXI_ARCACHE[0] = \<const0> ;
  assign M3_AXI_ARID[0] = \<const0> ;
  assign M3_AXI_ARLEN[7] = \<const0> ;
  assign M3_AXI_ARLEN[6] = \<const0> ;
  assign M3_AXI_ARLEN[5] = \<const0> ;
  assign M3_AXI_ARLEN[4] = \<const0> ;
  assign M3_AXI_ARLEN[3] = \<const0> ;
  assign M3_AXI_ARLEN[2] = \<const0> ;
  assign M3_AXI_ARLEN[1] = \<const0> ;
  assign M3_AXI_ARLEN[0] = \<const0> ;
  assign M3_AXI_ARLOCK = \<const0> ;
  assign M3_AXI_ARPROT[2] = \<const0> ;
  assign M3_AXI_ARPROT[1] = \<const0> ;
  assign M3_AXI_ARPROT[0] = \<const0> ;
  assign M3_AXI_ARQOS[3] = \<const0> ;
  assign M3_AXI_ARQOS[2] = \<const0> ;
  assign M3_AXI_ARQOS[1] = \<const0> ;
  assign M3_AXI_ARQOS[0] = \<const0> ;
  assign M3_AXI_ARSIZE[2] = \<const0> ;
  assign M3_AXI_ARSIZE[1] = \<const0> ;
  assign M3_AXI_ARSIZE[0] = \<const0> ;
  assign M3_AXI_ARVALID = \<const0> ;
  assign M3_AXI_AWADDR[31] = \<const0> ;
  assign M3_AXI_AWADDR[30] = \<const0> ;
  assign M3_AXI_AWADDR[29] = \<const0> ;
  assign M3_AXI_AWADDR[28] = \<const0> ;
  assign M3_AXI_AWADDR[27] = \<const0> ;
  assign M3_AXI_AWADDR[26] = \<const0> ;
  assign M3_AXI_AWADDR[25] = \<const0> ;
  assign M3_AXI_AWADDR[24] = \<const0> ;
  assign M3_AXI_AWADDR[23] = \<const0> ;
  assign M3_AXI_AWADDR[22] = \<const0> ;
  assign M3_AXI_AWADDR[21] = \<const0> ;
  assign M3_AXI_AWADDR[20] = \<const0> ;
  assign M3_AXI_AWADDR[19] = \<const0> ;
  assign M3_AXI_AWADDR[18] = \<const0> ;
  assign M3_AXI_AWADDR[17] = \<const0> ;
  assign M3_AXI_AWADDR[16] = \<const0> ;
  assign M3_AXI_AWADDR[15] = \<const0> ;
  assign M3_AXI_AWADDR[14] = \<const0> ;
  assign M3_AXI_AWADDR[13] = \<const0> ;
  assign M3_AXI_AWADDR[12] = \<const0> ;
  assign M3_AXI_AWADDR[11] = \<const0> ;
  assign M3_AXI_AWADDR[10] = \<const0> ;
  assign M3_AXI_AWADDR[9] = \<const0> ;
  assign M3_AXI_AWADDR[8] = \<const0> ;
  assign M3_AXI_AWADDR[7] = \<const0> ;
  assign M3_AXI_AWADDR[6] = \<const0> ;
  assign M3_AXI_AWADDR[5] = \<const0> ;
  assign M3_AXI_AWADDR[4] = \<const0> ;
  assign M3_AXI_AWADDR[3] = \<const0> ;
  assign M3_AXI_AWADDR[2] = \<const0> ;
  assign M3_AXI_AWADDR[1] = \<const0> ;
  assign M3_AXI_AWADDR[0] = \<const0> ;
  assign M3_AXI_AWBURST[1] = \<const0> ;
  assign M3_AXI_AWBURST[0] = \<const0> ;
  assign M3_AXI_AWCACHE[3] = \<const0> ;
  assign M3_AXI_AWCACHE[2] = \<const0> ;
  assign M3_AXI_AWCACHE[1] = \<const0> ;
  assign M3_AXI_AWCACHE[0] = \<const0> ;
  assign M3_AXI_AWID[0] = \<const0> ;
  assign M3_AXI_AWLEN[7] = \<const0> ;
  assign M3_AXI_AWLEN[6] = \<const0> ;
  assign M3_AXI_AWLEN[5] = \<const0> ;
  assign M3_AXI_AWLEN[4] = \<const0> ;
  assign M3_AXI_AWLEN[3] = \<const0> ;
  assign M3_AXI_AWLEN[2] = \<const0> ;
  assign M3_AXI_AWLEN[1] = \<const0> ;
  assign M3_AXI_AWLEN[0] = \<const0> ;
  assign M3_AXI_AWLOCK = \<const0> ;
  assign M3_AXI_AWPROT[2] = \<const0> ;
  assign M3_AXI_AWPROT[1] = \<const0> ;
  assign M3_AXI_AWPROT[0] = \<const0> ;
  assign M3_AXI_AWQOS[3] = \<const0> ;
  assign M3_AXI_AWQOS[2] = \<const0> ;
  assign M3_AXI_AWQOS[1] = \<const0> ;
  assign M3_AXI_AWQOS[0] = \<const0> ;
  assign M3_AXI_AWSIZE[2] = \<const0> ;
  assign M3_AXI_AWSIZE[1] = \<const0> ;
  assign M3_AXI_AWSIZE[0] = \<const0> ;
  assign M3_AXI_AWVALID = \<const0> ;
  assign M3_AXI_BREADY = \<const0> ;
  assign M3_AXI_RREADY = \<const0> ;
  assign M3_AXI_WDATA[31] = \<const0> ;
  assign M3_AXI_WDATA[30] = \<const0> ;
  assign M3_AXI_WDATA[29] = \<const0> ;
  assign M3_AXI_WDATA[28] = \<const0> ;
  assign M3_AXI_WDATA[27] = \<const0> ;
  assign M3_AXI_WDATA[26] = \<const0> ;
  assign M3_AXI_WDATA[25] = \<const0> ;
  assign M3_AXI_WDATA[24] = \<const0> ;
  assign M3_AXI_WDATA[23] = \<const0> ;
  assign M3_AXI_WDATA[22] = \<const0> ;
  assign M3_AXI_WDATA[21] = \<const0> ;
  assign M3_AXI_WDATA[20] = \<const0> ;
  assign M3_AXI_WDATA[19] = \<const0> ;
  assign M3_AXI_WDATA[18] = \<const0> ;
  assign M3_AXI_WDATA[17] = \<const0> ;
  assign M3_AXI_WDATA[16] = \<const0> ;
  assign M3_AXI_WDATA[15] = \<const0> ;
  assign M3_AXI_WDATA[14] = \<const0> ;
  assign M3_AXI_WDATA[13] = \<const0> ;
  assign M3_AXI_WDATA[12] = \<const0> ;
  assign M3_AXI_WDATA[11] = \<const0> ;
  assign M3_AXI_WDATA[10] = \<const0> ;
  assign M3_AXI_WDATA[9] = \<const0> ;
  assign M3_AXI_WDATA[8] = \<const0> ;
  assign M3_AXI_WDATA[7] = \<const0> ;
  assign M3_AXI_WDATA[6] = \<const0> ;
  assign M3_AXI_WDATA[5] = \<const0> ;
  assign M3_AXI_WDATA[4] = \<const0> ;
  assign M3_AXI_WDATA[3] = \<const0> ;
  assign M3_AXI_WDATA[2] = \<const0> ;
  assign M3_AXI_WDATA[1] = \<const0> ;
  assign M3_AXI_WDATA[0] = \<const0> ;
  assign M3_AXI_WLAST = \<const0> ;
  assign M3_AXI_WSTRB[3] = \<const0> ;
  assign M3_AXI_WSTRB[2] = \<const0> ;
  assign M3_AXI_WSTRB[1] = \<const0> ;
  assign M3_AXI_WSTRB[0] = \<const0> ;
  assign M3_AXI_WVALID = \<const0> ;
  assign S0_AXI_ACADDR[31] = \<const0> ;
  assign S0_AXI_ACADDR[30] = \<const0> ;
  assign S0_AXI_ACADDR[29] = \<const0> ;
  assign S0_AXI_ACADDR[28] = \<const0> ;
  assign S0_AXI_ACADDR[27] = \<const0> ;
  assign S0_AXI_ACADDR[26] = \<const0> ;
  assign S0_AXI_ACADDR[25] = \<const0> ;
  assign S0_AXI_ACADDR[24] = \<const0> ;
  assign S0_AXI_ACADDR[23] = \<const0> ;
  assign S0_AXI_ACADDR[22] = \<const0> ;
  assign S0_AXI_ACADDR[21] = \<const0> ;
  assign S0_AXI_ACADDR[20] = \<const0> ;
  assign S0_AXI_ACADDR[19] = \<const0> ;
  assign S0_AXI_ACADDR[18] = \<const0> ;
  assign S0_AXI_ACADDR[17] = \<const0> ;
  assign S0_AXI_ACADDR[16] = \<const0> ;
  assign S0_AXI_ACADDR[15] = \<const0> ;
  assign S0_AXI_ACADDR[14] = \<const0> ;
  assign S0_AXI_ACADDR[13] = \<const0> ;
  assign S0_AXI_ACADDR[12] = \<const0> ;
  assign S0_AXI_ACADDR[11] = \<const0> ;
  assign S0_AXI_ACADDR[10] = \<const0> ;
  assign S0_AXI_ACADDR[9] = \<const0> ;
  assign S0_AXI_ACADDR[8] = \<const0> ;
  assign S0_AXI_ACADDR[7] = \<const0> ;
  assign S0_AXI_ACADDR[6] = \<const0> ;
  assign S0_AXI_ACADDR[5] = \<const0> ;
  assign S0_AXI_ACADDR[4] = \<const0> ;
  assign S0_AXI_ACADDR[3] = \<const0> ;
  assign S0_AXI_ACADDR[2] = \<const0> ;
  assign S0_AXI_ACADDR[1] = \<const0> ;
  assign S0_AXI_ACADDR[0] = \<const0> ;
  assign S0_AXI_ACPROT[2] = \<const0> ;
  assign S0_AXI_ACPROT[1] = \<const1> ;
  assign S0_AXI_ACPROT[0] = \<const0> ;
  assign S0_AXI_ACSNOOP[3] = \<const0> ;
  assign S0_AXI_ACSNOOP[2] = \<const0> ;
  assign S0_AXI_ACSNOOP[1] = \<const0> ;
  assign S0_AXI_ACSNOOP[0] = \<const0> ;
  assign S0_AXI_ACVALID = \<const0> ;
  assign S0_AXI_CDREADY = \<const0> ;
  assign S0_AXI_CRREADY = \<const0> ;
  assign S0_AXI_GEN_ARREADY = \<const0> ;
  assign S0_AXI_GEN_AWREADY = \<const0> ;
  assign S0_AXI_GEN_BID[0] = \<const0> ;
  assign S0_AXI_GEN_BRESP[1] = \<const0> ;
  assign S0_AXI_GEN_BRESP[0] = \<const0> ;
  assign S0_AXI_GEN_BVALID = \<const0> ;
  assign S0_AXI_GEN_RDATA[31] = \<const0> ;
  assign S0_AXI_GEN_RDATA[30] = \<const0> ;
  assign S0_AXI_GEN_RDATA[29] = \<const0> ;
  assign S0_AXI_GEN_RDATA[28] = \<const0> ;
  assign S0_AXI_GEN_RDATA[27] = \<const0> ;
  assign S0_AXI_GEN_RDATA[26] = \<const0> ;
  assign S0_AXI_GEN_RDATA[25] = \<const0> ;
  assign S0_AXI_GEN_RDATA[24] = \<const0> ;
  assign S0_AXI_GEN_RDATA[23] = \<const0> ;
  assign S0_AXI_GEN_RDATA[22] = \<const0> ;
  assign S0_AXI_GEN_RDATA[21] = \<const0> ;
  assign S0_AXI_GEN_RDATA[20] = \<const0> ;
  assign S0_AXI_GEN_RDATA[19] = \<const0> ;
  assign S0_AXI_GEN_RDATA[18] = \<const0> ;
  assign S0_AXI_GEN_RDATA[17] = \<const0> ;
  assign S0_AXI_GEN_RDATA[16] = \<const0> ;
  assign S0_AXI_GEN_RDATA[15] = \<const0> ;
  assign S0_AXI_GEN_RDATA[14] = \<const0> ;
  assign S0_AXI_GEN_RDATA[13] = \<const0> ;
  assign S0_AXI_GEN_RDATA[12] = \<const0> ;
  assign S0_AXI_GEN_RDATA[11] = \<const0> ;
  assign S0_AXI_GEN_RDATA[10] = \<const0> ;
  assign S0_AXI_GEN_RDATA[9] = \<const0> ;
  assign S0_AXI_GEN_RDATA[8] = \<const0> ;
  assign S0_AXI_GEN_RDATA[7] = \<const0> ;
  assign S0_AXI_GEN_RDATA[6] = \<const0> ;
  assign S0_AXI_GEN_RDATA[5] = \<const0> ;
  assign S0_AXI_GEN_RDATA[4] = \<const0> ;
  assign S0_AXI_GEN_RDATA[3] = \<const0> ;
  assign S0_AXI_GEN_RDATA[2] = \<const0> ;
  assign S0_AXI_GEN_RDATA[1] = \<const0> ;
  assign S0_AXI_GEN_RDATA[0] = \<const0> ;
  assign S0_AXI_GEN_RID[0] = \<const0> ;
  assign S0_AXI_GEN_RLAST = \<const0> ;
  assign S0_AXI_GEN_RRESP[1] = \<const0> ;
  assign S0_AXI_GEN_RRESP[0] = \<const0> ;
  assign S0_AXI_GEN_RVALID = \<const0> ;
  assign S0_AXI_GEN_WREADY = \<const0> ;
  assign S10_AXI_ACADDR[31] = \<const0> ;
  assign S10_AXI_ACADDR[30] = \<const0> ;
  assign S10_AXI_ACADDR[29] = \<const0> ;
  assign S10_AXI_ACADDR[28] = \<const0> ;
  assign S10_AXI_ACADDR[27] = \<const0> ;
  assign S10_AXI_ACADDR[26] = \<const0> ;
  assign S10_AXI_ACADDR[25] = \<const0> ;
  assign S10_AXI_ACADDR[24] = \<const0> ;
  assign S10_AXI_ACADDR[23] = \<const0> ;
  assign S10_AXI_ACADDR[22] = \<const0> ;
  assign S10_AXI_ACADDR[21] = \<const0> ;
  assign S10_AXI_ACADDR[20] = \<const0> ;
  assign S10_AXI_ACADDR[19] = \<const0> ;
  assign S10_AXI_ACADDR[18] = \<const0> ;
  assign S10_AXI_ACADDR[17] = \<const0> ;
  assign S10_AXI_ACADDR[16] = \<const0> ;
  assign S10_AXI_ACADDR[15] = \<const0> ;
  assign S10_AXI_ACADDR[14] = \<const0> ;
  assign S10_AXI_ACADDR[13] = \<const0> ;
  assign S10_AXI_ACADDR[12] = \<const0> ;
  assign S10_AXI_ACADDR[11] = \<const0> ;
  assign S10_AXI_ACADDR[10] = \<const0> ;
  assign S10_AXI_ACADDR[9] = \<const0> ;
  assign S10_AXI_ACADDR[8] = \<const0> ;
  assign S10_AXI_ACADDR[7] = \<const0> ;
  assign S10_AXI_ACADDR[6] = \<const0> ;
  assign S10_AXI_ACADDR[5] = \<const0> ;
  assign S10_AXI_ACADDR[4] = \<const0> ;
  assign S10_AXI_ACADDR[3] = \<const0> ;
  assign S10_AXI_ACADDR[2] = \<const0> ;
  assign S10_AXI_ACADDR[1] = \<const0> ;
  assign S10_AXI_ACADDR[0] = \<const0> ;
  assign S10_AXI_ACPROT[2] = \<const0> ;
  assign S10_AXI_ACPROT[1] = \<const0> ;
  assign S10_AXI_ACPROT[0] = \<const0> ;
  assign S10_AXI_ACSNOOP[3] = \<const0> ;
  assign S10_AXI_ACSNOOP[2] = \<const0> ;
  assign S10_AXI_ACSNOOP[1] = \<const0> ;
  assign S10_AXI_ACSNOOP[0] = \<const0> ;
  assign S10_AXI_ACVALID = \<const0> ;
  assign S10_AXI_ARREADY = \<const0> ;
  assign S10_AXI_AWREADY = \<const0> ;
  assign S10_AXI_BID[0] = \<const0> ;
  assign S10_AXI_BRESP[1] = \<const0> ;
  assign S10_AXI_BRESP[0] = \<const0> ;
  assign S10_AXI_BVALID = \<const0> ;
  assign S10_AXI_CDREADY = \<const0> ;
  assign S10_AXI_CRREADY = \<const0> ;
  assign S10_AXI_GEN_ARREADY = \<const0> ;
  assign S10_AXI_GEN_AWREADY = \<const0> ;
  assign S10_AXI_GEN_BID[0] = \<const0> ;
  assign S10_AXI_GEN_BRESP[1] = \<const0> ;
  assign S10_AXI_GEN_BRESP[0] = \<const0> ;
  assign S10_AXI_GEN_BVALID = \<const0> ;
  assign S10_AXI_GEN_RDATA[31] = \<const0> ;
  assign S10_AXI_GEN_RDATA[30] = \<const0> ;
  assign S10_AXI_GEN_RDATA[29] = \<const0> ;
  assign S10_AXI_GEN_RDATA[28] = \<const0> ;
  assign S10_AXI_GEN_RDATA[27] = \<const0> ;
  assign S10_AXI_GEN_RDATA[26] = \<const0> ;
  assign S10_AXI_GEN_RDATA[25] = \<const0> ;
  assign S10_AXI_GEN_RDATA[24] = \<const0> ;
  assign S10_AXI_GEN_RDATA[23] = \<const0> ;
  assign S10_AXI_GEN_RDATA[22] = \<const0> ;
  assign S10_AXI_GEN_RDATA[21] = \<const0> ;
  assign S10_AXI_GEN_RDATA[20] = \<const0> ;
  assign S10_AXI_GEN_RDATA[19] = \<const0> ;
  assign S10_AXI_GEN_RDATA[18] = \<const0> ;
  assign S10_AXI_GEN_RDATA[17] = \<const0> ;
  assign S10_AXI_GEN_RDATA[16] = \<const0> ;
  assign S10_AXI_GEN_RDATA[15] = \<const0> ;
  assign S10_AXI_GEN_RDATA[14] = \<const0> ;
  assign S10_AXI_GEN_RDATA[13] = \<const0> ;
  assign S10_AXI_GEN_RDATA[12] = \<const0> ;
  assign S10_AXI_GEN_RDATA[11] = \<const0> ;
  assign S10_AXI_GEN_RDATA[10] = \<const0> ;
  assign S10_AXI_GEN_RDATA[9] = \<const0> ;
  assign S10_AXI_GEN_RDATA[8] = \<const0> ;
  assign S10_AXI_GEN_RDATA[7] = \<const0> ;
  assign S10_AXI_GEN_RDATA[6] = \<const0> ;
  assign S10_AXI_GEN_RDATA[5] = \<const0> ;
  assign S10_AXI_GEN_RDATA[4] = \<const0> ;
  assign S10_AXI_GEN_RDATA[3] = \<const0> ;
  assign S10_AXI_GEN_RDATA[2] = \<const0> ;
  assign S10_AXI_GEN_RDATA[1] = \<const0> ;
  assign S10_AXI_GEN_RDATA[0] = \<const0> ;
  assign S10_AXI_GEN_RID[0] = \<const0> ;
  assign S10_AXI_GEN_RLAST = \<const0> ;
  assign S10_AXI_GEN_RRESP[1] = \<const0> ;
  assign S10_AXI_GEN_RRESP[0] = \<const0> ;
  assign S10_AXI_GEN_RVALID = \<const0> ;
  assign S10_AXI_GEN_WREADY = \<const0> ;
  assign S10_AXI_RDATA[31] = \<const0> ;
  assign S10_AXI_RDATA[30] = \<const0> ;
  assign S10_AXI_RDATA[29] = \<const0> ;
  assign S10_AXI_RDATA[28] = \<const0> ;
  assign S10_AXI_RDATA[27] = \<const0> ;
  assign S10_AXI_RDATA[26] = \<const0> ;
  assign S10_AXI_RDATA[25] = \<const0> ;
  assign S10_AXI_RDATA[24] = \<const0> ;
  assign S10_AXI_RDATA[23] = \<const0> ;
  assign S10_AXI_RDATA[22] = \<const0> ;
  assign S10_AXI_RDATA[21] = \<const0> ;
  assign S10_AXI_RDATA[20] = \<const0> ;
  assign S10_AXI_RDATA[19] = \<const0> ;
  assign S10_AXI_RDATA[18] = \<const0> ;
  assign S10_AXI_RDATA[17] = \<const0> ;
  assign S10_AXI_RDATA[16] = \<const0> ;
  assign S10_AXI_RDATA[15] = \<const0> ;
  assign S10_AXI_RDATA[14] = \<const0> ;
  assign S10_AXI_RDATA[13] = \<const0> ;
  assign S10_AXI_RDATA[12] = \<const0> ;
  assign S10_AXI_RDATA[11] = \<const0> ;
  assign S10_AXI_RDATA[10] = \<const0> ;
  assign S10_AXI_RDATA[9] = \<const0> ;
  assign S10_AXI_RDATA[8] = \<const0> ;
  assign S10_AXI_RDATA[7] = \<const0> ;
  assign S10_AXI_RDATA[6] = \<const0> ;
  assign S10_AXI_RDATA[5] = \<const0> ;
  assign S10_AXI_RDATA[4] = \<const0> ;
  assign S10_AXI_RDATA[3] = \<const0> ;
  assign S10_AXI_RDATA[2] = \<const0> ;
  assign S10_AXI_RDATA[1] = \<const0> ;
  assign S10_AXI_RDATA[0] = \<const0> ;
  assign S10_AXI_RID[0] = \<const0> ;
  assign S10_AXI_RLAST = \<const0> ;
  assign S10_AXI_RRESP[1] = \<const0> ;
  assign S10_AXI_RRESP[0] = \<const0> ;
  assign S10_AXI_RVALID = \<const0> ;
  assign S10_AXI_WREADY = \<const0> ;
  assign S11_AXI_ACADDR[31] = \<const0> ;
  assign S11_AXI_ACADDR[30] = \<const0> ;
  assign S11_AXI_ACADDR[29] = \<const0> ;
  assign S11_AXI_ACADDR[28] = \<const0> ;
  assign S11_AXI_ACADDR[27] = \<const0> ;
  assign S11_AXI_ACADDR[26] = \<const0> ;
  assign S11_AXI_ACADDR[25] = \<const0> ;
  assign S11_AXI_ACADDR[24] = \<const0> ;
  assign S11_AXI_ACADDR[23] = \<const0> ;
  assign S11_AXI_ACADDR[22] = \<const0> ;
  assign S11_AXI_ACADDR[21] = \<const0> ;
  assign S11_AXI_ACADDR[20] = \<const0> ;
  assign S11_AXI_ACADDR[19] = \<const0> ;
  assign S11_AXI_ACADDR[18] = \<const0> ;
  assign S11_AXI_ACADDR[17] = \<const0> ;
  assign S11_AXI_ACADDR[16] = \<const0> ;
  assign S11_AXI_ACADDR[15] = \<const0> ;
  assign S11_AXI_ACADDR[14] = \<const0> ;
  assign S11_AXI_ACADDR[13] = \<const0> ;
  assign S11_AXI_ACADDR[12] = \<const0> ;
  assign S11_AXI_ACADDR[11] = \<const0> ;
  assign S11_AXI_ACADDR[10] = \<const0> ;
  assign S11_AXI_ACADDR[9] = \<const0> ;
  assign S11_AXI_ACADDR[8] = \<const0> ;
  assign S11_AXI_ACADDR[7] = \<const0> ;
  assign S11_AXI_ACADDR[6] = \<const0> ;
  assign S11_AXI_ACADDR[5] = \<const0> ;
  assign S11_AXI_ACADDR[4] = \<const0> ;
  assign S11_AXI_ACADDR[3] = \<const0> ;
  assign S11_AXI_ACADDR[2] = \<const0> ;
  assign S11_AXI_ACADDR[1] = \<const0> ;
  assign S11_AXI_ACADDR[0] = \<const0> ;
  assign S11_AXI_ACPROT[2] = \<const0> ;
  assign S11_AXI_ACPROT[1] = \<const0> ;
  assign S11_AXI_ACPROT[0] = \<const0> ;
  assign S11_AXI_ACSNOOP[3] = \<const0> ;
  assign S11_AXI_ACSNOOP[2] = \<const0> ;
  assign S11_AXI_ACSNOOP[1] = \<const0> ;
  assign S11_AXI_ACSNOOP[0] = \<const0> ;
  assign S11_AXI_ACVALID = \<const0> ;
  assign S11_AXI_ARREADY = \<const0> ;
  assign S11_AXI_AWREADY = \<const0> ;
  assign S11_AXI_BID[0] = \<const0> ;
  assign S11_AXI_BRESP[1] = \<const0> ;
  assign S11_AXI_BRESP[0] = \<const0> ;
  assign S11_AXI_BVALID = \<const0> ;
  assign S11_AXI_CDREADY = \<const0> ;
  assign S11_AXI_CRREADY = \<const0> ;
  assign S11_AXI_GEN_ARREADY = \<const0> ;
  assign S11_AXI_GEN_AWREADY = \<const0> ;
  assign S11_AXI_GEN_BID[0] = \<const0> ;
  assign S11_AXI_GEN_BRESP[1] = \<const0> ;
  assign S11_AXI_GEN_BRESP[0] = \<const0> ;
  assign S11_AXI_GEN_BVALID = \<const0> ;
  assign S11_AXI_GEN_RDATA[31] = \<const0> ;
  assign S11_AXI_GEN_RDATA[30] = \<const0> ;
  assign S11_AXI_GEN_RDATA[29] = \<const0> ;
  assign S11_AXI_GEN_RDATA[28] = \<const0> ;
  assign S11_AXI_GEN_RDATA[27] = \<const0> ;
  assign S11_AXI_GEN_RDATA[26] = \<const0> ;
  assign S11_AXI_GEN_RDATA[25] = \<const0> ;
  assign S11_AXI_GEN_RDATA[24] = \<const0> ;
  assign S11_AXI_GEN_RDATA[23] = \<const0> ;
  assign S11_AXI_GEN_RDATA[22] = \<const0> ;
  assign S11_AXI_GEN_RDATA[21] = \<const0> ;
  assign S11_AXI_GEN_RDATA[20] = \<const0> ;
  assign S11_AXI_GEN_RDATA[19] = \<const0> ;
  assign S11_AXI_GEN_RDATA[18] = \<const0> ;
  assign S11_AXI_GEN_RDATA[17] = \<const0> ;
  assign S11_AXI_GEN_RDATA[16] = \<const0> ;
  assign S11_AXI_GEN_RDATA[15] = \<const0> ;
  assign S11_AXI_GEN_RDATA[14] = \<const0> ;
  assign S11_AXI_GEN_RDATA[13] = \<const0> ;
  assign S11_AXI_GEN_RDATA[12] = \<const0> ;
  assign S11_AXI_GEN_RDATA[11] = \<const0> ;
  assign S11_AXI_GEN_RDATA[10] = \<const0> ;
  assign S11_AXI_GEN_RDATA[9] = \<const0> ;
  assign S11_AXI_GEN_RDATA[8] = \<const0> ;
  assign S11_AXI_GEN_RDATA[7] = \<const0> ;
  assign S11_AXI_GEN_RDATA[6] = \<const0> ;
  assign S11_AXI_GEN_RDATA[5] = \<const0> ;
  assign S11_AXI_GEN_RDATA[4] = \<const0> ;
  assign S11_AXI_GEN_RDATA[3] = \<const0> ;
  assign S11_AXI_GEN_RDATA[2] = \<const0> ;
  assign S11_AXI_GEN_RDATA[1] = \<const0> ;
  assign S11_AXI_GEN_RDATA[0] = \<const0> ;
  assign S11_AXI_GEN_RID[0] = \<const0> ;
  assign S11_AXI_GEN_RLAST = \<const0> ;
  assign S11_AXI_GEN_RRESP[1] = \<const0> ;
  assign S11_AXI_GEN_RRESP[0] = \<const0> ;
  assign S11_AXI_GEN_RVALID = \<const0> ;
  assign S11_AXI_GEN_WREADY = \<const0> ;
  assign S11_AXI_RDATA[31] = \<const0> ;
  assign S11_AXI_RDATA[30] = \<const0> ;
  assign S11_AXI_RDATA[29] = \<const0> ;
  assign S11_AXI_RDATA[28] = \<const0> ;
  assign S11_AXI_RDATA[27] = \<const0> ;
  assign S11_AXI_RDATA[26] = \<const0> ;
  assign S11_AXI_RDATA[25] = \<const0> ;
  assign S11_AXI_RDATA[24] = \<const0> ;
  assign S11_AXI_RDATA[23] = \<const0> ;
  assign S11_AXI_RDATA[22] = \<const0> ;
  assign S11_AXI_RDATA[21] = \<const0> ;
  assign S11_AXI_RDATA[20] = \<const0> ;
  assign S11_AXI_RDATA[19] = \<const0> ;
  assign S11_AXI_RDATA[18] = \<const0> ;
  assign S11_AXI_RDATA[17] = \<const0> ;
  assign S11_AXI_RDATA[16] = \<const0> ;
  assign S11_AXI_RDATA[15] = \<const0> ;
  assign S11_AXI_RDATA[14] = \<const0> ;
  assign S11_AXI_RDATA[13] = \<const0> ;
  assign S11_AXI_RDATA[12] = \<const0> ;
  assign S11_AXI_RDATA[11] = \<const0> ;
  assign S11_AXI_RDATA[10] = \<const0> ;
  assign S11_AXI_RDATA[9] = \<const0> ;
  assign S11_AXI_RDATA[8] = \<const0> ;
  assign S11_AXI_RDATA[7] = \<const0> ;
  assign S11_AXI_RDATA[6] = \<const0> ;
  assign S11_AXI_RDATA[5] = \<const0> ;
  assign S11_AXI_RDATA[4] = \<const0> ;
  assign S11_AXI_RDATA[3] = \<const0> ;
  assign S11_AXI_RDATA[2] = \<const0> ;
  assign S11_AXI_RDATA[1] = \<const0> ;
  assign S11_AXI_RDATA[0] = \<const0> ;
  assign S11_AXI_RID[0] = \<const0> ;
  assign S11_AXI_RLAST = \<const0> ;
  assign S11_AXI_RRESP[1] = \<const0> ;
  assign S11_AXI_RRESP[0] = \<const0> ;
  assign S11_AXI_RVALID = \<const0> ;
  assign S11_AXI_WREADY = \<const0> ;
  assign S12_AXI_ACADDR[31] = \<const0> ;
  assign S12_AXI_ACADDR[30] = \<const0> ;
  assign S12_AXI_ACADDR[29] = \<const0> ;
  assign S12_AXI_ACADDR[28] = \<const0> ;
  assign S12_AXI_ACADDR[27] = \<const0> ;
  assign S12_AXI_ACADDR[26] = \<const0> ;
  assign S12_AXI_ACADDR[25] = \<const0> ;
  assign S12_AXI_ACADDR[24] = \<const0> ;
  assign S12_AXI_ACADDR[23] = \<const0> ;
  assign S12_AXI_ACADDR[22] = \<const0> ;
  assign S12_AXI_ACADDR[21] = \<const0> ;
  assign S12_AXI_ACADDR[20] = \<const0> ;
  assign S12_AXI_ACADDR[19] = \<const0> ;
  assign S12_AXI_ACADDR[18] = \<const0> ;
  assign S12_AXI_ACADDR[17] = \<const0> ;
  assign S12_AXI_ACADDR[16] = \<const0> ;
  assign S12_AXI_ACADDR[15] = \<const0> ;
  assign S12_AXI_ACADDR[14] = \<const0> ;
  assign S12_AXI_ACADDR[13] = \<const0> ;
  assign S12_AXI_ACADDR[12] = \<const0> ;
  assign S12_AXI_ACADDR[11] = \<const0> ;
  assign S12_AXI_ACADDR[10] = \<const0> ;
  assign S12_AXI_ACADDR[9] = \<const0> ;
  assign S12_AXI_ACADDR[8] = \<const0> ;
  assign S12_AXI_ACADDR[7] = \<const0> ;
  assign S12_AXI_ACADDR[6] = \<const0> ;
  assign S12_AXI_ACADDR[5] = \<const0> ;
  assign S12_AXI_ACADDR[4] = \<const0> ;
  assign S12_AXI_ACADDR[3] = \<const0> ;
  assign S12_AXI_ACADDR[2] = \<const0> ;
  assign S12_AXI_ACADDR[1] = \<const0> ;
  assign S12_AXI_ACADDR[0] = \<const0> ;
  assign S12_AXI_ACPROT[2] = \<const0> ;
  assign S12_AXI_ACPROT[1] = \<const0> ;
  assign S12_AXI_ACPROT[0] = \<const0> ;
  assign S12_AXI_ACSNOOP[3] = \<const0> ;
  assign S12_AXI_ACSNOOP[2] = \<const0> ;
  assign S12_AXI_ACSNOOP[1] = \<const0> ;
  assign S12_AXI_ACSNOOP[0] = \<const0> ;
  assign S12_AXI_ACVALID = \<const0> ;
  assign S12_AXI_ARREADY = \<const0> ;
  assign S12_AXI_AWREADY = \<const0> ;
  assign S12_AXI_BID[0] = \<const0> ;
  assign S12_AXI_BRESP[1] = \<const0> ;
  assign S12_AXI_BRESP[0] = \<const0> ;
  assign S12_AXI_BVALID = \<const0> ;
  assign S12_AXI_CDREADY = \<const0> ;
  assign S12_AXI_CRREADY = \<const0> ;
  assign S12_AXI_GEN_ARREADY = \<const0> ;
  assign S12_AXI_GEN_AWREADY = \<const0> ;
  assign S12_AXI_GEN_BID[0] = \<const0> ;
  assign S12_AXI_GEN_BRESP[1] = \<const0> ;
  assign S12_AXI_GEN_BRESP[0] = \<const0> ;
  assign S12_AXI_GEN_BVALID = \<const0> ;
  assign S12_AXI_GEN_RDATA[31] = \<const0> ;
  assign S12_AXI_GEN_RDATA[30] = \<const0> ;
  assign S12_AXI_GEN_RDATA[29] = \<const0> ;
  assign S12_AXI_GEN_RDATA[28] = \<const0> ;
  assign S12_AXI_GEN_RDATA[27] = \<const0> ;
  assign S12_AXI_GEN_RDATA[26] = \<const0> ;
  assign S12_AXI_GEN_RDATA[25] = \<const0> ;
  assign S12_AXI_GEN_RDATA[24] = \<const0> ;
  assign S12_AXI_GEN_RDATA[23] = \<const0> ;
  assign S12_AXI_GEN_RDATA[22] = \<const0> ;
  assign S12_AXI_GEN_RDATA[21] = \<const0> ;
  assign S12_AXI_GEN_RDATA[20] = \<const0> ;
  assign S12_AXI_GEN_RDATA[19] = \<const0> ;
  assign S12_AXI_GEN_RDATA[18] = \<const0> ;
  assign S12_AXI_GEN_RDATA[17] = \<const0> ;
  assign S12_AXI_GEN_RDATA[16] = \<const0> ;
  assign S12_AXI_GEN_RDATA[15] = \<const0> ;
  assign S12_AXI_GEN_RDATA[14] = \<const0> ;
  assign S12_AXI_GEN_RDATA[13] = \<const0> ;
  assign S12_AXI_GEN_RDATA[12] = \<const0> ;
  assign S12_AXI_GEN_RDATA[11] = \<const0> ;
  assign S12_AXI_GEN_RDATA[10] = \<const0> ;
  assign S12_AXI_GEN_RDATA[9] = \<const0> ;
  assign S12_AXI_GEN_RDATA[8] = \<const0> ;
  assign S12_AXI_GEN_RDATA[7] = \<const0> ;
  assign S12_AXI_GEN_RDATA[6] = \<const0> ;
  assign S12_AXI_GEN_RDATA[5] = \<const0> ;
  assign S12_AXI_GEN_RDATA[4] = \<const0> ;
  assign S12_AXI_GEN_RDATA[3] = \<const0> ;
  assign S12_AXI_GEN_RDATA[2] = \<const0> ;
  assign S12_AXI_GEN_RDATA[1] = \<const0> ;
  assign S12_AXI_GEN_RDATA[0] = \<const0> ;
  assign S12_AXI_GEN_RID[0] = \<const0> ;
  assign S12_AXI_GEN_RLAST = \<const0> ;
  assign S12_AXI_GEN_RRESP[1] = \<const0> ;
  assign S12_AXI_GEN_RRESP[0] = \<const0> ;
  assign S12_AXI_GEN_RVALID = \<const0> ;
  assign S12_AXI_GEN_WREADY = \<const0> ;
  assign S12_AXI_RDATA[31] = \<const0> ;
  assign S12_AXI_RDATA[30] = \<const0> ;
  assign S12_AXI_RDATA[29] = \<const0> ;
  assign S12_AXI_RDATA[28] = \<const0> ;
  assign S12_AXI_RDATA[27] = \<const0> ;
  assign S12_AXI_RDATA[26] = \<const0> ;
  assign S12_AXI_RDATA[25] = \<const0> ;
  assign S12_AXI_RDATA[24] = \<const0> ;
  assign S12_AXI_RDATA[23] = \<const0> ;
  assign S12_AXI_RDATA[22] = \<const0> ;
  assign S12_AXI_RDATA[21] = \<const0> ;
  assign S12_AXI_RDATA[20] = \<const0> ;
  assign S12_AXI_RDATA[19] = \<const0> ;
  assign S12_AXI_RDATA[18] = \<const0> ;
  assign S12_AXI_RDATA[17] = \<const0> ;
  assign S12_AXI_RDATA[16] = \<const0> ;
  assign S12_AXI_RDATA[15] = \<const0> ;
  assign S12_AXI_RDATA[14] = \<const0> ;
  assign S12_AXI_RDATA[13] = \<const0> ;
  assign S12_AXI_RDATA[12] = \<const0> ;
  assign S12_AXI_RDATA[11] = \<const0> ;
  assign S12_AXI_RDATA[10] = \<const0> ;
  assign S12_AXI_RDATA[9] = \<const0> ;
  assign S12_AXI_RDATA[8] = \<const0> ;
  assign S12_AXI_RDATA[7] = \<const0> ;
  assign S12_AXI_RDATA[6] = \<const0> ;
  assign S12_AXI_RDATA[5] = \<const0> ;
  assign S12_AXI_RDATA[4] = \<const0> ;
  assign S12_AXI_RDATA[3] = \<const0> ;
  assign S12_AXI_RDATA[2] = \<const0> ;
  assign S12_AXI_RDATA[1] = \<const0> ;
  assign S12_AXI_RDATA[0] = \<const0> ;
  assign S12_AXI_RID[0] = \<const0> ;
  assign S12_AXI_RLAST = \<const0> ;
  assign S12_AXI_RRESP[1] = \<const0> ;
  assign S12_AXI_RRESP[0] = \<const0> ;
  assign S12_AXI_RVALID = \<const0> ;
  assign S12_AXI_WREADY = \<const0> ;
  assign S13_AXI_ACADDR[31] = \<const0> ;
  assign S13_AXI_ACADDR[30] = \<const0> ;
  assign S13_AXI_ACADDR[29] = \<const0> ;
  assign S13_AXI_ACADDR[28] = \<const0> ;
  assign S13_AXI_ACADDR[27] = \<const0> ;
  assign S13_AXI_ACADDR[26] = \<const0> ;
  assign S13_AXI_ACADDR[25] = \<const0> ;
  assign S13_AXI_ACADDR[24] = \<const0> ;
  assign S13_AXI_ACADDR[23] = \<const0> ;
  assign S13_AXI_ACADDR[22] = \<const0> ;
  assign S13_AXI_ACADDR[21] = \<const0> ;
  assign S13_AXI_ACADDR[20] = \<const0> ;
  assign S13_AXI_ACADDR[19] = \<const0> ;
  assign S13_AXI_ACADDR[18] = \<const0> ;
  assign S13_AXI_ACADDR[17] = \<const0> ;
  assign S13_AXI_ACADDR[16] = \<const0> ;
  assign S13_AXI_ACADDR[15] = \<const0> ;
  assign S13_AXI_ACADDR[14] = \<const0> ;
  assign S13_AXI_ACADDR[13] = \<const0> ;
  assign S13_AXI_ACADDR[12] = \<const0> ;
  assign S13_AXI_ACADDR[11] = \<const0> ;
  assign S13_AXI_ACADDR[10] = \<const0> ;
  assign S13_AXI_ACADDR[9] = \<const0> ;
  assign S13_AXI_ACADDR[8] = \<const0> ;
  assign S13_AXI_ACADDR[7] = \<const0> ;
  assign S13_AXI_ACADDR[6] = \<const0> ;
  assign S13_AXI_ACADDR[5] = \<const0> ;
  assign S13_AXI_ACADDR[4] = \<const0> ;
  assign S13_AXI_ACADDR[3] = \<const0> ;
  assign S13_AXI_ACADDR[2] = \<const0> ;
  assign S13_AXI_ACADDR[1] = \<const0> ;
  assign S13_AXI_ACADDR[0] = \<const0> ;
  assign S13_AXI_ACPROT[2] = \<const0> ;
  assign S13_AXI_ACPROT[1] = \<const0> ;
  assign S13_AXI_ACPROT[0] = \<const0> ;
  assign S13_AXI_ACSNOOP[3] = \<const0> ;
  assign S13_AXI_ACSNOOP[2] = \<const0> ;
  assign S13_AXI_ACSNOOP[1] = \<const0> ;
  assign S13_AXI_ACSNOOP[0] = \<const0> ;
  assign S13_AXI_ACVALID = \<const0> ;
  assign S13_AXI_ARREADY = \<const0> ;
  assign S13_AXI_AWREADY = \<const0> ;
  assign S13_AXI_BID[0] = \<const0> ;
  assign S13_AXI_BRESP[1] = \<const0> ;
  assign S13_AXI_BRESP[0] = \<const0> ;
  assign S13_AXI_BVALID = \<const0> ;
  assign S13_AXI_CDREADY = \<const0> ;
  assign S13_AXI_CRREADY = \<const0> ;
  assign S13_AXI_GEN_ARREADY = \<const0> ;
  assign S13_AXI_GEN_AWREADY = \<const0> ;
  assign S13_AXI_GEN_BID[0] = \<const0> ;
  assign S13_AXI_GEN_BRESP[1] = \<const0> ;
  assign S13_AXI_GEN_BRESP[0] = \<const0> ;
  assign S13_AXI_GEN_BVALID = \<const0> ;
  assign S13_AXI_GEN_RDATA[31] = \<const0> ;
  assign S13_AXI_GEN_RDATA[30] = \<const0> ;
  assign S13_AXI_GEN_RDATA[29] = \<const0> ;
  assign S13_AXI_GEN_RDATA[28] = \<const0> ;
  assign S13_AXI_GEN_RDATA[27] = \<const0> ;
  assign S13_AXI_GEN_RDATA[26] = \<const0> ;
  assign S13_AXI_GEN_RDATA[25] = \<const0> ;
  assign S13_AXI_GEN_RDATA[24] = \<const0> ;
  assign S13_AXI_GEN_RDATA[23] = \<const0> ;
  assign S13_AXI_GEN_RDATA[22] = \<const0> ;
  assign S13_AXI_GEN_RDATA[21] = \<const0> ;
  assign S13_AXI_GEN_RDATA[20] = \<const0> ;
  assign S13_AXI_GEN_RDATA[19] = \<const0> ;
  assign S13_AXI_GEN_RDATA[18] = \<const0> ;
  assign S13_AXI_GEN_RDATA[17] = \<const0> ;
  assign S13_AXI_GEN_RDATA[16] = \<const0> ;
  assign S13_AXI_GEN_RDATA[15] = \<const0> ;
  assign S13_AXI_GEN_RDATA[14] = \<const0> ;
  assign S13_AXI_GEN_RDATA[13] = \<const0> ;
  assign S13_AXI_GEN_RDATA[12] = \<const0> ;
  assign S13_AXI_GEN_RDATA[11] = \<const0> ;
  assign S13_AXI_GEN_RDATA[10] = \<const0> ;
  assign S13_AXI_GEN_RDATA[9] = \<const0> ;
  assign S13_AXI_GEN_RDATA[8] = \<const0> ;
  assign S13_AXI_GEN_RDATA[7] = \<const0> ;
  assign S13_AXI_GEN_RDATA[6] = \<const0> ;
  assign S13_AXI_GEN_RDATA[5] = \<const0> ;
  assign S13_AXI_GEN_RDATA[4] = \<const0> ;
  assign S13_AXI_GEN_RDATA[3] = \<const0> ;
  assign S13_AXI_GEN_RDATA[2] = \<const0> ;
  assign S13_AXI_GEN_RDATA[1] = \<const0> ;
  assign S13_AXI_GEN_RDATA[0] = \<const0> ;
  assign S13_AXI_GEN_RID[0] = \<const0> ;
  assign S13_AXI_GEN_RLAST = \<const0> ;
  assign S13_AXI_GEN_RRESP[1] = \<const0> ;
  assign S13_AXI_GEN_RRESP[0] = \<const0> ;
  assign S13_AXI_GEN_RVALID = \<const0> ;
  assign S13_AXI_GEN_WREADY = \<const0> ;
  assign S13_AXI_RDATA[31] = \<const0> ;
  assign S13_AXI_RDATA[30] = \<const0> ;
  assign S13_AXI_RDATA[29] = \<const0> ;
  assign S13_AXI_RDATA[28] = \<const0> ;
  assign S13_AXI_RDATA[27] = \<const0> ;
  assign S13_AXI_RDATA[26] = \<const0> ;
  assign S13_AXI_RDATA[25] = \<const0> ;
  assign S13_AXI_RDATA[24] = \<const0> ;
  assign S13_AXI_RDATA[23] = \<const0> ;
  assign S13_AXI_RDATA[22] = \<const0> ;
  assign S13_AXI_RDATA[21] = \<const0> ;
  assign S13_AXI_RDATA[20] = \<const0> ;
  assign S13_AXI_RDATA[19] = \<const0> ;
  assign S13_AXI_RDATA[18] = \<const0> ;
  assign S13_AXI_RDATA[17] = \<const0> ;
  assign S13_AXI_RDATA[16] = \<const0> ;
  assign S13_AXI_RDATA[15] = \<const0> ;
  assign S13_AXI_RDATA[14] = \<const0> ;
  assign S13_AXI_RDATA[13] = \<const0> ;
  assign S13_AXI_RDATA[12] = \<const0> ;
  assign S13_AXI_RDATA[11] = \<const0> ;
  assign S13_AXI_RDATA[10] = \<const0> ;
  assign S13_AXI_RDATA[9] = \<const0> ;
  assign S13_AXI_RDATA[8] = \<const0> ;
  assign S13_AXI_RDATA[7] = \<const0> ;
  assign S13_AXI_RDATA[6] = \<const0> ;
  assign S13_AXI_RDATA[5] = \<const0> ;
  assign S13_AXI_RDATA[4] = \<const0> ;
  assign S13_AXI_RDATA[3] = \<const0> ;
  assign S13_AXI_RDATA[2] = \<const0> ;
  assign S13_AXI_RDATA[1] = \<const0> ;
  assign S13_AXI_RDATA[0] = \<const0> ;
  assign S13_AXI_RID[0] = \<const0> ;
  assign S13_AXI_RLAST = \<const0> ;
  assign S13_AXI_RRESP[1] = \<const0> ;
  assign S13_AXI_RRESP[0] = \<const0> ;
  assign S13_AXI_RVALID = \<const0> ;
  assign S13_AXI_WREADY = \<const0> ;
  assign S14_AXI_ACADDR[31] = \<const0> ;
  assign S14_AXI_ACADDR[30] = \<const0> ;
  assign S14_AXI_ACADDR[29] = \<const0> ;
  assign S14_AXI_ACADDR[28] = \<const0> ;
  assign S14_AXI_ACADDR[27] = \<const0> ;
  assign S14_AXI_ACADDR[26] = \<const0> ;
  assign S14_AXI_ACADDR[25] = \<const0> ;
  assign S14_AXI_ACADDR[24] = \<const0> ;
  assign S14_AXI_ACADDR[23] = \<const0> ;
  assign S14_AXI_ACADDR[22] = \<const0> ;
  assign S14_AXI_ACADDR[21] = \<const0> ;
  assign S14_AXI_ACADDR[20] = \<const0> ;
  assign S14_AXI_ACADDR[19] = \<const0> ;
  assign S14_AXI_ACADDR[18] = \<const0> ;
  assign S14_AXI_ACADDR[17] = \<const0> ;
  assign S14_AXI_ACADDR[16] = \<const0> ;
  assign S14_AXI_ACADDR[15] = \<const0> ;
  assign S14_AXI_ACADDR[14] = \<const0> ;
  assign S14_AXI_ACADDR[13] = \<const0> ;
  assign S14_AXI_ACADDR[12] = \<const0> ;
  assign S14_AXI_ACADDR[11] = \<const0> ;
  assign S14_AXI_ACADDR[10] = \<const0> ;
  assign S14_AXI_ACADDR[9] = \<const0> ;
  assign S14_AXI_ACADDR[8] = \<const0> ;
  assign S14_AXI_ACADDR[7] = \<const0> ;
  assign S14_AXI_ACADDR[6] = \<const0> ;
  assign S14_AXI_ACADDR[5] = \<const0> ;
  assign S14_AXI_ACADDR[4] = \<const0> ;
  assign S14_AXI_ACADDR[3] = \<const0> ;
  assign S14_AXI_ACADDR[2] = \<const0> ;
  assign S14_AXI_ACADDR[1] = \<const0> ;
  assign S14_AXI_ACADDR[0] = \<const0> ;
  assign S14_AXI_ACPROT[2] = \<const0> ;
  assign S14_AXI_ACPROT[1] = \<const0> ;
  assign S14_AXI_ACPROT[0] = \<const0> ;
  assign S14_AXI_ACSNOOP[3] = \<const0> ;
  assign S14_AXI_ACSNOOP[2] = \<const0> ;
  assign S14_AXI_ACSNOOP[1] = \<const0> ;
  assign S14_AXI_ACSNOOP[0] = \<const0> ;
  assign S14_AXI_ACVALID = \<const0> ;
  assign S14_AXI_ARREADY = \<const0> ;
  assign S14_AXI_AWREADY = \<const0> ;
  assign S14_AXI_BID[0] = \<const0> ;
  assign S14_AXI_BRESP[1] = \<const0> ;
  assign S14_AXI_BRESP[0] = \<const0> ;
  assign S14_AXI_BVALID = \<const0> ;
  assign S14_AXI_CDREADY = \<const0> ;
  assign S14_AXI_CRREADY = \<const0> ;
  assign S14_AXI_GEN_ARREADY = \<const0> ;
  assign S14_AXI_GEN_AWREADY = \<const0> ;
  assign S14_AXI_GEN_BID[0] = \<const0> ;
  assign S14_AXI_GEN_BRESP[1] = \<const0> ;
  assign S14_AXI_GEN_BRESP[0] = \<const0> ;
  assign S14_AXI_GEN_BVALID = \<const0> ;
  assign S14_AXI_GEN_RDATA[31] = \<const0> ;
  assign S14_AXI_GEN_RDATA[30] = \<const0> ;
  assign S14_AXI_GEN_RDATA[29] = \<const0> ;
  assign S14_AXI_GEN_RDATA[28] = \<const0> ;
  assign S14_AXI_GEN_RDATA[27] = \<const0> ;
  assign S14_AXI_GEN_RDATA[26] = \<const0> ;
  assign S14_AXI_GEN_RDATA[25] = \<const0> ;
  assign S14_AXI_GEN_RDATA[24] = \<const0> ;
  assign S14_AXI_GEN_RDATA[23] = \<const0> ;
  assign S14_AXI_GEN_RDATA[22] = \<const0> ;
  assign S14_AXI_GEN_RDATA[21] = \<const0> ;
  assign S14_AXI_GEN_RDATA[20] = \<const0> ;
  assign S14_AXI_GEN_RDATA[19] = \<const0> ;
  assign S14_AXI_GEN_RDATA[18] = \<const0> ;
  assign S14_AXI_GEN_RDATA[17] = \<const0> ;
  assign S14_AXI_GEN_RDATA[16] = \<const0> ;
  assign S14_AXI_GEN_RDATA[15] = \<const0> ;
  assign S14_AXI_GEN_RDATA[14] = \<const0> ;
  assign S14_AXI_GEN_RDATA[13] = \<const0> ;
  assign S14_AXI_GEN_RDATA[12] = \<const0> ;
  assign S14_AXI_GEN_RDATA[11] = \<const0> ;
  assign S14_AXI_GEN_RDATA[10] = \<const0> ;
  assign S14_AXI_GEN_RDATA[9] = \<const0> ;
  assign S14_AXI_GEN_RDATA[8] = \<const0> ;
  assign S14_AXI_GEN_RDATA[7] = \<const0> ;
  assign S14_AXI_GEN_RDATA[6] = \<const0> ;
  assign S14_AXI_GEN_RDATA[5] = \<const0> ;
  assign S14_AXI_GEN_RDATA[4] = \<const0> ;
  assign S14_AXI_GEN_RDATA[3] = \<const0> ;
  assign S14_AXI_GEN_RDATA[2] = \<const0> ;
  assign S14_AXI_GEN_RDATA[1] = \<const0> ;
  assign S14_AXI_GEN_RDATA[0] = \<const0> ;
  assign S14_AXI_GEN_RID[0] = \<const0> ;
  assign S14_AXI_GEN_RLAST = \<const0> ;
  assign S14_AXI_GEN_RRESP[1] = \<const0> ;
  assign S14_AXI_GEN_RRESP[0] = \<const0> ;
  assign S14_AXI_GEN_RVALID = \<const0> ;
  assign S14_AXI_GEN_WREADY = \<const0> ;
  assign S14_AXI_RDATA[31] = \<const0> ;
  assign S14_AXI_RDATA[30] = \<const0> ;
  assign S14_AXI_RDATA[29] = \<const0> ;
  assign S14_AXI_RDATA[28] = \<const0> ;
  assign S14_AXI_RDATA[27] = \<const0> ;
  assign S14_AXI_RDATA[26] = \<const0> ;
  assign S14_AXI_RDATA[25] = \<const0> ;
  assign S14_AXI_RDATA[24] = \<const0> ;
  assign S14_AXI_RDATA[23] = \<const0> ;
  assign S14_AXI_RDATA[22] = \<const0> ;
  assign S14_AXI_RDATA[21] = \<const0> ;
  assign S14_AXI_RDATA[20] = \<const0> ;
  assign S14_AXI_RDATA[19] = \<const0> ;
  assign S14_AXI_RDATA[18] = \<const0> ;
  assign S14_AXI_RDATA[17] = \<const0> ;
  assign S14_AXI_RDATA[16] = \<const0> ;
  assign S14_AXI_RDATA[15] = \<const0> ;
  assign S14_AXI_RDATA[14] = \<const0> ;
  assign S14_AXI_RDATA[13] = \<const0> ;
  assign S14_AXI_RDATA[12] = \<const0> ;
  assign S14_AXI_RDATA[11] = \<const0> ;
  assign S14_AXI_RDATA[10] = \<const0> ;
  assign S14_AXI_RDATA[9] = \<const0> ;
  assign S14_AXI_RDATA[8] = \<const0> ;
  assign S14_AXI_RDATA[7] = \<const0> ;
  assign S14_AXI_RDATA[6] = \<const0> ;
  assign S14_AXI_RDATA[5] = \<const0> ;
  assign S14_AXI_RDATA[4] = \<const0> ;
  assign S14_AXI_RDATA[3] = \<const0> ;
  assign S14_AXI_RDATA[2] = \<const0> ;
  assign S14_AXI_RDATA[1] = \<const0> ;
  assign S14_AXI_RDATA[0] = \<const0> ;
  assign S14_AXI_RID[0] = \<const0> ;
  assign S14_AXI_RLAST = \<const0> ;
  assign S14_AXI_RRESP[1] = \<const0> ;
  assign S14_AXI_RRESP[0] = \<const0> ;
  assign S14_AXI_RVALID = \<const0> ;
  assign S14_AXI_WREADY = \<const0> ;
  assign S15_AXI_ACADDR[31] = \<const0> ;
  assign S15_AXI_ACADDR[30] = \<const0> ;
  assign S15_AXI_ACADDR[29] = \<const0> ;
  assign S15_AXI_ACADDR[28] = \<const0> ;
  assign S15_AXI_ACADDR[27] = \<const0> ;
  assign S15_AXI_ACADDR[26] = \<const0> ;
  assign S15_AXI_ACADDR[25] = \<const0> ;
  assign S15_AXI_ACADDR[24] = \<const0> ;
  assign S15_AXI_ACADDR[23] = \<const0> ;
  assign S15_AXI_ACADDR[22] = \<const0> ;
  assign S15_AXI_ACADDR[21] = \<const0> ;
  assign S15_AXI_ACADDR[20] = \<const0> ;
  assign S15_AXI_ACADDR[19] = \<const0> ;
  assign S15_AXI_ACADDR[18] = \<const0> ;
  assign S15_AXI_ACADDR[17] = \<const0> ;
  assign S15_AXI_ACADDR[16] = \<const0> ;
  assign S15_AXI_ACADDR[15] = \<const0> ;
  assign S15_AXI_ACADDR[14] = \<const0> ;
  assign S15_AXI_ACADDR[13] = \<const0> ;
  assign S15_AXI_ACADDR[12] = \<const0> ;
  assign S15_AXI_ACADDR[11] = \<const0> ;
  assign S15_AXI_ACADDR[10] = \<const0> ;
  assign S15_AXI_ACADDR[9] = \<const0> ;
  assign S15_AXI_ACADDR[8] = \<const0> ;
  assign S15_AXI_ACADDR[7] = \<const0> ;
  assign S15_AXI_ACADDR[6] = \<const0> ;
  assign S15_AXI_ACADDR[5] = \<const0> ;
  assign S15_AXI_ACADDR[4] = \<const0> ;
  assign S15_AXI_ACADDR[3] = \<const0> ;
  assign S15_AXI_ACADDR[2] = \<const0> ;
  assign S15_AXI_ACADDR[1] = \<const0> ;
  assign S15_AXI_ACADDR[0] = \<const0> ;
  assign S15_AXI_ACPROT[2] = \<const0> ;
  assign S15_AXI_ACPROT[1] = \<const0> ;
  assign S15_AXI_ACPROT[0] = \<const0> ;
  assign S15_AXI_ACSNOOP[3] = \<const0> ;
  assign S15_AXI_ACSNOOP[2] = \<const0> ;
  assign S15_AXI_ACSNOOP[1] = \<const0> ;
  assign S15_AXI_ACSNOOP[0] = \<const0> ;
  assign S15_AXI_ACVALID = \<const0> ;
  assign S15_AXI_ARREADY = \<const0> ;
  assign S15_AXI_AWREADY = \<const0> ;
  assign S15_AXI_BID[0] = \<const0> ;
  assign S15_AXI_BRESP[1] = \<const0> ;
  assign S15_AXI_BRESP[0] = \<const0> ;
  assign S15_AXI_BVALID = \<const0> ;
  assign S15_AXI_CDREADY = \<const0> ;
  assign S15_AXI_CRREADY = \<const0> ;
  assign S15_AXI_GEN_ARREADY = \<const0> ;
  assign S15_AXI_GEN_AWREADY = \<const0> ;
  assign S15_AXI_GEN_BID[0] = \<const0> ;
  assign S15_AXI_GEN_BRESP[1] = \<const0> ;
  assign S15_AXI_GEN_BRESP[0] = \<const0> ;
  assign S15_AXI_GEN_BVALID = \<const0> ;
  assign S15_AXI_GEN_RDATA[31] = \<const0> ;
  assign S15_AXI_GEN_RDATA[30] = \<const0> ;
  assign S15_AXI_GEN_RDATA[29] = \<const0> ;
  assign S15_AXI_GEN_RDATA[28] = \<const0> ;
  assign S15_AXI_GEN_RDATA[27] = \<const0> ;
  assign S15_AXI_GEN_RDATA[26] = \<const0> ;
  assign S15_AXI_GEN_RDATA[25] = \<const0> ;
  assign S15_AXI_GEN_RDATA[24] = \<const0> ;
  assign S15_AXI_GEN_RDATA[23] = \<const0> ;
  assign S15_AXI_GEN_RDATA[22] = \<const0> ;
  assign S15_AXI_GEN_RDATA[21] = \<const0> ;
  assign S15_AXI_GEN_RDATA[20] = \<const0> ;
  assign S15_AXI_GEN_RDATA[19] = \<const0> ;
  assign S15_AXI_GEN_RDATA[18] = \<const0> ;
  assign S15_AXI_GEN_RDATA[17] = \<const0> ;
  assign S15_AXI_GEN_RDATA[16] = \<const0> ;
  assign S15_AXI_GEN_RDATA[15] = \<const0> ;
  assign S15_AXI_GEN_RDATA[14] = \<const0> ;
  assign S15_AXI_GEN_RDATA[13] = \<const0> ;
  assign S15_AXI_GEN_RDATA[12] = \<const0> ;
  assign S15_AXI_GEN_RDATA[11] = \<const0> ;
  assign S15_AXI_GEN_RDATA[10] = \<const0> ;
  assign S15_AXI_GEN_RDATA[9] = \<const0> ;
  assign S15_AXI_GEN_RDATA[8] = \<const0> ;
  assign S15_AXI_GEN_RDATA[7] = \<const0> ;
  assign S15_AXI_GEN_RDATA[6] = \<const0> ;
  assign S15_AXI_GEN_RDATA[5] = \<const0> ;
  assign S15_AXI_GEN_RDATA[4] = \<const0> ;
  assign S15_AXI_GEN_RDATA[3] = \<const0> ;
  assign S15_AXI_GEN_RDATA[2] = \<const0> ;
  assign S15_AXI_GEN_RDATA[1] = \<const0> ;
  assign S15_AXI_GEN_RDATA[0] = \<const0> ;
  assign S15_AXI_GEN_RID[0] = \<const0> ;
  assign S15_AXI_GEN_RLAST = \<const0> ;
  assign S15_AXI_GEN_RRESP[1] = \<const0> ;
  assign S15_AXI_GEN_RRESP[0] = \<const0> ;
  assign S15_AXI_GEN_RVALID = \<const0> ;
  assign S15_AXI_GEN_WREADY = \<const0> ;
  assign S15_AXI_RDATA[31] = \<const0> ;
  assign S15_AXI_RDATA[30] = \<const0> ;
  assign S15_AXI_RDATA[29] = \<const0> ;
  assign S15_AXI_RDATA[28] = \<const0> ;
  assign S15_AXI_RDATA[27] = \<const0> ;
  assign S15_AXI_RDATA[26] = \<const0> ;
  assign S15_AXI_RDATA[25] = \<const0> ;
  assign S15_AXI_RDATA[24] = \<const0> ;
  assign S15_AXI_RDATA[23] = \<const0> ;
  assign S15_AXI_RDATA[22] = \<const0> ;
  assign S15_AXI_RDATA[21] = \<const0> ;
  assign S15_AXI_RDATA[20] = \<const0> ;
  assign S15_AXI_RDATA[19] = \<const0> ;
  assign S15_AXI_RDATA[18] = \<const0> ;
  assign S15_AXI_RDATA[17] = \<const0> ;
  assign S15_AXI_RDATA[16] = \<const0> ;
  assign S15_AXI_RDATA[15] = \<const0> ;
  assign S15_AXI_RDATA[14] = \<const0> ;
  assign S15_AXI_RDATA[13] = \<const0> ;
  assign S15_AXI_RDATA[12] = \<const0> ;
  assign S15_AXI_RDATA[11] = \<const0> ;
  assign S15_AXI_RDATA[10] = \<const0> ;
  assign S15_AXI_RDATA[9] = \<const0> ;
  assign S15_AXI_RDATA[8] = \<const0> ;
  assign S15_AXI_RDATA[7] = \<const0> ;
  assign S15_AXI_RDATA[6] = \<const0> ;
  assign S15_AXI_RDATA[5] = \<const0> ;
  assign S15_AXI_RDATA[4] = \<const0> ;
  assign S15_AXI_RDATA[3] = \<const0> ;
  assign S15_AXI_RDATA[2] = \<const0> ;
  assign S15_AXI_RDATA[1] = \<const0> ;
  assign S15_AXI_RDATA[0] = \<const0> ;
  assign S15_AXI_RID[0] = \<const0> ;
  assign S15_AXI_RLAST = \<const0> ;
  assign S15_AXI_RRESP[1] = \<const0> ;
  assign S15_AXI_RRESP[0] = \<const0> ;
  assign S15_AXI_RVALID = \<const0> ;
  assign S15_AXI_WREADY = \<const0> ;
  assign S1_AXI_ACADDR[31] = \<const0> ;
  assign S1_AXI_ACADDR[30] = \<const0> ;
  assign S1_AXI_ACADDR[29] = \<const0> ;
  assign S1_AXI_ACADDR[28] = \<const0> ;
  assign S1_AXI_ACADDR[27] = \<const0> ;
  assign S1_AXI_ACADDR[26] = \<const0> ;
  assign S1_AXI_ACADDR[25] = \<const0> ;
  assign S1_AXI_ACADDR[24] = \<const0> ;
  assign S1_AXI_ACADDR[23] = \<const0> ;
  assign S1_AXI_ACADDR[22] = \<const0> ;
  assign S1_AXI_ACADDR[21] = \<const0> ;
  assign S1_AXI_ACADDR[20] = \<const0> ;
  assign S1_AXI_ACADDR[19] = \<const0> ;
  assign S1_AXI_ACADDR[18] = \<const0> ;
  assign S1_AXI_ACADDR[17] = \<const0> ;
  assign S1_AXI_ACADDR[16] = \<const0> ;
  assign S1_AXI_ACADDR[15] = \<const0> ;
  assign S1_AXI_ACADDR[14] = \<const0> ;
  assign S1_AXI_ACADDR[13] = \<const0> ;
  assign S1_AXI_ACADDR[12] = \<const0> ;
  assign S1_AXI_ACADDR[11] = \<const0> ;
  assign S1_AXI_ACADDR[10] = \<const0> ;
  assign S1_AXI_ACADDR[9] = \<const0> ;
  assign S1_AXI_ACADDR[8] = \<const0> ;
  assign S1_AXI_ACADDR[7] = \<const0> ;
  assign S1_AXI_ACADDR[6] = \<const0> ;
  assign S1_AXI_ACADDR[5] = \<const0> ;
  assign S1_AXI_ACADDR[4] = \<const0> ;
  assign S1_AXI_ACADDR[3] = \<const0> ;
  assign S1_AXI_ACADDR[2] = \<const0> ;
  assign S1_AXI_ACADDR[1] = \<const0> ;
  assign S1_AXI_ACADDR[0] = \<const0> ;
  assign S1_AXI_ACPROT[2] = \<const0> ;
  assign S1_AXI_ACPROT[1] = \<const1> ;
  assign S1_AXI_ACPROT[0] = \<const0> ;
  assign S1_AXI_ACSNOOP[3] = \<const0> ;
  assign S1_AXI_ACSNOOP[2] = \<const0> ;
  assign S1_AXI_ACSNOOP[1] = \<const0> ;
  assign S1_AXI_ACSNOOP[0] = \<const0> ;
  assign S1_AXI_ACVALID = \<const0> ;
  assign S1_AXI_CDREADY = \<const0> ;
  assign S1_AXI_CRREADY = \<const0> ;
  assign S1_AXI_GEN_ARREADY = \<const0> ;
  assign S1_AXI_GEN_AWREADY = \<const0> ;
  assign S1_AXI_GEN_BID[0] = \<const0> ;
  assign S1_AXI_GEN_BRESP[1] = \<const0> ;
  assign S1_AXI_GEN_BRESP[0] = \<const0> ;
  assign S1_AXI_GEN_BVALID = \<const0> ;
  assign S1_AXI_GEN_RDATA[31] = \<const0> ;
  assign S1_AXI_GEN_RDATA[30] = \<const0> ;
  assign S1_AXI_GEN_RDATA[29] = \<const0> ;
  assign S1_AXI_GEN_RDATA[28] = \<const0> ;
  assign S1_AXI_GEN_RDATA[27] = \<const0> ;
  assign S1_AXI_GEN_RDATA[26] = \<const0> ;
  assign S1_AXI_GEN_RDATA[25] = \<const0> ;
  assign S1_AXI_GEN_RDATA[24] = \<const0> ;
  assign S1_AXI_GEN_RDATA[23] = \<const0> ;
  assign S1_AXI_GEN_RDATA[22] = \<const0> ;
  assign S1_AXI_GEN_RDATA[21] = \<const0> ;
  assign S1_AXI_GEN_RDATA[20] = \<const0> ;
  assign S1_AXI_GEN_RDATA[19] = \<const0> ;
  assign S1_AXI_GEN_RDATA[18] = \<const0> ;
  assign S1_AXI_GEN_RDATA[17] = \<const0> ;
  assign S1_AXI_GEN_RDATA[16] = \<const0> ;
  assign S1_AXI_GEN_RDATA[15] = \<const0> ;
  assign S1_AXI_GEN_RDATA[14] = \<const0> ;
  assign S1_AXI_GEN_RDATA[13] = \<const0> ;
  assign S1_AXI_GEN_RDATA[12] = \<const0> ;
  assign S1_AXI_GEN_RDATA[11] = \<const0> ;
  assign S1_AXI_GEN_RDATA[10] = \<const0> ;
  assign S1_AXI_GEN_RDATA[9] = \<const0> ;
  assign S1_AXI_GEN_RDATA[8] = \<const0> ;
  assign S1_AXI_GEN_RDATA[7] = \<const0> ;
  assign S1_AXI_GEN_RDATA[6] = \<const0> ;
  assign S1_AXI_GEN_RDATA[5] = \<const0> ;
  assign S1_AXI_GEN_RDATA[4] = \<const0> ;
  assign S1_AXI_GEN_RDATA[3] = \<const0> ;
  assign S1_AXI_GEN_RDATA[2] = \<const0> ;
  assign S1_AXI_GEN_RDATA[1] = \<const0> ;
  assign S1_AXI_GEN_RDATA[0] = \<const0> ;
  assign S1_AXI_GEN_RID[0] = \<const0> ;
  assign S1_AXI_GEN_RLAST = \<const0> ;
  assign S1_AXI_GEN_RRESP[1] = \<const0> ;
  assign S1_AXI_GEN_RRESP[0] = \<const0> ;
  assign S1_AXI_GEN_RVALID = \<const0> ;
  assign S1_AXI_GEN_WREADY = \<const0> ;
  assign S2_AXI_ACADDR[31] = \<const0> ;
  assign S2_AXI_ACADDR[30] = \<const0> ;
  assign S2_AXI_ACADDR[29] = \<const0> ;
  assign S2_AXI_ACADDR[28] = \<const0> ;
  assign S2_AXI_ACADDR[27] = \<const0> ;
  assign S2_AXI_ACADDR[26] = \<const0> ;
  assign S2_AXI_ACADDR[25] = \<const0> ;
  assign S2_AXI_ACADDR[24] = \<const0> ;
  assign S2_AXI_ACADDR[23] = \<const0> ;
  assign S2_AXI_ACADDR[22] = \<const0> ;
  assign S2_AXI_ACADDR[21] = \<const0> ;
  assign S2_AXI_ACADDR[20] = \<const0> ;
  assign S2_AXI_ACADDR[19] = \<const0> ;
  assign S2_AXI_ACADDR[18] = \<const0> ;
  assign S2_AXI_ACADDR[17] = \<const0> ;
  assign S2_AXI_ACADDR[16] = \<const0> ;
  assign S2_AXI_ACADDR[15] = \<const0> ;
  assign S2_AXI_ACADDR[14] = \<const0> ;
  assign S2_AXI_ACADDR[13] = \<const0> ;
  assign S2_AXI_ACADDR[12] = \<const0> ;
  assign S2_AXI_ACADDR[11] = \<const0> ;
  assign S2_AXI_ACADDR[10] = \<const0> ;
  assign S2_AXI_ACADDR[9] = \<const0> ;
  assign S2_AXI_ACADDR[8] = \<const0> ;
  assign S2_AXI_ACADDR[7] = \<const0> ;
  assign S2_AXI_ACADDR[6] = \<const0> ;
  assign S2_AXI_ACADDR[5] = \<const0> ;
  assign S2_AXI_ACADDR[4] = \<const0> ;
  assign S2_AXI_ACADDR[3] = \<const0> ;
  assign S2_AXI_ACADDR[2] = \<const0> ;
  assign S2_AXI_ACADDR[1] = \<const0> ;
  assign S2_AXI_ACADDR[0] = \<const0> ;
  assign S2_AXI_ACPROT[2] = \<const0> ;
  assign S2_AXI_ACPROT[1] = \<const0> ;
  assign S2_AXI_ACPROT[0] = \<const0> ;
  assign S2_AXI_ACSNOOP[3] = \<const0> ;
  assign S2_AXI_ACSNOOP[2] = \<const0> ;
  assign S2_AXI_ACSNOOP[1] = \<const0> ;
  assign S2_AXI_ACSNOOP[0] = \<const0> ;
  assign S2_AXI_ACVALID = \<const0> ;
  assign S2_AXI_ARREADY = \<const0> ;
  assign S2_AXI_AWREADY = \<const0> ;
  assign S2_AXI_BID[0] = \<const0> ;
  assign S2_AXI_BRESP[1] = \<const0> ;
  assign S2_AXI_BRESP[0] = \<const0> ;
  assign S2_AXI_BVALID = \<const0> ;
  assign S2_AXI_CDREADY = \<const0> ;
  assign S2_AXI_CRREADY = \<const0> ;
  assign S2_AXI_GEN_ARREADY = \<const0> ;
  assign S2_AXI_GEN_AWREADY = \<const0> ;
  assign S2_AXI_GEN_BID[0] = \<const0> ;
  assign S2_AXI_GEN_BRESP[1] = \<const0> ;
  assign S2_AXI_GEN_BRESP[0] = \<const0> ;
  assign S2_AXI_GEN_BVALID = \<const0> ;
  assign S2_AXI_GEN_RDATA[31] = \<const0> ;
  assign S2_AXI_GEN_RDATA[30] = \<const0> ;
  assign S2_AXI_GEN_RDATA[29] = \<const0> ;
  assign S2_AXI_GEN_RDATA[28] = \<const0> ;
  assign S2_AXI_GEN_RDATA[27] = \<const0> ;
  assign S2_AXI_GEN_RDATA[26] = \<const0> ;
  assign S2_AXI_GEN_RDATA[25] = \<const0> ;
  assign S2_AXI_GEN_RDATA[24] = \<const0> ;
  assign S2_AXI_GEN_RDATA[23] = \<const0> ;
  assign S2_AXI_GEN_RDATA[22] = \<const0> ;
  assign S2_AXI_GEN_RDATA[21] = \<const0> ;
  assign S2_AXI_GEN_RDATA[20] = \<const0> ;
  assign S2_AXI_GEN_RDATA[19] = \<const0> ;
  assign S2_AXI_GEN_RDATA[18] = \<const0> ;
  assign S2_AXI_GEN_RDATA[17] = \<const0> ;
  assign S2_AXI_GEN_RDATA[16] = \<const0> ;
  assign S2_AXI_GEN_RDATA[15] = \<const0> ;
  assign S2_AXI_GEN_RDATA[14] = \<const0> ;
  assign S2_AXI_GEN_RDATA[13] = \<const0> ;
  assign S2_AXI_GEN_RDATA[12] = \<const0> ;
  assign S2_AXI_GEN_RDATA[11] = \<const0> ;
  assign S2_AXI_GEN_RDATA[10] = \<const0> ;
  assign S2_AXI_GEN_RDATA[9] = \<const0> ;
  assign S2_AXI_GEN_RDATA[8] = \<const0> ;
  assign S2_AXI_GEN_RDATA[7] = \<const0> ;
  assign S2_AXI_GEN_RDATA[6] = \<const0> ;
  assign S2_AXI_GEN_RDATA[5] = \<const0> ;
  assign S2_AXI_GEN_RDATA[4] = \<const0> ;
  assign S2_AXI_GEN_RDATA[3] = \<const0> ;
  assign S2_AXI_GEN_RDATA[2] = \<const0> ;
  assign S2_AXI_GEN_RDATA[1] = \<const0> ;
  assign S2_AXI_GEN_RDATA[0] = \<const0> ;
  assign S2_AXI_GEN_RID[0] = \<const0> ;
  assign S2_AXI_GEN_RLAST = \<const0> ;
  assign S2_AXI_GEN_RRESP[1] = \<const0> ;
  assign S2_AXI_GEN_RRESP[0] = \<const0> ;
  assign S2_AXI_GEN_RVALID = \<const0> ;
  assign S2_AXI_GEN_WREADY = \<const0> ;
  assign S2_AXI_RDATA[31] = \<const0> ;
  assign S2_AXI_RDATA[30] = \<const0> ;
  assign S2_AXI_RDATA[29] = \<const0> ;
  assign S2_AXI_RDATA[28] = \<const0> ;
  assign S2_AXI_RDATA[27] = \<const0> ;
  assign S2_AXI_RDATA[26] = \<const0> ;
  assign S2_AXI_RDATA[25] = \<const0> ;
  assign S2_AXI_RDATA[24] = \<const0> ;
  assign S2_AXI_RDATA[23] = \<const0> ;
  assign S2_AXI_RDATA[22] = \<const0> ;
  assign S2_AXI_RDATA[21] = \<const0> ;
  assign S2_AXI_RDATA[20] = \<const0> ;
  assign S2_AXI_RDATA[19] = \<const0> ;
  assign S2_AXI_RDATA[18] = \<const0> ;
  assign S2_AXI_RDATA[17] = \<const0> ;
  assign S2_AXI_RDATA[16] = \<const0> ;
  assign S2_AXI_RDATA[15] = \<const0> ;
  assign S2_AXI_RDATA[14] = \<const0> ;
  assign S2_AXI_RDATA[13] = \<const0> ;
  assign S2_AXI_RDATA[12] = \<const0> ;
  assign S2_AXI_RDATA[11] = \<const0> ;
  assign S2_AXI_RDATA[10] = \<const0> ;
  assign S2_AXI_RDATA[9] = \<const0> ;
  assign S2_AXI_RDATA[8] = \<const0> ;
  assign S2_AXI_RDATA[7] = \<const0> ;
  assign S2_AXI_RDATA[6] = \<const0> ;
  assign S2_AXI_RDATA[5] = \<const0> ;
  assign S2_AXI_RDATA[4] = \<const0> ;
  assign S2_AXI_RDATA[3] = \<const0> ;
  assign S2_AXI_RDATA[2] = \<const0> ;
  assign S2_AXI_RDATA[1] = \<const0> ;
  assign S2_AXI_RDATA[0] = \<const0> ;
  assign S2_AXI_RID[0] = \<const0> ;
  assign S2_AXI_RLAST = \<const0> ;
  assign S2_AXI_RRESP[1] = \<const0> ;
  assign S2_AXI_RRESP[0] = \<const0> ;
  assign S2_AXI_RVALID = \<const0> ;
  assign S2_AXI_WREADY = \<const0> ;
  assign S3_AXI_ACADDR[31] = \<const0> ;
  assign S3_AXI_ACADDR[30] = \<const0> ;
  assign S3_AXI_ACADDR[29] = \<const0> ;
  assign S3_AXI_ACADDR[28] = \<const0> ;
  assign S3_AXI_ACADDR[27] = \<const0> ;
  assign S3_AXI_ACADDR[26] = \<const0> ;
  assign S3_AXI_ACADDR[25] = \<const0> ;
  assign S3_AXI_ACADDR[24] = \<const0> ;
  assign S3_AXI_ACADDR[23] = \<const0> ;
  assign S3_AXI_ACADDR[22] = \<const0> ;
  assign S3_AXI_ACADDR[21] = \<const0> ;
  assign S3_AXI_ACADDR[20] = \<const0> ;
  assign S3_AXI_ACADDR[19] = \<const0> ;
  assign S3_AXI_ACADDR[18] = \<const0> ;
  assign S3_AXI_ACADDR[17] = \<const0> ;
  assign S3_AXI_ACADDR[16] = \<const0> ;
  assign S3_AXI_ACADDR[15] = \<const0> ;
  assign S3_AXI_ACADDR[14] = \<const0> ;
  assign S3_AXI_ACADDR[13] = \<const0> ;
  assign S3_AXI_ACADDR[12] = \<const0> ;
  assign S3_AXI_ACADDR[11] = \<const0> ;
  assign S3_AXI_ACADDR[10] = \<const0> ;
  assign S3_AXI_ACADDR[9] = \<const0> ;
  assign S3_AXI_ACADDR[8] = \<const0> ;
  assign S3_AXI_ACADDR[7] = \<const0> ;
  assign S3_AXI_ACADDR[6] = \<const0> ;
  assign S3_AXI_ACADDR[5] = \<const0> ;
  assign S3_AXI_ACADDR[4] = \<const0> ;
  assign S3_AXI_ACADDR[3] = \<const0> ;
  assign S3_AXI_ACADDR[2] = \<const0> ;
  assign S3_AXI_ACADDR[1] = \<const0> ;
  assign S3_AXI_ACADDR[0] = \<const0> ;
  assign S3_AXI_ACPROT[2] = \<const0> ;
  assign S3_AXI_ACPROT[1] = \<const0> ;
  assign S3_AXI_ACPROT[0] = \<const0> ;
  assign S3_AXI_ACSNOOP[3] = \<const0> ;
  assign S3_AXI_ACSNOOP[2] = \<const0> ;
  assign S3_AXI_ACSNOOP[1] = \<const0> ;
  assign S3_AXI_ACSNOOP[0] = \<const0> ;
  assign S3_AXI_ACVALID = \<const0> ;
  assign S3_AXI_ARREADY = \<const0> ;
  assign S3_AXI_AWREADY = \<const0> ;
  assign S3_AXI_BID[0] = \<const0> ;
  assign S3_AXI_BRESP[1] = \<const0> ;
  assign S3_AXI_BRESP[0] = \<const0> ;
  assign S3_AXI_BVALID = \<const0> ;
  assign S3_AXI_CDREADY = \<const0> ;
  assign S3_AXI_CRREADY = \<const0> ;
  assign S3_AXI_GEN_ARREADY = \<const0> ;
  assign S3_AXI_GEN_AWREADY = \<const0> ;
  assign S3_AXI_GEN_BID[0] = \<const0> ;
  assign S3_AXI_GEN_BRESP[1] = \<const0> ;
  assign S3_AXI_GEN_BRESP[0] = \<const0> ;
  assign S3_AXI_GEN_BVALID = \<const0> ;
  assign S3_AXI_GEN_RDATA[31] = \<const0> ;
  assign S3_AXI_GEN_RDATA[30] = \<const0> ;
  assign S3_AXI_GEN_RDATA[29] = \<const0> ;
  assign S3_AXI_GEN_RDATA[28] = \<const0> ;
  assign S3_AXI_GEN_RDATA[27] = \<const0> ;
  assign S3_AXI_GEN_RDATA[26] = \<const0> ;
  assign S3_AXI_GEN_RDATA[25] = \<const0> ;
  assign S3_AXI_GEN_RDATA[24] = \<const0> ;
  assign S3_AXI_GEN_RDATA[23] = \<const0> ;
  assign S3_AXI_GEN_RDATA[22] = \<const0> ;
  assign S3_AXI_GEN_RDATA[21] = \<const0> ;
  assign S3_AXI_GEN_RDATA[20] = \<const0> ;
  assign S3_AXI_GEN_RDATA[19] = \<const0> ;
  assign S3_AXI_GEN_RDATA[18] = \<const0> ;
  assign S3_AXI_GEN_RDATA[17] = \<const0> ;
  assign S3_AXI_GEN_RDATA[16] = \<const0> ;
  assign S3_AXI_GEN_RDATA[15] = \<const0> ;
  assign S3_AXI_GEN_RDATA[14] = \<const0> ;
  assign S3_AXI_GEN_RDATA[13] = \<const0> ;
  assign S3_AXI_GEN_RDATA[12] = \<const0> ;
  assign S3_AXI_GEN_RDATA[11] = \<const0> ;
  assign S3_AXI_GEN_RDATA[10] = \<const0> ;
  assign S3_AXI_GEN_RDATA[9] = \<const0> ;
  assign S3_AXI_GEN_RDATA[8] = \<const0> ;
  assign S3_AXI_GEN_RDATA[7] = \<const0> ;
  assign S3_AXI_GEN_RDATA[6] = \<const0> ;
  assign S3_AXI_GEN_RDATA[5] = \<const0> ;
  assign S3_AXI_GEN_RDATA[4] = \<const0> ;
  assign S3_AXI_GEN_RDATA[3] = \<const0> ;
  assign S3_AXI_GEN_RDATA[2] = \<const0> ;
  assign S3_AXI_GEN_RDATA[1] = \<const0> ;
  assign S3_AXI_GEN_RDATA[0] = \<const0> ;
  assign S3_AXI_GEN_RID[0] = \<const0> ;
  assign S3_AXI_GEN_RLAST = \<const0> ;
  assign S3_AXI_GEN_RRESP[1] = \<const0> ;
  assign S3_AXI_GEN_RRESP[0] = \<const0> ;
  assign S3_AXI_GEN_RVALID = \<const0> ;
  assign S3_AXI_GEN_WREADY = \<const0> ;
  assign S3_AXI_RDATA[31] = \<const0> ;
  assign S3_AXI_RDATA[30] = \<const0> ;
  assign S3_AXI_RDATA[29] = \<const0> ;
  assign S3_AXI_RDATA[28] = \<const0> ;
  assign S3_AXI_RDATA[27] = \<const0> ;
  assign S3_AXI_RDATA[26] = \<const0> ;
  assign S3_AXI_RDATA[25] = \<const0> ;
  assign S3_AXI_RDATA[24] = \<const0> ;
  assign S3_AXI_RDATA[23] = \<const0> ;
  assign S3_AXI_RDATA[22] = \<const0> ;
  assign S3_AXI_RDATA[21] = \<const0> ;
  assign S3_AXI_RDATA[20] = \<const0> ;
  assign S3_AXI_RDATA[19] = \<const0> ;
  assign S3_AXI_RDATA[18] = \<const0> ;
  assign S3_AXI_RDATA[17] = \<const0> ;
  assign S3_AXI_RDATA[16] = \<const0> ;
  assign S3_AXI_RDATA[15] = \<const0> ;
  assign S3_AXI_RDATA[14] = \<const0> ;
  assign S3_AXI_RDATA[13] = \<const0> ;
  assign S3_AXI_RDATA[12] = \<const0> ;
  assign S3_AXI_RDATA[11] = \<const0> ;
  assign S3_AXI_RDATA[10] = \<const0> ;
  assign S3_AXI_RDATA[9] = \<const0> ;
  assign S3_AXI_RDATA[8] = \<const0> ;
  assign S3_AXI_RDATA[7] = \<const0> ;
  assign S3_AXI_RDATA[6] = \<const0> ;
  assign S3_AXI_RDATA[5] = \<const0> ;
  assign S3_AXI_RDATA[4] = \<const0> ;
  assign S3_AXI_RDATA[3] = \<const0> ;
  assign S3_AXI_RDATA[2] = \<const0> ;
  assign S3_AXI_RDATA[1] = \<const0> ;
  assign S3_AXI_RDATA[0] = \<const0> ;
  assign S3_AXI_RID[0] = \<const0> ;
  assign S3_AXI_RLAST = \<const0> ;
  assign S3_AXI_RRESP[1] = \<const0> ;
  assign S3_AXI_RRESP[0] = \<const0> ;
  assign S3_AXI_RVALID = \<const0> ;
  assign S3_AXI_WREADY = \<const0> ;
  assign S4_AXI_ACADDR[31] = \<const0> ;
  assign S4_AXI_ACADDR[30] = \<const0> ;
  assign S4_AXI_ACADDR[29] = \<const0> ;
  assign S4_AXI_ACADDR[28] = \<const0> ;
  assign S4_AXI_ACADDR[27] = \<const0> ;
  assign S4_AXI_ACADDR[26] = \<const0> ;
  assign S4_AXI_ACADDR[25] = \<const0> ;
  assign S4_AXI_ACADDR[24] = \<const0> ;
  assign S4_AXI_ACADDR[23] = \<const0> ;
  assign S4_AXI_ACADDR[22] = \<const0> ;
  assign S4_AXI_ACADDR[21] = \<const0> ;
  assign S4_AXI_ACADDR[20] = \<const0> ;
  assign S4_AXI_ACADDR[19] = \<const0> ;
  assign S4_AXI_ACADDR[18] = \<const0> ;
  assign S4_AXI_ACADDR[17] = \<const0> ;
  assign S4_AXI_ACADDR[16] = \<const0> ;
  assign S4_AXI_ACADDR[15] = \<const0> ;
  assign S4_AXI_ACADDR[14] = \<const0> ;
  assign S4_AXI_ACADDR[13] = \<const0> ;
  assign S4_AXI_ACADDR[12] = \<const0> ;
  assign S4_AXI_ACADDR[11] = \<const0> ;
  assign S4_AXI_ACADDR[10] = \<const0> ;
  assign S4_AXI_ACADDR[9] = \<const0> ;
  assign S4_AXI_ACADDR[8] = \<const0> ;
  assign S4_AXI_ACADDR[7] = \<const0> ;
  assign S4_AXI_ACADDR[6] = \<const0> ;
  assign S4_AXI_ACADDR[5] = \<const0> ;
  assign S4_AXI_ACADDR[4] = \<const0> ;
  assign S4_AXI_ACADDR[3] = \<const0> ;
  assign S4_AXI_ACADDR[2] = \<const0> ;
  assign S4_AXI_ACADDR[1] = \<const0> ;
  assign S4_AXI_ACADDR[0] = \<const0> ;
  assign S4_AXI_ACPROT[2] = \<const0> ;
  assign S4_AXI_ACPROT[1] = \<const0> ;
  assign S4_AXI_ACPROT[0] = \<const0> ;
  assign S4_AXI_ACSNOOP[3] = \<const0> ;
  assign S4_AXI_ACSNOOP[2] = \<const0> ;
  assign S4_AXI_ACSNOOP[1] = \<const0> ;
  assign S4_AXI_ACSNOOP[0] = \<const0> ;
  assign S4_AXI_ACVALID = \<const0> ;
  assign S4_AXI_ARREADY = \<const0> ;
  assign S4_AXI_AWREADY = \<const0> ;
  assign S4_AXI_BID[0] = \<const0> ;
  assign S4_AXI_BRESP[1] = \<const0> ;
  assign S4_AXI_BRESP[0] = \<const0> ;
  assign S4_AXI_BVALID = \<const0> ;
  assign S4_AXI_CDREADY = \<const0> ;
  assign S4_AXI_CRREADY = \<const0> ;
  assign S4_AXI_GEN_ARREADY = \<const0> ;
  assign S4_AXI_GEN_AWREADY = \<const0> ;
  assign S4_AXI_GEN_BID[0] = \<const0> ;
  assign S4_AXI_GEN_BRESP[1] = \<const0> ;
  assign S4_AXI_GEN_BRESP[0] = \<const0> ;
  assign S4_AXI_GEN_BVALID = \<const0> ;
  assign S4_AXI_GEN_RDATA[31] = \<const0> ;
  assign S4_AXI_GEN_RDATA[30] = \<const0> ;
  assign S4_AXI_GEN_RDATA[29] = \<const0> ;
  assign S4_AXI_GEN_RDATA[28] = \<const0> ;
  assign S4_AXI_GEN_RDATA[27] = \<const0> ;
  assign S4_AXI_GEN_RDATA[26] = \<const0> ;
  assign S4_AXI_GEN_RDATA[25] = \<const0> ;
  assign S4_AXI_GEN_RDATA[24] = \<const0> ;
  assign S4_AXI_GEN_RDATA[23] = \<const0> ;
  assign S4_AXI_GEN_RDATA[22] = \<const0> ;
  assign S4_AXI_GEN_RDATA[21] = \<const0> ;
  assign S4_AXI_GEN_RDATA[20] = \<const0> ;
  assign S4_AXI_GEN_RDATA[19] = \<const0> ;
  assign S4_AXI_GEN_RDATA[18] = \<const0> ;
  assign S4_AXI_GEN_RDATA[17] = \<const0> ;
  assign S4_AXI_GEN_RDATA[16] = \<const0> ;
  assign S4_AXI_GEN_RDATA[15] = \<const0> ;
  assign S4_AXI_GEN_RDATA[14] = \<const0> ;
  assign S4_AXI_GEN_RDATA[13] = \<const0> ;
  assign S4_AXI_GEN_RDATA[12] = \<const0> ;
  assign S4_AXI_GEN_RDATA[11] = \<const0> ;
  assign S4_AXI_GEN_RDATA[10] = \<const0> ;
  assign S4_AXI_GEN_RDATA[9] = \<const0> ;
  assign S4_AXI_GEN_RDATA[8] = \<const0> ;
  assign S4_AXI_GEN_RDATA[7] = \<const0> ;
  assign S4_AXI_GEN_RDATA[6] = \<const0> ;
  assign S4_AXI_GEN_RDATA[5] = \<const0> ;
  assign S4_AXI_GEN_RDATA[4] = \<const0> ;
  assign S4_AXI_GEN_RDATA[3] = \<const0> ;
  assign S4_AXI_GEN_RDATA[2] = \<const0> ;
  assign S4_AXI_GEN_RDATA[1] = \<const0> ;
  assign S4_AXI_GEN_RDATA[0] = \<const0> ;
  assign S4_AXI_GEN_RID[0] = \<const0> ;
  assign S4_AXI_GEN_RLAST = \<const0> ;
  assign S4_AXI_GEN_RRESP[1] = \<const0> ;
  assign S4_AXI_GEN_RRESP[0] = \<const0> ;
  assign S4_AXI_GEN_RVALID = \<const0> ;
  assign S4_AXI_GEN_WREADY = \<const0> ;
  assign S4_AXI_RDATA[31] = \<const0> ;
  assign S4_AXI_RDATA[30] = \<const0> ;
  assign S4_AXI_RDATA[29] = \<const0> ;
  assign S4_AXI_RDATA[28] = \<const0> ;
  assign S4_AXI_RDATA[27] = \<const0> ;
  assign S4_AXI_RDATA[26] = \<const0> ;
  assign S4_AXI_RDATA[25] = \<const0> ;
  assign S4_AXI_RDATA[24] = \<const0> ;
  assign S4_AXI_RDATA[23] = \<const0> ;
  assign S4_AXI_RDATA[22] = \<const0> ;
  assign S4_AXI_RDATA[21] = \<const0> ;
  assign S4_AXI_RDATA[20] = \<const0> ;
  assign S4_AXI_RDATA[19] = \<const0> ;
  assign S4_AXI_RDATA[18] = \<const0> ;
  assign S4_AXI_RDATA[17] = \<const0> ;
  assign S4_AXI_RDATA[16] = \<const0> ;
  assign S4_AXI_RDATA[15] = \<const0> ;
  assign S4_AXI_RDATA[14] = \<const0> ;
  assign S4_AXI_RDATA[13] = \<const0> ;
  assign S4_AXI_RDATA[12] = \<const0> ;
  assign S4_AXI_RDATA[11] = \<const0> ;
  assign S4_AXI_RDATA[10] = \<const0> ;
  assign S4_AXI_RDATA[9] = \<const0> ;
  assign S4_AXI_RDATA[8] = \<const0> ;
  assign S4_AXI_RDATA[7] = \<const0> ;
  assign S4_AXI_RDATA[6] = \<const0> ;
  assign S4_AXI_RDATA[5] = \<const0> ;
  assign S4_AXI_RDATA[4] = \<const0> ;
  assign S4_AXI_RDATA[3] = \<const0> ;
  assign S4_AXI_RDATA[2] = \<const0> ;
  assign S4_AXI_RDATA[1] = \<const0> ;
  assign S4_AXI_RDATA[0] = \<const0> ;
  assign S4_AXI_RID[0] = \<const0> ;
  assign S4_AXI_RLAST = \<const0> ;
  assign S4_AXI_RRESP[1] = \<const0> ;
  assign S4_AXI_RRESP[0] = \<const0> ;
  assign S4_AXI_RVALID = \<const0> ;
  assign S4_AXI_WREADY = \<const0> ;
  assign S5_AXI_ACADDR[31] = \<const0> ;
  assign S5_AXI_ACADDR[30] = \<const0> ;
  assign S5_AXI_ACADDR[29] = \<const0> ;
  assign S5_AXI_ACADDR[28] = \<const0> ;
  assign S5_AXI_ACADDR[27] = \<const0> ;
  assign S5_AXI_ACADDR[26] = \<const0> ;
  assign S5_AXI_ACADDR[25] = \<const0> ;
  assign S5_AXI_ACADDR[24] = \<const0> ;
  assign S5_AXI_ACADDR[23] = \<const0> ;
  assign S5_AXI_ACADDR[22] = \<const0> ;
  assign S5_AXI_ACADDR[21] = \<const0> ;
  assign S5_AXI_ACADDR[20] = \<const0> ;
  assign S5_AXI_ACADDR[19] = \<const0> ;
  assign S5_AXI_ACADDR[18] = \<const0> ;
  assign S5_AXI_ACADDR[17] = \<const0> ;
  assign S5_AXI_ACADDR[16] = \<const0> ;
  assign S5_AXI_ACADDR[15] = \<const0> ;
  assign S5_AXI_ACADDR[14] = \<const0> ;
  assign S5_AXI_ACADDR[13] = \<const0> ;
  assign S5_AXI_ACADDR[12] = \<const0> ;
  assign S5_AXI_ACADDR[11] = \<const0> ;
  assign S5_AXI_ACADDR[10] = \<const0> ;
  assign S5_AXI_ACADDR[9] = \<const0> ;
  assign S5_AXI_ACADDR[8] = \<const0> ;
  assign S5_AXI_ACADDR[7] = \<const0> ;
  assign S5_AXI_ACADDR[6] = \<const0> ;
  assign S5_AXI_ACADDR[5] = \<const0> ;
  assign S5_AXI_ACADDR[4] = \<const0> ;
  assign S5_AXI_ACADDR[3] = \<const0> ;
  assign S5_AXI_ACADDR[2] = \<const0> ;
  assign S5_AXI_ACADDR[1] = \<const0> ;
  assign S5_AXI_ACADDR[0] = \<const0> ;
  assign S5_AXI_ACPROT[2] = \<const0> ;
  assign S5_AXI_ACPROT[1] = \<const0> ;
  assign S5_AXI_ACPROT[0] = \<const0> ;
  assign S5_AXI_ACSNOOP[3] = \<const0> ;
  assign S5_AXI_ACSNOOP[2] = \<const0> ;
  assign S5_AXI_ACSNOOP[1] = \<const0> ;
  assign S5_AXI_ACSNOOP[0] = \<const0> ;
  assign S5_AXI_ACVALID = \<const0> ;
  assign S5_AXI_ARREADY = \<const0> ;
  assign S5_AXI_AWREADY = \<const0> ;
  assign S5_AXI_BID[0] = \<const0> ;
  assign S5_AXI_BRESP[1] = \<const0> ;
  assign S5_AXI_BRESP[0] = \<const0> ;
  assign S5_AXI_BVALID = \<const0> ;
  assign S5_AXI_CDREADY = \<const0> ;
  assign S5_AXI_CRREADY = \<const0> ;
  assign S5_AXI_GEN_ARREADY = \<const0> ;
  assign S5_AXI_GEN_AWREADY = \<const0> ;
  assign S5_AXI_GEN_BID[0] = \<const0> ;
  assign S5_AXI_GEN_BRESP[1] = \<const0> ;
  assign S5_AXI_GEN_BRESP[0] = \<const0> ;
  assign S5_AXI_GEN_BVALID = \<const0> ;
  assign S5_AXI_GEN_RDATA[31] = \<const0> ;
  assign S5_AXI_GEN_RDATA[30] = \<const0> ;
  assign S5_AXI_GEN_RDATA[29] = \<const0> ;
  assign S5_AXI_GEN_RDATA[28] = \<const0> ;
  assign S5_AXI_GEN_RDATA[27] = \<const0> ;
  assign S5_AXI_GEN_RDATA[26] = \<const0> ;
  assign S5_AXI_GEN_RDATA[25] = \<const0> ;
  assign S5_AXI_GEN_RDATA[24] = \<const0> ;
  assign S5_AXI_GEN_RDATA[23] = \<const0> ;
  assign S5_AXI_GEN_RDATA[22] = \<const0> ;
  assign S5_AXI_GEN_RDATA[21] = \<const0> ;
  assign S5_AXI_GEN_RDATA[20] = \<const0> ;
  assign S5_AXI_GEN_RDATA[19] = \<const0> ;
  assign S5_AXI_GEN_RDATA[18] = \<const0> ;
  assign S5_AXI_GEN_RDATA[17] = \<const0> ;
  assign S5_AXI_GEN_RDATA[16] = \<const0> ;
  assign S5_AXI_GEN_RDATA[15] = \<const0> ;
  assign S5_AXI_GEN_RDATA[14] = \<const0> ;
  assign S5_AXI_GEN_RDATA[13] = \<const0> ;
  assign S5_AXI_GEN_RDATA[12] = \<const0> ;
  assign S5_AXI_GEN_RDATA[11] = \<const0> ;
  assign S5_AXI_GEN_RDATA[10] = \<const0> ;
  assign S5_AXI_GEN_RDATA[9] = \<const0> ;
  assign S5_AXI_GEN_RDATA[8] = \<const0> ;
  assign S5_AXI_GEN_RDATA[7] = \<const0> ;
  assign S5_AXI_GEN_RDATA[6] = \<const0> ;
  assign S5_AXI_GEN_RDATA[5] = \<const0> ;
  assign S5_AXI_GEN_RDATA[4] = \<const0> ;
  assign S5_AXI_GEN_RDATA[3] = \<const0> ;
  assign S5_AXI_GEN_RDATA[2] = \<const0> ;
  assign S5_AXI_GEN_RDATA[1] = \<const0> ;
  assign S5_AXI_GEN_RDATA[0] = \<const0> ;
  assign S5_AXI_GEN_RID[0] = \<const0> ;
  assign S5_AXI_GEN_RLAST = \<const0> ;
  assign S5_AXI_GEN_RRESP[1] = \<const0> ;
  assign S5_AXI_GEN_RRESP[0] = \<const0> ;
  assign S5_AXI_GEN_RVALID = \<const0> ;
  assign S5_AXI_GEN_WREADY = \<const0> ;
  assign S5_AXI_RDATA[31] = \<const0> ;
  assign S5_AXI_RDATA[30] = \<const0> ;
  assign S5_AXI_RDATA[29] = \<const0> ;
  assign S5_AXI_RDATA[28] = \<const0> ;
  assign S5_AXI_RDATA[27] = \<const0> ;
  assign S5_AXI_RDATA[26] = \<const0> ;
  assign S5_AXI_RDATA[25] = \<const0> ;
  assign S5_AXI_RDATA[24] = \<const0> ;
  assign S5_AXI_RDATA[23] = \<const0> ;
  assign S5_AXI_RDATA[22] = \<const0> ;
  assign S5_AXI_RDATA[21] = \<const0> ;
  assign S5_AXI_RDATA[20] = \<const0> ;
  assign S5_AXI_RDATA[19] = \<const0> ;
  assign S5_AXI_RDATA[18] = \<const0> ;
  assign S5_AXI_RDATA[17] = \<const0> ;
  assign S5_AXI_RDATA[16] = \<const0> ;
  assign S5_AXI_RDATA[15] = \<const0> ;
  assign S5_AXI_RDATA[14] = \<const0> ;
  assign S5_AXI_RDATA[13] = \<const0> ;
  assign S5_AXI_RDATA[12] = \<const0> ;
  assign S5_AXI_RDATA[11] = \<const0> ;
  assign S5_AXI_RDATA[10] = \<const0> ;
  assign S5_AXI_RDATA[9] = \<const0> ;
  assign S5_AXI_RDATA[8] = \<const0> ;
  assign S5_AXI_RDATA[7] = \<const0> ;
  assign S5_AXI_RDATA[6] = \<const0> ;
  assign S5_AXI_RDATA[5] = \<const0> ;
  assign S5_AXI_RDATA[4] = \<const0> ;
  assign S5_AXI_RDATA[3] = \<const0> ;
  assign S5_AXI_RDATA[2] = \<const0> ;
  assign S5_AXI_RDATA[1] = \<const0> ;
  assign S5_AXI_RDATA[0] = \<const0> ;
  assign S5_AXI_RID[0] = \<const0> ;
  assign S5_AXI_RLAST = \<const0> ;
  assign S5_AXI_RRESP[1] = \<const0> ;
  assign S5_AXI_RRESP[0] = \<const0> ;
  assign S5_AXI_RVALID = \<const0> ;
  assign S5_AXI_WREADY = \<const0> ;
  assign S6_AXI_ACADDR[31] = \<const0> ;
  assign S6_AXI_ACADDR[30] = \<const0> ;
  assign S6_AXI_ACADDR[29] = \<const0> ;
  assign S6_AXI_ACADDR[28] = \<const0> ;
  assign S6_AXI_ACADDR[27] = \<const0> ;
  assign S6_AXI_ACADDR[26] = \<const0> ;
  assign S6_AXI_ACADDR[25] = \<const0> ;
  assign S6_AXI_ACADDR[24] = \<const0> ;
  assign S6_AXI_ACADDR[23] = \<const0> ;
  assign S6_AXI_ACADDR[22] = \<const0> ;
  assign S6_AXI_ACADDR[21] = \<const0> ;
  assign S6_AXI_ACADDR[20] = \<const0> ;
  assign S6_AXI_ACADDR[19] = \<const0> ;
  assign S6_AXI_ACADDR[18] = \<const0> ;
  assign S6_AXI_ACADDR[17] = \<const0> ;
  assign S6_AXI_ACADDR[16] = \<const0> ;
  assign S6_AXI_ACADDR[15] = \<const0> ;
  assign S6_AXI_ACADDR[14] = \<const0> ;
  assign S6_AXI_ACADDR[13] = \<const0> ;
  assign S6_AXI_ACADDR[12] = \<const0> ;
  assign S6_AXI_ACADDR[11] = \<const0> ;
  assign S6_AXI_ACADDR[10] = \<const0> ;
  assign S6_AXI_ACADDR[9] = \<const0> ;
  assign S6_AXI_ACADDR[8] = \<const0> ;
  assign S6_AXI_ACADDR[7] = \<const0> ;
  assign S6_AXI_ACADDR[6] = \<const0> ;
  assign S6_AXI_ACADDR[5] = \<const0> ;
  assign S6_AXI_ACADDR[4] = \<const0> ;
  assign S6_AXI_ACADDR[3] = \<const0> ;
  assign S6_AXI_ACADDR[2] = \<const0> ;
  assign S6_AXI_ACADDR[1] = \<const0> ;
  assign S6_AXI_ACADDR[0] = \<const0> ;
  assign S6_AXI_ACPROT[2] = \<const0> ;
  assign S6_AXI_ACPROT[1] = \<const0> ;
  assign S6_AXI_ACPROT[0] = \<const0> ;
  assign S6_AXI_ACSNOOP[3] = \<const0> ;
  assign S6_AXI_ACSNOOP[2] = \<const0> ;
  assign S6_AXI_ACSNOOP[1] = \<const0> ;
  assign S6_AXI_ACSNOOP[0] = \<const0> ;
  assign S6_AXI_ACVALID = \<const0> ;
  assign S6_AXI_ARREADY = \<const0> ;
  assign S6_AXI_AWREADY = \<const0> ;
  assign S6_AXI_BID[0] = \<const0> ;
  assign S6_AXI_BRESP[1] = \<const0> ;
  assign S6_AXI_BRESP[0] = \<const0> ;
  assign S6_AXI_BVALID = \<const0> ;
  assign S6_AXI_CDREADY = \<const0> ;
  assign S6_AXI_CRREADY = \<const0> ;
  assign S6_AXI_GEN_ARREADY = \<const0> ;
  assign S6_AXI_GEN_AWREADY = \<const0> ;
  assign S6_AXI_GEN_BID[0] = \<const0> ;
  assign S6_AXI_GEN_BRESP[1] = \<const0> ;
  assign S6_AXI_GEN_BRESP[0] = \<const0> ;
  assign S6_AXI_GEN_BVALID = \<const0> ;
  assign S6_AXI_GEN_RDATA[31] = \<const0> ;
  assign S6_AXI_GEN_RDATA[30] = \<const0> ;
  assign S6_AXI_GEN_RDATA[29] = \<const0> ;
  assign S6_AXI_GEN_RDATA[28] = \<const0> ;
  assign S6_AXI_GEN_RDATA[27] = \<const0> ;
  assign S6_AXI_GEN_RDATA[26] = \<const0> ;
  assign S6_AXI_GEN_RDATA[25] = \<const0> ;
  assign S6_AXI_GEN_RDATA[24] = \<const0> ;
  assign S6_AXI_GEN_RDATA[23] = \<const0> ;
  assign S6_AXI_GEN_RDATA[22] = \<const0> ;
  assign S6_AXI_GEN_RDATA[21] = \<const0> ;
  assign S6_AXI_GEN_RDATA[20] = \<const0> ;
  assign S6_AXI_GEN_RDATA[19] = \<const0> ;
  assign S6_AXI_GEN_RDATA[18] = \<const0> ;
  assign S6_AXI_GEN_RDATA[17] = \<const0> ;
  assign S6_AXI_GEN_RDATA[16] = \<const0> ;
  assign S6_AXI_GEN_RDATA[15] = \<const0> ;
  assign S6_AXI_GEN_RDATA[14] = \<const0> ;
  assign S6_AXI_GEN_RDATA[13] = \<const0> ;
  assign S6_AXI_GEN_RDATA[12] = \<const0> ;
  assign S6_AXI_GEN_RDATA[11] = \<const0> ;
  assign S6_AXI_GEN_RDATA[10] = \<const0> ;
  assign S6_AXI_GEN_RDATA[9] = \<const0> ;
  assign S6_AXI_GEN_RDATA[8] = \<const0> ;
  assign S6_AXI_GEN_RDATA[7] = \<const0> ;
  assign S6_AXI_GEN_RDATA[6] = \<const0> ;
  assign S6_AXI_GEN_RDATA[5] = \<const0> ;
  assign S6_AXI_GEN_RDATA[4] = \<const0> ;
  assign S6_AXI_GEN_RDATA[3] = \<const0> ;
  assign S6_AXI_GEN_RDATA[2] = \<const0> ;
  assign S6_AXI_GEN_RDATA[1] = \<const0> ;
  assign S6_AXI_GEN_RDATA[0] = \<const0> ;
  assign S6_AXI_GEN_RID[0] = \<const0> ;
  assign S6_AXI_GEN_RLAST = \<const0> ;
  assign S6_AXI_GEN_RRESP[1] = \<const0> ;
  assign S6_AXI_GEN_RRESP[0] = \<const0> ;
  assign S6_AXI_GEN_RVALID = \<const0> ;
  assign S6_AXI_GEN_WREADY = \<const0> ;
  assign S6_AXI_RDATA[31] = \<const0> ;
  assign S6_AXI_RDATA[30] = \<const0> ;
  assign S6_AXI_RDATA[29] = \<const0> ;
  assign S6_AXI_RDATA[28] = \<const0> ;
  assign S6_AXI_RDATA[27] = \<const0> ;
  assign S6_AXI_RDATA[26] = \<const0> ;
  assign S6_AXI_RDATA[25] = \<const0> ;
  assign S6_AXI_RDATA[24] = \<const0> ;
  assign S6_AXI_RDATA[23] = \<const0> ;
  assign S6_AXI_RDATA[22] = \<const0> ;
  assign S6_AXI_RDATA[21] = \<const0> ;
  assign S6_AXI_RDATA[20] = \<const0> ;
  assign S6_AXI_RDATA[19] = \<const0> ;
  assign S6_AXI_RDATA[18] = \<const0> ;
  assign S6_AXI_RDATA[17] = \<const0> ;
  assign S6_AXI_RDATA[16] = \<const0> ;
  assign S6_AXI_RDATA[15] = \<const0> ;
  assign S6_AXI_RDATA[14] = \<const0> ;
  assign S6_AXI_RDATA[13] = \<const0> ;
  assign S6_AXI_RDATA[12] = \<const0> ;
  assign S6_AXI_RDATA[11] = \<const0> ;
  assign S6_AXI_RDATA[10] = \<const0> ;
  assign S6_AXI_RDATA[9] = \<const0> ;
  assign S6_AXI_RDATA[8] = \<const0> ;
  assign S6_AXI_RDATA[7] = \<const0> ;
  assign S6_AXI_RDATA[6] = \<const0> ;
  assign S6_AXI_RDATA[5] = \<const0> ;
  assign S6_AXI_RDATA[4] = \<const0> ;
  assign S6_AXI_RDATA[3] = \<const0> ;
  assign S6_AXI_RDATA[2] = \<const0> ;
  assign S6_AXI_RDATA[1] = \<const0> ;
  assign S6_AXI_RDATA[0] = \<const0> ;
  assign S6_AXI_RID[0] = \<const0> ;
  assign S6_AXI_RLAST = \<const0> ;
  assign S6_AXI_RRESP[1] = \<const0> ;
  assign S6_AXI_RRESP[0] = \<const0> ;
  assign S6_AXI_RVALID = \<const0> ;
  assign S6_AXI_WREADY = \<const0> ;
  assign S7_AXI_ACADDR[31] = \<const0> ;
  assign S7_AXI_ACADDR[30] = \<const0> ;
  assign S7_AXI_ACADDR[29] = \<const0> ;
  assign S7_AXI_ACADDR[28] = \<const0> ;
  assign S7_AXI_ACADDR[27] = \<const0> ;
  assign S7_AXI_ACADDR[26] = \<const0> ;
  assign S7_AXI_ACADDR[25] = \<const0> ;
  assign S7_AXI_ACADDR[24] = \<const0> ;
  assign S7_AXI_ACADDR[23] = \<const0> ;
  assign S7_AXI_ACADDR[22] = \<const0> ;
  assign S7_AXI_ACADDR[21] = \<const0> ;
  assign S7_AXI_ACADDR[20] = \<const0> ;
  assign S7_AXI_ACADDR[19] = \<const0> ;
  assign S7_AXI_ACADDR[18] = \<const0> ;
  assign S7_AXI_ACADDR[17] = \<const0> ;
  assign S7_AXI_ACADDR[16] = \<const0> ;
  assign S7_AXI_ACADDR[15] = \<const0> ;
  assign S7_AXI_ACADDR[14] = \<const0> ;
  assign S7_AXI_ACADDR[13] = \<const0> ;
  assign S7_AXI_ACADDR[12] = \<const0> ;
  assign S7_AXI_ACADDR[11] = \<const0> ;
  assign S7_AXI_ACADDR[10] = \<const0> ;
  assign S7_AXI_ACADDR[9] = \<const0> ;
  assign S7_AXI_ACADDR[8] = \<const0> ;
  assign S7_AXI_ACADDR[7] = \<const0> ;
  assign S7_AXI_ACADDR[6] = \<const0> ;
  assign S7_AXI_ACADDR[5] = \<const0> ;
  assign S7_AXI_ACADDR[4] = \<const0> ;
  assign S7_AXI_ACADDR[3] = \<const0> ;
  assign S7_AXI_ACADDR[2] = \<const0> ;
  assign S7_AXI_ACADDR[1] = \<const0> ;
  assign S7_AXI_ACADDR[0] = \<const0> ;
  assign S7_AXI_ACPROT[2] = \<const0> ;
  assign S7_AXI_ACPROT[1] = \<const0> ;
  assign S7_AXI_ACPROT[0] = \<const0> ;
  assign S7_AXI_ACSNOOP[3] = \<const0> ;
  assign S7_AXI_ACSNOOP[2] = \<const0> ;
  assign S7_AXI_ACSNOOP[1] = \<const0> ;
  assign S7_AXI_ACSNOOP[0] = \<const0> ;
  assign S7_AXI_ACVALID = \<const0> ;
  assign S7_AXI_ARREADY = \<const0> ;
  assign S7_AXI_AWREADY = \<const0> ;
  assign S7_AXI_BID[0] = \<const0> ;
  assign S7_AXI_BRESP[1] = \<const0> ;
  assign S7_AXI_BRESP[0] = \<const0> ;
  assign S7_AXI_BVALID = \<const0> ;
  assign S7_AXI_CDREADY = \<const0> ;
  assign S7_AXI_CRREADY = \<const0> ;
  assign S7_AXI_GEN_ARREADY = \<const0> ;
  assign S7_AXI_GEN_AWREADY = \<const0> ;
  assign S7_AXI_GEN_BID[0] = \<const0> ;
  assign S7_AXI_GEN_BRESP[1] = \<const0> ;
  assign S7_AXI_GEN_BRESP[0] = \<const0> ;
  assign S7_AXI_GEN_BVALID = \<const0> ;
  assign S7_AXI_GEN_RDATA[31] = \<const0> ;
  assign S7_AXI_GEN_RDATA[30] = \<const0> ;
  assign S7_AXI_GEN_RDATA[29] = \<const0> ;
  assign S7_AXI_GEN_RDATA[28] = \<const0> ;
  assign S7_AXI_GEN_RDATA[27] = \<const0> ;
  assign S7_AXI_GEN_RDATA[26] = \<const0> ;
  assign S7_AXI_GEN_RDATA[25] = \<const0> ;
  assign S7_AXI_GEN_RDATA[24] = \<const0> ;
  assign S7_AXI_GEN_RDATA[23] = \<const0> ;
  assign S7_AXI_GEN_RDATA[22] = \<const0> ;
  assign S7_AXI_GEN_RDATA[21] = \<const0> ;
  assign S7_AXI_GEN_RDATA[20] = \<const0> ;
  assign S7_AXI_GEN_RDATA[19] = \<const0> ;
  assign S7_AXI_GEN_RDATA[18] = \<const0> ;
  assign S7_AXI_GEN_RDATA[17] = \<const0> ;
  assign S7_AXI_GEN_RDATA[16] = \<const0> ;
  assign S7_AXI_GEN_RDATA[15] = \<const0> ;
  assign S7_AXI_GEN_RDATA[14] = \<const0> ;
  assign S7_AXI_GEN_RDATA[13] = \<const0> ;
  assign S7_AXI_GEN_RDATA[12] = \<const0> ;
  assign S7_AXI_GEN_RDATA[11] = \<const0> ;
  assign S7_AXI_GEN_RDATA[10] = \<const0> ;
  assign S7_AXI_GEN_RDATA[9] = \<const0> ;
  assign S7_AXI_GEN_RDATA[8] = \<const0> ;
  assign S7_AXI_GEN_RDATA[7] = \<const0> ;
  assign S7_AXI_GEN_RDATA[6] = \<const0> ;
  assign S7_AXI_GEN_RDATA[5] = \<const0> ;
  assign S7_AXI_GEN_RDATA[4] = \<const0> ;
  assign S7_AXI_GEN_RDATA[3] = \<const0> ;
  assign S7_AXI_GEN_RDATA[2] = \<const0> ;
  assign S7_AXI_GEN_RDATA[1] = \<const0> ;
  assign S7_AXI_GEN_RDATA[0] = \<const0> ;
  assign S7_AXI_GEN_RID[0] = \<const0> ;
  assign S7_AXI_GEN_RLAST = \<const0> ;
  assign S7_AXI_GEN_RRESP[1] = \<const0> ;
  assign S7_AXI_GEN_RRESP[0] = \<const0> ;
  assign S7_AXI_GEN_RVALID = \<const0> ;
  assign S7_AXI_GEN_WREADY = \<const0> ;
  assign S7_AXI_RDATA[31] = \<const0> ;
  assign S7_AXI_RDATA[30] = \<const0> ;
  assign S7_AXI_RDATA[29] = \<const0> ;
  assign S7_AXI_RDATA[28] = \<const0> ;
  assign S7_AXI_RDATA[27] = \<const0> ;
  assign S7_AXI_RDATA[26] = \<const0> ;
  assign S7_AXI_RDATA[25] = \<const0> ;
  assign S7_AXI_RDATA[24] = \<const0> ;
  assign S7_AXI_RDATA[23] = \<const0> ;
  assign S7_AXI_RDATA[22] = \<const0> ;
  assign S7_AXI_RDATA[21] = \<const0> ;
  assign S7_AXI_RDATA[20] = \<const0> ;
  assign S7_AXI_RDATA[19] = \<const0> ;
  assign S7_AXI_RDATA[18] = \<const0> ;
  assign S7_AXI_RDATA[17] = \<const0> ;
  assign S7_AXI_RDATA[16] = \<const0> ;
  assign S7_AXI_RDATA[15] = \<const0> ;
  assign S7_AXI_RDATA[14] = \<const0> ;
  assign S7_AXI_RDATA[13] = \<const0> ;
  assign S7_AXI_RDATA[12] = \<const0> ;
  assign S7_AXI_RDATA[11] = \<const0> ;
  assign S7_AXI_RDATA[10] = \<const0> ;
  assign S7_AXI_RDATA[9] = \<const0> ;
  assign S7_AXI_RDATA[8] = \<const0> ;
  assign S7_AXI_RDATA[7] = \<const0> ;
  assign S7_AXI_RDATA[6] = \<const0> ;
  assign S7_AXI_RDATA[5] = \<const0> ;
  assign S7_AXI_RDATA[4] = \<const0> ;
  assign S7_AXI_RDATA[3] = \<const0> ;
  assign S7_AXI_RDATA[2] = \<const0> ;
  assign S7_AXI_RDATA[1] = \<const0> ;
  assign S7_AXI_RDATA[0] = \<const0> ;
  assign S7_AXI_RID[0] = \<const0> ;
  assign S7_AXI_RLAST = \<const0> ;
  assign S7_AXI_RRESP[1] = \<const0> ;
  assign S7_AXI_RRESP[0] = \<const0> ;
  assign S7_AXI_RVALID = \<const0> ;
  assign S7_AXI_WREADY = \<const0> ;
  assign S8_AXI_ACADDR[31] = \<const0> ;
  assign S8_AXI_ACADDR[30] = \<const0> ;
  assign S8_AXI_ACADDR[29] = \<const0> ;
  assign S8_AXI_ACADDR[28] = \<const0> ;
  assign S8_AXI_ACADDR[27] = \<const0> ;
  assign S8_AXI_ACADDR[26] = \<const0> ;
  assign S8_AXI_ACADDR[25] = \<const0> ;
  assign S8_AXI_ACADDR[24] = \<const0> ;
  assign S8_AXI_ACADDR[23] = \<const0> ;
  assign S8_AXI_ACADDR[22] = \<const0> ;
  assign S8_AXI_ACADDR[21] = \<const0> ;
  assign S8_AXI_ACADDR[20] = \<const0> ;
  assign S8_AXI_ACADDR[19] = \<const0> ;
  assign S8_AXI_ACADDR[18] = \<const0> ;
  assign S8_AXI_ACADDR[17] = \<const0> ;
  assign S8_AXI_ACADDR[16] = \<const0> ;
  assign S8_AXI_ACADDR[15] = \<const0> ;
  assign S8_AXI_ACADDR[14] = \<const0> ;
  assign S8_AXI_ACADDR[13] = \<const0> ;
  assign S8_AXI_ACADDR[12] = \<const0> ;
  assign S8_AXI_ACADDR[11] = \<const0> ;
  assign S8_AXI_ACADDR[10] = \<const0> ;
  assign S8_AXI_ACADDR[9] = \<const0> ;
  assign S8_AXI_ACADDR[8] = \<const0> ;
  assign S8_AXI_ACADDR[7] = \<const0> ;
  assign S8_AXI_ACADDR[6] = \<const0> ;
  assign S8_AXI_ACADDR[5] = \<const0> ;
  assign S8_AXI_ACADDR[4] = \<const0> ;
  assign S8_AXI_ACADDR[3] = \<const0> ;
  assign S8_AXI_ACADDR[2] = \<const0> ;
  assign S8_AXI_ACADDR[1] = \<const0> ;
  assign S8_AXI_ACADDR[0] = \<const0> ;
  assign S8_AXI_ACPROT[2] = \<const0> ;
  assign S8_AXI_ACPROT[1] = \<const0> ;
  assign S8_AXI_ACPROT[0] = \<const0> ;
  assign S8_AXI_ACSNOOP[3] = \<const0> ;
  assign S8_AXI_ACSNOOP[2] = \<const0> ;
  assign S8_AXI_ACSNOOP[1] = \<const0> ;
  assign S8_AXI_ACSNOOP[0] = \<const0> ;
  assign S8_AXI_ACVALID = \<const0> ;
  assign S8_AXI_ARREADY = \<const0> ;
  assign S8_AXI_AWREADY = \<const0> ;
  assign S8_AXI_BID[0] = \<const0> ;
  assign S8_AXI_BRESP[1] = \<const0> ;
  assign S8_AXI_BRESP[0] = \<const0> ;
  assign S8_AXI_BVALID = \<const0> ;
  assign S8_AXI_CDREADY = \<const0> ;
  assign S8_AXI_CRREADY = \<const0> ;
  assign S8_AXI_GEN_ARREADY = \<const0> ;
  assign S8_AXI_GEN_AWREADY = \<const0> ;
  assign S8_AXI_GEN_BID[0] = \<const0> ;
  assign S8_AXI_GEN_BRESP[1] = \<const0> ;
  assign S8_AXI_GEN_BRESP[0] = \<const0> ;
  assign S8_AXI_GEN_BVALID = \<const0> ;
  assign S8_AXI_GEN_RDATA[31] = \<const0> ;
  assign S8_AXI_GEN_RDATA[30] = \<const0> ;
  assign S8_AXI_GEN_RDATA[29] = \<const0> ;
  assign S8_AXI_GEN_RDATA[28] = \<const0> ;
  assign S8_AXI_GEN_RDATA[27] = \<const0> ;
  assign S8_AXI_GEN_RDATA[26] = \<const0> ;
  assign S8_AXI_GEN_RDATA[25] = \<const0> ;
  assign S8_AXI_GEN_RDATA[24] = \<const0> ;
  assign S8_AXI_GEN_RDATA[23] = \<const0> ;
  assign S8_AXI_GEN_RDATA[22] = \<const0> ;
  assign S8_AXI_GEN_RDATA[21] = \<const0> ;
  assign S8_AXI_GEN_RDATA[20] = \<const0> ;
  assign S8_AXI_GEN_RDATA[19] = \<const0> ;
  assign S8_AXI_GEN_RDATA[18] = \<const0> ;
  assign S8_AXI_GEN_RDATA[17] = \<const0> ;
  assign S8_AXI_GEN_RDATA[16] = \<const0> ;
  assign S8_AXI_GEN_RDATA[15] = \<const0> ;
  assign S8_AXI_GEN_RDATA[14] = \<const0> ;
  assign S8_AXI_GEN_RDATA[13] = \<const0> ;
  assign S8_AXI_GEN_RDATA[12] = \<const0> ;
  assign S8_AXI_GEN_RDATA[11] = \<const0> ;
  assign S8_AXI_GEN_RDATA[10] = \<const0> ;
  assign S8_AXI_GEN_RDATA[9] = \<const0> ;
  assign S8_AXI_GEN_RDATA[8] = \<const0> ;
  assign S8_AXI_GEN_RDATA[7] = \<const0> ;
  assign S8_AXI_GEN_RDATA[6] = \<const0> ;
  assign S8_AXI_GEN_RDATA[5] = \<const0> ;
  assign S8_AXI_GEN_RDATA[4] = \<const0> ;
  assign S8_AXI_GEN_RDATA[3] = \<const0> ;
  assign S8_AXI_GEN_RDATA[2] = \<const0> ;
  assign S8_AXI_GEN_RDATA[1] = \<const0> ;
  assign S8_AXI_GEN_RDATA[0] = \<const0> ;
  assign S8_AXI_GEN_RID[0] = \<const0> ;
  assign S8_AXI_GEN_RLAST = \<const0> ;
  assign S8_AXI_GEN_RRESP[1] = \<const0> ;
  assign S8_AXI_GEN_RRESP[0] = \<const0> ;
  assign S8_AXI_GEN_RVALID = \<const0> ;
  assign S8_AXI_GEN_WREADY = \<const0> ;
  assign S8_AXI_RDATA[31] = \<const0> ;
  assign S8_AXI_RDATA[30] = \<const0> ;
  assign S8_AXI_RDATA[29] = \<const0> ;
  assign S8_AXI_RDATA[28] = \<const0> ;
  assign S8_AXI_RDATA[27] = \<const0> ;
  assign S8_AXI_RDATA[26] = \<const0> ;
  assign S8_AXI_RDATA[25] = \<const0> ;
  assign S8_AXI_RDATA[24] = \<const0> ;
  assign S8_AXI_RDATA[23] = \<const0> ;
  assign S8_AXI_RDATA[22] = \<const0> ;
  assign S8_AXI_RDATA[21] = \<const0> ;
  assign S8_AXI_RDATA[20] = \<const0> ;
  assign S8_AXI_RDATA[19] = \<const0> ;
  assign S8_AXI_RDATA[18] = \<const0> ;
  assign S8_AXI_RDATA[17] = \<const0> ;
  assign S8_AXI_RDATA[16] = \<const0> ;
  assign S8_AXI_RDATA[15] = \<const0> ;
  assign S8_AXI_RDATA[14] = \<const0> ;
  assign S8_AXI_RDATA[13] = \<const0> ;
  assign S8_AXI_RDATA[12] = \<const0> ;
  assign S8_AXI_RDATA[11] = \<const0> ;
  assign S8_AXI_RDATA[10] = \<const0> ;
  assign S8_AXI_RDATA[9] = \<const0> ;
  assign S8_AXI_RDATA[8] = \<const0> ;
  assign S8_AXI_RDATA[7] = \<const0> ;
  assign S8_AXI_RDATA[6] = \<const0> ;
  assign S8_AXI_RDATA[5] = \<const0> ;
  assign S8_AXI_RDATA[4] = \<const0> ;
  assign S8_AXI_RDATA[3] = \<const0> ;
  assign S8_AXI_RDATA[2] = \<const0> ;
  assign S8_AXI_RDATA[1] = \<const0> ;
  assign S8_AXI_RDATA[0] = \<const0> ;
  assign S8_AXI_RID[0] = \<const0> ;
  assign S8_AXI_RLAST = \<const0> ;
  assign S8_AXI_RRESP[1] = \<const0> ;
  assign S8_AXI_RRESP[0] = \<const0> ;
  assign S8_AXI_RVALID = \<const0> ;
  assign S8_AXI_WREADY = \<const0> ;
  assign S9_AXI_ACADDR[31] = \<const0> ;
  assign S9_AXI_ACADDR[30] = \<const0> ;
  assign S9_AXI_ACADDR[29] = \<const0> ;
  assign S9_AXI_ACADDR[28] = \<const0> ;
  assign S9_AXI_ACADDR[27] = \<const0> ;
  assign S9_AXI_ACADDR[26] = \<const0> ;
  assign S9_AXI_ACADDR[25] = \<const0> ;
  assign S9_AXI_ACADDR[24] = \<const0> ;
  assign S9_AXI_ACADDR[23] = \<const0> ;
  assign S9_AXI_ACADDR[22] = \<const0> ;
  assign S9_AXI_ACADDR[21] = \<const0> ;
  assign S9_AXI_ACADDR[20] = \<const0> ;
  assign S9_AXI_ACADDR[19] = \<const0> ;
  assign S9_AXI_ACADDR[18] = \<const0> ;
  assign S9_AXI_ACADDR[17] = \<const0> ;
  assign S9_AXI_ACADDR[16] = \<const0> ;
  assign S9_AXI_ACADDR[15] = \<const0> ;
  assign S9_AXI_ACADDR[14] = \<const0> ;
  assign S9_AXI_ACADDR[13] = \<const0> ;
  assign S9_AXI_ACADDR[12] = \<const0> ;
  assign S9_AXI_ACADDR[11] = \<const0> ;
  assign S9_AXI_ACADDR[10] = \<const0> ;
  assign S9_AXI_ACADDR[9] = \<const0> ;
  assign S9_AXI_ACADDR[8] = \<const0> ;
  assign S9_AXI_ACADDR[7] = \<const0> ;
  assign S9_AXI_ACADDR[6] = \<const0> ;
  assign S9_AXI_ACADDR[5] = \<const0> ;
  assign S9_AXI_ACADDR[4] = \<const0> ;
  assign S9_AXI_ACADDR[3] = \<const0> ;
  assign S9_AXI_ACADDR[2] = \<const0> ;
  assign S9_AXI_ACADDR[1] = \<const0> ;
  assign S9_AXI_ACADDR[0] = \<const0> ;
  assign S9_AXI_ACPROT[2] = \<const0> ;
  assign S9_AXI_ACPROT[1] = \<const0> ;
  assign S9_AXI_ACPROT[0] = \<const0> ;
  assign S9_AXI_ACSNOOP[3] = \<const0> ;
  assign S9_AXI_ACSNOOP[2] = \<const0> ;
  assign S9_AXI_ACSNOOP[1] = \<const0> ;
  assign S9_AXI_ACSNOOP[0] = \<const0> ;
  assign S9_AXI_ACVALID = \<const0> ;
  assign S9_AXI_ARREADY = \<const0> ;
  assign S9_AXI_AWREADY = \<const0> ;
  assign S9_AXI_BID[0] = \<const0> ;
  assign S9_AXI_BRESP[1] = \<const0> ;
  assign S9_AXI_BRESP[0] = \<const0> ;
  assign S9_AXI_BVALID = \<const0> ;
  assign S9_AXI_CDREADY = \<const0> ;
  assign S9_AXI_CRREADY = \<const0> ;
  assign S9_AXI_GEN_ARREADY = \<const0> ;
  assign S9_AXI_GEN_AWREADY = \<const0> ;
  assign S9_AXI_GEN_BID[0] = \<const0> ;
  assign S9_AXI_GEN_BRESP[1] = \<const0> ;
  assign S9_AXI_GEN_BRESP[0] = \<const0> ;
  assign S9_AXI_GEN_BVALID = \<const0> ;
  assign S9_AXI_GEN_RDATA[31] = \<const0> ;
  assign S9_AXI_GEN_RDATA[30] = \<const0> ;
  assign S9_AXI_GEN_RDATA[29] = \<const0> ;
  assign S9_AXI_GEN_RDATA[28] = \<const0> ;
  assign S9_AXI_GEN_RDATA[27] = \<const0> ;
  assign S9_AXI_GEN_RDATA[26] = \<const0> ;
  assign S9_AXI_GEN_RDATA[25] = \<const0> ;
  assign S9_AXI_GEN_RDATA[24] = \<const0> ;
  assign S9_AXI_GEN_RDATA[23] = \<const0> ;
  assign S9_AXI_GEN_RDATA[22] = \<const0> ;
  assign S9_AXI_GEN_RDATA[21] = \<const0> ;
  assign S9_AXI_GEN_RDATA[20] = \<const0> ;
  assign S9_AXI_GEN_RDATA[19] = \<const0> ;
  assign S9_AXI_GEN_RDATA[18] = \<const0> ;
  assign S9_AXI_GEN_RDATA[17] = \<const0> ;
  assign S9_AXI_GEN_RDATA[16] = \<const0> ;
  assign S9_AXI_GEN_RDATA[15] = \<const0> ;
  assign S9_AXI_GEN_RDATA[14] = \<const0> ;
  assign S9_AXI_GEN_RDATA[13] = \<const0> ;
  assign S9_AXI_GEN_RDATA[12] = \<const0> ;
  assign S9_AXI_GEN_RDATA[11] = \<const0> ;
  assign S9_AXI_GEN_RDATA[10] = \<const0> ;
  assign S9_AXI_GEN_RDATA[9] = \<const0> ;
  assign S9_AXI_GEN_RDATA[8] = \<const0> ;
  assign S9_AXI_GEN_RDATA[7] = \<const0> ;
  assign S9_AXI_GEN_RDATA[6] = \<const0> ;
  assign S9_AXI_GEN_RDATA[5] = \<const0> ;
  assign S9_AXI_GEN_RDATA[4] = \<const0> ;
  assign S9_AXI_GEN_RDATA[3] = \<const0> ;
  assign S9_AXI_GEN_RDATA[2] = \<const0> ;
  assign S9_AXI_GEN_RDATA[1] = \<const0> ;
  assign S9_AXI_GEN_RDATA[0] = \<const0> ;
  assign S9_AXI_GEN_RID[0] = \<const0> ;
  assign S9_AXI_GEN_RLAST = \<const0> ;
  assign S9_AXI_GEN_RRESP[1] = \<const0> ;
  assign S9_AXI_GEN_RRESP[0] = \<const0> ;
  assign S9_AXI_GEN_RVALID = \<const0> ;
  assign S9_AXI_GEN_WREADY = \<const0> ;
  assign S9_AXI_RDATA[31] = \<const0> ;
  assign S9_AXI_RDATA[30] = \<const0> ;
  assign S9_AXI_RDATA[29] = \<const0> ;
  assign S9_AXI_RDATA[28] = \<const0> ;
  assign S9_AXI_RDATA[27] = \<const0> ;
  assign S9_AXI_RDATA[26] = \<const0> ;
  assign S9_AXI_RDATA[25] = \<const0> ;
  assign S9_AXI_RDATA[24] = \<const0> ;
  assign S9_AXI_RDATA[23] = \<const0> ;
  assign S9_AXI_RDATA[22] = \<const0> ;
  assign S9_AXI_RDATA[21] = \<const0> ;
  assign S9_AXI_RDATA[20] = \<const0> ;
  assign S9_AXI_RDATA[19] = \<const0> ;
  assign S9_AXI_RDATA[18] = \<const0> ;
  assign S9_AXI_RDATA[17] = \<const0> ;
  assign S9_AXI_RDATA[16] = \<const0> ;
  assign S9_AXI_RDATA[15] = \<const0> ;
  assign S9_AXI_RDATA[14] = \<const0> ;
  assign S9_AXI_RDATA[13] = \<const0> ;
  assign S9_AXI_RDATA[12] = \<const0> ;
  assign S9_AXI_RDATA[11] = \<const0> ;
  assign S9_AXI_RDATA[10] = \<const0> ;
  assign S9_AXI_RDATA[9] = \<const0> ;
  assign S9_AXI_RDATA[8] = \<const0> ;
  assign S9_AXI_RDATA[7] = \<const0> ;
  assign S9_AXI_RDATA[6] = \<const0> ;
  assign S9_AXI_RDATA[5] = \<const0> ;
  assign S9_AXI_RDATA[4] = \<const0> ;
  assign S9_AXI_RDATA[3] = \<const0> ;
  assign S9_AXI_RDATA[2] = \<const0> ;
  assign S9_AXI_RDATA[1] = \<const0> ;
  assign S9_AXI_RDATA[0] = \<const0> ;
  assign S9_AXI_RID[0] = \<const0> ;
  assign S9_AXI_RLAST = \<const0> ;
  assign S9_AXI_RRESP[1] = \<const0> ;
  assign S9_AXI_RRESP[0] = \<const0> ;
  assign S9_AXI_RVALID = \<const0> ;
  assign S9_AXI_WREADY = \<const0> ;
  assign S_AXI_CTRL_ARREADY = \<const0> ;
  assign S_AXI_CTRL_AWREADY = \<const0> ;
  assign S_AXI_CTRL_BRESP[1] = \<const0> ;
  assign S_AXI_CTRL_BRESP[0] = \<const0> ;
  assign S_AXI_CTRL_BVALID = \<const0> ;
  assign S_AXI_CTRL_RDATA[31] = \<const0> ;
  assign S_AXI_CTRL_RDATA[30] = \<const0> ;
  assign S_AXI_CTRL_RDATA[29] = \<const0> ;
  assign S_AXI_CTRL_RDATA[28] = \<const0> ;
  assign S_AXI_CTRL_RDATA[27] = \<const0> ;
  assign S_AXI_CTRL_RDATA[26] = \<const0> ;
  assign S_AXI_CTRL_RDATA[25] = \<const0> ;
  assign S_AXI_CTRL_RDATA[24] = \<const0> ;
  assign S_AXI_CTRL_RDATA[23] = \<const0> ;
  assign S_AXI_CTRL_RDATA[22] = \<const0> ;
  assign S_AXI_CTRL_RDATA[21] = \<const0> ;
  assign S_AXI_CTRL_RDATA[20] = \<const0> ;
  assign S_AXI_CTRL_RDATA[19] = \<const0> ;
  assign S_AXI_CTRL_RDATA[18] = \<const0> ;
  assign S_AXI_CTRL_RDATA[17] = \<const0> ;
  assign S_AXI_CTRL_RDATA[16] = \<const0> ;
  assign S_AXI_CTRL_RDATA[15] = \<const0> ;
  assign S_AXI_CTRL_RDATA[14] = \<const0> ;
  assign S_AXI_CTRL_RDATA[13] = \<const0> ;
  assign S_AXI_CTRL_RDATA[12] = \<const0> ;
  assign S_AXI_CTRL_RDATA[11] = \<const0> ;
  assign S_AXI_CTRL_RDATA[10] = \<const0> ;
  assign S_AXI_CTRL_RDATA[9] = \<const0> ;
  assign S_AXI_CTRL_RDATA[8] = \<const0> ;
  assign S_AXI_CTRL_RDATA[7] = \<const0> ;
  assign S_AXI_CTRL_RDATA[6] = \<const0> ;
  assign S_AXI_CTRL_RDATA[5] = \<const0> ;
  assign S_AXI_CTRL_RDATA[4] = \<const0> ;
  assign S_AXI_CTRL_RDATA[3] = \<const0> ;
  assign S_AXI_CTRL_RDATA[2] = \<const0> ;
  assign S_AXI_CTRL_RDATA[1] = \<const0> ;
  assign S_AXI_CTRL_RDATA[0] = \<const0> ;
  assign S_AXI_CTRL_RRESP[1] = \<const0> ;
  assign S_AXI_CTRL_RRESP[0] = \<const0> ;
  assign S_AXI_CTRL_RVALID = \<const0> ;
  assign S_AXI_CTRL_WREADY = \<const0> ;
  LUT1 #(
    .INIT(2'h1)) 
    ARESET_i_1
       (.I0(ARESETN),
        .O(ARESET_i_1_n_0));
  FDRE ARESET_reg
       (.C(ACLK),
        .CE(1'b1),
        .D(ARESET_i_1_n_0),
        .Q(ARESET),
        .R(1'b0));
  design_1_system_cache_0_0_sc_s_axi_ctrl_interface AXI_Ctrl
       (.A(\Gen_Block[0].ARB/A ),
        .ACLK(ACLK),
        .ARESET(ARESET),
        .E(ctrl_init_last0),
        .Q(\Gen_Block[0].ARB/ARESET_I ),
        .\arb_access_i_reg[Valid] (AXI_Ctrl_n_4),
        .\ctrl_access[Addr] (\ctrl_access[Addr] ),
        .\ctrl_access[Internal_Cmd] (\ctrl_access[Internal_Cmd] ),
        .\ctrl_access[Size] (\ctrl_access[Size] ),
        .ctrl_init_done_i(ctrl_init_done_i),
        .ctrl_ready(ctrl_ready));
  design_1_system_cache_0_0_sc_back_end BE
       (.A(\CB/Gen_Master_Ports[0].TransOrd/w_read_fifo_addr ),
        .ACLK(ACLK),
        .ARESET(ARESET),
        .E(\CB/Gen_Master_Ports[0].TransOrd/refresh_pending_write ),
        .M0_AXI_ARADDR(M0_AXI_ARADDR),
        .M0_AXI_ARBURST(M0_AXI_ARBURST),
        .M0_AXI_ARLEN(M0_AXI_ARLEN),
        .M0_AXI_ARPROT(\^M0_AXI_ARPROT ),
        .M0_AXI_ARREADY(M0_AXI_ARREADY),
        .M0_AXI_ARSIZE(M0_AXI_ARSIZE),
        .M0_AXI_ARVALID(M0_AXI_ARVALID),
        .M0_AXI_AWADDR(M0_AXI_AWADDR),
        .M0_AXI_AWBURST(M0_AXI_AWBURST),
        .M0_AXI_AWLEN(M0_AXI_AWLEN),
        .M0_AXI_AWPROT(\^M0_AXI_AWPROT ),
        .M0_AXI_AWREADY(M0_AXI_AWREADY),
        .M0_AXI_AWSIZE(\^M0_AXI_AWSIZE ),
        .M0_AXI_AWVALID(M0_AXI_AWVALID),
        .M0_AXI_WDATA(M0_AXI_WDATA),
        .M0_AXI_WLAST(M0_AXI_WLAST),
        .M0_AXI_WREADY(M0_AXI_WREADY),
        .M0_AXI_WSTRB(M0_AXI_WSTRB),
        .M0_AXI_WVALID(M0_AXI_WVALID),
        .M_AXI_WVALID_I_reg(BE_n_4),
        .\Not_Using_XPM.Using_BRAM.Native.Using_B36_Sx.The_BRAMs[3].RAMB36_I1 (\write_data_info[0][Data] ),
        .S(\CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.BE_Block_Or_Inst3/S ),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst (CC_n_221),
        .\The_Bit[0].Using_FPGA.Using_Reset.FDS_Inst_0 ({\write_req_info[0][Size] ,CC_n_194}),
        .\Use_FPGA.Almost_Full_Inst (BE_n_15),
        .\Use_FPGA.Cnt_Bit_Gen[3].FDS_Inst (CC_n_232),
        .\Use_FPGA.Full_Inst (CC_n_237),
        .\Use_FPGA.Full_Inst_0 (CC_n_8),
        .\Use_FPGA.Full_Inst_1 (CC_n_233),
        .aw_fifo_full(\CB/Gen_Master_Ports[0].TransOrd/aw_fifo_full ),
        .in({\update_info[Addr] ,CC_n_131,CC_n_132}),
        .pending_write_is_1(\CB/Gen_Master_Ports[0].TransOrd/pending_write_is_1 ),
        .queue_full(\CB/Gen_Master_Ports[0].TransOrd/queue_full ),
        .queue_push(\CB/Gen_Master_Ports[0].TransOrd/queue_push ),
        .queue_push29_out(\CB/Gen_Master_Ports[0].TransOrd/queue_push29_out ),
        .\read_req_info[0][Kind] (\read_req_info[0][Kind] ),
        .\read_req_info[0][Valid] (\read_req_info[0][Valid] ),
        .ri_fifo_full(\Gen_Block[0].UD/ri_fifo_full ),
        .update_done_ar(\Gen_Block[0].UD/update_done_ar ),
        .update_done_aw(\Gen_Block[0].UD/update_done_aw ),
        .update_done_aw_reg(BE_n_14),
        .update_evict_busy_reg(\write_data_info[0][BE] ),
        .\update_info_reg[Evict] ({\write_req_info[0][Addr] ,CC_n_213,CC_n_214,CC_n_215,CC_n_216,CC_n_217,CC_n_218}),
        .\update_info_reg[Kind] (CC_n_238),
        .\update_info_reg[Len][7] (\read_req_info[0][Len] ),
        .\update_info_reg[Len][7]_0 (\write_req_info[0][Len] ),
        .\update_info_reg[Size][2] ({CC_n_142,\read_req_info[0][Size] ,CC_n_144}),
        .update_need_ar(update_need_ar),
        .update_need_aw(update_need_aw),
        .write_data_almost_full(write_data_almost_full),
        .write_data_full(write_data_full),
        .\write_data_info[0][Last] (\write_data_info[0][Last] ),
        .\write_data_info[0][Valid] (\write_data_info[0][Valid] ),
        .\write_req_info[0][Line_Only] (\write_req_info[0][Line_Only] ),
        .\write_seq_id_reg[6] (BE_n_12));
  design_1_system_cache_0_0_sc_cache_core CC
       (.A(\CB/Gen_Master_Ports[0].TransOrd/w_read_fifo_addr ),
        .ACLK(ACLK),
        .ARESET(ARESET),
        .A_3(\Gen_Block[0].LU/LU_Mem_TagConf_Compare_Inst1/A ),
        .A_6(\Gen_Block[0].LU/LU_Data_WE_And_Inst5/A ),
        .A_N(\Gen_Block[0].LU/LUD_Reg_PR_Or_Inst1/A_N ),
        .D(\Gen_Block[0].UD/update_wr_miss_word ),
        .DATA_INA(lookup_data_new_word),
        .E(\CB/Gen_Master_Ports[0].TransOrd/refresh_pending_write ),
        .M0_AXI_BREADY(M0_AXI_BREADY),
        .M0_AXI_BRESP(M0_AXI_BRESP),
        .M0_AXI_BVALID(M0_AXI_BVALID),
        .M0_AXI_RDATA(M0_AXI_RDATA),
        .M0_AXI_RLAST(M0_AXI_RLAST),
        .M0_AXI_RREADY(M0_AXI_RREADY),
        .M0_AXI_RVALID(M0_AXI_RVALID),
        .\M_AXI_ARLEN_reg[7] (\read_req_info[0][Len] ),
        .\M_AXI_ARSIZE_reg[2] ({CC_n_142,\read_req_info[0][Size] ,CC_n_144}),
        .M_AXI_ARVALID_I_reg(CC_n_237),
        .\M_AXI_AWADDR_reg[31] ({\write_req_info[0][Addr] ,CC_n_213,CC_n_214,CC_n_215,CC_n_216,CC_n_217,CC_n_218}),
        .\M_AXI_AWBURST_reg[1] (CC_n_238),
        .\M_AXI_AWLEN_reg[7] (\write_req_info[0][Len] ),
        .\M_AXI_AWSIZE_reg[1] ({\write_req_info[0][Size] ,CC_n_194}),
        .\M_AXI_WDATA_reg[31] (\write_data_info[0][Data] ),
        .\M_AXI_WSTRB_reg[3] (\write_data_info[0][BE] ),
        .Q(\access_info[0][Addr] ),
        .S(\Use_Port_0.AXI_0/WC_Or_Inst1/S ),
        .\S0_AXI_RDATA[30] (\Use_Port_0.AXI_0/new_read_data_word ),
        .S_0(\Use_Port_1.AXI_1/WC_Or_Inst1/S ),
        .S_1(\CB/Gen_Master_Ports[0].TransOrd/Order_Optimization_4.BE_Block_Or_Inst3/S ),
        .S_2(\Gen_Block[0].LU/LU_Mem_PR_And_Inst1/S ),
        .S_4(\Gen_Block[0].LU/LU_DS_IO_Or_Inst1/The_Compare[1].carry_or_I1/S ),
        .\S_AXI_BID_reg[0] (CC_n_11),
        .\S_AXI_BRESP_reg[0] (CC_n_234),
        .\S_AXI_BRESP_reg[1] (CC_n_235),
        .\The_Compare[0].sel_reg (\Gen_Block[0].LU/LU_Mem_TagConf_Compare_Inst1/The_Compare[0].sel_reg ),
        .\The_Compare[0].sel_reg_5 (\Gen_Block[0].LU/LU_Data_WE_And_Inst5/The_Compare[0].sel_reg ),
        .\The_Compare[2].sel_reg (\Gen_Block[0].LU/LU_Check_TagConf_Compare_Inst1/The_Compare[2].sel_reg ),
        .\Use_FPGA.Almost_Full_Inst (CC_n_232),
        .\Use_FPGA.Almost_Full_Inst_0 (CC_n_233),
        .\Use_FPGA.Cnt_Bit_Gen[4].FDS_Inst (BE_n_15),
        .\Use_FPGA.Empty_Inst (FE_n_208),
        .\Use_FPGA.Empty_Inst_0 (FE_n_207),
        .\Use_FPGA.Empty_Inst_1 (BE_n_4),
        .\Use_FPGA_2.S_AXI_RVALID_reg (\Use_Port_1.AXI_1/R_Channel/new_read_data_last ),
        .\access_data_info[0,0][Last] (\access_data_info[0,0][Last] ),
        .\access_data_info[0,0][Valid] (\access_data_info[0,0][Valid] ),
        .\access_data_info[0,1][Last] (\access_data_info[0,1][Last] ),
        .\access_data_info[0,1][Valid] (\access_data_info[0,1][Valid] ),
        .\access_info[0][Early] (\access_info[0][Early] ),
        .\access_info[0][Force_Hit] (\access_info[0][Force_Hit] ),
        .\access_info[0][Keep] (\access_info[0][Keep] ),
        .\access_info[0][Kind] (\access_info[0][Kind] ),
        .\access_info[0][Port_Num] (\access_info[0][Port_Num] ),
        .\access_info[0][Wr] (\access_info[0][Wr] ),
        .access_valid(access_valid),
        .\arb_access_i_reg[Allocate] (FE_n_198),
        .\arb_access_i_reg[Len][7] (\access_info[0][Len] ),
        .\arb_access_i_reg[Size][1] (\access_info[0][Addr_Use] ),
        .\arb_access_i_reg[Size][1]_0 ({\access_info[0][Addr_Stp] ,FE_n_193}),
        .\arb_access_i_reg[Size][2] (\access_info[0][Size] ),
        .aw_fifo_full(\CB/Gen_Master_Ports[0].TransOrd/aw_fifo_full ),
        .in({\update_info[Addr] ,CC_n_131,CC_n_132}),
        .lookup_piperun(lookup_piperun),
        .\lookup_read_data_info[0,0][Valid] (\lookup_read_data_info[0,0][Valid] ),
        .\lookup_read_data_info[0,1][Valid] (\lookup_read_data_info[0,1][Valid] ),
        .\lookup_read_data_new[0,0][Hit] (\lookup_read_data_new[0,0][Hit] ),
        .\lookup_read_data_new[0,0][Valid] (\lookup_read_data_new[0,0][Valid] ),
        .\lookup_read_data_new[0,1][Valid] (\lookup_read_data_new[0,1][Valid] ),
        .lookup_restart_mem(\Gen_Block[0].LU/lookup_restart_mem ),
        .\lu_check_info_reg[Port_Num][0] (CC_n_17),
        .\lu_check_tag_addr_reg[11] (\Gen_Block[0].LU/B_Vec ),
        .lu_check_valid(\Gen_Block[0].LU/lu_check_valid ),
        .lu_mem_write_alloc0(\Gen_Block[0].LU/lu_mem_write_alloc0 ),
        .lud_addr_pipeline_full(\Gen_Block[0].LU/lud_addr_pipeline_full ),
        .lud_addr_pipeline_full0(\Gen_Block[0].LU/lud_addr_pipeline_full0 ),
        .lud_addr_pipeline_full_reg(CC_n_223),
        .lud_addr_pipeline_full_reg_0(CC_n_225),
        .lud_reg_port_num(\Gen_Block[0].LU/lud_reg_port_num ),
        .\lud_reg_port_num_reg[0] (\Gen_Block[0].LU/lud_mem_port_one_hot ),
        .\lud_reg_valid_one_hot_reg[0] (FE_n_199),
        .\lud_reg_valid_one_hot_reg[1] (FE_n_201),
        .lud_reg_valid_reg(CC_n_4),
        .need_to_stall_write_reg(CC_n_8),
        .need_to_stall_write_reg_0(BE_n_14),
        .need_to_stall_write_reg_1(BE_n_12),
        .new_read_data_last(\Use_Port_0.AXI_0/R_Channel/new_read_data_last ),
        .new_read_data_word(\Use_Port_1.AXI_1/new_read_data_word ),
        .p_162_in(\Gen_Block[0].LU/p_162_in ),
        .p_1_in3_in(\Gen_Block[0].UD/p_1_in3_in ),
        .p_2_in(\Gen_Block[0].UD/p_2_in ),
        .p_3_in(\Gen_Block[0].UD/p_3_in ),
        .p_57_in(\Gen_Block[0].LU/p_57_in ),
        .pending_write_is_1(\CB/Gen_Master_Ports[0].TransOrd/pending_write_is_1 ),
        .pending_write_is_1_reg(CC_n_221),
        .queue_full(\CB/Gen_Master_Ports[0].TransOrd/queue_full ),
        .queue_push(\CB/Gen_Master_Ports[0].TransOrd/queue_push ),
        .queue_push29_out(\CB/Gen_Master_Ports[0].TransOrd/queue_push29_out ),
        .r_hit_push(\Use_Port_0.AXI_0/R_Channel/r_hit_push ),
        .r_hit_push_7(\Use_Port_1.AXI_1/R_Channel/r_hit_push ),
        .r_miss_fifo_full(\Use_Port_0.AXI_0/R_Channel/r_miss_fifo_full ),
        .r_miss_fifo_full_8(\Use_Port_1.AXI_1/R_Channel/r_miss_fifo_full ),
        .\read_data_status[0,0][Hit_Full] (\read_data_status[0,0][Hit_Full] ),
        .\read_data_status[0,0][Hit_Pop] (\read_data_status[0,0][Hit_Pop] ),
        .\read_data_status[0,1][Hit_Full] (\read_data_status[0,1][Hit_Full] ),
        .\read_data_status[0,1][Hit_Pop] (\read_data_status[0,1][Hit_Pop] ),
        .\read_req_info[0][Kind] (\read_req_info[0][Kind] ),
        .\read_req_info[0][Valid] (\read_req_info[0][Valid] ),
        .ri_fifo_full(\Gen_Block[0].UD/ri_fifo_full ),
        .update_done_ar(\Gen_Block[0].UD/update_done_ar ),
        .update_done_aw(\Gen_Block[0].UD/update_done_aw ),
        .update_ext_bresp_any(\Gen_Block[0].UD/update_ext_bresp_any ),
        .\update_info_reg[Addr][13] (lru_check_line_addr),
        .\update_info_reg[Port_Num][0] (CC_n_9),
        .update_need_ar(update_need_ar),
        .update_need_aw(update_need_aw),
        .\update_read_data_info[0,0][Valid] (\update_read_data_info[0,0][Valid] ),
        .\update_read_data_info[0,1][Valid] (\update_read_data_info[0,1][Valid] ),
        .update_wr_miss_rs_last(\Gen_Block[0].UD/update_wr_miss_rs_last ),
        .wm_allow(\Gen_Block[0].UD/wm_allow ),
        .wm_port(\Gen_Block[0].UD/wm_port ),
        .\wr_port_data_info_reg[0][BE][0] (FE_n_69),
        .\wr_port_data_info_reg[0][BE][3] (\access_data_info[0,0][BE] ),
        .\wr_port_data_info_reg[0][BE][3]_0 (\access_data_info[0,1][BE] ),
        .wr_port_data_last_i_reg(FE_n_114),
        .wr_port_data_ready(wr_port_data_ready),
        .wr_port_data_valid_i_reg(CC_n_30),
        .wr_port_data_valid_i_reg_0(FE_n_67),
        .write_data_almost_full(write_data_almost_full),
        .write_data_full(write_data_full),
        .\write_data_info[0][Last] (\write_data_info[0][Last] ),
        .\write_data_info[0][Valid] (\write_data_info[0][Valid] ),
        .\write_req_info[0][Line_Only] (\write_req_info[0][Line_Only] ));
  design_1_system_cache_0_0_sc_front_end FE
       (.A(\Gen_Block[0].LU/LU_Data_WE_And_Inst5/A ),
        .ACLK(ACLK),
        .ARESET(ARESET),
        .ARESET_reg(AXI_Ctrl_n_4),
        .A_10(\Gen_Block[0].ARB/A ),
        .A_7(\Gen_Block[0].LU/LU_Mem_TagConf_Compare_Inst1/A ),
        .A_N(\Gen_Block[0].LU/LUD_Reg_PR_Or_Inst1/A_N ),
        .D(\Gen_Block[0].UD/update_wr_miss_word ),
        .DATA_INA(lookup_data_new_word),
        .E(ctrl_init_last0),
        .I5(\Use_Port_0.AXI_0/R_Channel/I5 ),
        .I5_1(\Use_Port_1.AXI_1/R_Channel/I5 ),
        .M0_AXI_RRESP(M0_AXI_RRESP),
        .Q(\Gen_Block[0].ARB/ARESET_I ),
        .S(\Gen_Block[0].LU/LU_Mem_PR_And_Inst1/S ),
        .S0_AXI_ARADDR(S0_AXI_ARADDR),
        .S0_AXI_ARBURST(S0_AXI_ARBURST),
        .S0_AXI_ARCACHE(S0_AXI_ARCACHE[2]),
        .S0_AXI_ARID(S0_AXI_ARID),
        .S0_AXI_ARLEN(S0_AXI_ARLEN),
        .S0_AXI_ARREADY(S0_AXI_ARREADY),
        .S0_AXI_ARSIZE(S0_AXI_ARSIZE),
        .S0_AXI_ARSNOOP(S0_AXI_ARSNOOP),
        .S0_AXI_ARVALID(S0_AXI_ARVALID),
        .S0_AXI_AWADDR(S0_AXI_AWADDR),
        .S0_AXI_AWBAR(S0_AXI_AWBAR[0]),
        .S0_AXI_AWBURST(S0_AXI_AWBURST),
        .S0_AXI_AWCACHE(S0_AXI_AWCACHE[2:0]),
        .S0_AXI_AWID(S0_AXI_AWID),
        .S0_AXI_AWLEN(S0_AXI_AWLEN),
        .S0_AXI_AWREADY(S0_AXI_AWREADY),
        .S0_AXI_AWSIZE(S0_AXI_AWSIZE),
        .S0_AXI_AWVALID(S0_AXI_AWVALID),
        .S0_AXI_BID(S0_AXI_BID),
        .S0_AXI_BREADY(S0_AXI_BREADY),
        .S0_AXI_BRESP(S0_AXI_BRESP),
        .S0_AXI_BVALID(S0_AXI_BVALID),
        .S0_AXI_RID(S0_AXI_RID),
        .S0_AXI_RREADY(S0_AXI_RREADY),
        .S0_AXI_RVALID(S0_AXI_RVALID),
        .S0_AXI_WDATA(S0_AXI_WDATA),
        .S0_AXI_WLAST(S0_AXI_WLAST),
        .S0_AXI_WREADY(S0_AXI_WREADY),
        .S0_AXI_WSTRB(S0_AXI_WSTRB),
        .S0_AXI_WVALID(S0_AXI_WVALID),
        .S1_AXI_ARADDR(S1_AXI_ARADDR),
        .S1_AXI_ARBURST(S1_AXI_ARBURST),
        .S1_AXI_ARCACHE(S1_AXI_ARCACHE[2]),
        .S1_AXI_ARID(S1_AXI_ARID),
        .S1_AXI_ARLEN(S1_AXI_ARLEN),
        .S1_AXI_ARREADY(S1_AXI_ARREADY),
        .S1_AXI_ARSIZE(S1_AXI_ARSIZE),
        .S1_AXI_ARSNOOP(S1_AXI_ARSNOOP),
        .S1_AXI_ARVALID(S1_AXI_ARVALID),
        .S1_AXI_AWADDR(S1_AXI_AWADDR),
        .S1_AXI_AWBAR(S1_AXI_AWBAR[0]),
        .S1_AXI_AWBURST(S1_AXI_AWBURST),
        .S1_AXI_AWCACHE(S1_AXI_AWCACHE[2:0]),
        .S1_AXI_AWID(S1_AXI_AWID),
        .S1_AXI_AWLEN(S1_AXI_AWLEN),
        .S1_AXI_AWREADY(S1_AXI_AWREADY),
        .S1_AXI_AWSIZE(S1_AXI_AWSIZE),
        .S1_AXI_AWVALID(S1_AXI_AWVALID),
        .S1_AXI_BID(S1_AXI_BID),
        .S1_AXI_BREADY(S1_AXI_BREADY),
        .S1_AXI_BRESP(S1_AXI_BRESP),
        .S1_AXI_BVALID(S1_AXI_BVALID),
        .S1_AXI_RID(S1_AXI_RID),
        .S1_AXI_RREADY(S1_AXI_RREADY),
        .\S1_AXI_RRESP[1] ({FE_n_205,FE_n_206}),
        .S1_AXI_RVALID(S1_AXI_RVALID),
        .S1_AXI_WDATA(S1_AXI_WDATA),
        .S1_AXI_WLAST(S1_AXI_WLAST),
        .S1_AXI_WREADY(S1_AXI_WREADY),
        .S1_AXI_WSTRB(S1_AXI_WSTRB),
        .S1_AXI_WVALID(S1_AXI_WVALID),
        .S_5(\Gen_Block[0].LU/LU_DS_IO_Or_Inst1/The_Compare[1].carry_or_I1/S ),
        .S_8(\Use_Port_0.AXI_0/WC_Or_Inst1/S ),
        .S_9(\Use_Port_1.AXI_1/WC_Or_Inst1/S ),
        .\The_Compare[0].sel_reg (\Gen_Block[0].LU/LU_Data_WE_And_Inst5/The_Compare[0].sel_reg ),
        .\The_Compare[0].sel_reg_6 (\Gen_Block[0].LU/LU_Mem_TagConf_Compare_Inst1/The_Compare[0].sel_reg ),
        .\The_Compare[2].sel_reg (\Gen_Block[0].LU/LU_Check_TagConf_Compare_Inst1/The_Compare[2].sel_reg ),
        .\Use_FPGA_2.S_AXI_RVALID_reg (\Use_Port_1.AXI_1/R_Channel/r_push_safe ),
        .\Use_FPGA_2.S_AXI_RVALID_reg_0 ({FE_n_63,FE_n_64,\Use_Port_1.AXI_1/R_Channel/r_write_fifo_addr }),
        .\Use_FPGA_Flag_Hit.Full_Inst (CC_n_225),
        .\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3] (\Use_Port_0.AXI_0/R_Channel/r_hit_read_fifo_addr ),
        .\Use_Rd_Ctrl_Pipeline.r_read_fifo_addr_reg[3]_0 (\Use_Port_1.AXI_1/R_Channel/r_hit_read_fifo_addr ),
        .\Use_Reg_Ctrl.queue_exist_i_reg (FE_n_67),
        .\Use_Reg_Ctrl.queue_exist_i_reg_0 (FE_n_207),
        .\Use_Reg_Ctrl.queue_exist_i_reg_1 (FE_n_208),
        .\access_data_info[0,0][Last] (\access_data_info[0,0][Last] ),
        .\access_data_info[0,0][Valid] (\access_data_info[0,0][Valid] ),
        .\access_data_info[0,1][Last] (\access_data_info[0,1][Last] ),
        .\access_data_info[0,1][Valid] (\access_data_info[0,1][Valid] ),
        .\access_info[0][Early] (\access_info[0][Early] ),
        .\access_info[0][Force_Hit] (\access_info[0][Force_Hit] ),
        .\access_info[0][Keep] (\access_info[0][Keep] ),
        .\access_info[0][Kind] (\access_info[0][Kind] ),
        .\access_info[0][Port_Num] (\access_info[0][Port_Num] ),
        .\access_info[0][Wr] (\access_info[0][Wr] ),
        .access_valid(access_valid),
        .\bs_port_num_reg[0] (CC_n_11),
        .\bs_src_reg[0] (CC_n_235),
        .\bs_src_reg[0]_0 (CC_n_234),
        .\ctrl_access[Addr] (\ctrl_access[Addr] ),
        .\ctrl_access[Internal_Cmd] (\ctrl_access[Internal_Cmd] ),
        .\ctrl_access[Size] (\ctrl_access[Size] ),
        .ctrl_init_done_i(ctrl_init_done_i),
        .ctrl_ready(ctrl_ready),
        .lookup_piperun(lookup_piperun),
        .\lookup_read_data_info[0,0][Valid] (\lookup_read_data_info[0,0][Valid] ),
        .\lookup_read_data_info[0,1][Valid] (\lookup_read_data_info[0,1][Valid] ),
        .\lookup_read_data_new[0,0][Hit] (\lookup_read_data_new[0,0][Hit] ),
        .\lookup_read_data_new[0,0][Valid] (\lookup_read_data_new[0,0][Valid] ),
        .\lookup_read_data_new[0,1][Valid] (\lookup_read_data_new[0,1][Valid] ),
        .lookup_restart_mem(\Gen_Block[0].LU/lookup_restart_mem ),
        .\lu_check_info_reg[Port_Num][0] (CC_n_30),
        .\lu_check_info_reg[Port_Num][0]_0 (CC_n_9),
        .\lu_check_tag_addr_reg[13] (lru_check_line_addr),
        .lu_check_valid(\Gen_Block[0].LU/lu_check_valid ),
        .\lu_mem_info_reg[Addr][11] (\Gen_Block[0].LU/B_Vec ),
        .\lu_mem_info_reg[Addr][31] (\access_info[0][Addr] ),
        .\lu_mem_info_reg[Addr_Stp][5] ({\access_info[0][Addr_Stp] ,FE_n_193}),
        .\lu_mem_info_reg[Addr_Use][5] (\access_info[0][Addr_Use] ),
        .\lu_mem_info_reg[Allocate] (FE_n_198),
        .\lu_mem_info_reg[Len][7] (\access_info[0][Len] ),
        .\lu_mem_info_reg[Port_Num][0] (CC_n_17),
        .\lu_mem_info_reg[Size][2] (\access_info[0][Size] ),
        .lu_mem_write_alloc0(\Gen_Block[0].LU/lu_mem_write_alloc0 ),
        .lud_addr_pipeline_full(\Gen_Block[0].LU/lud_addr_pipeline_full ),
        .lud_addr_pipeline_full0(\Gen_Block[0].LU/lud_addr_pipeline_full0 ),
        .\lud_mem_port_one_hot_reg[1] (\Gen_Block[0].LU/lud_mem_port_one_hot ),
        .lud_reg_port_num(\Gen_Block[0].LU/lud_reg_port_num ),
        .lud_reg_valid_reg(CC_n_223),
        .lud_reg_valid_reg_0(CC_n_4),
        .lud_write_hit_done_reg(FE_n_114),
        .new_read_data_resp({FE_n_203,FE_n_204}),
        .p_162_in(\Gen_Block[0].LU/p_162_in ),
        .p_1_in3_in(\Gen_Block[0].UD/p_1_in3_in ),
        .p_2_in(\Gen_Block[0].UD/p_2_in ),
        .p_3_in(\Gen_Block[0].UD/p_3_in ),
        .p_57_in(\Gen_Block[0].LU/p_57_in ),
        .r_hit_last(\Use_Port_0.AXI_0/R_Channel/r_hit_last ),
        .r_hit_push(\Use_Port_0.AXI_0/R_Channel/r_hit_push ),
        .r_hit_push_0(\Use_Port_1.AXI_1/R_Channel/r_hit_push ),
        .\r_hit_read_fifo_addr_reg[0] (\Use_Port_1.AXI_1/R_Channel/r_hit_last ),
        .r_miss_fifo_full(\Use_Port_0.AXI_0/R_Channel/r_miss_fifo_full ),
        .r_miss_fifo_full_2(\Use_Port_1.AXI_1/R_Channel/r_miss_fifo_full ),
        .r_miss_full_fifo_addr(\Use_Port_0.AXI_0/R_Channel/r_miss_read_fifo_addr ),
        .r_miss_last(\Use_Port_0.AXI_0/R_Channel/r_miss_last ),
        .\r_miss_read_fifo_addr_reg[0] (\Use_Port_1.AXI_1/R_Channel/r_miss_last ),
        .\r_miss_read_fifo_addr_reg[1] (\Use_Port_1.AXI_1/R_Channel/r_miss_read_fifo_addr ),
        .r_push_safe(\Use_Port_0.AXI_0/R_Channel/r_push_safe ),
        .r_read_fifo_addr(\Use_Port_0.AXI_0/R_Channel/r_read_fifo_addr ),
        .r_read_fifo_addr_4(\Use_Port_1.AXI_1/R_Channel/r_read_fifo_addr ),
        .r_write_fifo_addr({FE_n_55,FE_n_56,\Use_Port_0.AXI_0/R_Channel/r_write_fifo_addr }),
        .\read_data_status[0,0][Hit_Full] (\read_data_status[0,0][Hit_Full] ),
        .\read_data_status[0,0][Hit_Pop] (\read_data_status[0,0][Hit_Pop] ),
        .\read_data_status[0,1][Hit_Full] (\read_data_status[0,1][Hit_Full] ),
        .\read_data_status[0,1][Hit_Pop] (\read_data_status[0,1][Hit_Pop] ),
        .rip_last(\Use_Port_0.AXI_0/R_Channel/rip_last ),
        .rip_last_3(\Use_Port_1.AXI_1/R_Channel/rip_last ),
        .update_ext_bresp_any(\Gen_Block[0].UD/update_ext_bresp_any ),
        .\update_rd_offset_cnt_reg[0] (FE_n_199),
        .\update_rd_offset_cnt_reg[0]_0 (FE_n_201),
        .\update_read_data_info[0,0][Valid] (\update_read_data_info[0,0][Valid] ),
        .\update_read_data_info[0,1][Valid] (\update_read_data_info[0,1][Valid] ),
        .\update_wma_data_reg[24] (\access_data_info[0,0][BE] ),
        .\update_wma_data_reg[24]_0 (\access_data_info[0,1][BE] ),
        .\update_wma_strb_reg[0] (FE_n_69),
        .update_wr_miss_rs_last(\Gen_Block[0].UD/update_wr_miss_rs_last ),
        .wm_allow(\Gen_Block[0].UD/wm_allow ),
        .wm_port(\Gen_Block[0].UD/wm_port ),
        .wr_port_data_ready(wr_port_data_ready));
  GND GND
       (.G(\<const0> ));
  LUT4 #(
    .INIT(16'hE200)) 
    S0_AXI_RLAST_INST_0
       (.I0(\Use_Port_0.AXI_0/R_Channel/r_miss_last ),
        .I1(\Use_Port_0.AXI_0/R_Channel/I5 ),
        .I2(\Use_Port_0.AXI_0/R_Channel/r_hit_last ),
        .I3(\Use_Port_0.AXI_0/R_Channel/rip_last ),
        .O(S0_AXI_RLAST));
  LUT4 #(
    .INIT(16'hE200)) 
    S1_AXI_RLAST_INST_0
       (.I0(\Use_Port_1.AXI_1/R_Channel/r_miss_last ),
        .I1(\Use_Port_1.AXI_1/R_Channel/I5 ),
        .I2(\Use_Port_1.AXI_1/R_Channel/r_hit_last ),
        .I3(\Use_Port_1.AXI_1/R_Channel/rip_last ),
        .O(S1_AXI_RLAST));
  (* XILINX_LEGACY_PRIM = "RAM16X1D" *) 
  RAM32X1D #(
    .INIT(32'h00000000)) 
    \Use_Port_0.AXI_0/R_Channel/rl_fifo_mem_reg_r1_0_15_0_0 
       (.A0(\Use_Port_0.AXI_0/R_Channel/r_write_fifo_addr [0]),
        .A1(\Use_Port_0.AXI_0/R_Channel/r_write_fifo_addr [1]),
        .A2(FE_n_56),
        .A3(FE_n_55),
        .A4(1'b0),
        .D(\Use_Port_0.AXI_0/R_Channel/new_read_data_last ),
        .DPO(\Use_Port_0.AXI_0/R_Channel/r_hit_last ),
        .DPRA0(\Use_Port_0.AXI_0/R_Channel/r_hit_read_fifo_addr [0]),
        .DPRA1(\Use_Port_0.AXI_0/R_Channel/r_hit_read_fifo_addr [1]),
        .DPRA2(\Use_Port_0.AXI_0/R_Channel/r_hit_read_fifo_addr [2]),
        .DPRA3(\Use_Port_0.AXI_0/R_Channel/r_hit_read_fifo_addr [3]),
        .DPRA4(1'b0),
        .SPO(\NLW_Use_Port_0.AXI_0/R_Channel/rl_fifo_mem_reg_r1_0_15_0_0_SPO_UNCONNECTED ),
        .WCLK(ACLK),
        .WE(\Use_Port_0.AXI_0/R_Channel/r_push_safe ));
  (* XILINX_LEGACY_PRIM = "RAM16X1D" *) 
  RAM32X1D #(
    .INIT(32'h00000000)) 
    \Use_Port_0.AXI_0/R_Channel/rl_fifo_mem_reg_r2_0_15_0_0 
       (.A0(\Use_Port_0.AXI_0/R_Channel/r_write_fifo_addr [0]),
        .A1(\Use_Port_0.AXI_0/R_Channel/r_write_fifo_addr [1]),
        .A2(FE_n_56),
        .A3(FE_n_55),
        .A4(1'b0),
        .D(\Use_Port_0.AXI_0/R_Channel/new_read_data_last ),
        .DPO(\Use_Port_0.AXI_0/R_Channel/r_miss_last ),
        .DPRA0(\Use_Port_0.AXI_0/R_Channel/r_miss_read_fifo_addr [0]),
        .DPRA1(\Use_Port_0.AXI_0/R_Channel/r_miss_read_fifo_addr [1]),
        .DPRA2(1'b1),
        .DPRA3(1'b1),
        .DPRA4(1'b0),
        .SPO(\NLW_Use_Port_0.AXI_0/R_Channel/rl_fifo_mem_reg_r2_0_15_0_0_SPO_UNCONNECTED ),
        .WCLK(ACLK),
        .WE(\Use_Port_0.AXI_0/R_Channel/r_push_safe ));
  (* XILINX_LEGACY_PRIM = "RAM16X1D" *) 
  RAM32X1D #(
    .INIT(32'h00000000)) 
    \Use_Port_0.AXI_0/R_Channel/rr_fifo_mem_reg_0_15_0_0 
       (.A0(\Use_Port_0.AXI_0/R_Channel/r_write_fifo_addr [0]),
        .A1(\Use_Port_0.AXI_0/R_Channel/r_write_fifo_addr [1]),
        .A2(FE_n_56),
        .A3(FE_n_55),
        .A4(1'b0),
        .D(FE_n_204),
        .DPO(S0_AXI_RRESP[0]),
        .DPRA0(\Use_Port_0.AXI_0/R_Channel/r_read_fifo_addr [0]),
        .DPRA1(\Use_Port_0.AXI_0/R_Channel/r_read_fifo_addr [1]),
        .DPRA2(\Use_Port_0.AXI_0/R_Channel/r_read_fifo_addr [2]),
        .DPRA3(\Use_Port_0.AXI_0/R_Channel/r_read_fifo_addr [3]),
        .DPRA4(1'b0),
        .SPO(\NLW_Use_Port_0.AXI_0/R_Channel/rr_fifo_mem_reg_0_15_0_0_SPO_UNCONNECTED ),
        .WCLK(ACLK),
        .WE(\Use_Port_0.AXI_0/R_Channel/r_push_safe ));
  (* XILINX_LEGACY_PRIM = "RAM16X1D" *) 
  RAM32X1D #(
    .INIT(32'h00000000)) 
    \Use_Port_0.AXI_0/R_Channel/rr_fifo_mem_reg_0_15_1_1 
       (.A0(\Use_Port_0.AXI_0/R_Channel/r_write_fifo_addr [0]),
        .A1(\Use_Port_0.AXI_0/R_Channel/r_write_fifo_addr [1]),
        .A2(FE_n_56),
        .A3(FE_n_55),
        .A4(1'b0),
        .D(FE_n_203),
        .DPO(S0_AXI_RRESP[1]),
        .DPRA0(\Use_Port_0.AXI_0/R_Channel/r_read_fifo_addr [0]),
        .DPRA1(\Use_Port_0.AXI_0/R_Channel/r_read_fifo_addr [1]),
        .DPRA2(\Use_Port_0.AXI_0/R_Channel/r_read_fifo_addr [2]),
        .DPRA3(\Use_Port_0.AXI_0/R_Channel/r_read_fifo_addr [3]),
        .DPRA4(1'b0),
        .SPO(\NLW_Use_Port_0.AXI_0/R_Channel/rr_fifo_mem_reg_0_15_1_1_SPO_UNCONNECTED ),
        .WCLK(ACLK),
        .WE(\Use_Port_0.AXI_0/R_Channel/r_push_safe ));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M \Use_Port_0.AXI_0/R_Channel/rw_fifo_mem_reg_0_15_0_5 
       (.ADDRA({1'b0,\Use_Port_0.AXI_0/R_Channel/r_read_fifo_addr }),
        .ADDRB({1'b0,\Use_Port_0.AXI_0/R_Channel/r_read_fifo_addr }),
        .ADDRC({1'b0,\Use_Port_0.AXI_0/R_Channel/r_read_fifo_addr }),
        .ADDRD({1'b0,FE_n_55,FE_n_56,\Use_Port_0.AXI_0/R_Channel/r_write_fifo_addr }),
        .DIA(\Use_Port_0.AXI_0/new_read_data_word [1:0]),
        .DIB(\Use_Port_0.AXI_0/new_read_data_word [3:2]),
        .DIC(\Use_Port_0.AXI_0/new_read_data_word [5:4]),
        .DID({1'b0,1'b0}),
        .DOA(S0_AXI_RDATA[1:0]),
        .DOB(S0_AXI_RDATA[3:2]),
        .DOC(S0_AXI_RDATA[5:4]),
        .DOD(\NLW_Use_Port_0.AXI_0/R_Channel/rw_fifo_mem_reg_0_15_0_5_DOD_UNCONNECTED [1:0]),
        .WCLK(ACLK),
        .WE(\Use_Port_0.AXI_0/R_Channel/r_push_safe ));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M \Use_Port_0.AXI_0/R_Channel/rw_fifo_mem_reg_0_15_12_17 
       (.ADDRA({1'b0,\Use_Port_0.AXI_0/R_Channel/r_read_fifo_addr }),
        .ADDRB({1'b0,\Use_Port_0.AXI_0/R_Channel/r_read_fifo_addr }),
        .ADDRC({1'b0,\Use_Port_0.AXI_0/R_Channel/r_read_fifo_addr }),
        .ADDRD({1'b0,FE_n_55,FE_n_56,\Use_Port_0.AXI_0/R_Channel/r_write_fifo_addr }),
        .DIA(\Use_Port_0.AXI_0/new_read_data_word [13:12]),
        .DIB(\Use_Port_0.AXI_0/new_read_data_word [15:14]),
        .DIC(\Use_Port_0.AXI_0/new_read_data_word [17:16]),
        .DID({1'b0,1'b0}),
        .DOA(S0_AXI_RDATA[13:12]),
        .DOB(S0_AXI_RDATA[15:14]),
        .DOC(S0_AXI_RDATA[17:16]),
        .DOD(\NLW_Use_Port_0.AXI_0/R_Channel/rw_fifo_mem_reg_0_15_12_17_DOD_UNCONNECTED [1:0]),
        .WCLK(ACLK),
        .WE(\Use_Port_0.AXI_0/R_Channel/r_push_safe ));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M \Use_Port_0.AXI_0/R_Channel/rw_fifo_mem_reg_0_15_18_23 
       (.ADDRA({1'b0,\Use_Port_0.AXI_0/R_Channel/r_read_fifo_addr }),
        .ADDRB({1'b0,\Use_Port_0.AXI_0/R_Channel/r_read_fifo_addr }),
        .ADDRC({1'b0,\Use_Port_0.AXI_0/R_Channel/r_read_fifo_addr }),
        .ADDRD({1'b0,FE_n_55,FE_n_56,\Use_Port_0.AXI_0/R_Channel/r_write_fifo_addr }),
        .DIA(\Use_Port_0.AXI_0/new_read_data_word [19:18]),
        .DIB(\Use_Port_0.AXI_0/new_read_data_word [21:20]),
        .DIC(\Use_Port_0.AXI_0/new_read_data_word [23:22]),
        .DID({1'b0,1'b0}),
        .DOA(S0_AXI_RDATA[19:18]),
        .DOB(S0_AXI_RDATA[21:20]),
        .DOC(S0_AXI_RDATA[23:22]),
        .DOD(\NLW_Use_Port_0.AXI_0/R_Channel/rw_fifo_mem_reg_0_15_18_23_DOD_UNCONNECTED [1:0]),
        .WCLK(ACLK),
        .WE(\Use_Port_0.AXI_0/R_Channel/r_push_safe ));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M \Use_Port_0.AXI_0/R_Channel/rw_fifo_mem_reg_0_15_24_29 
       (.ADDRA({1'b0,\Use_Port_0.AXI_0/R_Channel/r_read_fifo_addr }),
        .ADDRB({1'b0,\Use_Port_0.AXI_0/R_Channel/r_read_fifo_addr }),
        .ADDRC({1'b0,\Use_Port_0.AXI_0/R_Channel/r_read_fifo_addr }),
        .ADDRD({1'b0,FE_n_55,FE_n_56,\Use_Port_0.AXI_0/R_Channel/r_write_fifo_addr }),
        .DIA(\Use_Port_0.AXI_0/new_read_data_word [25:24]),
        .DIB(\Use_Port_0.AXI_0/new_read_data_word [27:26]),
        .DIC(\Use_Port_0.AXI_0/new_read_data_word [29:28]),
        .DID({1'b0,1'b0}),
        .DOA(S0_AXI_RDATA[25:24]),
        .DOB(S0_AXI_RDATA[27:26]),
        .DOC(S0_AXI_RDATA[29:28]),
        .DOD(\NLW_Use_Port_0.AXI_0/R_Channel/rw_fifo_mem_reg_0_15_24_29_DOD_UNCONNECTED [1:0]),
        .WCLK(ACLK),
        .WE(\Use_Port_0.AXI_0/R_Channel/r_push_safe ));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M \Use_Port_0.AXI_0/R_Channel/rw_fifo_mem_reg_0_15_30_31 
       (.ADDRA({1'b0,\Use_Port_0.AXI_0/R_Channel/r_read_fifo_addr }),
        .ADDRB({1'b0,\Use_Port_0.AXI_0/R_Channel/r_read_fifo_addr }),
        .ADDRC({1'b0,\Use_Port_0.AXI_0/R_Channel/r_read_fifo_addr }),
        .ADDRD({1'b0,FE_n_55,FE_n_56,\Use_Port_0.AXI_0/R_Channel/r_write_fifo_addr }),
        .DIA(\Use_Port_0.AXI_0/new_read_data_word [31:30]),
        .DIB({1'b0,1'b0}),
        .DIC({1'b0,1'b0}),
        .DID({1'b0,1'b0}),
        .DOA(S0_AXI_RDATA[31:30]),
        .DOB(\NLW_Use_Port_0.AXI_0/R_Channel/rw_fifo_mem_reg_0_15_30_31_DOB_UNCONNECTED [1:0]),
        .DOC(\NLW_Use_Port_0.AXI_0/R_Channel/rw_fifo_mem_reg_0_15_30_31_DOC_UNCONNECTED [1:0]),
        .DOD(\NLW_Use_Port_0.AXI_0/R_Channel/rw_fifo_mem_reg_0_15_30_31_DOD_UNCONNECTED [1:0]),
        .WCLK(ACLK),
        .WE(\Use_Port_0.AXI_0/R_Channel/r_push_safe ));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M \Use_Port_0.AXI_0/R_Channel/rw_fifo_mem_reg_0_15_6_11 
       (.ADDRA({1'b0,\Use_Port_0.AXI_0/R_Channel/r_read_fifo_addr }),
        .ADDRB({1'b0,\Use_Port_0.AXI_0/R_Channel/r_read_fifo_addr }),
        .ADDRC({1'b0,\Use_Port_0.AXI_0/R_Channel/r_read_fifo_addr }),
        .ADDRD({1'b0,FE_n_55,FE_n_56,\Use_Port_0.AXI_0/R_Channel/r_write_fifo_addr }),
        .DIA(\Use_Port_0.AXI_0/new_read_data_word [7:6]),
        .DIB(\Use_Port_0.AXI_0/new_read_data_word [9:8]),
        .DIC(\Use_Port_0.AXI_0/new_read_data_word [11:10]),
        .DID({1'b0,1'b0}),
        .DOA(S0_AXI_RDATA[7:6]),
        .DOB(S0_AXI_RDATA[9:8]),
        .DOC(S0_AXI_RDATA[11:10]),
        .DOD(\NLW_Use_Port_0.AXI_0/R_Channel/rw_fifo_mem_reg_0_15_6_11_DOD_UNCONNECTED [1:0]),
        .WCLK(ACLK),
        .WE(\Use_Port_0.AXI_0/R_Channel/r_push_safe ));
  (* XILINX_LEGACY_PRIM = "RAM16X1D" *) 
  RAM32X1D #(
    .INIT(32'h00000000)) 
    \Use_Port_1.AXI_1/R_Channel/rl_fifo_mem_reg_r1_0_15_0_0 
       (.A0(\Use_Port_1.AXI_1/R_Channel/r_write_fifo_addr [0]),
        .A1(\Use_Port_1.AXI_1/R_Channel/r_write_fifo_addr [1]),
        .A2(FE_n_64),
        .A3(FE_n_63),
        .A4(1'b0),
        .D(\Use_Port_1.AXI_1/R_Channel/new_read_data_last ),
        .DPO(\Use_Port_1.AXI_1/R_Channel/r_hit_last ),
        .DPRA0(\Use_Port_1.AXI_1/R_Channel/r_hit_read_fifo_addr [0]),
        .DPRA1(\Use_Port_1.AXI_1/R_Channel/r_hit_read_fifo_addr [1]),
        .DPRA2(\Use_Port_1.AXI_1/R_Channel/r_hit_read_fifo_addr [2]),
        .DPRA3(\Use_Port_1.AXI_1/R_Channel/r_hit_read_fifo_addr [3]),
        .DPRA4(1'b0),
        .SPO(\NLW_Use_Port_1.AXI_1/R_Channel/rl_fifo_mem_reg_r1_0_15_0_0_SPO_UNCONNECTED ),
        .WCLK(ACLK),
        .WE(\Use_Port_1.AXI_1/R_Channel/r_push_safe ));
  (* XILINX_LEGACY_PRIM = "RAM16X1D" *) 
  RAM32X1D #(
    .INIT(32'h00000000)) 
    \Use_Port_1.AXI_1/R_Channel/rl_fifo_mem_reg_r2_0_15_0_0 
       (.A0(\Use_Port_1.AXI_1/R_Channel/r_write_fifo_addr [0]),
        .A1(\Use_Port_1.AXI_1/R_Channel/r_write_fifo_addr [1]),
        .A2(FE_n_64),
        .A3(FE_n_63),
        .A4(1'b0),
        .D(\Use_Port_1.AXI_1/R_Channel/new_read_data_last ),
        .DPO(\Use_Port_1.AXI_1/R_Channel/r_miss_last ),
        .DPRA0(\Use_Port_1.AXI_1/R_Channel/r_miss_read_fifo_addr [0]),
        .DPRA1(\Use_Port_1.AXI_1/R_Channel/r_miss_read_fifo_addr [1]),
        .DPRA2(1'b1),
        .DPRA3(1'b1),
        .DPRA4(1'b0),
        .SPO(\NLW_Use_Port_1.AXI_1/R_Channel/rl_fifo_mem_reg_r2_0_15_0_0_SPO_UNCONNECTED ),
        .WCLK(ACLK),
        .WE(\Use_Port_1.AXI_1/R_Channel/r_push_safe ));
  (* XILINX_LEGACY_PRIM = "RAM16X1D" *) 
  RAM32X1D #(
    .INIT(32'h00000000)) 
    \Use_Port_1.AXI_1/R_Channel/rr_fifo_mem_reg_0_15_0_0 
       (.A0(\Use_Port_1.AXI_1/R_Channel/r_write_fifo_addr [0]),
        .A1(\Use_Port_1.AXI_1/R_Channel/r_write_fifo_addr [1]),
        .A2(FE_n_64),
        .A3(FE_n_63),
        .A4(1'b0),
        .D(FE_n_206),
        .DPO(S1_AXI_RRESP[0]),
        .DPRA0(\Use_Port_1.AXI_1/R_Channel/r_read_fifo_addr [0]),
        .DPRA1(\Use_Port_1.AXI_1/R_Channel/r_read_fifo_addr [1]),
        .DPRA2(\Use_Port_1.AXI_1/R_Channel/r_read_fifo_addr [2]),
        .DPRA3(\Use_Port_1.AXI_1/R_Channel/r_read_fifo_addr [3]),
        .DPRA4(1'b0),
        .SPO(\NLW_Use_Port_1.AXI_1/R_Channel/rr_fifo_mem_reg_0_15_0_0_SPO_UNCONNECTED ),
        .WCLK(ACLK),
        .WE(\Use_Port_1.AXI_1/R_Channel/r_push_safe ));
  (* XILINX_LEGACY_PRIM = "RAM16X1D" *) 
  RAM32X1D #(
    .INIT(32'h00000000)) 
    \Use_Port_1.AXI_1/R_Channel/rr_fifo_mem_reg_0_15_1_1 
       (.A0(\Use_Port_1.AXI_1/R_Channel/r_write_fifo_addr [0]),
        .A1(\Use_Port_1.AXI_1/R_Channel/r_write_fifo_addr [1]),
        .A2(FE_n_64),
        .A3(FE_n_63),
        .A4(1'b0),
        .D(FE_n_205),
        .DPO(S1_AXI_RRESP[1]),
        .DPRA0(\Use_Port_1.AXI_1/R_Channel/r_read_fifo_addr [0]),
        .DPRA1(\Use_Port_1.AXI_1/R_Channel/r_read_fifo_addr [1]),
        .DPRA2(\Use_Port_1.AXI_1/R_Channel/r_read_fifo_addr [2]),
        .DPRA3(\Use_Port_1.AXI_1/R_Channel/r_read_fifo_addr [3]),
        .DPRA4(1'b0),
        .SPO(\NLW_Use_Port_1.AXI_1/R_Channel/rr_fifo_mem_reg_0_15_1_1_SPO_UNCONNECTED ),
        .WCLK(ACLK),
        .WE(\Use_Port_1.AXI_1/R_Channel/r_push_safe ));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M \Use_Port_1.AXI_1/R_Channel/rw_fifo_mem_reg_0_15_0_5 
       (.ADDRA({1'b0,\Use_Port_1.AXI_1/R_Channel/r_read_fifo_addr }),
        .ADDRB({1'b0,\Use_Port_1.AXI_1/R_Channel/r_read_fifo_addr }),
        .ADDRC({1'b0,\Use_Port_1.AXI_1/R_Channel/r_read_fifo_addr }),
        .ADDRD({1'b0,FE_n_63,FE_n_64,\Use_Port_1.AXI_1/R_Channel/r_write_fifo_addr }),
        .DIA(\Use_Port_1.AXI_1/new_read_data_word [1:0]),
        .DIB(\Use_Port_1.AXI_1/new_read_data_word [3:2]),
        .DIC(\Use_Port_1.AXI_1/new_read_data_word [5:4]),
        .DID({1'b0,1'b0}),
        .DOA(S1_AXI_RDATA[1:0]),
        .DOB(S1_AXI_RDATA[3:2]),
        .DOC(S1_AXI_RDATA[5:4]),
        .DOD(\NLW_Use_Port_1.AXI_1/R_Channel/rw_fifo_mem_reg_0_15_0_5_DOD_UNCONNECTED [1:0]),
        .WCLK(ACLK),
        .WE(\Use_Port_1.AXI_1/R_Channel/r_push_safe ));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M \Use_Port_1.AXI_1/R_Channel/rw_fifo_mem_reg_0_15_12_17 
       (.ADDRA({1'b0,\Use_Port_1.AXI_1/R_Channel/r_read_fifo_addr }),
        .ADDRB({1'b0,\Use_Port_1.AXI_1/R_Channel/r_read_fifo_addr }),
        .ADDRC({1'b0,\Use_Port_1.AXI_1/R_Channel/r_read_fifo_addr }),
        .ADDRD({1'b0,FE_n_63,FE_n_64,\Use_Port_1.AXI_1/R_Channel/r_write_fifo_addr }),
        .DIA(\Use_Port_1.AXI_1/new_read_data_word [13:12]),
        .DIB(\Use_Port_1.AXI_1/new_read_data_word [15:14]),
        .DIC(\Use_Port_1.AXI_1/new_read_data_word [17:16]),
        .DID({1'b0,1'b0}),
        .DOA(S1_AXI_RDATA[13:12]),
        .DOB(S1_AXI_RDATA[15:14]),
        .DOC(S1_AXI_RDATA[17:16]),
        .DOD(\NLW_Use_Port_1.AXI_1/R_Channel/rw_fifo_mem_reg_0_15_12_17_DOD_UNCONNECTED [1:0]),
        .WCLK(ACLK),
        .WE(\Use_Port_1.AXI_1/R_Channel/r_push_safe ));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M \Use_Port_1.AXI_1/R_Channel/rw_fifo_mem_reg_0_15_18_23 
       (.ADDRA({1'b0,\Use_Port_1.AXI_1/R_Channel/r_read_fifo_addr }),
        .ADDRB({1'b0,\Use_Port_1.AXI_1/R_Channel/r_read_fifo_addr }),
        .ADDRC({1'b0,\Use_Port_1.AXI_1/R_Channel/r_read_fifo_addr }),
        .ADDRD({1'b0,FE_n_63,FE_n_64,\Use_Port_1.AXI_1/R_Channel/r_write_fifo_addr }),
        .DIA(\Use_Port_1.AXI_1/new_read_data_word [19:18]),
        .DIB(\Use_Port_1.AXI_1/new_read_data_word [21:20]),
        .DIC(\Use_Port_1.AXI_1/new_read_data_word [23:22]),
        .DID({1'b0,1'b0}),
        .DOA(S1_AXI_RDATA[19:18]),
        .DOB(S1_AXI_RDATA[21:20]),
        .DOC(S1_AXI_RDATA[23:22]),
        .DOD(\NLW_Use_Port_1.AXI_1/R_Channel/rw_fifo_mem_reg_0_15_18_23_DOD_UNCONNECTED [1:0]),
        .WCLK(ACLK),
        .WE(\Use_Port_1.AXI_1/R_Channel/r_push_safe ));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M \Use_Port_1.AXI_1/R_Channel/rw_fifo_mem_reg_0_15_24_29 
       (.ADDRA({1'b0,\Use_Port_1.AXI_1/R_Channel/r_read_fifo_addr }),
        .ADDRB({1'b0,\Use_Port_1.AXI_1/R_Channel/r_read_fifo_addr }),
        .ADDRC({1'b0,\Use_Port_1.AXI_1/R_Channel/r_read_fifo_addr }),
        .ADDRD({1'b0,FE_n_63,FE_n_64,\Use_Port_1.AXI_1/R_Channel/r_write_fifo_addr }),
        .DIA(\Use_Port_1.AXI_1/new_read_data_word [25:24]),
        .DIB(\Use_Port_1.AXI_1/new_read_data_word [27:26]),
        .DIC(\Use_Port_1.AXI_1/new_read_data_word [29:28]),
        .DID({1'b0,1'b0}),
        .DOA(S1_AXI_RDATA[25:24]),
        .DOB(S1_AXI_RDATA[27:26]),
        .DOC(S1_AXI_RDATA[29:28]),
        .DOD(\NLW_Use_Port_1.AXI_1/R_Channel/rw_fifo_mem_reg_0_15_24_29_DOD_UNCONNECTED [1:0]),
        .WCLK(ACLK),
        .WE(\Use_Port_1.AXI_1/R_Channel/r_push_safe ));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M \Use_Port_1.AXI_1/R_Channel/rw_fifo_mem_reg_0_15_30_31 
       (.ADDRA({1'b0,\Use_Port_1.AXI_1/R_Channel/r_read_fifo_addr }),
        .ADDRB({1'b0,\Use_Port_1.AXI_1/R_Channel/r_read_fifo_addr }),
        .ADDRC({1'b0,\Use_Port_1.AXI_1/R_Channel/r_read_fifo_addr }),
        .ADDRD({1'b0,FE_n_63,FE_n_64,\Use_Port_1.AXI_1/R_Channel/r_write_fifo_addr }),
        .DIA(\Use_Port_1.AXI_1/new_read_data_word [31:30]),
        .DIB({1'b0,1'b0}),
        .DIC({1'b0,1'b0}),
        .DID({1'b0,1'b0}),
        .DOA(S1_AXI_RDATA[31:30]),
        .DOB(\NLW_Use_Port_1.AXI_1/R_Channel/rw_fifo_mem_reg_0_15_30_31_DOB_UNCONNECTED [1:0]),
        .DOC(\NLW_Use_Port_1.AXI_1/R_Channel/rw_fifo_mem_reg_0_15_30_31_DOC_UNCONNECTED [1:0]),
        .DOD(\NLW_Use_Port_1.AXI_1/R_Channel/rw_fifo_mem_reg_0_15_30_31_DOD_UNCONNECTED [1:0]),
        .WCLK(ACLK),
        .WE(\Use_Port_1.AXI_1/R_Channel/r_push_safe ));
  (* METHODOLOGY_DRC_VIOS = "" *) 
  RAM32M \Use_Port_1.AXI_1/R_Channel/rw_fifo_mem_reg_0_15_6_11 
       (.ADDRA({1'b0,\Use_Port_1.AXI_1/R_Channel/r_read_fifo_addr }),
        .ADDRB({1'b0,\Use_Port_1.AXI_1/R_Channel/r_read_fifo_addr }),
        .ADDRC({1'b0,\Use_Port_1.AXI_1/R_Channel/r_read_fifo_addr }),
        .ADDRD({1'b0,FE_n_63,FE_n_64,\Use_Port_1.AXI_1/R_Channel/r_write_fifo_addr }),
        .DIA(\Use_Port_1.AXI_1/new_read_data_word [7:6]),
        .DIB(\Use_Port_1.AXI_1/new_read_data_word [9:8]),
        .DIC(\Use_Port_1.AXI_1/new_read_data_word [11:10]),
        .DID({1'b0,1'b0}),
        .DOA(S1_AXI_RDATA[7:6]),
        .DOB(S1_AXI_RDATA[9:8]),
        .DOC(S1_AXI_RDATA[11:10]),
        .DOD(\NLW_Use_Port_1.AXI_1/R_Channel/rw_fifo_mem_reg_0_15_6_11_DOD_UNCONNECTED [1:0]),
        .WCLK(ACLK),
        .WE(\Use_Port_1.AXI_1/R_Channel/r_push_safe ));
  VCC VCC
       (.P(\<const1> ));
endmodule
`ifndef GLBL
`define GLBL
`timescale  1 ps / 1 ps

module glbl ();

    parameter ROC_WIDTH = 100000;
    parameter TOC_WIDTH = 0;

//--------   STARTUP Globals --------------
    wire GSR;
    wire GTS;
    wire GWE;
    wire PRLD;
    tri1 p_up_tmp;
    tri (weak1, strong0) PLL_LOCKG = p_up_tmp;

    wire PROGB_GLBL;
    wire CCLKO_GLBL;
    wire FCSBO_GLBL;
    wire [3:0] DO_GLBL;
    wire [3:0] DI_GLBL;
   
    reg GSR_int;
    reg GTS_int;
    reg PRLD_int;

//--------   JTAG Globals --------------
    wire JTAG_TDO_GLBL;
    wire JTAG_TCK_GLBL;
    wire JTAG_TDI_GLBL;
    wire JTAG_TMS_GLBL;
    wire JTAG_TRST_GLBL;

    reg JTAG_CAPTURE_GLBL;
    reg JTAG_RESET_GLBL;
    reg JTAG_SHIFT_GLBL;
    reg JTAG_UPDATE_GLBL;
    reg JTAG_RUNTEST_GLBL;

    reg JTAG_SEL1_GLBL = 0;
    reg JTAG_SEL2_GLBL = 0 ;
    reg JTAG_SEL3_GLBL = 0;
    reg JTAG_SEL4_GLBL = 0;

    reg JTAG_USER_TDO1_GLBL = 1'bz;
    reg JTAG_USER_TDO2_GLBL = 1'bz;
    reg JTAG_USER_TDO3_GLBL = 1'bz;
    reg JTAG_USER_TDO4_GLBL = 1'bz;

    assign (strong1, weak0) GSR = GSR_int;
    assign (strong1, weak0) GTS = GTS_int;
    assign (weak1, weak0) PRLD = PRLD_int;

    initial begin
	GSR_int = 1'b1;
	PRLD_int = 1'b1;
	#(ROC_WIDTH)
	GSR_int = 1'b0;
	PRLD_int = 1'b0;
    end

    initial begin
	GTS_int = 1'b1;
	#(TOC_WIDTH)
	GTS_int = 1'b0;
    end

endmodule
`endif
