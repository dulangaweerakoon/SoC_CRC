/******************************************************************************
*
* Copyright (C) 2009 - 2014 Xilinx, Inc.  All rights reserved.
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* Use of the Software is limited solely to applications:
* (a) running on a Xilinx device, or
* (b) that interact with a Xilinx device through a bus or interconnect.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
* XILINX  BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF
* OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*
* Except as contained in this notice, the name of the Xilinx shall not be used
* in advertising or otherwise to promote the sale, use or other dealings in
* this Software without prior written authorization from Xilinx.
*
******************************************************************************/

/*
 * helloworld.c: simple test application
 *
 * This application configures UART 16550 to baud rate 9600.
 * PS7 UART (Zynq) is not initialized by this application, since
 * bootrom/bsp configures it to baud rate 115200
 *
 * ------------------------------------------------
 * | UART TYPE   BAUD RATE                        |
 * ------------------------------------------------
 *   uartns550   9600
 *   uartlite    Configurable only in HW design
 *   ps7_uart    115200 (configured by bootrom/bsp)
 */

#include <stdio.h>
#include "platform.h"
#include "xil_io.h"
#include"myiphwac.h"
#include "xintc.h"
#define INTC_DEVICE_ID		 	XPAR_INTC_0_DEVICE_ID
#define INTC_DEVICE_INT_ID	XPAR_INTC_0_MYIPHWAC_0_VEC_ID
/* Write to memory location or register */
#define X_mWriteReg(BASE_ADDRESS, RegOffset, data) \
           *(unsigned int *)(BASE_ADDRESS + RegOffset) = ((unsigned int) data);
/* Read from memory location or register */
#define X_mReadReg(BASE_ADDRESS, RegOffset) \
           *(unsigned int *)(BASE_ADDRESS + RegOffset);

//void print(char *str);

#define XUartChanged_IsTransmitFull(BaseAddress)			 \
	((Xil_In32((BaseAddress) + 0x2C) & 	\
	 0x10) == 0x10)

void XUartChanged_SendByte(u32 BaseAddress, u8 Data)
{
		/*
		 * Wait until there is space in TX FIFO
		 */
		while (XUartChanged_IsTransmitFull(BaseAddress));

		/*
		 * Write the byte into the TX FIFO
		 */
		X_mWriteReg(BaseAddress, 0x30, Data);
}

void outbyte(char c) {
	 XUartChanged_SendByte(0xE0001000, c);
}

void ChangedPrint(char *ptr)
{
  while (*ptr) {
    outbyte (*ptr++);
  }
}
static XIntc InterruptController;

void initInterrupt(){
	int Status;

	Status = XIntc_Initialize(&InterruptController, INTC_DEVICE_ID);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}

	Status = XIntc_SelfTest(&InterruptController);
	if (Status != XST_SUCCESS) {
		return XST_FAILURE;
	}
}
int main()
{
	initInterrupt();

    u32 a,p;
    char c[100];
    char q[100];
    //ChangedPrint("Hello \n\r");
    microblaze_enable_interrupts();
    MYIPHWAC_mWriteMemory(0x80000000, 0x00af6608);
    MYIPHWAC_mWriteMemory(0x80000001, 0x00000066);
    MYIPHWAC_mWriteMemory(0x80000002, 0x00000b08);
    MYIPHWAC_mWriteMemory(0x80000003, 0x00000a08);
    MYIPHWAC_mWriteMemory(0x80000096, 0x00000404);
    MYIPHWAC_mWriteMemory(0x80000096, 0x00000003);
    //MYIPHWAC_mWriteMemory(0x76000004, 0x00000009);
    for(int i=0;i<100;i++){}
	a=MYIPHWAC_mReadMemory(0x800000a0);
	//p=MYIPHWAC_mReadMemory(0x76000006);
	//a=0x00000008;
    itoa(a,c,16);
   // itoa(p,q,16);
    ChangedPrint("CRC pattern is =");
	ChangedPrint(c);



    return 0;
}
